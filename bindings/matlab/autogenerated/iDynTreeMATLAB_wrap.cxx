/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.11
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGMATLAB
#define SWIG_name_d      "iDynTree"
#define SWIG_name        iDynTree

#define SWIG_op_prefix        "op_"
#define SWIG_pkg_name        "iDynTree"
#define SwigVar_mxArray mxArray*


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Workaround, Octave's mex.h lacks uint64_t */
#include <stdint.h>
/* MATLAB's C-API */
#include <mex.h>
/* MISC C libraries */
#include <math.h>
#include <string.h>
#include <stdarg.h>
#include <stdio.h>
#include <limits.h>

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* Last error */
static int SWIG_lasterror_code = 0;
static char SWIG_lasterror_msg[1024];
SWIGRUNTIME void SWIG_Error(int code, const char *format, ...) {
  SWIG_lasterror_code = code;
  va_list arg;
  va_start(arg, format);
  vsnprintf(SWIG_lasterror_msg, sizeof(SWIG_lasterror_msg), format, arg);
  va_end(arg);
}

SWIGRUNTIME const char* SWIG_ErrorType(int code) {
  switch (code) {
  case SWIG_MemoryError:
    return "SWIG:MemoryError";
  case SWIG_IOError:
    return "SWIG:IOError";
  case SWIG_RuntimeError:
    return "SWIG:RuntimeError";
  case SWIG_IndexError:
    return "SWIG:IndexError";
  case SWIG_TypeError:
    return "SWIG:TypeError";
  case SWIG_DivisionByZero:
    return "SWIG:DivisionByZero";
  case SWIG_OverflowError:
    return "SWIG:OverflowError";
  case SWIG_SyntaxError:
    return "SWIG:SyntaxError";
  case SWIG_ValueError:
    return "SWIG:ValueError";
  case SWIG_SystemError:
    return "SWIG:SystemError";
  case SWIG_AttributeError:
    return "SWIG:AttributeError";
  }
  return "SWIG:UnknownError";
}

SWIGRUNTIME int SWIG_check_num_args(const char *func_name, int num_args, int max_args, int min_args, int varargs) {
  if (num_args > max_args && !varargs) {
    SWIG_Error(SWIG_RuntimeError, "function %s takes at most %i arguments", func_name, max_args);
  } else if (num_args < min_args) {
    SWIG_Error(SWIG_RuntimeError, "function %s requires at least %i arguments", func_name, min_args);
  } else {
    return 1;
  }
  return 0;
}

#define SWIG_fail                                       goto fail

#define SWIG_Matlab_ConvertPtr(obj, pptr, type, flags)  SWIG_Matlab_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Matlab_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Matlab_ConvertPtrAndOwn(obj, pptr, type, flags, own)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Matlab_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Matlab_NewPointerObj(ptr, type, flags)
#define swig_owntype                                    int

#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Matlab_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Matlab_NewPackedObj(ptr, sz, type)

#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_ConvertPtr(obj, pptr, type, 0)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_NewPointerObj(ptr, type, 0)

#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Matlab_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Matlab_NewPackedObj(ptr, sz, type)

#define SWIG_GetModule(clientdata)                      SWIG_Matlab_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)             SWIG_Matlab_SetModule(pointer);
#define SWIG_MODULE_CLIENTDATA_TYPE void*

#define Matlab_Error_Occurred() 0
#define SWIG_Matlab_AddErrorMsg(msg) {;}

SWIGRUNTIME swig_module_info *SWIG_Matlab_GetModule(void *clientdata);
SWIGRUNTIME void SWIG_Matlab_SetModule(swig_module_info *pointer);

/* For backward compatibility only */
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      0

/* Pointer to C/C++ object, including type information and reference counters */
typedef struct SwigPtr {
  void *ptr;
  swig_type_info *type;
  int own;
  void *self;
  struct SwigPtr* next;
} SwigPtr;
static swig_module_info *saved_swig_module = 0;

/* Add new pointer object to the memory allocator
   Returns the location of the new element by reference and a return flag by value.
 */
int SWIG_Matlab_NewPointer(SwigPtr** swig_ptr, void *ptr, swig_type_info *type, int own) {
  /* Check input arguments */
  if (!swig_ptr || !type) return 1;

  /* Allocate memory */
  SwigPtr *obj=(SwigPtr *)malloc(sizeof(SwigPtr));
  if (!obj) return 1;

  /* Initialize object */
  obj->ptr = ptr;
  obj->type = type;
  obj->own = own;
  obj->self = obj;
  obj->next = 0;

  /* Return memory reference and successful return */
  *swig_ptr = obj;
  return 0;
}

/* Free pointer object
   Returns a void* with the object to be freed (if any)
 */
void* SWIG_Matlab_DeletePointer(SwigPtr* p) {
  /* Quick return if null pointer? */
  if (p==0) return 0;

  /* Clear and free */
  void* ret = p->own ? p->ptr : 0;
  p->ptr=0;
  p->type=0;
  p->own=0;
  p->self=0;
  p->next=0;
  free(p);
  return ret;
}

/* This should probably be moved somewhere else */
#ifdef __cplusplus
extern "C"
#endif /* cplusplus */
void SWIG_Matlab_ExitFcn(void) {
  /* Unused at the moment */
}

SWIGRUNTIME int
SWIG_Matlab_CallInterp(int nlhs, mxArray *plhs[], int nrhs,
                       mxArray *prhs[], const char *functionName) {
#ifdef HAVE_OCTAVE
  return mexCallMATLAB(nlhs, plhs, nrhs, prhs, functionName);
#else
  mxArray* ex = mexCallMATLABWithTrap(nlhs, plhs, nrhs, prhs, functionName);
  if (ex) {
    mxDestroyArray(ex);
    return 1;
  } else {
    return 0;
  }
#endif
}

SWIGRUNTIME mxArray*
SWIG_Matlab_CallInterpEx(int nlhs, mxArray *plhs[], int nrhs,
                       mxArray *prhs[], const char *functionName) {
#ifdef HAVE_OCTAVE
  int flag = mexCallMATLAB(nlhs, plhs, nrhs, prhs, functionName);
  if (flag) {
    mexErrMsgIdAndTxt("SWIG:CallInterpEx","Not implemented for Octave");
  }
  return 0;
#else
  return mexCallMATLABWithTrap(nlhs, plhs, nrhs, prhs, functionName);
#endif
}

/* Convert a packed value value */
SWIGRUNTIME int
SWIG_Matlab_ConvertPacked(mxArray* SWIGUNUSEDPARM(pm), void* SWIGUNUSEDPARM(ptr), size_t SWIGUNUSEDPARM(sz), swig_type_info* SWIGUNUSEDPARM(ty)) {
  mexErrMsgIdAndTxt("SWIG:ConvertPacked","Not implemented");
  return SWIG_ERROR;
}

/* Runtime API implementation */
SWIGRUNTIME mxArray* SWIG_Matlab_NewPointerObj(void *ptr, swig_type_info *type, int flags) {
  /* Ownership? */
  int own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;

  /* Allocate a pointer object */
  SwigPtr* swig_ptr = 0;
  if (SWIG_Matlab_NewPointer(&swig_ptr, ptr, type, own)) {
    mexErrMsgIdAndTxt("SWIG:NewPointerObj","Cannot allocate pointer");
  }

  /* Create a SwigRef instance */
  mxArray* pm = 0;
  int ex = SWIG_Matlab_CallInterp(1, &pm, 0, 0, "SwigRef");
  if (ex) mexErrMsgIdAndTxt("SWIG:NewPointerObj", "Cannot create SwigRef instance");

  /* Set pointer property */
  mxArray *pm_ptr = mxCreateNumericMatrix(1, 1, mxUINT64_CLASS, mxREAL);
  *(uint64_T *)mxGetData(pm_ptr) = (uint64_T)swig_ptr;
  if(!pm_ptr) mexErrMsgIdAndTxt("SWIG:NewPointerObj", "mxCreateNumericMatrix failed");

  mxArray *rhs[2] = {pm, pm_ptr};
  mexCallMATLAB(0, 0, 2, rhs, "SwigSet");
  mxDestroyArray(pm_ptr);

  /* Create a proxy class of the desired type */
  if (type->clientdata) {
    const char* matlab_classname = (const char *)type->clientdata;
    mxArray* pm_test = 0;
    ex = SWIG_Matlab_CallInterp(1, &pm_test, 1, &pm, matlab_classname);
    if (ex) {
      mexWarnMsgIdAndTxt("SWIG:NewPointerObj",
                         "NewPointerObj problem. creating SwigRef as opposed to %s", matlab_classname);
    } else {
      mxDestroyArray(pm);
      pm = pm_test;
    }
  }

  return pm;
}

/* Create a new packed object */

SWIGRUNTIMEINLINE mxArray*
SWIG_Matlab_NewPackedObj(void* SWIGUNUSEDPARM(ptr), size_t SWIGUNUSEDPARM(sz), swig_type_info* SWIGUNUSEDPARM(type)) {
  mexErrMsgIdAndTxt("SWIG:NewPackedOb","Not implemented");
  return 0;
}

SWIGRUNTIME int SWIG_Matlab_isOwned(mxArray* pm) {
/* Get index, represented as a uint64_T scalar */
  mxArray *pm_ptr;
  mexCallMATLAB(1, &pm_ptr, 1, &pm, "SwigGet");
  if(!pm_ptr || mxGetNumberOfElements(pm_ptr) != 1 ||
     mxGetClassID(pm_ptr) != mxUINT64_CLASS || mxIsComplex(pm_ptr)) {
    if(pm_ptr) mxDestroyArray(pm_ptr);
    return SWIG_ERROR;
  }
  SwigPtr* p = (SwigPtr*)(*(uint64_T*)mxGetData(pm_ptr));
  mxDestroyArray(pm_ptr);

  return p ? p->own : 0;
}

SWIGRUNTIME SwigPtr* SWIG_Matlab_getSwigPtr(mxArray* pm) {
/* Get index, represented as a uint64_T scalar */
  mxArray *pm_ptr;
  mexCallMATLAB(1, &pm_ptr, 1, &pm, "SwigGet");
  if(!pm_ptr || mxGetNumberOfElements(pm_ptr) != 1 ||
     mxGetClassID(pm_ptr) != mxUINT64_CLASS || mxIsComplex(pm_ptr)) {
    if(pm_ptr) mxDestroyArray(pm_ptr);
    return 0;
  }
  SwigPtr* p = (SwigPtr*)(*(uint64_T*)mxGetData(pm_ptr));
  mxDestroyArray(pm_ptr);

  /* Consistency check */
  if (p->self != p) return 0;

  /* Get pointer object */
  return p;
}

SWIGRUNTIME int SWIG_Matlab_ConvertPtrAndOwn(mxArray* pm, void **ptr, swig_type_info *type, int flags, int *own) {
  /* Get index, represented as a uint64_T scalar */
  mxArray *pm_ptr;
  mexCallMATLAB(1, &pm_ptr, 1, &pm, "SwigGet");
  if(!pm_ptr || mxGetNumberOfElements(pm_ptr) != 1 ||
     mxGetClassID(pm_ptr) != mxUINT64_CLASS || mxIsComplex(pm_ptr)){
    if(pm_ptr) mxDestroyArray(pm_ptr);
    return SWIG_ERROR;
  }
  SwigPtr* swig_ptr = (SwigPtr*)(*(uint64_T*)mxGetData(pm_ptr));
  mxDestroyArray(pm_ptr);

  /* Get pointer object */
  if (!swig_ptr) return SWIG_ERROR;

  swig_cast_info *tc;
  int same_type = 0;
  SwigPtr* p=swig_ptr;
  while (p) {
    /* Loop over types */
    swig_type_info *p_type = p->type;

    /* No type cast needed */
    if (p_type==type || !type) {
      same_type = 1;
      break;
    }

    /* Check if type conversion is possible */
    tc = SWIG_TypeCheck(p_type->name, type);
    if (tc) break;

    /* Check next type */
    p = p->next;
  }

  /* Conversion not possible */
  if (!same_type && !tc) return SWIG_ERROR;

  /* Get data */
  if (ptr) *ptr = p->ptr;
  if (own) *own = p->own;

  /* Set ownership marker to false? */
  if(flags & SWIG_POINTER_DISOWN){
    SWIG_Matlab_DeletePointer(swig_ptr);
  }

  /* No type cast needed */
  if (same_type || !ptr) {
    return SWIG_OK;
  }

  /* Do type-cast */
  int newmemory = 0;
  *ptr = SWIG_TypeCast(tc, *ptr, &newmemory);
  if (newmemory == SWIG_CAST_NEW_MEMORY) {
    if (own) {
      *own = *own | SWIG_CAST_NEW_MEMORY;
    } else {
      /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
      mexErrMsgIdAndTxt("SWIG:ConvertPointerObj","SWIG error in converting pointer for type %s. Bad typemap?",type->name);
      return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}

SWIGRUNTIME swig_module_info *SWIG_Matlab_GetModule(void *SWIGUNUSEDPARM(clientdata)) {
  if (!saved_swig_module) {
    /* First call for this module, fetch pointer from MATLAB */
    mxArray* mem = 0;
    int flag = mexCallMATLAB(1, &mem, 0, 0, "SwigMem");
    if (flag || !mem) mexErrMsgIdAndTxt("SWIG:GetModule", "Cannot call SwigMem");
    /* On first call, mem is an empty matrix */
    if (mxGetNumberOfElements(mem)!= 0) {
      if (!mxIsStruct(mem)) {
        mexErrMsgIdAndTxt("SWIG:GetModule", "Corrupted memory");
      }
      mxArray *module = mxGetField(mem, 0,
        "swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
      if (module && mxGetNumberOfElements(module) == 1 && mxGetClassID(module) == mxUINT64_CLASS && !mxIsComplex(module)) {
        /* Cast memory as a pointer */
        saved_swig_module = (swig_module_info*)(*(uint64_T*)mxGetData(module));
      }
    }
    mxDestroyArray(mem);
  }
  return saved_swig_module;
}

SWIGRUNTIME void SWIG_Matlab_SetModule(swig_module_info *pointer) {
  mxArray* mem = 0;
  const char *fields[1] = {"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME};
  int flag = mexCallMATLAB(1, &mem, 0, 0, "SwigMem");
  if (flag || !mem) mexErrMsgIdAndTxt("SWIG:SetModule", "Cannot call SwigMem");
  /* Under normal circumstances, swigMem is an empty matrix */
  /* but is not required to be for a valid call to SWIG_Matlab_SetModule() */
  if (mxGetNumberOfElements(mem) == 0) {
    mxDestroyArray(mem);
    mem = mxCreateStructMatrix(1,1,1,fields);
    if(!mem) mexErrMsgIdAndTxt("SWIG:SetModule","mxCreateStructMatrix failed");
    mxArray *module = mxCreateNumericMatrix(1, 1, mxUINT64_CLASS, mxREAL);
    if(!module) mexErrMsgIdAndTxt("SWIG:SetModule","mxCreateNumericMatrix failed");
    *(uint64_T *)mxGetData(module) = (uint64_T)pointer;
    mxSetField(mem, 0, fields[0], module);
  } else {
    int nfields = 0;
    int fieldNum = 0;
    /* Add to existing mem if not the same */
    if (!mxIsStruct(mem)) {
      mexErrMsgIdAndTxt("SWIG:SetModule", "Corrupted memory");
    }
    nfields = mxGetNumberOfFields(mem);
    /* Check if same type table */
    int ii;
    for (ii=0; ii<nfields; ++ii){
      if(strcmp(mxGetFieldNameByNumber(mem, ii), fields[0]) == 0) {
        mxDestroyArray(mem);
        return;
      }
    }
    fieldNum = mxAddField(mem, fields[0]);
    if (fieldNum < 0) mexErrMsgIdAndTxt("SWIG:SetModule", "Error adding field to SwigMem");
    mxArray *module = mxCreateNumericMatrix(1, 1, mxUINT64_CLASS, mxREAL);
    if(!module) mexErrMsgIdAndTxt("SWIG:SetModule","mxCreateNumericMatrix failed");
    *(uint64_T *)mxGetData(module) = (uint64_T)pointer;
    mxSetFieldByNumber(mem, 0, fieldNum, module);
  }
  /* Set variable in SwigMem */
  flag = mexCallMATLAB(0, 0, 1, &mem, "SwigMem");
  mxDestroyArray(mem);
  if (flag) {
    mexErrMsgIdAndTxt("SWIG:SetModule", "Could not set variable in SwigMem.\n");
  }
  saved_swig_module = pointer;
}

/* HACK HACK */
#define SWIG_Matlab_SetConstant(dummy1,dummy2,pm) (pm)

#ifdef __cplusplus
#include <streambuf>
#include <iostream>
namespace swig {
  // Stream buffer to allow redirecting output to MATLAB
  class SWIG_Matlab_streambuf : public std::streambuf {
  public:
    SWIG_Matlab_streambuf() {}
  protected:
    virtual int_type overflow(int_type ch) {
      if(ch != traits_type::eof()) {
        mexPrintf("%c", static_cast<char>(ch));
      }
      return ch;
    }
    virtual std::streamsize xsputn(const char* s, std::streamsize num) {
      // Pass straight to mexPrintf without buffering
      mexPrintf("%.*s", static_cast<int>(num), s);
      return num;
    }
  };

  // Instantiation
  static SWIG_Matlab_streambuf SWIG_Matlab_buf;
} // namespace swig
#endif /* cplusplus */



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg); SWIG_fail;; } while(0) 


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_AngularVector3T swig_types[0]
#define SWIGTYPE_p_AngularVector3Type swig_types[1]
#define SWIGTYPE_p_DerivByAngularMotion swig_types[2]
#define SWIGTYPE_p_DerivByLinearMotion swig_types[3]
#define SWIGTYPE_p_DualSpace swig_types[4]
#define SWIGTYPE_p_DualVectorT swig_types[5]
#define SWIGTYPE_p_LinearVector3T swig_types[6]
#define SWIGTYPE_p_LinearVector3Type swig_types[7]
#define SWIGTYPE_p_MotionCrossAngF swig_types[8]
#define SWIGTYPE_p_MotionCrossAngM swig_types[9]
#define SWIGTYPE_p_MotionCrossLinF swig_types[10]
#define SWIGTYPE_p_MotionCrossLinM swig_types[11]
#define SWIGTYPE_p_MotionForceSemanticsT swig_types[12]
#define SWIGTYPE_p_MotionForceTbase swig_types[13]
#define SWIGTYPE_p_SemanticsType swig_types[14]
#define SWIGTYPE_p_Traits swig_types[15]
#define SWIGTYPE_p_Type swig_types[16]
#define SWIGTYPE_p_allocator_type swig_types[17]
#define SWIGTYPE_p_char swig_types[18]
#define SWIGTYPE_p_const_iterator swig_types[19]
#define SWIGTYPE_p_const_typed_iterator swig_types[20]
#define SWIGTYPE_p_difference_type swig_types[21]
#define SWIGTYPE_p_double swig_types[22]
#define SWIGTYPE_p_iDynTree__AccelerometerSensor swig_types[23]
#define SWIGTYPE_p_iDynTree__AngularForceVector3 swig_types[24]
#define SWIGTYPE_p_iDynTree__AngularForceVector3Semantics swig_types[25]
#define SWIGTYPE_p_iDynTree__AngularMotionVector3 swig_types[26]
#define SWIGTYPE_p_iDynTree__AngularMotionVector3Semantics swig_types[27]
#define SWIGTYPE_p_iDynTree__ArticulatedBodyAlgorithmInternalBuffers swig_types[28]
#define SWIGTYPE_p_iDynTree__ArticulatedBodyInertia swig_types[29]
#define SWIGTYPE_p_iDynTree__Axis swig_types[30]
#define SWIGTYPE_p_iDynTree__BerdyDynamicVariable swig_types[31]
#define SWIGTYPE_p_iDynTree__BerdyHelper swig_types[32]
#define SWIGTYPE_p_iDynTree__BerdyOptions swig_types[33]
#define SWIGTYPE_p_iDynTree__BerdySensor swig_types[34]
#define SWIGTYPE_p_iDynTree__Box swig_types[35]
#define SWIGTYPE_p_iDynTree__ClassicalAcc swig_types[36]
#define SWIGTYPE_p_iDynTree__ColorViz swig_types[37]
#define SWIGTYPE_p_iDynTree__ContactWrench swig_types[38]
#define SWIGTYPE_p_iDynTree__Cylinder swig_types[39]
#define SWIGTYPE_p_iDynTree__DOFSpatialForceArray swig_types[40]
#define SWIGTYPE_p_iDynTree__DOFSpatialMotionArray swig_types[41]
#define SWIGTYPE_p_iDynTree__Direction swig_types[42]
#define SWIGTYPE_p_iDynTree__Dummy swig_types[43]
#define SWIGTYPE_p_iDynTree__ExtWrenchesAndJointTorquesEstimator swig_types[44]
#define SWIGTYPE_p_iDynTree__ExternalMesh swig_types[45]
#define SWIGTYPE_p_iDynTree__FixedJoint swig_types[46]
#define SWIGTYPE_p_iDynTree__ForceVector3SemanticsT_iDynTree__AngularForceVector3Semantics_t swig_types[47]
#define SWIGTYPE_p_iDynTree__ForceVector3SemanticsT_iDynTree__LinearForceVector3Semantics_t swig_types[48]
#define SWIGTYPE_p_iDynTree__ForceVector3T_iDynTree__AngularForceVector3_t swig_types[49]
#define SWIGTYPE_p_iDynTree__ForceVector3T_iDynTree__LinearForceVector3_t swig_types[50]
#define SWIGTYPE_p_iDynTree__FrameFreeFloatingJacobian swig_types[51]
#define SWIGTYPE_p_iDynTree__FreeFloatingAcc swig_types[52]
#define SWIGTYPE_p_iDynTree__FreeFloatingGeneralizedTorques swig_types[53]
#define SWIGTYPE_p_iDynTree__FreeFloatingMassMatrix swig_types[54]
#define SWIGTYPE_p_iDynTree__FreeFloatingPos swig_types[55]
#define SWIGTYPE_p_iDynTree__FreeFloatingVel swig_types[56]
#define SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__AngularForceVector3Semantics_t swig_types[57]
#define SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__AngularMotionVector3Semantics_t swig_types[58]
#define SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__LinearForceVector3Semantics_t swig_types[59]
#define SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__LinearMotionVector3Semantics_t swig_types[60]
#define SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__AngularForceVector3_t swig_types[61]
#define SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__AngularMotionVector3_t swig_types[62]
#define SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__LinearForceVector3_t swig_types[63]
#define SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__LinearMotionVector3_t swig_types[64]
#define SWIGTYPE_p_iDynTree__GyroscopeSensor swig_types[65]
#define SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations swig_types[66]
#define SWIGTYPE_p_iDynTree__ICamera swig_types[67]
#define SWIGTYPE_p_iDynTree__IEnvironment swig_types[68]
#define SWIGTYPE_p_iDynTree__IJetsVisualization swig_types[69]
#define SWIGTYPE_p_iDynTree__IJoint swig_types[70]
#define SWIGTYPE_p_iDynTree__ILight swig_types[71]
#define SWIGTYPE_p_iDynTree__IModelVisualization swig_types[72]
#define SWIGTYPE_p_iDynTree__IndexRange swig_types[73]
#define SWIGTYPE_p_iDynTree__JointDOFsDoubleArray swig_types[74]
#define SWIGTYPE_p_iDynTree__JointPosDoubleArray swig_types[75]
#define SWIGTYPE_p_iDynTree__JointSensor swig_types[76]
#define SWIGTYPE_p_iDynTree__KinDynComputations swig_types[77]
#define SWIGTYPE_p_iDynTree__LinearForceVector3 swig_types[78]
#define SWIGTYPE_p_iDynTree__LinearForceVector3Semantics swig_types[79]
#define SWIGTYPE_p_iDynTree__LinearMotionVector3 swig_types[80]
#define SWIGTYPE_p_iDynTree__LinearMotionVector3Semantics swig_types[81]
#define SWIGTYPE_p_iDynTree__Link swig_types[82]
#define SWIGTYPE_p_iDynTree__LinkAccArray swig_types[83]
#define SWIGTYPE_p_iDynTree__LinkArticulatedBodyInertias swig_types[84]
#define SWIGTYPE_p_iDynTree__LinkContactWrenches swig_types[85]
#define SWIGTYPE_p_iDynTree__LinkInertias swig_types[86]
#define SWIGTYPE_p_iDynTree__LinkPositions swig_types[87]
#define SWIGTYPE_p_iDynTree__LinkSensor swig_types[88]
#define SWIGTYPE_p_iDynTree__LinkUnknownWrenchContacts swig_types[89]
#define SWIGTYPE_p_iDynTree__LinkVelArray swig_types[90]
#define SWIGTYPE_p_iDynTree__LinkWrenches swig_types[91]
#define SWIGTYPE_p_iDynTree__MatrixDynSize swig_types[92]
#define SWIGTYPE_p_iDynTree__MatrixFixSizeT_10_16_t swig_types[93]
#define SWIGTYPE_p_iDynTree__MatrixFixSizeT_1_6_t swig_types[94]
#define SWIGTYPE_p_iDynTree__MatrixFixSizeT_2_3_t swig_types[95]
#define SWIGTYPE_p_iDynTree__MatrixFixSizeT_3_3_t swig_types[96]
#define SWIGTYPE_p_iDynTree__MatrixFixSizeT_3_4_t swig_types[97]
#define SWIGTYPE_p_iDynTree__MatrixFixSizeT_4_3_t swig_types[98]
#define SWIGTYPE_p_iDynTree__MatrixFixSizeT_4_4_t swig_types[99]
#define SWIGTYPE_p_iDynTree__MatrixFixSizeT_6_10_t swig_types[100]
#define SWIGTYPE_p_iDynTree__MatrixFixSizeT_6_1_t swig_types[101]
#define SWIGTYPE_p_iDynTree__MatrixFixSizeT_6_6_t swig_types[102]
#define SWIGTYPE_p_iDynTree__Model swig_types[103]
#define SWIGTYPE_p_iDynTree__ModelLoader swig_types[104]
#define SWIGTYPE_p_iDynTree__ModelSolidShapes swig_types[105]
#define SWIGTYPE_p_iDynTree__MomentumFreeFloatingJacobian swig_types[106]
#define SWIGTYPE_p_iDynTree__MotionVector3T_iDynTree__AngularMotionVector3_t swig_types[107]
#define SWIGTYPE_p_iDynTree__MotionVector3T_iDynTree__LinearMotionVector3_t swig_types[108]
#define SWIGTYPE_p_iDynTree__MovableJointImplT_1_1_t swig_types[109]
#define SWIGTYPE_p_iDynTree__MovableJointImplT_2_2_t swig_types[110]
#define SWIGTYPE_p_iDynTree__MovableJointImplT_3_3_t swig_types[111]
#define SWIGTYPE_p_iDynTree__MovableJointImplT_4_4_t swig_types[112]
#define SWIGTYPE_p_iDynTree__MovableJointImplT_5_5_t swig_types[113]
#define SWIGTYPE_p_iDynTree__MovableJointImplT_6_6_t swig_types[114]
#define SWIGTYPE_p_iDynTree__Neighbor swig_types[115]
#define SWIGTYPE_p_iDynTree__Position swig_types[116]
#define SWIGTYPE_p_iDynTree__PositionRaw swig_types[117]
#define SWIGTYPE_p_iDynTree__PositionSemantics swig_types[118]
#define SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator swig_types[119]
#define SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorParameter swig_types[120]
#define SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorParametersList swig_types[121]
#define SWIGTYPE_p_iDynTree__RevoluteJoint swig_types[122]
#define SWIGTYPE_p_iDynTree__RigidBodyInertiaNonLinearParametrization swig_types[123]
#define SWIGTYPE_p_iDynTree__Rotation swig_types[124]
#define SWIGTYPE_p_iDynTree__RotationRaw swig_types[125]
#define SWIGTYPE_p_iDynTree__RotationSemantics swig_types[126]
#define SWIGTYPE_p_iDynTree__RotationalInertiaRaw swig_types[127]
#define SWIGTYPE_p_iDynTree__Sensor swig_types[128]
#define SWIGTYPE_p_iDynTree__SensorsList swig_types[129]
#define SWIGTYPE_p_iDynTree__SensorsMeasurements swig_types[130]
#define SWIGTYPE_p_iDynTree__SimpleLeggedOdometry swig_types[131]
#define SWIGTYPE_p_iDynTree__SixAxisForceTorqueSensor swig_types[132]
#define SWIGTYPE_p_iDynTree__SolidShape swig_types[133]
#define SWIGTYPE_p_iDynTree__SparseMatrix swig_types[134]
#define SWIGTYPE_p_iDynTree__SpatialAcc swig_types[135]
#define SWIGTYPE_p_iDynTree__SpatialForceVector swig_types[136]
#define SWIGTYPE_p_iDynTree__SpatialInertia swig_types[137]
#define SWIGTYPE_p_iDynTree__SpatialInertiaRaw swig_types[138]
#define SWIGTYPE_p_iDynTree__SpatialMomentum swig_types[139]
#define SWIGTYPE_p_iDynTree__SpatialMotionVector swig_types[140]
#define SWIGTYPE_p_iDynTree__SpatialVectorSemanticsT_iDynTree__LinearForceVector3Semantics_iDynTree__AngularForceVector3Semantics_t swig_types[141]
#define SWIGTYPE_p_iDynTree__SpatialVectorSemanticsT_iDynTree__LinearMotionVector3Semantics_iDynTree__AngularMotionVector3Semantics_t swig_types[142]
#define SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialForceVector_t swig_types[143]
#define SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialMotionVector_t swig_types[144]
#define SWIGTYPE_p_iDynTree__Sphere swig_types[145]
#define SWIGTYPE_p_iDynTree__SubModelDecomposition swig_types[146]
#define SWIGTYPE_p_iDynTree__Transform swig_types[147]
#define SWIGTYPE_p_iDynTree__TransformDerivative swig_types[148]
#define SWIGTYPE_p_iDynTree__TransformSemantics swig_types[149]
#define SWIGTYPE_p_iDynTree__Traversal swig_types[150]
#define SWIGTYPE_p_iDynTree__Triplets swig_types[151]
#define SWIGTYPE_p_iDynTree__Twist swig_types[152]
#define SWIGTYPE_p_iDynTree__URDFParserOptions swig_types[153]
#define SWIGTYPE_p_iDynTree__UnknownWrenchContact swig_types[154]
#define SWIGTYPE_p_iDynTree__VectorDynSize swig_types[155]
#define SWIGTYPE_p_iDynTree__VectorFixSizeT_10_t swig_types[156]
#define SWIGTYPE_p_iDynTree__VectorFixSizeT_16_t swig_types[157]
#define SWIGTYPE_p_iDynTree__VectorFixSizeT_2_t swig_types[158]
#define SWIGTYPE_p_iDynTree__VectorFixSizeT_3_t swig_types[159]
#define SWIGTYPE_p_iDynTree__VectorFixSizeT_4_t swig_types[160]
#define SWIGTYPE_p_iDynTree__VectorFixSizeT_6_t swig_types[161]
#define SWIGTYPE_p_iDynTree__Visualizer swig_types[162]
#define SWIGTYPE_p_iDynTree__VisualizerOptions swig_types[163]
#define SWIGTYPE_p_iDynTree__Wrench swig_types[164]
#define SWIGTYPE_p_iDynTree__estimateExternalWrenchesBuffers swig_types[165]
#define SWIGTYPE_p_int swig_types[166]
#define SWIGTYPE_p_iterator swig_types[167]
#define SWIGTYPE_p_size_type swig_types[168]
#define SWIGTYPE_p_std__allocatorT_iDynTree__BerdyDynamicVariable_t swig_types[169]
#define SWIGTYPE_p_std__allocatorT_iDynTree__BerdySensor_t swig_types[170]
#define SWIGTYPE_p_std__allocatorT_std__string_t swig_types[171]
#define SWIGTYPE_p_std__vectorT_iDynTree__BerdyDynamicVariable_std__allocatorT_iDynTree__BerdyDynamicVariable_t_t swig_types[172]
#define SWIGTYPE_p_std__vectorT_iDynTree__BerdySensor_std__allocatorT_iDynTree__BerdySensor_t_t swig_types[173]
#define SWIGTYPE_p_std__vectorT_iDynTree__MatrixDynSize_std__allocatorT_iDynTree__MatrixDynSize_t_t swig_types[174]
#define SWIGTYPE_p_std__vectorT_iDynTree__Regressors__DynamicsRegressorParameter_std__allocatorT_iDynTree__Regressors__DynamicsRegressorParameter_t_t swig_types[175]
#define SWIGTYPE_p_std__vectorT_iDynTree__VectorDynSize_std__allocatorT_iDynTree__VectorDynSize_t_t swig_types[176]
#define SWIGTYPE_p_std__vectorT_iDynTree__VectorFixSizeT_6_t_std__allocatorT_iDynTree__VectorFixSizeT_6_t_t_t swig_types[177]
#define SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t swig_types[178]
#define SWIGTYPE_p_std__vectorT_std__vectorT_iDynTree__SolidShape_p_std__allocatorT_iDynTree__SolidShape_p_t_t_std__allocatorT_std__vectorT_iDynTree__SolidShape_p_std__allocatorT_iDynTree__SolidShape_p_t_t_t_t swig_types[179]
#define SWIGTYPE_p_swig__MatlabSwigIterator swig_types[180]
#define SWIGTYPE_p_typed_iterator swig_types[181]
#define SWIGTYPE_p_unsigned_int swig_types[182]
#define SWIGTYPE_p_unsigned_long swig_types[183]
#define SWIGTYPE_p_value_type swig_types[184]
static swig_type_info *swig_types[186];
static swig_module_info swig_module = {swig_types, 185, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */


#define SWIGVERSION 0x030011 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


#include <string>


#include <iostream>


#include <stdexcept>


#if defined(__GNUC__)
#  if __GNUC__ == 2 && __GNUC_MINOR <= 96
#     define SWIG_STD_NOMODERN_STL
#  endif
#endif


#include <stddef.h>

  
namespace swig {
  struct stop_iteration {
  };

  struct MatlabSwigIterator {
  private:
    mxArray* _seq;

  protected:
    MatlabSwigIterator(mxArray* seq) : _seq(seq)
    {
      (void)_seq;
    }
      
  public:
    virtual ~MatlabSwigIterator() {}

    virtual mxArray* value() const = 0;

    virtual MatlabSwigIterator *incr(size_t n = 1) = 0;

    virtual MatlabSwigIterator *decr(size_t n = 1)
    {
      throw stop_iteration();
    }

    virtual ptrdiff_t distance(const MatlabSwigIterator &x) const
    {
      throw std::invalid_argument("operation not supported");
    }

    virtual bool equal (const MatlabSwigIterator &x) const
    {
      throw std::invalid_argument("operation not supported");
    }
    
    virtual MatlabSwigIterator *copy() const = 0;

    mxArray* next()
    {
      mxArray* obj = value();
      incr();
      return obj;
    }

    mxArray* previous()
    {
      decr();
      return value();
    }

    MatlabSwigIterator *advance(ptrdiff_t n)
    {
      return  (n > 0) ?  incr(n) : decr(-n);
    }
      
    bool operator == (const MatlabSwigIterator& x)  const
    {
      return equal(x);
    }
      
    bool operator != (const MatlabSwigIterator& x) const
    {
      return ! operator==(x);
    }

    MatlabSwigIterator* operator ++ () {
      incr();
      return this;
    }

    MatlabSwigIterator* operator -- () {
      decr();
      return this;
    }
      
    MatlabSwigIterator* operator + (ptrdiff_t n) const
    {
      return copy()->advance(n);
    }

    MatlabSwigIterator* operator - (ptrdiff_t n) const
    {
      return copy()->advance(-n);
    }
      
    ptrdiff_t operator - (const MatlabSwigIterator& x) const
    {
      return x.distance(*this);
    }
      
    static swig_type_info* descriptor() {
      static int init = 0;
      static swig_type_info* desc = 0;
      if (!init) {
	desc = SWIG_TypeQuery("swig::MatlabSwigIterator *");
	init = 1;
      }	
      return desc;
    }    
  };
}


  SWIGINTERN int SWIG_AsVal_unsigned_SS_long (mxArray* pm, unsigned long* val)
    {
      if(mxGetNumberOfElements(pm)!=1) return SWIG_TypeError;
      switch(mxGetClassID(pm)){
      case mxINT8_CLASS:
        if(val) *val = (unsigned long)(*(int8_T*)mxGetData(pm)); break;
      case mxUINT8_CLASS:
        if(val) *val = (unsigned long)(*(uint8_T*)mxGetData(pm)); break;
      case mxINT16_CLASS:
        if(val) *val = (unsigned long)(*(int16_T*)mxGetData(pm)); break;
      case mxUINT16_CLASS:
        if(val) *val = (unsigned long)(*(uint16_T*)mxGetData(pm)); break;
      case mxINT32_CLASS:
        if(val) *val = (unsigned long)(*(int32_T*)mxGetData(pm)); break;
      case mxUINT32_CLASS:
        if(val) *val = (unsigned long)(*(uint32_T*)mxGetData(pm)); break;
      case mxINT64_CLASS:
        if(val) *val = (unsigned long)(*(int64_T*)mxGetData(pm)); break;
      case mxUINT64_CLASS: 
        if(val) *val = (unsigned long)(*(uint64_T*)mxGetData(pm)); break;
      case mxDOUBLE_CLASS:
      {
	double v=mxGetScalar(pm);
	if(v!=floor(v)) return SWIG_TypeError;
        if(val) *val = (unsigned long)v;
        break;
      }
      default: return SWIG_TypeError;
      }
      return SWIG_OK;
    }


  SWIGINTERN int SWIG_AsVal_unsigned_SS_long_SS_long (mxArray* pm, unsigned long long* val)
    {
      if(mxGetNumberOfElements(pm)!=1) return SWIG_TypeError;
      switch(mxGetClassID(pm)){
      case mxINT8_CLASS:
        if(val) *val = (unsigned long long)(*(int8_T*)mxGetData(pm)); break;
      case mxUINT8_CLASS:
        if(val) *val = (unsigned long long)(*(uint8_T*)mxGetData(pm)); break;
      case mxINT16_CLASS:
        if(val) *val = (unsigned long long)(*(int16_T*)mxGetData(pm)); break;
      case mxUINT16_CLASS:
        if(val) *val = (unsigned long long)(*(uint16_T*)mxGetData(pm)); break;
      case mxINT32_CLASS:
        if(val) *val = (unsigned long long)(*(int32_T*)mxGetData(pm)); break;
      case mxUINT32_CLASS:
        if(val) *val = (unsigned long long)(*(uint32_T*)mxGetData(pm)); break;
      case mxINT64_CLASS:
        if(val) *val = (unsigned long long)(*(int64_T*)mxGetData(pm)); break;
      case mxUINT64_CLASS: 
        if(val) *val = (unsigned long long)(*(uint64_T*)mxGetData(pm)); break;
      case mxDOUBLE_CLASS:
      {
	double v=mxGetScalar(pm);
	if(v!=floor(v)) return SWIG_TypeError;
        if(val) *val = (unsigned long long)v;
        break;
      }
      default: return SWIG_TypeError;
      }
      return SWIG_OK;
    }


SWIGINTERNINLINE int
SWIG_AsVal_size_t (mxArray* obj, size_t *val)
{
  int res = SWIG_TypeError;
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else if (sizeof(size_t) <= sizeof(unsigned long long)) {
    unsigned long long v;
    res = SWIG_AsVal_unsigned_SS_long_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  }
#endif
  return res;
}


  SWIGINTERNINLINE mxArray* SWIG_From_long    (long value)
    {    
      mxArray* out = mxCreateNumericMatrix(1,1,mxINT64_CLASS,mxREAL);
      *((int64_T*)mxGetData(out)) = (int64_T)value;
      return out;
    }


  SWIGINTERNINLINE mxArray* SWIG_From_long_SS_long    (long long value)
    {    
      mxArray* out = mxCreateNumericMatrix(1,1,mxINT64_CLASS,mxREAL);
      *((int64_T*)mxGetData(out)) = (int64_T)value;
      return out;
    }


SWIGINTERNINLINE mxArray*
SWIG_From_ptrdiff_t  (ptrdiff_t value)
{    
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(ptrdiff_t) <= sizeof(long)) {
#endif
    return SWIG_From_long  (static_cast< long >(value));
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else {
    /* assume sizeof(ptrdiff_t) <= sizeof(long long) */
    return SWIG_From_long_SS_long  (static_cast< long long >(value));
  }
#endif
}


SWIGINTERNINLINE mxArray*
  SWIG_From_bool  (bool value)
{
  return mxCreateLogicalScalar(value);
}


  SWIGINTERN int SWIG_AsVal_long (mxArray* pm, long* val)
    {
      if(mxGetNumberOfElements(pm)!=1) return SWIG_TypeError;
      switch(mxGetClassID(pm)){
      case mxINT8_CLASS:
        if(val) *val = (long)(*(int8_T*)mxGetData(pm)); break;
      case mxUINT8_CLASS:
        if(val) *val = (long)(*(uint8_T*)mxGetData(pm)); break;
      case mxINT16_CLASS:
        if(val) *val = (long)(*(int16_T*)mxGetData(pm)); break;
      case mxUINT16_CLASS:
        if(val) *val = (long)(*(uint16_T*)mxGetData(pm)); break;
      case mxINT32_CLASS:
        if(val) *val = (long)(*(int32_T*)mxGetData(pm)); break;
      case mxUINT32_CLASS:
        if(val) *val = (long)(*(uint32_T*)mxGetData(pm)); break;
      case mxINT64_CLASS:
        if(val) *val = (long)(*(int64_T*)mxGetData(pm)); break;
      case mxUINT64_CLASS: 
        if(val) *val = (long)(*(uint64_T*)mxGetData(pm)); break;
      case mxDOUBLE_CLASS:
      {
	double v=mxGetScalar(pm);
	if(v!=floor(v)) return SWIG_TypeError;
        if(val) *val = (long)v;
        break;
      }
      default: return SWIG_TypeError;
      }
      return SWIG_OK;
    }


  SWIGINTERN int SWIG_AsVal_long_SS_long (mxArray* pm, long long* val)
    {
      if(mxGetNumberOfElements(pm)!=1) return SWIG_TypeError;
      switch(mxGetClassID(pm)){
      case mxINT8_CLASS:
        if(val) *val = (long long)(*(int8_T*)mxGetData(pm)); break;
      case mxUINT8_CLASS:
        if(val) *val = (long long)(*(uint8_T*)mxGetData(pm)); break;
      case mxINT16_CLASS:
        if(val) *val = (long long)(*(int16_T*)mxGetData(pm)); break;
      case mxUINT16_CLASS:
        if(val) *val = (long long)(*(uint16_T*)mxGetData(pm)); break;
      case mxINT32_CLASS:
        if(val) *val = (long long)(*(int32_T*)mxGetData(pm)); break;
      case mxUINT32_CLASS:
        if(val) *val = (long long)(*(uint32_T*)mxGetData(pm)); break;
      case mxINT64_CLASS:
        if(val) *val = (long long)(*(int64_T*)mxGetData(pm)); break;
      case mxUINT64_CLASS: 
        if(val) *val = (long long)(*(uint64_T*)mxGetData(pm)); break;
      case mxDOUBLE_CLASS:
      {
	double v=mxGetScalar(pm);
	if(v!=floor(v)) return SWIG_TypeError;
        if(val) *val = (long long)v;
        break;
      }
      default: return SWIG_TypeError;
      }
      return SWIG_OK;
    }


SWIGINTERNINLINE int
SWIG_AsVal_ptrdiff_t (mxArray* obj, ptrdiff_t *val)
{
  int res = SWIG_TypeError;
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(ptrdiff_t) <= sizeof(long)) {
#endif
    long v;
    res = SWIG_AsVal_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else if (sizeof(ptrdiff_t) <= sizeof(long long)) {
    long long v;
    res = SWIG_AsVal_long_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
  }
#endif
  return res;
}


#include <algorithm>


#include <vector>


namespace swig {
  template <class Type>
  struct noconst_traits {
    typedef Type noconst_type;
  };

  template <class Type>
  struct noconst_traits<const Type> {
    typedef Type noconst_type;
  };

  /*
    type categories
  */
  struct pointer_category { };
  struct value_category { };

  /*
    General traits that provides type_name and type_info
  */
  template <class Type> struct traits { };

  template <class Type>
  inline const char* type_name() {
    return traits<typename noconst_traits<Type >::noconst_type >::type_name();
  }

  template <class Type>
  struct traits_info {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  template <class Type>
  inline swig_type_info *type_info() {
    return traits_info<Type>::type_info();
  }

  /*
    Partial specialization for pointers
  */
  template <class Type> struct traits <Type *> {
    typedef pointer_category category;
    static std::string make_ptr_name(const char* name) {
      std::string ptrname = name;
      ptrname += " *";
      return ptrname;
    }
    static const char* type_name() {
      static std::string name = make_ptr_name(swig::type_name<Type>());
      return name.c_str();
    }
  };

  template <class Type, class Category>
  struct traits_as { };

  template <class Type, class Category>
  struct traits_check { };

}


namespace swig {  
// Traits that provides the from method
  template <class Type> struct traits_from_ptr {
    static mxArray* from(Type *val, int owner = 0) {
      return SWIG_NewPointerObj(val, type_info<Type>(), owner);
    }
  };

  template <class Type> struct traits_from {
    static mxArray* from(const Type& val) {
      return traits_from_ptr<Type>::from(new Type(val), 1);
    }
  };

  template <class Type> struct traits_from<Type *> {
    static mxArray* from(Type* val) {
      return traits_from_ptr<Type>::from(val, 0);
    }
  };

  template <class Type> struct traits_from<const Type *> {
    static mxArray* from(const Type* val) {
      return traits_from_ptr<Type>::from(const_cast<Type*>(val), 0);
    }
  };


  template <class Type>
  inline mxArray* from(const Type& val) {
    return traits_from<Type>::from(val);
  }

  template <class Type>
  inline mxArray* from_ptr(Type* val, int owner) {
    return traits_from_ptr<Type>::from(val, owner);
  }

    // Traits that provides the asval/as/check method
  template <class Type>
  struct traits_asptr {   
    static int asptr(mxArray* pm, Type **val) {
      Type *p;
      int res = SWIG_ConvertPtr(pm, (void**)&p, type_info<Type>(), 0);
      if (SWIG_IsOK(res)) {
	if (val) *val = p;
      }
      return res;
    }
  }; 

  template <class Type>
  inline int asptr(mxArray* pm, Type **vptr) {
    return traits_asptr<Type>::asptr(pm, vptr);
  }

  template <class Type> 
  struct traits_asval {
    static int asval(mxArray* pm, Type *val) {
      if (val) {
	Type *p = 0;
	int res = traits_asptr<Type>::asptr(pm, &p);
	if (!SWIG_IsOK(res)) return res;	
	if (p) {
	  typedef typename noconst_traits<Type>::noconst_type noconst_type;
	  *(const_cast<noconst_type*>(val)) = *p;
	  if (SWIG_IsNewObj(res)){
	    delete p;
	    res = SWIG_DelNewMask(res);
	  }
	  return res;
	} else {
	  return SWIG_ERROR;
	}
      } else {
	return traits_asptr<Type>::asptr(pm, (Type **)(0));
      }
    }
  };

  template <class Type> struct traits_asval<Type*> {
    static int asval(mxArray* pm, Type **val) {
      if (val) {
        typedef typename noconst_traits<Type>::noconst_type noconst_type;
        noconst_type *p = 0;
        int res = traits_asptr<noconst_type>::asptr(pm,  &p);
        if (SWIG_IsOK(res)) {
          *(const_cast<noconst_type**>(val)) = p;
	}
	return res;
      } else {
	return traits_asptr<Type>::asptr(pm, (Type **)(0));
      }
    }
  };
  
  template <class Type>
  inline int asval(mxArray* pm, Type *val) {
    return traits_asval<Type>::asval(pm, val);
  }

  template <class Type> 
  struct traits_as<Type, value_category> {
    static Type as(mxArray* pm, bool throw_error) {
      Type v;
      int res = asval(pm, &v);
      if (mxGetClassID(pm) == mxUNKNOWN_CLASS || !SWIG_IsOK(res)) {
	if (!Matlab_Error_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
      }
      return v;
    }
  };

  template <class Type> 
  struct traits_as<Type, pointer_category> {
    static Type as(mxArray* pm, bool throw_error) {
      Type *v = 0;      
      int res = traits_asptr<Type>::asptr(pm, &v);
      if (SWIG_IsOK(res) && v) {
	if (SWIG_IsNewObj(res)) {
	  Type r(*v);
	  delete v;
	  return r;
	} else {
	  return *v;
	}
      } else {
	// Uninitialized return value, no Type() constructor required.
	static Type *v_def = (Type*) malloc(sizeof(Type));
	if (!Matlab_Error_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
        memset(static_cast<void *>(v_def),0,sizeof(Type));
	return *v_def;
      }
    }
  };

  template <class Type> 
  struct traits_as<Type*, pointer_category> {
    static Type* as(mxArray* pm, bool throw_error) {
      Type *v = 0;      
      int res = traits_asptr<Type>::asptr(pm, &v);
      if (SWIG_IsOK(res)) {
	return v;
      } else {
	if (!Matlab_Error_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
	return 0;
      }
    }
  };
    
  template <class Type>
  inline Type as(mxArray* pm, bool te = false) {
    return traits_as<Type, typename traits<Type>::category>::as(pm, te);
  }

  template <class Type> 
  struct traits_check<Type, value_category> {
    static bool check(mxArray* obj) {
      int res = asval(obj, (Type *)(0));
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type> 
  struct traits_check<Type, pointer_category> {
    static bool check(mxArray* obj) {
      int res = asptr(obj, (Type **)(0));
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type>
  inline bool check(mxArray* obj) {
    return traits_check<Type, typename traits<Type>::category>::check(obj);
  }
}


#include <functional>

namespace std {













}

namespace swig {
  inline size_t
  check_index(ptrdiff_t i, size_t size, bool insert = false) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size)
	return (size_t) (i + size);
    } else if ( (size_t) i < size ) {
      return (size_t) i;
    } else if (insert && ((size_t) i == size)) {
      return size;
    }

    throw std::out_of_range("index out of range");
  }

  inline size_t
  slice_index(ptrdiff_t i, size_t size) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size) {
	return (size_t) (i + size);
      } else {
	throw std::out_of_range("index out of range");
      }
    } else {
      return ( (size_t) i < size ) ? ((size_t) i) : size;
    }
  }

  template <class Sequence, class Difference>
  inline typename Sequence::iterator
  getpos(Sequence* self, Difference i)  {
    typename Sequence::iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline typename Sequence::const_iterator
  cgetpos(const Sequence* self, Difference i)  {
    typename Sequence::const_iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline Sequence*
  getslice(const Sequence* self, Difference i, Difference j) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size);
    typename Sequence::size_type jj = swig::slice_index(j, size);

    if (jj > ii) {
      typename Sequence::const_iterator vb = self->begin();
      typename Sequence::const_iterator ve = self->begin();
      std::advance(vb,ii);
      std::advance(ve,jj);
      return new Sequence(vb, ve);
    } else {
      return new Sequence();
    }
  }

  template <class Sequence, class Difference, class InputSeq>
  inline void
  setslice(Sequence* self, Difference i, Difference j, const InputSeq& v) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size, true);
    typename Sequence::size_type jj = swig::slice_index(j, size);
    if (jj < ii) jj = ii;
    size_t ssize = jj - ii;
    if (ssize <= v.size()) {
      typename Sequence::iterator sb = self->begin();
      typename InputSeq::const_iterator vmid = v.begin();
      std::advance(sb,ii);
      std::advance(vmid, jj - ii);
      self->insert(std::copy(v.begin(), vmid, sb), vmid, v.end());
    } else {
      typename Sequence::iterator sb = self->begin();
      typename Sequence::iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      self->erase(sb,se);
      sb = self->begin();
      std::advance(sb,ii);
      self->insert(sb, v.begin(), v.end());
    }
  }

  template <class Sequence, class Difference>
  inline void
  delslice(Sequence* self, Difference i, Difference j) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size, true);
    typename Sequence::size_type jj = swig::slice_index(j, size);
    if (jj > ii) {
      typename Sequence::iterator sb = self->begin();
      typename Sequence::iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      self->erase(sb,se);
    }
  }
}


#if defined(__SUNPRO_CC) && defined(_RWSTD_VER)
#  if !defined(SWIG_NO_STD_NOITERATOR_TRAITS_STL)
#    define SWIG_STD_NOITERATOR_TRAITS_STL
#  endif
#endif

#if !defined(SWIG_STD_NOITERATOR_TRAITS_STL)
#include <iterator>
#else
namespace std {
  template <class Iterator>
  struct iterator_traits {
    typedef ptrdiff_t difference_type;
    typedef typename Iterator::value_type value_type;
  };

  template <class Iterator, class Category,class T, class Reference, class Pointer, class Distance>
  struct iterator_traits<__reverse_bi_iterator<Iterator,Category,T,Reference,Pointer,Distance> > {
    typedef Distance difference_type;
    typedef T value_type;
  };

  template <class T>
  struct iterator_traits<T*> {
    typedef T value_type;
    typedef ptrdiff_t difference_type;
  };

  template<typename _InputIterator>
  inline typename iterator_traits<_InputIterator>::difference_type
  distance(_InputIterator __first, _InputIterator __last)
  {
    typename iterator_traits<_InputIterator>::difference_type __n = 0;
    while (__first != __last) {
      ++__first; ++__n;
    }
    return __n;
  }
}
#endif


namespace swig {
  template<typename OutIterator>
  class MatlabSwigIterator_T :  public MatlabSwigIterator
  {
  public:
    typedef OutIterator out_iterator;
    typedef typename std::iterator_traits<out_iterator>::value_type value_type;    
    typedef MatlabSwigIterator_T<out_iterator> self_type;

    MatlabSwigIterator_T(out_iterator curr, mxArray* seq)
      : MatlabSwigIterator(seq), current(curr)
    {
    }

    const out_iterator& get_current() const
    {
      return current;
    }

    
    bool equal (const MatlabSwigIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return (current == iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }
    
    ptrdiff_t distance(const MatlabSwigIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return std::distance(current, iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }    
    
  protected:
    out_iterator current;
  };
  
  template <class ValueType>
  struct from_oper 
  {
    typedef const ValueType& argument_type;
    typedef mxArray* result_type;
    result_type operator()(argument_type v) const
    {
      return swig::from(v);
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class MatlabSwigIteratorOpen_T :  public MatlabSwigIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef MatlabSwigIterator_T<out_iterator>  base;
    typedef MatlabSwigIteratorOpen_T<OutIterator, ValueType, FromOper> self_type;
    
    MatlabSwigIteratorOpen_T(out_iterator curr, mxArray* seq)
      : MatlabSwigIterator_T<OutIterator>(curr, seq)
    {
    }
    
    mxArray* value() const {
      return from(static_cast<const value_type&>(*(base::current)));
    }
    
    MatlabSwigIterator *copy() const
    {
      return new self_type(*this);
    }

    MatlabSwigIterator *incr(size_t n = 1)
    {
      while (n--) {
	++base::current;
      }
      return this;
    }

    MatlabSwigIterator *decr(size_t n = 1)
    {
      while (n--) {
	--base::current;
      }
      return this;
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class MatlabSwigIteratorClosed_T :  public MatlabSwigIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef MatlabSwigIterator_T<out_iterator>  base;    
    typedef MatlabSwigIteratorClosed_T<OutIterator, ValueType, FromOper> self_type;
    
    MatlabSwigIteratorClosed_T(out_iterator curr, out_iterator first, out_iterator last, mxArray* seq)
      : MatlabSwigIterator_T<OutIterator>(curr, seq), begin(first), end(last)
    {
    }
    
    mxArray* value() const {
      if (base::current == end) {
	throw stop_iteration();
      } else {
	return from(static_cast<const value_type&>(*(base::current)));
      }
    }
    
    MatlabSwigIterator *copy() const
    {
      return new self_type(*this);
    }

    MatlabSwigIterator *incr(size_t n = 1)
    {
      while (n--) {
	if (base::current == end) {
	  throw stop_iteration();
	} else {
	  ++base::current;
	}
      }
      return this;
    }

    MatlabSwigIterator *decr(size_t n = 1)
    {
      while (n--) {
	if (base::current == begin) {
	  throw stop_iteration();
	} else {
	  --base::current;
	}
      }
      return this;
    }

  private:
    out_iterator begin;
    out_iterator end;
  };

  template<typename OutIter>
  inline MatlabSwigIterator*
  make_output_iterator(const OutIter& current, const OutIter& begin,const OutIter& end, mxArray* seq = 0 /* KT mxArray()*/)
  {
    return new MatlabSwigIteratorClosed_T<OutIter>(current, begin, end, seq);
  }

  template<typename OutIter>
  inline MatlabSwigIterator*
  make_output_iterator(const OutIter& current, mxArray* seq = 0 /* KT mxArray()*/)
  {
    return new MatlabSwigIteratorOpen_T<OutIter>(current, seq);
  }
}


namespace swig
{
  template <class T>
    struct MatlabSequence_Ref // * matlab can't support these, because of how assignment works
  {
    MatlabSequence_Ref(mxArray* const seq, int index)
      : _seq(seq), _index(index)
    {
    }

    operator T () const
    {
      //      swig::SwigVar_PyObject item = MatlabSequence_GetItem(_seq, _index);
      mxArray* item; // * todo
      try {
	return swig::as<T>(item, true);
      } catch (std::exception& e) {
	char msg[1024];
	sprintf(msg, "in sequence element %d ", _index);
	if (!Matlab_Error_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<T>());
	}
	SWIG_Matlab_AddErrorMsg(msg);
	SWIG_Matlab_AddErrorMsg(e.what());
	throw;
      }
    }

    MatlabSequence_Ref& operator=(const T& v)
    {
      //      MatlabSequence_SetItem(_seq, _index, swig::from<T>(v));
      // * todo
      return *this;
    }

  private:
    mxArray* _seq;
    int _index;
  };

  template <class T>
  struct MatlabSequence_ArrowProxy
  {
    MatlabSequence_ArrowProxy(const T& x): m_value(x) {}
    const T* operator->() const { return &m_value; }
    operator const T*() const { return &m_value; }
    T m_value;
  };

  template <class T, class Reference >
  struct MatlabSequence_InputIterator
  {
    typedef MatlabSequence_InputIterator<T, Reference > self;

    typedef std::random_access_iterator_tag iterator_category;
    typedef Reference reference;
    typedef T value_type;
    typedef T* pointer;
    typedef int difference_type;

    MatlabSequence_InputIterator()
    {
    }

    MatlabSequence_InputIterator(mxArray* const seq, int index)
      : _seq(seq), _index(index)
    {
    }

    reference operator*() const
    {
      return reference(_seq, _index);
    }

    MatlabSequence_ArrowProxy<T>
    operator->() const {
      return MatlabSequence_ArrowProxy<T>(operator*());
    }

    bool operator==(const self& ri) const
    {
      return (_index == ri._index);
    }

    bool operator!=(const self& ri) const
    {
      return !(operator==(ri));
    }

    self& operator ++ ()
    {
      ++_index;
      return *this;
    }

    self& operator -- ()
    {
      --_index;
      return *this;
    }

    self& operator += (difference_type n)
    {
      _index += n;
      return *this;
    }

    self operator +(difference_type n) const
    {
      return self(_seq, _index + n);
    }

    self& operator -= (difference_type n)
    {
      _index -= n;
      return *this;
    }

    self operator -(difference_type n) const
    {
      return self(_seq, _index - n);
    }

    difference_type operator - (const self& ri) const
    {
      return _index - ri._index;
    }

    bool operator < (const self& ri) const
    {
      return _index < ri._index;
    }

    reference
    operator[](difference_type n) const
    {
      return reference(_seq, _index + n);
    }

  private:
    mxArray* _seq;
    difference_type _index;
  };

  template <class T>
  struct MatlabSequence_Cont
  {
    typedef MatlabSequence_Ref<T> reference;
    typedef const MatlabSequence_Ref<T> const_reference;
    typedef T value_type;
    typedef T* pointer;
    typedef int difference_type;
    typedef int size_type;
    typedef const pointer const_pointer;
    typedef MatlabSequence_InputIterator<T, reference> iterator;
    typedef MatlabSequence_InputIterator<T, const_reference> const_iterator;

    MatlabSequence_Cont(mxArray* const seq) : _seq(seq)
    {
      // * assert that we have map type etc.
      /*
      if (!MatlabSequence_Check(seq)) {
	throw std::invalid_argument("a sequence is expected");
      }
      _seq = seq;
      Py_INCREF(_seq);
      */
    }

    ~MatlabSequence_Cont()
    {
    }

    size_type size() const
    {
      //      return static_cast<size_type>(MatlabSequence_Size(_seq));
      return 0; // * todo
    }

    bool empty() const
    {
      return size() == 0;
    }

    iterator begin()
    {
      return iterator(_seq, 0);
    }

    const_iterator begin() const
    {
      return const_iterator(_seq, 0);
    }

    iterator end()
    {
      return iterator(_seq, size());
    }

    const_iterator end() const
    {
      return const_iterator(_seq, size());
    }

    reference operator[](difference_type n)
    {
      return reference(_seq, n);
    }

    const_reference operator[](difference_type n)  const
    {
      return const_reference(_seq, n);
    }

    bool check(bool set_err = true) const
    {
      int s = size();
      for (int i = 0; i < s; ++i) {
	//	swig::SwigVar_PyObject item = MatlabSequence_GetItem(_seq, i);
	mxArray* item; // * todo
	if (!swig::check<value_type>(item)) {
	  if (set_err) {
	    char msg[1024];
	    sprintf(msg, "in sequence element %d", i);
	    SWIG_Error(SWIG_RuntimeError, msg);
	  }
	  return false;
	}
      }
      return true;
    }

  private:
    mxArray* _seq;
  };

}


SWIGINTERN int
SWIG_AsCharPtrAndSize(mxArray* pm, char** cptr, size_t* psize, int *alloc)
{
  if(!mxIsChar(pm) || (mxGetNumberOfElements(pm) != 0 && mxGetM(pm)!=1)) return SWIG_TypeError;
  size_t len=mxGetN(pm);
  static char buf[256];
  int flag = mxGetString(pm,buf,(mwSize)sizeof(buf));
  if(flag) return SWIG_TypeError;

  if (alloc) {
    *cptr = reinterpret_cast< char* >(memcpy((new char[len + 1]), buf, sizeof(char)*(len + 1)));
    *alloc = SWIG_NEWOBJ;
  } else if (cptr)
    *cptr = buf;
  if (psize)
    *psize = len + 1;
  return SWIG_OK;
}


SWIGINTERN int
SWIG_AsPtr_std_string (mxArray* obj, std::string **val) 
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    static int init = 0;
    static swig_type_info* descriptor = 0;
    if (!init) {
      descriptor = SWIG_TypeQuery("std::string" " *");
      init = 1;
    }
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}


SWIGINTERN int
SWIG_AsVal_std_string (mxArray* obj, std::string *val)
{
  std::string* v = (std::string *) 0;
  int res = SWIG_AsPtr_std_string (obj, &v);
  if (!SWIG_IsOK(res)) return res;
  if (v) {
    if (val) *val = *v;
    if (SWIG_IsNewObj(res)) {
      delete v;
      res = SWIG_DelNewMask(res);
    }
    return res;
  }
  return SWIG_ERROR;
}


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERNINLINE mxArray*
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
   mwSize dims[2] = {1,(mwSize)size};
   mxArray* ret = mxCreateCharArray((mwSize)2,dims);
   if(!ret) mexErrMsgIdAndTxt("SWIG:FromCharPtrAndSize","mxCreateCharArray failed");
   mxChar *ret_data = (mxChar *)mxGetData(ret);
   size_t i;
   for(i=0; i<size; ++i) ret_data[i] = carray[i];
   return ret;  
}


SWIGINTERNINLINE mxArray*
SWIG_From_std_string  (const std::string& s)
{
  return SWIG_FromCharPtrAndSize(s.data(), s.size());
}


namespace swig {
  template <> struct traits<std::string > {
    typedef value_category category;
    static const char* type_name() { return"std::string"; }
  };  
  template <>  struct traits_asval<std::string > {   
    typedef std::string value_type;
    static int asval(mxArray* obj, value_type *val) { 
      return SWIG_AsVal_std_string (obj, val);
    }
  };
  template <>  struct traits_from<std::string > {
    typedef std::string value_type;
    static mxArray* from(const value_type& val) {
      return SWIG_From_std_string  (val);
    }
  };
}


namespace swig {
  template <class Matlabseq, class Seq>
  inline void
  assign(const Matlabseq& matlabseq, Seq* seq) {
#ifdef SWIG_STD_NOASSIGN_STL
    typedef typename Matlabseq::value_type value_type;
    typename Matlabseq::const_iterator it = matlabseq.begin();
    for (;it != matlabseq.end(); ++it) {
      seq->insert(seq->end(),(value_type)(*it));
    }
#else
    seq->assign(matlabseq.begin(), matlabseq.end());
#endif
  }

  template <class Seq, class T = typename Seq::value_type >
  struct traits_asptr_stdseq {
    typedef Seq sequence;
    typedef T value_type;
    typedef typename sequence::iterator iterator;

    static int asptr(mxArray* obj, sequence **seq) {
      if (obj && mxGetClassID(obj)==mxCELL_CLASS &&
              mxGetNumberOfDimensions(obj)==2 &&
              mxGetM(obj)==1 && mxGetN(obj)>0 ) {
        // Convert to cell array.
        if (seq) {
          *seq = new sequence();
          int N = mxGetN(obj);
          for (int i=0; i<N; ++i) {
            (*seq)->push_back(swig::as<value_type>(mxGetCell(obj, i)));
          }
          return SWIG_NEWOBJ;
        }
      } else {
	     sequence *p;
       if (SWIG_ConvertPtr(obj,(void**)&p,
                            swig::type_info<sequence>(),0) == SWIG_OK) {
	      if (seq) *seq = p;
	        return SWIG_OLDOBJ;
	      }
      }
      return SWIG_ERROR;
    }
  };

  template <class Seq, class T = typename Seq::value_type >
  struct traits_from_stdseq {
    typedef Seq sequence;
    typedef T value_type;
    typedef typename Seq::size_type size_type;
    typedef typename sequence::const_iterator const_iterator;

    static mxArray* from(const sequence& seq) {







      size_type size = seq.size();
      if (size <= (size_type)INT_MAX) {
        mxArray* c = mxCreateCellMatrix(1,size);
	int i = 0;
	for (const_iterator it = seq.begin();
	     it != seq.end(); ++it, ++i) {
	  mxSetCell(c, i, swig::from<value_type>(*it));
	}
	return c;
      } else {
	SWIG_Error(SWIG_RuntimeError, "swig overflow error: sequence size not valid in matlab");
	return 0;
      }
      return 0;
    }
  };
}


  namespace swig {
    template <class T>
    struct traits_asptr<std::vector<T> >  {
      static int asptr(mxArray* obj, std::vector<T> **vec) {
	return traits_asptr_stdseq<std::vector<T> >::asptr(obj, vec);
      }
    };
    
    template <class T>
    struct traits_from<std::vector<T> > {
      static mxArray* from(const std::vector<T>& vec) {
	return traits_from_stdseq<std::vector<T> >::from(vec);
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector< std::string, std::allocator< std::string > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "std::string" "," "std::allocator< std::string >" " >";
	  }
	};
      }
    
SWIGINTERN std::vector< std::string >::value_type std_vector_Sl_std_string_Sg__pop(std::vector< std::string > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< std::string,std::allocator< std::string > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< std::string >::value_type std_vector_Sl_std_string_Sg__brace(std::vector< std::string > *self,std::vector< std::string >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_std_string_Sg__setbrace(std::vector< std::string > *self,std::vector< std::string >::value_type x,std::vector< std::string >::difference_type i){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_std_string_Sg__append(std::vector< std::string > *self,std::vector< std::string >::value_type x){
      self->push_back(x);
    }

  SWIGINTERNINLINE mxArray* SWIG_From_unsigned_SS_long    (unsigned long value)
    {    
      mxArray* out = mxCreateNumericMatrix(1,1,mxUINT64_CLASS,mxREAL);
      *((uint64_T*)mxGetData(out)) = (uint64_T)value;
      return out;
    }


  SWIGINTERNINLINE mxArray* SWIG_From_unsigned_SS_long_SS_long    (unsigned long long value)
    {    
      mxArray* out = mxCreateNumericMatrix(1,1,mxUINT64_CLASS,mxREAL);
      *((uint64_T*)mxGetData(out)) = (uint64_T)value;
      return out;
    }


SWIGINTERNINLINE mxArray*
SWIG_From_size_t  (size_t value)
{    
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    return SWIG_From_unsigned_SS_long  (static_cast< unsigned long >(value));
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else {
    /* assume sizeof(size_t) <= sizeof(unsigned long long) */
    return SWIG_From_unsigned_SS_long_SS_long  (static_cast< unsigned long long >(value));
  }
#endif
}

SWIGINTERN std::vector< std::string >::iterator std_vector_Sl_std_string_Sg__erase__SWIG_0(std::vector< std::string > *self,std::vector< std::string >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< std::string >::iterator std_vector_Sl_std_string_Sg__erase__SWIG_1(std::vector< std::string > *self,std::vector< std::string >::iterator first,std::vector< std::string >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< std::string >::iterator std_vector_Sl_std_string_Sg__insert__SWIG_0(std::vector< std::string > *self,std::vector< std::string >::iterator pos,std::vector< std::string >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_std_string_Sg__insert__SWIG_1(std::vector< std::string > *self,std::vector< std::string >::iterator pos,std::vector< std::string >::size_type n,std::vector< std::string >::value_type const &x){ self->insert(pos, n, x); }

/* Note : always include headers following the inheritance order */

//Utils
#include "iDynTree/Core/Utils.h"

// Basic math classes
#include "iDynTree/Core/MatrixDynSize.h"
#include "iDynTree/Core/MatrixFixSize.h"
#include "iDynTree/Core/SparseMatrix.h"

#include "iDynTree/Core/VectorDynSize.h"
#include "iDynTree/Core/VectorFixSize.h"

// Basic Vectors: Point Vectors and Spatial Vectors
#include "iDynTree/Core/PositionRaw.h"
#include "iDynTree/Core/PositionSemantics.h"
#include "iDynTree/Core/Position.h"
#include "iDynTree/Core/LinearMotionVector3.h"
#include "iDynTree/Core/LinearForceVector3.h"
#include "iDynTree/Core/AngularMotionVector3.h"
#include "iDynTree/Core/AngularForceVector3.h"
#include "iDynTree/Core/SpatialForceVector.h"
#include "iDynTree/Core/SpatialMotionVector.h"
#include "iDynTree/Core/Twist.h"
#include "iDynTree/Core/Wrench.h"
#include "iDynTree/Core/SpatialMomentum.h"
#include "iDynTree/Core/SpatialAcc.h"
#include "iDynTree/Core/ClassicalAcc.h"
#include "iDynTree/Core/Direction.h"
#include "iDynTree/Core/Axis.h"

// Inertias
#include "iDynTree/Core/RotationalInertiaRaw.h"
#include "iDynTree/Core/SpatialInertiaRaw.h"
#include "iDynTree/Core/SpatialInertia.h"
#include "iDynTree/Core/ArticulatedBodyInertia.h"
#include "iDynTree/Core/InertiaNonLinearParametrization.h"

// Transformations: Rotation and Transform
#include "iDynTree/Core/RotationRaw.h"
#include "iDynTree/Core/RotationSemantics.h"
#include "iDynTree/Core/Rotation.h"
#include "iDynTree/Core/TransformSemantics.h"
#include "iDynTree/Core/Transform.h"
#include "iDynTree/Core/TransformDerivative.h"

// Model related data structures
#include "iDynTree/Model/Indices.h"
#include "iDynTree/Model/LinkState.h"
#include "iDynTree/Model/Link.h"
#include "iDynTree/Model/IJoint.h"
#include "iDynTree/Model/FixedJoint.h"
#include "iDynTree/Model/MovableJointImpl.h"
#include "iDynTree/Model/RevoluteJoint.h"
#include "iDynTree/Model/Traversal.h"
#include "iDynTree/Model/SolidShapes.h"
#include "iDynTree/Model/Model.h"
#include "iDynTree/Model/JointState.h"
#include "iDynTree/Model/FreeFloatingMatrices.h"
#include "iDynTree/Model/FreeFloatingState.h"
#include "iDynTree/Model/ContactWrench.h"

// Kinematics & Dynamics related functions
#include "iDynTree/Model/ForwardKinematics.h"
#include "iDynTree/Model/Dynamics.h"

// Sensors related data structures
#include "iDynTree/Sensors/Sensors.h"
#include "iDynTree/Sensors/SixAxisFTSensor.h"
#include "iDynTree/Sensors/AccelerometerSensor.h"
#include "iDynTree/Sensors/GyroscopeSensor.h"
#include "iDynTree/Sensors/PredictSensorsMeasurements.h"

// Model loading from external formats
#include "iDynTree/ModelIO/URDFModelImport.h"
#include "iDynTree/ModelIO/URDFDofsImport.h"
#include "iDynTree/ModelIO/URDFGenericSensorsImport.h"
#include "iDynTree/ModelIO/ModelLoader.h"

// Estimation related classes
#include "iDynTree/Estimation/ExternalWrenchesEstimation.h"
#include "iDynTree/Estimation/ExtWrenchesAndJointTorquesEstimator.h"
#include "iDynTree/Estimation/SimpleLeggedOdometry.h"
#include "iDynTree/Estimation/BerdyHelper.h"

// Regressors related data structures
#include "iDynTree/Regressors/DynamicsRegressorParameters.h"
#include "iDynTree/Regressors/DynamicsRegressorGenerator.h"

// High level interfaces
#include "iDynTree/KinDynComputations.h"

// Visualization
#include "iDynTree/Visualizer.h"

// Legacy high level interfaces
#include "iDynTree/HighLevel/DynamicsComputations.h"



  namespace swig {
    template <>  struct traits< iDynTree::BerdySensor > {
      typedef pointer_category category;
      static const char* type_name() { return"iDynTree::BerdySensor"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector< iDynTree::BerdySensor, std::allocator< iDynTree::BerdySensor > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "iDynTree::BerdySensor" "," "std::allocator< iDynTree::BerdySensor >" " >";
	  }
	};
      }
    
SWIGINTERN std::vector< iDynTree::BerdySensor >::value_type std_vector_Sl_iDynTree_BerdySensor_Sg__pop(std::vector< iDynTree::BerdySensor > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< iDynTree::BerdySensor,std::allocator< iDynTree::BerdySensor > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< iDynTree::BerdySensor >::value_type std_vector_Sl_iDynTree_BerdySensor_Sg__brace(std::vector< iDynTree::BerdySensor > *self,std::vector< iDynTree::BerdySensor >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_iDynTree_BerdySensor_Sg__setbrace(std::vector< iDynTree::BerdySensor > *self,std::vector< iDynTree::BerdySensor >::value_type x,std::vector< iDynTree::BerdySensor >::difference_type i){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_iDynTree_BerdySensor_Sg__append(std::vector< iDynTree::BerdySensor > *self,std::vector< iDynTree::BerdySensor >::value_type x){
      self->push_back(x);
    }
SWIGINTERN std::vector< iDynTree::BerdySensor >::iterator std_vector_Sl_iDynTree_BerdySensor_Sg__erase__SWIG_0(std::vector< iDynTree::BerdySensor > *self,std::vector< iDynTree::BerdySensor >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< iDynTree::BerdySensor >::iterator std_vector_Sl_iDynTree_BerdySensor_Sg__erase__SWIG_1(std::vector< iDynTree::BerdySensor > *self,std::vector< iDynTree::BerdySensor >::iterator first,std::vector< iDynTree::BerdySensor >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< iDynTree::BerdySensor >::iterator std_vector_Sl_iDynTree_BerdySensor_Sg__insert__SWIG_0(std::vector< iDynTree::BerdySensor > *self,std::vector< iDynTree::BerdySensor >::iterator pos,std::vector< iDynTree::BerdySensor >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_iDynTree_BerdySensor_Sg__insert__SWIG_1(std::vector< iDynTree::BerdySensor > *self,std::vector< iDynTree::BerdySensor >::iterator pos,std::vector< iDynTree::BerdySensor >::size_type n,std::vector< iDynTree::BerdySensor >::value_type const &x){ self->insert(pos, n, x); }

  namespace swig {
    template <>  struct traits< iDynTree::BerdyDynamicVariable > {
      typedef pointer_category category;
      static const char* type_name() { return"iDynTree::BerdyDynamicVariable"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector< iDynTree::BerdyDynamicVariable, std::allocator< iDynTree::BerdyDynamicVariable > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "iDynTree::BerdyDynamicVariable" "," "std::allocator< iDynTree::BerdyDynamicVariable >" " >";
	  }
	};
      }
    
SWIGINTERN std::vector< iDynTree::BerdyDynamicVariable >::value_type std_vector_Sl_iDynTree_BerdyDynamicVariable_Sg__pop(std::vector< iDynTree::BerdyDynamicVariable > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< iDynTree::BerdyDynamicVariable,std::allocator< iDynTree::BerdyDynamicVariable > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< iDynTree::BerdyDynamicVariable >::value_type std_vector_Sl_iDynTree_BerdyDynamicVariable_Sg__brace(std::vector< iDynTree::BerdyDynamicVariable > *self,std::vector< iDynTree::BerdyDynamicVariable >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_iDynTree_BerdyDynamicVariable_Sg__setbrace(std::vector< iDynTree::BerdyDynamicVariable > *self,std::vector< iDynTree::BerdyDynamicVariable >::value_type x,std::vector< iDynTree::BerdyDynamicVariable >::difference_type i){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_iDynTree_BerdyDynamicVariable_Sg__append(std::vector< iDynTree::BerdyDynamicVariable > *self,std::vector< iDynTree::BerdyDynamicVariable >::value_type x){
      self->push_back(x);
    }
SWIGINTERN std::vector< iDynTree::BerdyDynamicVariable >::iterator std_vector_Sl_iDynTree_BerdyDynamicVariable_Sg__erase__SWIG_0(std::vector< iDynTree::BerdyDynamicVariable > *self,std::vector< iDynTree::BerdyDynamicVariable >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< iDynTree::BerdyDynamicVariable >::iterator std_vector_Sl_iDynTree_BerdyDynamicVariable_Sg__erase__SWIG_1(std::vector< iDynTree::BerdyDynamicVariable > *self,std::vector< iDynTree::BerdyDynamicVariable >::iterator first,std::vector< iDynTree::BerdyDynamicVariable >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< iDynTree::BerdyDynamicVariable >::iterator std_vector_Sl_iDynTree_BerdyDynamicVariable_Sg__insert__SWIG_0(std::vector< iDynTree::BerdyDynamicVariable > *self,std::vector< iDynTree::BerdyDynamicVariable >::iterator pos,std::vector< iDynTree::BerdyDynamicVariable >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_iDynTree_BerdyDynamicVariable_Sg__insert__SWIG_1(std::vector< iDynTree::BerdyDynamicVariable > *self,std::vector< iDynTree::BerdyDynamicVariable >::iterator pos,std::vector< iDynTree::BerdyDynamicVariable >::size_type n,std::vector< iDynTree::BerdyDynamicVariable >::value_type const &x){ self->insert(pos, n, x); }

#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERN int
SWIG_AsVal_unsigned_SS_int (mxArray* obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned int >(v);
    }
  }  
  return res;
}


  SWIGINTERNINLINE mxArray* SWIG_From_double    (double value)
    {    
      return mxCreateDoubleScalar(value);
    }


  SWIGINTERN int SWIG_AsVal_double (mxArray* pm, double* val)
    {
      if(!mxIsDouble(pm) || mxGetNumberOfElements(pm)!=1) return SWIG_TypeError;
      if (val) *val = mxGetScalar(pm);
      return SWIG_OK;
    }


SWIGINTERNINLINE mxArray*
SWIG_From_unsigned_SS_int  (unsigned int value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}

SWIGINTERN mxArray *iDynTree_MatrixDynSize_toMatlab(iDynTree::MatrixDynSize const *self){
        mxArray *p  = mxCreateDoubleMatrix(self->rows(), self->cols(), mxREAL);
        double* d = static_cast<double*>(mxGetData(p));
        self->fillColMajorBuffer(d); // Column-major
        return p;
    }
SWIGINTERN void iDynTree_MatrixDynSize_fromMatlab(iDynTree::MatrixDynSize *self,mxArray *in){
        // check size
        const mwSize * dims = mxGetDimensions(in);
        size_t rows = self->rows();
        size_t cols = self->cols();
        if (dims[0] != rows || dims[1] != cols)
        {
            self->resize(dims[0], dims[1]);
            mexWarnMsgIdAndTxt("iDynTree:Core:perfomance", "Resizing iDynTree vector to (%d,%d)", dims[0], dims[1]);
        }
        // Update rows and cols
        rows = self->rows();
        cols = self->cols();

        if (mxIsSparse(in))
        {
            /*@SWIG:/Users/traversaro/src/codyco-superbuild/libraries/iDynTree/bindings/./matlab/matlab_matvec.i,43,MATRIXSPARSECOPY@*/
    //getting pointer to sparse structure
    mwIndex* ir = mxGetIr(in);
    mwIndex* jc = mxGetJc(in);
    double *data = mxGetPr(in);

    //zero the matrix (iDynTree matrix is dense)
    self->zero();
    for (mwIndex col = 0; col < cols; col++)
    {
        /*
            jc[col] contains information about the nonzero values.
            jc[col + 1] - jc[col] = number of nonzero elements in column col
            These nonzero elements can be access with a for loop starting at
            jc[col] and ending at jc[col + 1] - 1.

        */
        mwIndex startingRowIndex = jc[col];
        mwIndex endRowIndex = jc[col + 1];
        if (startingRowIndex == endRowIndex)
        {
            //no elements in this column
            continue;
        }
        for (mwIndex currentIndex = startingRowIndex; currentIndex < endRowIndex; currentIndex++)
        {
            //access the element
            mwIndex row = ir[currentIndex];
            self->operator()(row, col) = data[currentIndex];
        }
    }
/*@SWIG@*/
        } else {
            double* d = static_cast<double*>(mxGetData(in));
            for (size_t row = 0; row < rows; row++)
            {
                for (size_t col = 0; col < cols; col++)
                {
                    self->operator()(row,col) = d[col*rows + row];
                }
            }
            return;
        }
    }

SWIGINTERNINLINE mxArray*
SWIG_From_int  (int value)
{    
  return SWIG_From_long  (value);
}


SWIGINTERN int
SWIG_AsVal_bool (mxArray* pm, bool *val)
{
   if(!mxIsLogicalScalar(pm)) return SWIG_TypeError;
   if (val) *val = mxIsLogicalScalarTrue(pm);
   return SWIG_OK;
}

SWIGINTERN mxArray *iDynTree_SparseMatrix_toMatlab(iDynTree::SparseMatrix const *self){
        mxArray *p = mxCreateSparse(self->rows(), self->columns(),
                                    self->numberOfNonZeros(), mxREAL);
        if (!p) return 0;

        mwIndex* ir = mxGetIr(p);
        mwIndex* jc = mxGetJc(p);
        double *data = mxGetPr(p);

        //for compatibility with the interface I need to create a wrapper of int*
        //not of mwIndex*
        int *tempIr = new int[self->numberOfNonZeros()];
        if (!tempIr) return p;

        int *tempJc = new int[self->columns() + 1];
        if (!tempJc) {
            delete [] tempJc;
            return p;
        }


        self->convertToColumnMajor(data, tempIr, tempJc);

        //copy back into real arrays
        for (unsigned i = 0; i < self->numberOfNonZeros(); ++i) {
            ir[i] = tempIr[i];
        }
        for (unsigned i = 0; i < self->columns() + 1; ++i) {
            jc[i] = tempJc[i];
        }
        //delete buffers
        delete [] tempIr;
        delete [] tempJc;

        return p;
    }
SWIGINTERN mxArray *iDynTree_SparseMatrix_toMatlabDense(iDynTree::SparseMatrix const *self){
        mxArray *p  = mxCreateDoubleMatrix(self->rows(), self->columns(), mxREAL);
        double* d = static_cast<double*>(mxGetData(p));
        //mapping output matrix to dense 
        memset(d, 0, sizeof(double) * self->rows() * self->columns());
        //mapping output matrix to dense
        for (iDynTree::SparseMatrix::const_iterator it(self->begin());
             it != self->end(); ++it) {
            d[self->rows() * it->column + it->row] = it->value;

        }
        return p;
    }
SWIGINTERN void iDynTree_SparseMatrix_fromMatlab(iDynTree::SparseMatrix *self,mxArray *in){
        // check size
        const mwSize * dims = mxGetDimensions(in);
        size_t rows = self->rows();
        size_t cols = self->columns();
        if (dims[0] != rows || dims[1] == cols)
        {
            self->resize(dims[0], dims[1]);
            mexWarnMsgIdAndTxt("iDynTree:Core:perfomance", "Resizing iDynTree vector to (%d,%d)", rows, cols);
        }

        if (mxIsSparse(in))
        {
            mwIndex* ir = mxGetIr(in);
            mwIndex* jc = mxGetJc(in);
            double *data = mxGetPr(in);
            const mwSize * dims = mxGetDimensions(in);
            mwIndex nnz = jc[dims[1]];

            int *tempIr = new int[nnz];
            if (!tempIr) return;

            int *tempJc = new int[dims[1] + 1];
            if (!tempJc) {
                delete [] tempIr;
                return;
            }

            for (unsigned i = 0; i < nnz; ++i) {
                tempIr[i] = ir[i];
            }

            for (unsigned i = 0; i < dims[1] + 1; ++i) {
                tempJc[i] = jc[i];
            }

            self->convertFromColumnMajor(dims[0], dims[1], 
                                          (unsigned)nnz,
                                          data, tempIr, tempJc);

            delete [] tempIr;
            delete [] tempJc;

        } else {
            double* d = static_cast<double*>(mxGetData(in));
            //for now very slow
            for (size_t row = 0; row < rows; row++)
            {
                for (size_t col = 0; col < cols; col++)
                {
                    self->operator()(row, col) = d[col * rows + row];
                }
            }
            return;
        }
    }
SWIGINTERN mxArray *iDynTree_VectorDynSize_toMatlab(iDynTree::VectorDynSize const *self){
        mxArray *p  = mxCreateDoubleMatrix(self->size(), 1, mxREAL);
        double* d = static_cast<double*>(mxGetData(p));
        self->fillBuffer(d); // Column-major
        return p;
    }
SWIGINTERN void iDynTree_VectorDynSize_fromMatlab(iDynTree::VectorDynSize *self,mxArray *in){
        // check size
        const mwSize * dims = mxGetDimensions(in);
        self->size();
        if (( dims[0] == 1 || dims[1] == 1))
        {
            // Get the size of the input vector
            size_t inSize;
            if( dims[0] == 1 )
            {
                inSize = dims[1];
            }
            else
            {
                inSize = dims[0];
            }

            // If the input vector has a size different
            // from the one of the iDynTree::VectorDynSize,
            // we resize iDynTree::VectorDynSize
            if( self->size() != inSize )
            {
                self->resize(inSize);
                mexWarnMsgIdAndTxt("iDynTree:Core:perfomance", "Resizing iDynTree vector to %d", inSize);
            }

            if (mxIsSparse(in))
            {
                /*@SWIG:/Users/traversaro/src/codyco-superbuild/libraries/iDynTree/bindings/./matlab/matlab_matvec.i,6,VECTORSPARSECOPY@*/
    //getting pointer to sparse structure
    mwIndex* ir = mxGetIr(in);
    mwIndex* jc = mxGetJc(in);
    double *data = mxGetPr(in);

    //If dims[1] == 1 assume it is a column vector (or a 1 element vector)
    bool isColumnVector = (dims[1] == 1);

    //zero the matrix (iDynTree vector is dense)
    self->zero();
    for (mwIndex col = 0; col < dims[1]; col++)
    {
        /*
            jc[col] contains information about the nonzero values.
            jc[col + 1] - jc[col] = number of nonzero elements in column col
            These nonzero elements can be access with a for loop starting at
            jc[col] and ending at jc[col + 1] - 1.

        */
        mwIndex startingRowIndex = jc[col];
        mwIndex endRowIndex = jc[col + 1];
        if (startingRowIndex == endRowIndex)
        {
            //no elements in this column
            continue;
        }
        for (mwIndex currentIndex = startingRowIndex; currentIndex < endRowIndex; currentIndex++)
        {
            //access the element
            mwIndex row = ir[currentIndex];
            //iDynTree has only one size.
            self->operator()(isColumnVector ? row : col) = data[currentIndex];
        }
    }
/*@SWIG@*/
            } else {
                double* d = static_cast<double*>(mxGetData(in));
                double* selfData = self->data();
                for(size_t i=0; i < inSize; i++ )
                {
                    selfData[i] = d[i];
                }
            }
            return;
        }
    }
SWIGINTERN mxArray *iDynTree_MatrixFixSize_Sl_1_Sc_6_Sg__toMatlab(iDynTree::MatrixFixSize< 1,6 > const *self){
        mxArray *p  = mxCreateDoubleMatrix(self->rows(), self->cols(), mxREAL);
        double* d = static_cast<double*>(mxGetData(p));
        self->fillColMajorBuffer(d); // Column-major
        return p;
    }
SWIGINTERN void iDynTree_MatrixFixSize_Sl_1_Sc_6_Sg__fromMatlab(iDynTree::MatrixFixSize< 1,6 > *self,mxArray *in){
        // check size
        const mwSize * dims = mxGetDimensions(in);
        size_t fixValRows = self->rows();
        size_t fixValCols = self->cols();
        if (dims[0] == fixValRows && dims[1] == fixValCols)
        {
            if (mxIsSparse(in))
            {
                /*@SWIG:/Users/traversaro/src/codyco-superbuild/libraries/iDynTree/bindings/./matlab/matlab_matvec.i,43,MATRIXSPARSECOPY@*/
    //getting pointer to sparse structure
    mwIndex* ir = mxGetIr(in);
    mwIndex* jc = mxGetJc(in);
    double *data = mxGetPr(in);

    //zero the matrix (iDynTree matrix is dense)
    self->zero();
    for (mwIndex col = 0; col < fixValCols; col++)
    {
        /*
            jc[col] contains information about the nonzero values.
            jc[col + 1] - jc[col] = number of nonzero elements in column col
            These nonzero elements can be access with a for loop starting at
            jc[col] and ending at jc[col + 1] - 1.

        */
        mwIndex startingRowIndex = jc[col];
        mwIndex endRowIndex = jc[col + 1];
        if (startingRowIndex == endRowIndex)
        {
            //no elements in this column
            continue;
        }
        for (mwIndex currentIndex = startingRowIndex; currentIndex < endRowIndex; currentIndex++)
        {
            //access the element
            mwIndex row = ir[currentIndex];
            self->operator()(row, col) = data[currentIndex];
        }
    }
/*@SWIG@*/
            } else {
                double* d = static_cast<double*>(mxGetData(in));
                for (size_t row = 0; row < fixValRows; row++)
                {
                    for (size_t col = 0; col < fixValCols; col++)
                    {
                        self->operator()(row,col) = d[col*fixValRows + row];
                    }
                }
                return;
            }
         } else {
            mexErrMsgIdAndTxt("iDynTree:Core:wrongDimension",
              "Wrong matrix size. Matlab size: (%d,%d). iDynTree size: (%d,%d)", dims[0], dims[1], fixValRows, fixValCols);
        }
    }
SWIGINTERN mxArray *iDynTree_MatrixFixSize_Sl_2_Sc_3_Sg__toMatlab(iDynTree::MatrixFixSize< 2,3 > const *self){
        mxArray *p  = mxCreateDoubleMatrix(self->rows(), self->cols(), mxREAL);
        double* d = static_cast<double*>(mxGetData(p));
        self->fillColMajorBuffer(d); // Column-major
        return p;
    }
SWIGINTERN void iDynTree_MatrixFixSize_Sl_2_Sc_3_Sg__fromMatlab(iDynTree::MatrixFixSize< 2,3 > *self,mxArray *in){
        // check size
        const mwSize * dims = mxGetDimensions(in);
        size_t fixValRows = self->rows();
        size_t fixValCols = self->cols();
        if (dims[0] == fixValRows && dims[1] == fixValCols)
        {
            if (mxIsSparse(in))
            {
                /*@SWIG:/Users/traversaro/src/codyco-superbuild/libraries/iDynTree/bindings/./matlab/matlab_matvec.i,43,MATRIXSPARSECOPY@*/
    //getting pointer to sparse structure
    mwIndex* ir = mxGetIr(in);
    mwIndex* jc = mxGetJc(in);
    double *data = mxGetPr(in);

    //zero the matrix (iDynTree matrix is dense)
    self->zero();
    for (mwIndex col = 0; col < fixValCols; col++)
    {
        /*
            jc[col] contains information about the nonzero values.
            jc[col + 1] - jc[col] = number of nonzero elements in column col
            These nonzero elements can be access with a for loop starting at
            jc[col] and ending at jc[col + 1] - 1.

        */
        mwIndex startingRowIndex = jc[col];
        mwIndex endRowIndex = jc[col + 1];
        if (startingRowIndex == endRowIndex)
        {
            //no elements in this column
            continue;
        }
        for (mwIndex currentIndex = startingRowIndex; currentIndex < endRowIndex; currentIndex++)
        {
            //access the element
            mwIndex row = ir[currentIndex];
            self->operator()(row, col) = data[currentIndex];
        }
    }
/*@SWIG@*/
            } else {
                double* d = static_cast<double*>(mxGetData(in));
                for (size_t row = 0; row < fixValRows; row++)
                {
                    for (size_t col = 0; col < fixValCols; col++)
                    {
                        self->operator()(row,col) = d[col*fixValRows + row];
                    }
                }
                return;
            }
         } else {
            mexErrMsgIdAndTxt("iDynTree:Core:wrongDimension",
              "Wrong matrix size. Matlab size: (%d,%d). iDynTree size: (%d,%d)", dims[0], dims[1], fixValRows, fixValCols);
        }
    }
SWIGINTERN mxArray *iDynTree_MatrixFixSize_Sl_3_Sc_3_Sg__toMatlab(iDynTree::MatrixFixSize< 3,3 > const *self){
        mxArray *p  = mxCreateDoubleMatrix(self->rows(), self->cols(), mxREAL);
        double* d = static_cast<double*>(mxGetData(p));
        self->fillColMajorBuffer(d); // Column-major
        return p;
    }
SWIGINTERN void iDynTree_MatrixFixSize_Sl_3_Sc_3_Sg__fromMatlab(iDynTree::MatrixFixSize< 3,3 > *self,mxArray *in){
        // check size
        const mwSize * dims = mxGetDimensions(in);
        size_t fixValRows = self->rows();
        size_t fixValCols = self->cols();
        if (dims[0] == fixValRows && dims[1] == fixValCols)
        {
            if (mxIsSparse(in))
            {
                /*@SWIG:/Users/traversaro/src/codyco-superbuild/libraries/iDynTree/bindings/./matlab/matlab_matvec.i,43,MATRIXSPARSECOPY@*/
    //getting pointer to sparse structure
    mwIndex* ir = mxGetIr(in);
    mwIndex* jc = mxGetJc(in);
    double *data = mxGetPr(in);

    //zero the matrix (iDynTree matrix is dense)
    self->zero();
    for (mwIndex col = 0; col < fixValCols; col++)
    {
        /*
            jc[col] contains information about the nonzero values.
            jc[col + 1] - jc[col] = number of nonzero elements in column col
            These nonzero elements can be access with a for loop starting at
            jc[col] and ending at jc[col + 1] - 1.

        */
        mwIndex startingRowIndex = jc[col];
        mwIndex endRowIndex = jc[col + 1];
        if (startingRowIndex == endRowIndex)
        {
            //no elements in this column
            continue;
        }
        for (mwIndex currentIndex = startingRowIndex; currentIndex < endRowIndex; currentIndex++)
        {
            //access the element
            mwIndex row = ir[currentIndex];
            self->operator()(row, col) = data[currentIndex];
        }
    }
/*@SWIG@*/
            } else {
                double* d = static_cast<double*>(mxGetData(in));
                for (size_t row = 0; row < fixValRows; row++)
                {
                    for (size_t col = 0; col < fixValCols; col++)
                    {
                        self->operator()(row,col) = d[col*fixValRows + row];
                    }
                }
                return;
            }
         } else {
            mexErrMsgIdAndTxt("iDynTree:Core:wrongDimension",
              "Wrong matrix size. Matlab size: (%d,%d). iDynTree size: (%d,%d)", dims[0], dims[1], fixValRows, fixValCols);
        }
    }
SWIGINTERN mxArray *iDynTree_MatrixFixSize_Sl_4_Sc_4_Sg__toMatlab(iDynTree::MatrixFixSize< 4,4 > const *self){
        mxArray *p  = mxCreateDoubleMatrix(self->rows(), self->cols(), mxREAL);
        double* d = static_cast<double*>(mxGetData(p));
        self->fillColMajorBuffer(d); // Column-major
        return p;
    }
SWIGINTERN void iDynTree_MatrixFixSize_Sl_4_Sc_4_Sg__fromMatlab(iDynTree::MatrixFixSize< 4,4 > *self,mxArray *in){
        // check size
        const mwSize * dims = mxGetDimensions(in);
        size_t fixValRows = self->rows();
        size_t fixValCols = self->cols();
        if (dims[0] == fixValRows && dims[1] == fixValCols)
        {
            if (mxIsSparse(in))
            {
                /*@SWIG:/Users/traversaro/src/codyco-superbuild/libraries/iDynTree/bindings/./matlab/matlab_matvec.i,43,MATRIXSPARSECOPY@*/
    //getting pointer to sparse structure
    mwIndex* ir = mxGetIr(in);
    mwIndex* jc = mxGetJc(in);
    double *data = mxGetPr(in);

    //zero the matrix (iDynTree matrix is dense)
    self->zero();
    for (mwIndex col = 0; col < fixValCols; col++)
    {
        /*
            jc[col] contains information about the nonzero values.
            jc[col + 1] - jc[col] = number of nonzero elements in column col
            These nonzero elements can be access with a for loop starting at
            jc[col] and ending at jc[col + 1] - 1.

        */
        mwIndex startingRowIndex = jc[col];
        mwIndex endRowIndex = jc[col + 1];
        if (startingRowIndex == endRowIndex)
        {
            //no elements in this column
            continue;
        }
        for (mwIndex currentIndex = startingRowIndex; currentIndex < endRowIndex; currentIndex++)
        {
            //access the element
            mwIndex row = ir[currentIndex];
            self->operator()(row, col) = data[currentIndex];
        }
    }
/*@SWIG@*/
            } else {
                double* d = static_cast<double*>(mxGetData(in));
                for (size_t row = 0; row < fixValRows; row++)
                {
                    for (size_t col = 0; col < fixValCols; col++)
                    {
                        self->operator()(row,col) = d[col*fixValRows + row];
                    }
                }
                return;
            }
         } else {
            mexErrMsgIdAndTxt("iDynTree:Core:wrongDimension",
              "Wrong matrix size. Matlab size: (%d,%d). iDynTree size: (%d,%d)", dims[0], dims[1], fixValRows, fixValCols);
        }
    }
SWIGINTERN mxArray *iDynTree_MatrixFixSize_Sl_6_Sc_6_Sg__toMatlab(iDynTree::MatrixFixSize< 6,6 > const *self){
        mxArray *p  = mxCreateDoubleMatrix(self->rows(), self->cols(), mxREAL);
        double* d = static_cast<double*>(mxGetData(p));
        self->fillColMajorBuffer(d); // Column-major
        return p;
    }
SWIGINTERN void iDynTree_MatrixFixSize_Sl_6_Sc_6_Sg__fromMatlab(iDynTree::MatrixFixSize< 6,6 > *self,mxArray *in){
        // check size
        const mwSize * dims = mxGetDimensions(in);
        size_t fixValRows = self->rows();
        size_t fixValCols = self->cols();
        if (dims[0] == fixValRows && dims[1] == fixValCols)
        {
            if (mxIsSparse(in))
            {
                /*@SWIG:/Users/traversaro/src/codyco-superbuild/libraries/iDynTree/bindings/./matlab/matlab_matvec.i,43,MATRIXSPARSECOPY@*/
    //getting pointer to sparse structure
    mwIndex* ir = mxGetIr(in);
    mwIndex* jc = mxGetJc(in);
    double *data = mxGetPr(in);

    //zero the matrix (iDynTree matrix is dense)
    self->zero();
    for (mwIndex col = 0; col < fixValCols; col++)
    {
        /*
            jc[col] contains information about the nonzero values.
            jc[col + 1] - jc[col] = number of nonzero elements in column col
            These nonzero elements can be access with a for loop starting at
            jc[col] and ending at jc[col + 1] - 1.

        */
        mwIndex startingRowIndex = jc[col];
        mwIndex endRowIndex = jc[col + 1];
        if (startingRowIndex == endRowIndex)
        {
            //no elements in this column
            continue;
        }
        for (mwIndex currentIndex = startingRowIndex; currentIndex < endRowIndex; currentIndex++)
        {
            //access the element
            mwIndex row = ir[currentIndex];
            self->operator()(row, col) = data[currentIndex];
        }
    }
/*@SWIG@*/
            } else {
                double* d = static_cast<double*>(mxGetData(in));
                for (size_t row = 0; row < fixValRows; row++)
                {
                    for (size_t col = 0; col < fixValCols; col++)
                    {
                        self->operator()(row,col) = d[col*fixValRows + row];
                    }
                }
                return;
            }
         } else {
            mexErrMsgIdAndTxt("iDynTree:Core:wrongDimension",
              "Wrong matrix size. Matlab size: (%d,%d). iDynTree size: (%d,%d)", dims[0], dims[1], fixValRows, fixValCols);
        }
    }
SWIGINTERN mxArray *iDynTree_MatrixFixSize_Sl_6_Sc_10_Sg__toMatlab(iDynTree::MatrixFixSize< 6,10 > const *self){
        mxArray *p  = mxCreateDoubleMatrix(self->rows(), self->cols(), mxREAL);
        double* d = static_cast<double*>(mxGetData(p));
        self->fillColMajorBuffer(d); // Column-major
        return p;
    }
SWIGINTERN void iDynTree_MatrixFixSize_Sl_6_Sc_10_Sg__fromMatlab(iDynTree::MatrixFixSize< 6,10 > *self,mxArray *in){
        // check size
        const mwSize * dims = mxGetDimensions(in);
        size_t fixValRows = self->rows();
        size_t fixValCols = self->cols();
        if (dims[0] == fixValRows && dims[1] == fixValCols)
        {
            if (mxIsSparse(in))
            {
                /*@SWIG:/Users/traversaro/src/codyco-superbuild/libraries/iDynTree/bindings/./matlab/matlab_matvec.i,43,MATRIXSPARSECOPY@*/
    //getting pointer to sparse structure
    mwIndex* ir = mxGetIr(in);
    mwIndex* jc = mxGetJc(in);
    double *data = mxGetPr(in);

    //zero the matrix (iDynTree matrix is dense)
    self->zero();
    for (mwIndex col = 0; col < fixValCols; col++)
    {
        /*
            jc[col] contains information about the nonzero values.
            jc[col + 1] - jc[col] = number of nonzero elements in column col
            These nonzero elements can be access with a for loop starting at
            jc[col] and ending at jc[col + 1] - 1.

        */
        mwIndex startingRowIndex = jc[col];
        mwIndex endRowIndex = jc[col + 1];
        if (startingRowIndex == endRowIndex)
        {
            //no elements in this column
            continue;
        }
        for (mwIndex currentIndex = startingRowIndex; currentIndex < endRowIndex; currentIndex++)
        {
            //access the element
            mwIndex row = ir[currentIndex];
            self->operator()(row, col) = data[currentIndex];
        }
    }
/*@SWIG@*/
            } else {
                double* d = static_cast<double*>(mxGetData(in));
                for (size_t row = 0; row < fixValRows; row++)
                {
                    for (size_t col = 0; col < fixValCols; col++)
                    {
                        self->operator()(row,col) = d[col*fixValRows + row];
                    }
                }
                return;
            }
         } else {
            mexErrMsgIdAndTxt("iDynTree:Core:wrongDimension",
              "Wrong matrix size. Matlab size: (%d,%d). iDynTree size: (%d,%d)", dims[0], dims[1], fixValRows, fixValCols);
        }
    }
SWIGINTERN mxArray *iDynTree_MatrixFixSize_Sl_10_Sc_16_Sg__toMatlab(iDynTree::MatrixFixSize< 10,16 > const *self){
        mxArray *p  = mxCreateDoubleMatrix(self->rows(), self->cols(), mxREAL);
        double* d = static_cast<double*>(mxGetData(p));
        self->fillColMajorBuffer(d); // Column-major
        return p;
    }
SWIGINTERN void iDynTree_MatrixFixSize_Sl_10_Sc_16_Sg__fromMatlab(iDynTree::MatrixFixSize< 10,16 > *self,mxArray *in){
        // check size
        const mwSize * dims = mxGetDimensions(in);
        size_t fixValRows = self->rows();
        size_t fixValCols = self->cols();
        if (dims[0] == fixValRows && dims[1] == fixValCols)
        {
            if (mxIsSparse(in))
            {
                /*@SWIG:/Users/traversaro/src/codyco-superbuild/libraries/iDynTree/bindings/./matlab/matlab_matvec.i,43,MATRIXSPARSECOPY@*/
    //getting pointer to sparse structure
    mwIndex* ir = mxGetIr(in);
    mwIndex* jc = mxGetJc(in);
    double *data = mxGetPr(in);

    //zero the matrix (iDynTree matrix is dense)
    self->zero();
    for (mwIndex col = 0; col < fixValCols; col++)
    {
        /*
            jc[col] contains information about the nonzero values.
            jc[col + 1] - jc[col] = number of nonzero elements in column col
            These nonzero elements can be access with a for loop starting at
            jc[col] and ending at jc[col + 1] - 1.

        */
        mwIndex startingRowIndex = jc[col];
        mwIndex endRowIndex = jc[col + 1];
        if (startingRowIndex == endRowIndex)
        {
            //no elements in this column
            continue;
        }
        for (mwIndex currentIndex = startingRowIndex; currentIndex < endRowIndex; currentIndex++)
        {
            //access the element
            mwIndex row = ir[currentIndex];
            self->operator()(row, col) = data[currentIndex];
        }
    }
/*@SWIG@*/
            } else {
                double* d = static_cast<double*>(mxGetData(in));
                for (size_t row = 0; row < fixValRows; row++)
                {
                    for (size_t col = 0; col < fixValCols; col++)
                    {
                        self->operator()(row,col) = d[col*fixValRows + row];
                    }
                }
                return;
            }
         } else {
            mexErrMsgIdAndTxt("iDynTree:Core:wrongDimension",
              "Wrong matrix size. Matlab size: (%d,%d). iDynTree size: (%d,%d)", dims[0], dims[1], fixValRows, fixValCols);
        }
    }
SWIGINTERN mxArray *iDynTree_VectorFixSize_Sl_3_Sg__toMatlab(iDynTree::VectorFixSize< 3 > const *self){
        mxArray *p  = mxCreateDoubleMatrix(self->size(), 1, mxREAL);
        double* d = static_cast<double*>(mxGetData(p));
        self->fillBuffer(d); // Column-major
        return p;
    }
SWIGINTERN void iDynTree_VectorFixSize_Sl_3_Sg__fromMatlab(iDynTree::VectorFixSize< 3 > *self,mxArray *in){
        // check size
        const mwSize * dims = mxGetDimensions(in);
        size_t fixValSize = self->size();
        size_t nonSingletonDimension = (dims[0] == 1 ? dims[1] : dims[0]);

        if (nonSingletonDimension == fixValSize)
        {
            if (mxIsSparse(in))
            {
                /*@SWIG:/Users/traversaro/src/codyco-superbuild/libraries/iDynTree/bindings/./matlab/matlab_matvec.i,6,VECTORSPARSECOPY@*/
    //getting pointer to sparse structure
    mwIndex* ir = mxGetIr(in);
    mwIndex* jc = mxGetJc(in);
    double *data = mxGetPr(in);

    //If dims[1] == 1 assume it is a column vector (or a 1 element vector)
    bool isColumnVector = (dims[1] == 1);

    //zero the matrix (iDynTree vector is dense)
    self->zero();
    for (mwIndex col = 0; col < dims[1]; col++)
    {
        /*
            jc[col] contains information about the nonzero values.
            jc[col + 1] - jc[col] = number of nonzero elements in column col
            These nonzero elements can be access with a for loop starting at
            jc[col] and ending at jc[col + 1] - 1.

        */
        mwIndex startingRowIndex = jc[col];
        mwIndex endRowIndex = jc[col + 1];
        if (startingRowIndex == endRowIndex)
        {
            //no elements in this column
            continue;
        }
        for (mwIndex currentIndex = startingRowIndex; currentIndex < endRowIndex; currentIndex++)
        {
            //access the element
            mwIndex row = ir[currentIndex];
            //iDynTree has only one size.
            self->operator()(isColumnVector ? row : col) = data[currentIndex];
        }
    }
/*@SWIG@*/
            } else {
                double* d = static_cast<double*>(mxGetData(in));
                double* selfData = self->data();
                for(size_t i=0; i < fixValSize; i++ )
                {
                    selfData[i] = d[i];
                }
            }
            return;
        } else {
            mexErrMsgIdAndTxt("iDynTree:Core:wrongDimension",
              "Wrong vector size. Matlab size: %d. iDynTree size: %d", nonSingletonDimension, fixValSize);
        }
    }
SWIGINTERN mxArray *iDynTree_VectorFixSize_Sl_4_Sg__toMatlab(iDynTree::VectorFixSize< 4 > const *self){
        mxArray *p  = mxCreateDoubleMatrix(self->size(), 1, mxREAL);
        double* d = static_cast<double*>(mxGetData(p));
        self->fillBuffer(d); // Column-major
        return p;
    }
SWIGINTERN void iDynTree_VectorFixSize_Sl_4_Sg__fromMatlab(iDynTree::VectorFixSize< 4 > *self,mxArray *in){
        // check size
        const mwSize * dims = mxGetDimensions(in);
        size_t fixValSize = self->size();
        size_t nonSingletonDimension = (dims[0] == 1 ? dims[1] : dims[0]);

        if (nonSingletonDimension == fixValSize)
        {
            if (mxIsSparse(in))
            {
                /*@SWIG:/Users/traversaro/src/codyco-superbuild/libraries/iDynTree/bindings/./matlab/matlab_matvec.i,6,VECTORSPARSECOPY@*/
    //getting pointer to sparse structure
    mwIndex* ir = mxGetIr(in);
    mwIndex* jc = mxGetJc(in);
    double *data = mxGetPr(in);

    //If dims[1] == 1 assume it is a column vector (or a 1 element vector)
    bool isColumnVector = (dims[1] == 1);

    //zero the matrix (iDynTree vector is dense)
    self->zero();
    for (mwIndex col = 0; col < dims[1]; col++)
    {
        /*
            jc[col] contains information about the nonzero values.
            jc[col + 1] - jc[col] = number of nonzero elements in column col
            These nonzero elements can be access with a for loop starting at
            jc[col] and ending at jc[col + 1] - 1.

        */
        mwIndex startingRowIndex = jc[col];
        mwIndex endRowIndex = jc[col + 1];
        if (startingRowIndex == endRowIndex)
        {
            //no elements in this column
            continue;
        }
        for (mwIndex currentIndex = startingRowIndex; currentIndex < endRowIndex; currentIndex++)
        {
            //access the element
            mwIndex row = ir[currentIndex];
            //iDynTree has only one size.
            self->operator()(isColumnVector ? row : col) = data[currentIndex];
        }
    }
/*@SWIG@*/
            } else {
                double* d = static_cast<double*>(mxGetData(in));
                double* selfData = self->data();
                for(size_t i=0; i < fixValSize; i++ )
                {
                    selfData[i] = d[i];
                }
            }
            return;
        } else {
            mexErrMsgIdAndTxt("iDynTree:Core:wrongDimension",
              "Wrong vector size. Matlab size: %d. iDynTree size: %d", nonSingletonDimension, fixValSize);
        }
    }
SWIGINTERN mxArray *iDynTree_VectorFixSize_Sl_6_Sg__toMatlab(iDynTree::VectorFixSize< 6 > const *self){
        mxArray *p  = mxCreateDoubleMatrix(self->size(), 1, mxREAL);
        double* d = static_cast<double*>(mxGetData(p));
        self->fillBuffer(d); // Column-major
        return p;
    }
SWIGINTERN void iDynTree_VectorFixSize_Sl_6_Sg__fromMatlab(iDynTree::VectorFixSize< 6 > *self,mxArray *in){
        // check size
        const mwSize * dims = mxGetDimensions(in);
        size_t fixValSize = self->size();
        size_t nonSingletonDimension = (dims[0] == 1 ? dims[1] : dims[0]);

        if (nonSingletonDimension == fixValSize)
        {
            if (mxIsSparse(in))
            {
                /*@SWIG:/Users/traversaro/src/codyco-superbuild/libraries/iDynTree/bindings/./matlab/matlab_matvec.i,6,VECTORSPARSECOPY@*/
    //getting pointer to sparse structure
    mwIndex* ir = mxGetIr(in);
    mwIndex* jc = mxGetJc(in);
    double *data = mxGetPr(in);

    //If dims[1] == 1 assume it is a column vector (or a 1 element vector)
    bool isColumnVector = (dims[1] == 1);

    //zero the matrix (iDynTree vector is dense)
    self->zero();
    for (mwIndex col = 0; col < dims[1]; col++)
    {
        /*
            jc[col] contains information about the nonzero values.
            jc[col + 1] - jc[col] = number of nonzero elements in column col
            These nonzero elements can be access with a for loop starting at
            jc[col] and ending at jc[col + 1] - 1.

        */
        mwIndex startingRowIndex = jc[col];
        mwIndex endRowIndex = jc[col + 1];
        if (startingRowIndex == endRowIndex)
        {
            //no elements in this column
            continue;
        }
        for (mwIndex currentIndex = startingRowIndex; currentIndex < endRowIndex; currentIndex++)
        {
            //access the element
            mwIndex row = ir[currentIndex];
            //iDynTree has only one size.
            self->operator()(isColumnVector ? row : col) = data[currentIndex];
        }
    }
/*@SWIG@*/
            } else {
                double* d = static_cast<double*>(mxGetData(in));
                double* selfData = self->data();
                for(size_t i=0; i < fixValSize; i++ )
                {
                    selfData[i] = d[i];
                }
            }
            return;
        } else {
            mexErrMsgIdAndTxt("iDynTree:Core:wrongDimension",
              "Wrong vector size. Matlab size: %d. iDynTree size: %d", nonSingletonDimension, fixValSize);
        }
    }
SWIGINTERN mxArray *iDynTree_VectorFixSize_Sl_10_Sg__toMatlab(iDynTree::VectorFixSize< 10 > const *self){
        mxArray *p  = mxCreateDoubleMatrix(self->size(), 1, mxREAL);
        double* d = static_cast<double*>(mxGetData(p));
        self->fillBuffer(d); // Column-major
        return p;
    }
SWIGINTERN void iDynTree_VectorFixSize_Sl_10_Sg__fromMatlab(iDynTree::VectorFixSize< 10 > *self,mxArray *in){
        // check size
        const mwSize * dims = mxGetDimensions(in);
        size_t fixValSize = self->size();
        size_t nonSingletonDimension = (dims[0] == 1 ? dims[1] : dims[0]);

        if (nonSingletonDimension == fixValSize)
        {
            if (mxIsSparse(in))
            {
                /*@SWIG:/Users/traversaro/src/codyco-superbuild/libraries/iDynTree/bindings/./matlab/matlab_matvec.i,6,VECTORSPARSECOPY@*/
    //getting pointer to sparse structure
    mwIndex* ir = mxGetIr(in);
    mwIndex* jc = mxGetJc(in);
    double *data = mxGetPr(in);

    //If dims[1] == 1 assume it is a column vector (or a 1 element vector)
    bool isColumnVector = (dims[1] == 1);

    //zero the matrix (iDynTree vector is dense)
    self->zero();
    for (mwIndex col = 0; col < dims[1]; col++)
    {
        /*
            jc[col] contains information about the nonzero values.
            jc[col + 1] - jc[col] = number of nonzero elements in column col
            These nonzero elements can be access with a for loop starting at
            jc[col] and ending at jc[col + 1] - 1.

        */
        mwIndex startingRowIndex = jc[col];
        mwIndex endRowIndex = jc[col + 1];
        if (startingRowIndex == endRowIndex)
        {
            //no elements in this column
            continue;
        }
        for (mwIndex currentIndex = startingRowIndex; currentIndex < endRowIndex; currentIndex++)
        {
            //access the element
            mwIndex row = ir[currentIndex];
            //iDynTree has only one size.
            self->operator()(isColumnVector ? row : col) = data[currentIndex];
        }
    }
/*@SWIG@*/
            } else {
                double* d = static_cast<double*>(mxGetData(in));
                double* selfData = self->data();
                for(size_t i=0; i < fixValSize; i++ )
                {
                    selfData[i] = d[i];
                }
            }
            return;
        } else {
            mexErrMsgIdAndTxt("iDynTree:Core:wrongDimension",
              "Wrong vector size. Matlab size: %d. iDynTree size: %d", nonSingletonDimension, fixValSize);
        }
    }
SWIGINTERN mxArray *iDynTree_VectorFixSize_Sl_16_Sg__toMatlab(iDynTree::VectorFixSize< 16 > const *self){
        mxArray *p  = mxCreateDoubleMatrix(self->size(), 1, mxREAL);
        double* d = static_cast<double*>(mxGetData(p));
        self->fillBuffer(d); // Column-major
        return p;
    }
SWIGINTERN void iDynTree_VectorFixSize_Sl_16_Sg__fromMatlab(iDynTree::VectorFixSize< 16 > *self,mxArray *in){
        // check size
        const mwSize * dims = mxGetDimensions(in);
        size_t fixValSize = self->size();
        size_t nonSingletonDimension = (dims[0] == 1 ? dims[1] : dims[0]);

        if (nonSingletonDimension == fixValSize)
        {
            if (mxIsSparse(in))
            {
                /*@SWIG:/Users/traversaro/src/codyco-superbuild/libraries/iDynTree/bindings/./matlab/matlab_matvec.i,6,VECTORSPARSECOPY@*/
    //getting pointer to sparse structure
    mwIndex* ir = mxGetIr(in);
    mwIndex* jc = mxGetJc(in);
    double *data = mxGetPr(in);

    //If dims[1] == 1 assume it is a column vector (or a 1 element vector)
    bool isColumnVector = (dims[1] == 1);

    //zero the matrix (iDynTree vector is dense)
    self->zero();
    for (mwIndex col = 0; col < dims[1]; col++)
    {
        /*
            jc[col] contains information about the nonzero values.
            jc[col + 1] - jc[col] = number of nonzero elements in column col
            These nonzero elements can be access with a for loop starting at
            jc[col] and ending at jc[col + 1] - 1.

        */
        mwIndex startingRowIndex = jc[col];
        mwIndex endRowIndex = jc[col + 1];
        if (startingRowIndex == endRowIndex)
        {
            //no elements in this column
            continue;
        }
        for (mwIndex currentIndex = startingRowIndex; currentIndex < endRowIndex; currentIndex++)
        {
            //access the element
            mwIndex row = ir[currentIndex];
            //iDynTree has only one size.
            self->operator()(isColumnVector ? row : col) = data[currentIndex];
        }
    }
/*@SWIG@*/
            } else {
                double* d = static_cast<double*>(mxGetData(in));
                double* selfData = self->data();
                for(size_t i=0; i < fixValSize; i++ )
                {
                    selfData[i] = d[i];
                }
            }
            return;
        } else {
            mexErrMsgIdAndTxt("iDynTree:Core:wrongDimension",
              "Wrong vector size. Matlab size: %d. iDynTree size: %d", nonSingletonDimension, fixValSize);
        }
    }

SWIGINTERN int
SWIG_AsVal_int (mxArray* obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}

SWIGINTERN mxArray *iDynTree_SpatialVector_Sl_iDynTree_SpatialMotionVector_Sg__toMatlab(iDynTree::SpatialVector< iDynTree::SpatialMotionVector > const *self){
        mxArray *p  = mxCreateDoubleMatrix(6, 1, mxREAL);
        double* d = static_cast<double*>(mxGetData(p));
        for(unsigned int i=0; i < 6; i++ )
        {
            d[i] = self->operator()(i);
        }

        return p;
    }
SWIGINTERN void iDynTree_SpatialVector_Sl_iDynTree_SpatialMotionVector_Sg__fromMatlab(iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *self,mxArray *in){
        // check size
        const mwSize * dims = mxGetDimensions(in);
        size_t fixValSize = self->size();
        if( ( dims[0] == fixValSize && dims[1] == 1) ||
            ( dims[0] == 1 && dims[1] == fixValSize ) )
        {
            double* d = static_cast<double*>(mxGetData(in));
            for(size_t i=0; i < fixValSize; i++ )
            {
                self->operator()(i) = d[i];
            }
            return;
        }
    }
SWIGINTERN mxArray *iDynTree_SpatialVector_Sl_iDynTree_SpatialForceVector_Sg__toMatlab(iDynTree::SpatialVector< iDynTree::SpatialForceVector > const *self){
        mxArray *p  = mxCreateDoubleMatrix(6, 1, mxREAL);
        double* d = static_cast<double*>(mxGetData(p));
        for(unsigned int i=0; i < 6; i++ )
        {
            d[i] = self->operator()(i);
        }

        return p;
    }
SWIGINTERN void iDynTree_SpatialVector_Sl_iDynTree_SpatialForceVector_Sg__fromMatlab(iDynTree::SpatialVector< iDynTree::SpatialForceVector > *self,mxArray *in){
        // check size
        const mwSize * dims = mxGetDimensions(in);
        size_t fixValSize = self->size();
        if( ( dims[0] == fixValSize && dims[1] == 1) ||
            ( dims[0] == 1 && dims[1] == fixValSize ) )
        {
            double* d = static_cast<double*>(mxGetData(in));
            for(size_t i=0; i < fixValSize; i++ )
            {
                self->operator()(i) = d[i];
            }
            return;
        }
    }
SWIGINTERN bool iDynTree_IJoint_isRevoluteJoint(iDynTree::IJoint const *self){
        const iDynTree::RevoluteJoint * p =
            dynamic_cast<const iDynTree::RevoluteJoint*>(self);
        return (p != 0);
    }
SWIGINTERN bool iDynTree_IJoint_isFixedJoint(iDynTree::IJoint const *self){
        const iDynTree::FixedJoint * p =
            dynamic_cast<const iDynTree::FixedJoint*>(self);
        return (p != 0);
    }
SWIGINTERN iDynTree::RevoluteJoint *iDynTree_IJoint_asRevoluteJoint(iDynTree::IJoint *self){
        iDynTree::RevoluteJoint * p =
            static_cast<iDynTree::RevoluteJoint*>(self);
        return p;
    }
SWIGINTERN iDynTree::FixedJoint *iDynTree_IJoint_asFixedJoint(iDynTree::IJoint *self){
        iDynTree::FixedJoint * p =
            static_cast<iDynTree::FixedJoint*>(self);
        return p;
    }
SWIGINTERN iDynTree::SixAxisForceTorqueSensor *iDynTree_SensorsList_getSixAxisForceTorqueSensor(iDynTree::SensorsList const *self,int sensor_index){
        iDynTree::SixAxisForceTorqueSensor* p =
            static_cast<iDynTree::SixAxisForceTorqueSensor*>(self->getSensor(iDynTree::SIX_AXIS_FORCE_TORQUE,sensor_index));
        return p;
    }
SWIGINTERN iDynTree::AccelerometerSensor *iDynTree_SensorsList_getAccelerometerSensor(iDynTree::SensorsList const *self,int sensor_index){
        iDynTree::AccelerometerSensor* p =
            static_cast<iDynTree::AccelerometerSensor*>(self->getSensor(iDynTree::ACCELEROMETER,sensor_index));
        return p;
    }
SWIGINTERN iDynTree::GyroscopeSensor *iDynTree_SensorsList_getGyroscopeSensor(iDynTree::SensorsList const *self,int sensor_index){
        iDynTree::GyroscopeSensor* p =
            static_cast<iDynTree::GyroscopeSensor*>(self->getSensor(iDynTree::GYROSCOPE,sensor_index));
        return p;
    }

#include <float.h>


#include <math.h>


/* Getting isfinite working pre C99 across multiple platforms is non-trivial. Users can provide SWIG_isfinite on older platforms. */
#ifndef SWIG_isfinite
/* isfinite() is a macro for C99, but a function in namespace std for C++11. */
# if defined(isfinite)
#  define SWIG_isfinite(X) (isfinite(X))
# elif defined __cplusplus && __cplusplus >= 201103L
#  define SWIG_isfinite(X) (std::isfinite(X))
# elif defined(_MSC_VER)
#  define SWIG_isfinite(X) (_finite(X))
# elif defined(__sun) && defined(__SVR4)
#  include <ieeefp.h>
#  define SWIG_isfinite(X) (finite(X))
# endif
#endif


/* Accept infinite as a valid float value unless we are unable to check if a value is finite */
#ifdef SWIG_isfinite
# define SWIG_Float_Overflow_Check(X) ((X < -FLT_MAX || X > FLT_MAX) && SWIG_isfinite(X))
#else
# define SWIG_Float_Overflow_Check(X) ((X < -FLT_MAX || X > FLT_MAX))
#endif


SWIGINTERN int
SWIG_AsVal_float (mxArray* obj, float *val)
{
  double v;
  int res = SWIG_AsVal_double (obj, &v);
  if (SWIG_IsOK(res)) {
    if (SWIG_Float_Overflow_Check(v)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< float >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE mxArray*
SWIG_From_float  (float value)
{    
  return SWIG_From_double  (value);
}

int _wrap_delete_MatlabSwigIterator(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  swig::MatlabSwigIterator *arg1 = (swig::MatlabSwigIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_MatlabSwigIterator",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_swig__MatlabSwigIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MatlabSwigIterator" "', argument " "1"" of type '" "swig::MatlabSwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::MatlabSwigIterator * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatlabSwigIterator_value(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  swig::MatlabSwigIterator *arg1 = (swig::MatlabSwigIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  mxArray *result = 0 ;
  
  if (!SWIG_check_num_args("MatlabSwigIterator_value",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatlabSwigIterator_value" "', argument " "1"" of type '" "swig::MatlabSwigIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::MatlabSwigIterator * >(argp1);
  try {
    result = (mxArray *)((swig::MatlabSwigIterator const *)arg1)->value();
  }
  catch(swig::stop_iteration &_e) {
    {
      SWIG_Error(SWIG_RuntimeError,"stop_iteration exception"); /* KT TODO */
      SWIG_fail;
    }
  }
  
  _out = result;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatlabSwigIterator_incr__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  swig::MatlabSwigIterator *arg1 = (swig::MatlabSwigIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  swig::MatlabSwigIterator *result = 0 ;
  
  if (!SWIG_check_num_args("MatlabSwigIterator_incr",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatlabSwigIterator_incr" "', argument " "1"" of type '" "swig::MatlabSwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::MatlabSwigIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MatlabSwigIterator_incr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = (swig::MatlabSwigIterator *)(arg1)->incr(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      SWIG_Error(SWIG_RuntimeError,"stop_iteration exception"); /* KT TODO */
      SWIG_fail;
    }
  }
  
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatlabSwigIterator_incr__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  swig::MatlabSwigIterator *arg1 = (swig::MatlabSwigIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  swig::MatlabSwigIterator *result = 0 ;
  
  if (!SWIG_check_num_args("MatlabSwigIterator_incr",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatlabSwigIterator_incr" "', argument " "1"" of type '" "swig::MatlabSwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::MatlabSwigIterator * >(argp1);
  try {
    result = (swig::MatlabSwigIterator *)(arg1)->incr();
  }
  catch(swig::stop_iteration &_e) {
    {
      SWIG_Error(SWIG_RuntimeError,"stop_iteration exception"); /* KT TODO */
      SWIG_fail;
    }
  }
  
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatlabSwigIterator_incr(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__MatlabSwigIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_MatlabSwigIterator_incr__SWIG_1(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__MatlabSwigIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MatlabSwigIterator_incr__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'MatlabSwigIterator_incr'."
    "  Possible C/C++ prototypes are:\n"
    "    swig::MatlabSwigIterator::incr(size_t)\n"
    "    swig::MatlabSwigIterator::incr()\n");
  return 1;
}


int _wrap_MatlabSwigIterator_decr__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  swig::MatlabSwigIterator *arg1 = (swig::MatlabSwigIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  swig::MatlabSwigIterator *result = 0 ;
  
  if (!SWIG_check_num_args("MatlabSwigIterator_decr",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatlabSwigIterator_decr" "', argument " "1"" of type '" "swig::MatlabSwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::MatlabSwigIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MatlabSwigIterator_decr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = (swig::MatlabSwigIterator *)(arg1)->decr(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      SWIG_Error(SWIG_RuntimeError,"stop_iteration exception"); /* KT TODO */
      SWIG_fail;
    }
  }
  
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatlabSwigIterator_decr__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  swig::MatlabSwigIterator *arg1 = (swig::MatlabSwigIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  swig::MatlabSwigIterator *result = 0 ;
  
  if (!SWIG_check_num_args("MatlabSwigIterator_decr",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatlabSwigIterator_decr" "', argument " "1"" of type '" "swig::MatlabSwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::MatlabSwigIterator * >(argp1);
  try {
    result = (swig::MatlabSwigIterator *)(arg1)->decr();
  }
  catch(swig::stop_iteration &_e) {
    {
      SWIG_Error(SWIG_RuntimeError,"stop_iteration exception"); /* KT TODO */
      SWIG_fail;
    }
  }
  
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatlabSwigIterator_decr(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__MatlabSwigIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_MatlabSwigIterator_decr__SWIG_1(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__MatlabSwigIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MatlabSwigIterator_decr__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'MatlabSwigIterator_decr'."
    "  Possible C/C++ prototypes are:\n"
    "    swig::MatlabSwigIterator::decr(size_t)\n"
    "    swig::MatlabSwigIterator::decr()\n");
  return 1;
}


int _wrap_MatlabSwigIterator_distance(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  swig::MatlabSwigIterator *arg1 = (swig::MatlabSwigIterator *) 0 ;
  swig::MatlabSwigIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  ptrdiff_t result;
  
  if (!SWIG_check_num_args("MatlabSwigIterator_distance",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatlabSwigIterator_distance" "', argument " "1"" of type '" "swig::MatlabSwigIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::MatlabSwigIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_swig__MatlabSwigIterator,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatlabSwigIterator_distance" "', argument " "2"" of type '" "swig::MatlabSwigIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatlabSwigIterator_distance" "', argument " "2"" of type '" "swig::MatlabSwigIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::MatlabSwigIterator * >(argp2);
  try {
    result = ((swig::MatlabSwigIterator const *)arg1)->distance((swig::MatlabSwigIterator const &)*arg2);
  }
  catch(std::invalid_argument &_e) {
    mexErrMsgIdAndTxt("SWIG:RuntimeError", "C++ side threw an exception of type " "std::invalid_argument"); SWIG_fail;
  }
  
  _out = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatlabSwigIterator_equal(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  swig::MatlabSwigIterator *arg1 = (swig::MatlabSwigIterator *) 0 ;
  swig::MatlabSwigIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("MatlabSwigIterator_equal",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatlabSwigIterator_equal" "', argument " "1"" of type '" "swig::MatlabSwigIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::MatlabSwigIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_swig__MatlabSwigIterator,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatlabSwigIterator_equal" "', argument " "2"" of type '" "swig::MatlabSwigIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatlabSwigIterator_equal" "', argument " "2"" of type '" "swig::MatlabSwigIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::MatlabSwigIterator * >(argp2);
  try {
    result = (bool)((swig::MatlabSwigIterator const *)arg1)->equal((swig::MatlabSwigIterator const &)*arg2);
  }
  catch(std::invalid_argument &_e) {
    mexErrMsgIdAndTxt("SWIG:RuntimeError", "C++ side threw an exception of type " "std::invalid_argument"); SWIG_fail;
  }
  
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatlabSwigIterator_copy(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  swig::MatlabSwigIterator *arg1 = (swig::MatlabSwigIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  swig::MatlabSwigIterator *result = 0 ;
  
  if (!SWIG_check_num_args("MatlabSwigIterator_copy",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatlabSwigIterator_copy" "', argument " "1"" of type '" "swig::MatlabSwigIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::MatlabSwigIterator * >(argp1);
  result = (swig::MatlabSwigIterator *)((swig::MatlabSwigIterator const *)arg1)->copy();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__MatlabSwigIterator, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatlabSwigIterator_next(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  swig::MatlabSwigIterator *arg1 = (swig::MatlabSwigIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  mxArray *result = 0 ;
  
  if (!SWIG_check_num_args("MatlabSwigIterator_next",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatlabSwigIterator_next" "', argument " "1"" of type '" "swig::MatlabSwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::MatlabSwigIterator * >(argp1);
  try {
    result = (mxArray *)(arg1)->next();
  }
  catch(swig::stop_iteration &_e) {
    {
      SWIG_Error(SWIG_RuntimeError,"stop_iteration exception"); /* KT TODO */
      SWIG_fail;
    }
  }
  
  _out = result;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatlabSwigIterator_previous(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  swig::MatlabSwigIterator *arg1 = (swig::MatlabSwigIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  mxArray *result = 0 ;
  
  if (!SWIG_check_num_args("MatlabSwigIterator_previous",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatlabSwigIterator_previous" "', argument " "1"" of type '" "swig::MatlabSwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::MatlabSwigIterator * >(argp1);
  try {
    result = (mxArray *)(arg1)->previous();
  }
  catch(swig::stop_iteration &_e) {
    {
      SWIG_Error(SWIG_RuntimeError,"stop_iteration exception"); /* KT TODO */
      SWIG_fail;
    }
  }
  
  _out = result;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatlabSwigIterator_advance(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  swig::MatlabSwigIterator *arg1 = (swig::MatlabSwigIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  swig::MatlabSwigIterator *result = 0 ;
  
  if (!SWIG_check_num_args("MatlabSwigIterator_advance",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatlabSwigIterator_advance" "', argument " "1"" of type '" "swig::MatlabSwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::MatlabSwigIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MatlabSwigIterator_advance" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::MatlabSwigIterator *)(arg1)->advance(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      SWIG_Error(SWIG_RuntimeError,"stop_iteration exception"); /* KT TODO */
      SWIG_fail;
    }
  }
  
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatlabSwigIterator_eq(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  swig::MatlabSwigIterator *arg1 = (swig::MatlabSwigIterator *) 0 ;
  swig::MatlabSwigIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("MatlabSwigIterator_eq",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatlabSwigIterator_eq" "', argument " "1"" of type '" "swig::MatlabSwigIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::MatlabSwigIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_swig__MatlabSwigIterator,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatlabSwigIterator_eq" "', argument " "2"" of type '" "swig::MatlabSwigIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatlabSwigIterator_eq" "', argument " "2"" of type '" "swig::MatlabSwigIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::MatlabSwigIterator * >(argp2);
  result = (bool)((swig::MatlabSwigIterator const *)arg1)->operator ==((swig::MatlabSwigIterator const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatlabSwigIterator_ne(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  swig::MatlabSwigIterator *arg1 = (swig::MatlabSwigIterator *) 0 ;
  swig::MatlabSwigIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("MatlabSwigIterator_ne",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatlabSwigIterator_ne" "', argument " "1"" of type '" "swig::MatlabSwigIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::MatlabSwigIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_swig__MatlabSwigIterator,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatlabSwigIterator_ne" "', argument " "2"" of type '" "swig::MatlabSwigIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatlabSwigIterator_ne" "', argument " "2"" of type '" "swig::MatlabSwigIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::MatlabSwigIterator * >(argp2);
  result = (bool)((swig::MatlabSwigIterator const *)arg1)->operator !=((swig::MatlabSwigIterator const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatlabSwigIterator_TODOincr(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  swig::MatlabSwigIterator *arg1 = (swig::MatlabSwigIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  swig::MatlabSwigIterator *result = 0 ;
  
  if (!SWIG_check_num_args("MatlabSwigIterator_TODOincr",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatlabSwigIterator_TODOincr" "', argument " "1"" of type '" "swig::MatlabSwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::MatlabSwigIterator * >(argp1);
  result = (swig::MatlabSwigIterator *)(arg1)->operator ++();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatlabSwigIterator_TODOdecr(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  swig::MatlabSwigIterator *arg1 = (swig::MatlabSwigIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  swig::MatlabSwigIterator *result = 0 ;
  
  if (!SWIG_check_num_args("MatlabSwigIterator_TODOdecr",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatlabSwigIterator_TODOdecr" "', argument " "1"" of type '" "swig::MatlabSwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::MatlabSwigIterator * >(argp1);
  result = (swig::MatlabSwigIterator *)(arg1)->operator --();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatlabSwigIterator_plus(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  swig::MatlabSwigIterator *arg1 = (swig::MatlabSwigIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  swig::MatlabSwigIterator *result = 0 ;
  
  if (!SWIG_check_num_args("MatlabSwigIterator_plus",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatlabSwigIterator_plus" "', argument " "1"" of type '" "swig::MatlabSwigIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::MatlabSwigIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MatlabSwigIterator_plus" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::MatlabSwigIterator *)((swig::MatlabSwigIterator const *)arg1)->operator +(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      SWIG_Error(SWIG_RuntimeError,"stop_iteration exception"); /* KT TODO */
      SWIG_fail;
    }
  }
  
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__MatlabSwigIterator, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatlabSwigIterator_minus__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  swig::MatlabSwigIterator *arg1 = (swig::MatlabSwigIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  swig::MatlabSwigIterator *result = 0 ;
  
  if (!SWIG_check_num_args("MatlabSwigIterator_minus",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatlabSwigIterator_minus" "', argument " "1"" of type '" "swig::MatlabSwigIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::MatlabSwigIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MatlabSwigIterator_minus" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::MatlabSwigIterator *)((swig::MatlabSwigIterator const *)arg1)->operator -(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      SWIG_Error(SWIG_RuntimeError,"stop_iteration exception"); /* KT TODO */
      SWIG_fail;
    }
  }
  
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__MatlabSwigIterator, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatlabSwigIterator_minus__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  swig::MatlabSwigIterator *arg1 = (swig::MatlabSwigIterator *) 0 ;
  swig::MatlabSwigIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  ptrdiff_t result;
  
  if (!SWIG_check_num_args("MatlabSwigIterator_minus",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatlabSwigIterator_minus" "', argument " "1"" of type '" "swig::MatlabSwigIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::MatlabSwigIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_swig__MatlabSwigIterator,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatlabSwigIterator_minus" "', argument " "2"" of type '" "swig::MatlabSwigIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatlabSwigIterator_minus" "', argument " "2"" of type '" "swig::MatlabSwigIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::MatlabSwigIterator * >(argp2);
  result = ((swig::MatlabSwigIterator const *)arg1)->operator -((swig::MatlabSwigIterator const &)*arg2);
  _out = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatlabSwigIterator_minus(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__MatlabSwigIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_swig__MatlabSwigIterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MatlabSwigIterator_minus__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__MatlabSwigIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MatlabSwigIterator_minus__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'MatlabSwigIterator_minus'."
    "  Possible C/C++ prototypes are:\n"
    "    swig::MatlabSwigIterator::operator -(ptrdiff_t) const\n"
    "    swig::MatlabSwigIterator::operator -(swig::MatlabSwigIterator const &) const\n");
  return 1;
}


int _wrap_StringVector_pop(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< std::string >::value_type result;
  
  if (!SWIG_check_num_args("StringVector_pop",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_pop" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  try {
    result = std_vector_Sl_std_string_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_StringVector_brace(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  std::vector< std::string >::value_type result;
  
  if (!SWIG_check_num_args("StringVector_brace",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_brace" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringVector_brace" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  try {
    result = std_vector_Sl_std_string_Sg__brace(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_StringVector_setbrace(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type arg2 ;
  std::vector< std::string >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("StringVector_setbrace",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_setbrace" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "StringVector_setbrace" "', argument " "2"" of type '" "std::vector< std::string >::value_type""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode3 = SWIG_AsVal_ptrdiff_t(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StringVector_setbrace" "', argument " "3"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::string >::difference_type >(val3);
  try {
    std_vector_Sl_std_string_Sg__setbrace(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_StringVector_append(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("StringVector_append",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_append" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "StringVector_append" "', argument " "2"" of type '" "std::vector< std::string >::value_type""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  std_vector_Sl_std_string_Sg__append(arg1,arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_StringVector__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  std::vector< std::string > *result = 0 ;
  
  if (!SWIG_check_num_args("new_StringVector",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (std::vector< std::string > *)new std::vector< std::string >();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_StringVector__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::string > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  mxArray * _out;
  std::vector< std::string > *result = 0 ;
  
  if (!SWIG_check_num_args("new_StringVector",argc,1,1,0)) {
    SWIG_fail;
  }
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res1 = swig::asptr(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_StringVector" "', argument " "1"" of type '" "std::vector< std::string > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_StringVector" "', argument " "1"" of type '" "std::vector< std::string > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< std::string > *)new std::vector< std::string >((std::vector< std::string > const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res1)) delete arg1;
  return 0;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return 1;
}


int _wrap_StringVector_empty(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("StringVector_empty",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_empty" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (bool)((std::vector< std::string > const *)arg1)->empty();
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_StringVector_size(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< std::string >::size_type result;
  
  if (!SWIG_check_num_args("StringVector_size",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_size" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = ((std::vector< std::string > const *)arg1)->size();
  _out = SWIG_From_size_t(static_cast< size_t >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_StringVector_swap(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("StringVector_swap",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_swap" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StringVector_swap" "', argument " "2"" of type '" "std::vector< std::string > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringVector_swap" "', argument " "2"" of type '" "std::vector< std::string > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::string > * >(argp2);
  (arg1)->swap(*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_StringVector_begin(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< std::string >::iterator result;
  
  if (!SWIG_check_num_args("StringVector_begin",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_begin" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (arg1)->begin();
  _out = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::iterator & >(result)),
    swig::MatlabSwigIterator::descriptor(),SWIG_POINTER_OWN);
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_StringVector_end(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< std::string >::iterator result;
  
  if (!SWIG_check_num_args("StringVector_end",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_end" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (arg1)->end();
  _out = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::iterator & >(result)),
    swig::MatlabSwigIterator::descriptor(),SWIG_POINTER_OWN);
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_StringVector_rbegin(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< std::string >::reverse_iterator result;
  
  if (!SWIG_check_num_args("StringVector_rbegin",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_rbegin" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (arg1)->rbegin();
  _out = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::reverse_iterator & >(result)),
    swig::MatlabSwigIterator::descriptor(),SWIG_POINTER_OWN);
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_StringVector_rend(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< std::string >::reverse_iterator result;
  
  if (!SWIG_check_num_args("StringVector_rend",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_rend" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (arg1)->rend();
  _out = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::reverse_iterator & >(result)),
    swig::MatlabSwigIterator::descriptor(),SWIG_POINTER_OWN);
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_StringVector_clear(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("StringVector_clear",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_clear" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  (arg1)->clear();
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_StringVector_get_allocator(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  SwigValueWrapper< std::allocator< std::string > > result;
  
  if (!SWIG_check_num_args("StringVector_get_allocator",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_get_allocator" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = ((std::vector< std::string > const *)arg1)->get_allocator();
  _out = SWIG_NewPointerObj((new std::vector< std::string >::allocator_type(static_cast< const std::vector< std::string >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_std__string_t, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_StringVector__SWIG_2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::string >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  mxArray * _out;
  std::vector< std::string > *result = 0 ;
  
  if (!SWIG_check_num_args("new_StringVector",argc,1,1,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_StringVector" "', argument " "1"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::string >::size_type >(val1);
  result = (std::vector< std::string > *)new std::vector< std::string >(arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_StringVector_pop_back(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("StringVector_pop_back",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_pop_back" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  (arg1)->pop_back();
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_StringVector_resize__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("StringVector_resize",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_resize" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringVector_resize" "', argument " "2"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::size_type >(val2);
  (arg1)->resize(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_StringVector_erase__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::MatlabSwigIterator *iter2 = 0 ;
  int res2 ;
  mxArray * _out;
  std::vector< std::string >::iterator result;
  
  if (!SWIG_check_num_args("StringVector_erase",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_erase" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter2), swig::MatlabSwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringVector_erase" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
  } else {
    swig::MatlabSwigIterator_T<std::vector< std::string >::iterator > *iter_t = dynamic_cast<swig::MatlabSwigIterator_T<std::vector< std::string >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringVector_erase" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
    }
  }
  result = std_vector_Sl_std_string_Sg__erase__SWIG_0(arg1,arg2);
  _out = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::iterator & >(result)),
    swig::MatlabSwigIterator::descriptor(),SWIG_POINTER_OWN);
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_StringVector_erase__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::iterator arg2 ;
  std::vector< std::string >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::MatlabSwigIterator *iter2 = 0 ;
  int res2 ;
  swig::MatlabSwigIterator *iter3 = 0 ;
  int res3 ;
  mxArray * _out;
  std::vector< std::string >::iterator result;
  
  if (!SWIG_check_num_args("StringVector_erase",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_erase" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter2), swig::MatlabSwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringVector_erase" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
  } else {
    swig::MatlabSwigIterator_T<std::vector< std::string >::iterator > *iter_t = dynamic_cast<swig::MatlabSwigIterator_T<std::vector< std::string >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringVector_erase" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter3), swig::MatlabSwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringVector_erase" "', argument " "3"" of type '" "std::vector< std::string >::iterator""'");
  } else {
    swig::MatlabSwigIterator_T<std::vector< std::string >::iterator > *iter_t = dynamic_cast<swig::MatlabSwigIterator_T<std::vector< std::string >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringVector_erase" "', argument " "3"" of type '" "std::vector< std::string >::iterator""'");
    }
  }
  result = std_vector_Sl_std_string_Sg__erase__SWIG_1(arg1,arg2,arg3);
  _out = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::iterator & >(result)),
    swig::MatlabSwigIterator::descriptor(),SWIG_POINTER_OWN);
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_StringVector_erase(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::MatlabSwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::MatlabSwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::MatlabSwigIterator_T<std::vector< std::string >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_StringVector_erase__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::MatlabSwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::MatlabSwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::MatlabSwigIterator_T<std::vector< std::string >::iterator > *>(iter) != 0));
      if (_v) {
        swig::MatlabSwigIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::MatlabSwigIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::MatlabSwigIterator_T<std::vector< std::string >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_StringVector_erase__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'StringVector_erase'."
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::string >::erase(std::vector< std::string >::iterator)\n"
    "    std::vector< std::string >::erase(std::vector< std::string >::iterator,std::vector< std::string >::iterator)\n");
  return 1;
}


int _wrap_new_StringVector__SWIG_3(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::string >::size_type arg1 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  std::vector< std::string > *result = 0 ;
  
  if (!SWIG_check_num_args("new_StringVector",argc,2,2,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_StringVector" "', argument " "1"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::string >::size_type >(val1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_StringVector" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_StringVector" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (std::vector< std::string > *)new std::vector< std::string >(arg1,(std::vector< std::string >::value_type const &)*arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_new_StringVector(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_StringVector__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_StringVector__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_StringVector__SWIG_1(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_StringVector__SWIG_3(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_StringVector'."
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::string >::vector()\n"
    "    std::vector< std::string >::vector(std::vector< std::string > const &)\n"
    "    std::vector< std::string >::vector(std::vector< std::string >::size_type)\n"
    "    std::vector< std::string >::vector(std::vector< std::string >::size_type,std::vector< std::string >::value_type const &)\n");
  return 1;
}


int _wrap_StringVector_push_back(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("StringVector_push_back",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_push_back" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StringVector_push_back" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringVector_push_back" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->push_back((std::vector< std::string >::value_type const &)*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_StringVector_front(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< std::string >::value_type *result = 0 ;
  
  if (!SWIG_check_num_args("StringVector_front",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_front" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (std::vector< std::string >::value_type *) &((std::vector< std::string > const *)arg1)->front();
  _out = SWIG_From_std_string(static_cast< std::string >(*result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_StringVector_back(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< std::string >::value_type *result = 0 ;
  
  if (!SWIG_check_num_args("StringVector_back",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_back" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (std::vector< std::string >::value_type *) &((std::vector< std::string > const *)arg1)->back();
  _out = SWIG_From_std_string(static_cast< std::string >(*result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_StringVector_assign(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("StringVector_assign",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_assign" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringVector_assign" "', argument " "2"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::size_type >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StringVector_assign" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringVector_assign" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->assign(arg2,(std::vector< std::string >::value_type const &)*arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 0;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 1;
}


int _wrap_StringVector_resize__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("StringVector_resize",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_resize" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringVector_resize" "', argument " "2"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::size_type >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StringVector_resize" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringVector_resize" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->resize(arg2,(std::vector< std::string >::value_type const &)*arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 0;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 1;
}


int _wrap_StringVector_resize(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_StringVector_resize__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_StringVector_resize__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'StringVector_resize'."
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::string >::resize(std::vector< std::string >::size_type)\n"
    "    std::vector< std::string >::resize(std::vector< std::string >::size_type,std::vector< std::string >::value_type const &)\n");
  return 1;
}


int _wrap_StringVector_insert__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::iterator arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::MatlabSwigIterator *iter2 = 0 ;
  int res2 ;
  int res3 = SWIG_OLDOBJ ;
  mxArray * _out;
  std::vector< std::string >::iterator result;
  
  if (!SWIG_check_num_args("StringVector_insert",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_insert" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter2), swig::MatlabSwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringVector_insert" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
  } else {
    swig::MatlabSwigIterator_T<std::vector< std::string >::iterator > *iter_t = dynamic_cast<swig::MatlabSwigIterator_T<std::vector< std::string >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringVector_insert" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StringVector_insert" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringVector_insert" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  result = std_vector_Sl_std_string_Sg__insert__SWIG_0(arg1,arg2,(std::string const &)*arg3);
  _out = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::iterator & >(result)),
    swig::MatlabSwigIterator::descriptor(),SWIG_POINTER_OWN);
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 0;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 1;
}


int _wrap_StringVector_insert__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::iterator arg2 ;
  std::vector< std::string >::size_type arg3 ;
  std::vector< std::string >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::MatlabSwigIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("StringVector_insert",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_insert" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter2), swig::MatlabSwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringVector_insert" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
  } else {
    swig::MatlabSwigIterator_T<std::vector< std::string >::iterator > *iter_t = dynamic_cast<swig::MatlabSwigIterator_T<std::vector< std::string >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringVector_insert" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StringVector_insert" "', argument " "3"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg3 = static_cast< std::vector< std::string >::size_type >(val3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(argv[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "StringVector_insert" "', argument " "4"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringVector_insert" "', argument " "4"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg4 = ptr;
  }
  std_vector_Sl_std_string_Sg__insert__SWIG_1(arg1,arg2,arg3,(std::string const &)*arg4);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return 0;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return 1;
}


int _wrap_StringVector_insert(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::MatlabSwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::MatlabSwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::MatlabSwigIterator_T<std::vector< std::string >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_StringVector_insert__SWIG_0(resc,resv,argc,argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::MatlabSwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::MatlabSwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::MatlabSwigIterator_T<std::vector< std::string >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_StringVector_insert__SWIG_1(resc,resv,argc,argv);
          }
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'StringVector_insert'."
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::string >::insert(std::vector< std::string >::iterator,std::vector< std::string >::value_type const &)\n"
    "    std::vector< std::string >::insert(std::vector< std::string >::iterator,std::vector< std::string >::size_type,std::vector< std::string >::value_type const &)\n");
  return 1;
}


int _wrap_StringVector_reserve(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("StringVector_reserve",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_reserve" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringVector_reserve" "', argument " "2"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::size_type >(val2);
  (arg1)->reserve(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_StringVector_capacity(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< std::string >::size_type result;
  
  if (!SWIG_check_num_args("StringVector_capacity",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_capacity" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = ((std::vector< std::string > const *)arg1)->capacity();
  _out = SWIG_From_size_t(static_cast< size_t >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_StringVector(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_StringVector",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_StringVector" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdySensors_pop(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< iDynTree::BerdySensor > *arg1 = (std::vector< iDynTree::BerdySensor > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< iDynTree::BerdySensor >::value_type result;
  
  if (!SWIG_check_num_args("BerdySensors_pop",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_iDynTree__BerdySensor_std__allocatorT_iDynTree__BerdySensor_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdySensors_pop" "', argument " "1"" of type '" "std::vector< iDynTree::BerdySensor > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< iDynTree::BerdySensor > * >(argp1);
  try {
    result = std_vector_Sl_iDynTree_BerdySensor_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  _out = SWIG_NewPointerObj((new std::vector< iDynTree::BerdySensor >::value_type(static_cast< const std::vector< iDynTree::BerdySensor >::value_type& >(result))), SWIGTYPE_p_iDynTree__BerdySensor, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdySensors_brace(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< iDynTree::BerdySensor > *arg1 = (std::vector< iDynTree::BerdySensor > *) 0 ;
  std::vector< iDynTree::BerdySensor >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  std::vector< iDynTree::BerdySensor >::value_type result;
  
  if (!SWIG_check_num_args("BerdySensors_brace",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_iDynTree__BerdySensor_std__allocatorT_iDynTree__BerdySensor_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdySensors_brace" "', argument " "1"" of type '" "std::vector< iDynTree::BerdySensor > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< iDynTree::BerdySensor > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BerdySensors_brace" "', argument " "2"" of type '" "std::vector< iDynTree::BerdySensor >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< iDynTree::BerdySensor >::difference_type >(val2);
  try {
    result = std_vector_Sl_iDynTree_BerdySensor_Sg__brace(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  _out = SWIG_NewPointerObj((new std::vector< iDynTree::BerdySensor >::value_type(static_cast< const std::vector< iDynTree::BerdySensor >::value_type& >(result))), SWIGTYPE_p_iDynTree__BerdySensor, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdySensors_setbrace(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< iDynTree::BerdySensor > *arg1 = (std::vector< iDynTree::BerdySensor > *) 0 ;
  std::vector< iDynTree::BerdySensor >::value_type arg2 ;
  std::vector< iDynTree::BerdySensor >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("BerdySensors_setbrace",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_iDynTree__BerdySensor_std__allocatorT_iDynTree__BerdySensor_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdySensors_setbrace" "', argument " "1"" of type '" "std::vector< iDynTree::BerdySensor > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< iDynTree::BerdySensor > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__BerdySensor,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BerdySensors_setbrace" "', argument " "2"" of type '" "std::vector< iDynTree::BerdySensor >::value_type""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BerdySensors_setbrace" "', argument " "2"" of type '" "std::vector< iDynTree::BerdySensor >::value_type""'");
    } else {
      arg2 = *(reinterpret_cast< std::vector< iDynTree::BerdySensor >::value_type * >(argp2));
    }
  }
  ecode3 = SWIG_AsVal_ptrdiff_t(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BerdySensors_setbrace" "', argument " "3"" of type '" "std::vector< iDynTree::BerdySensor >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< iDynTree::BerdySensor >::difference_type >(val3);
  try {
    std_vector_Sl_iDynTree_BerdySensor_Sg__setbrace(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdySensors_append(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< iDynTree::BerdySensor > *arg1 = (std::vector< iDynTree::BerdySensor > *) 0 ;
  std::vector< iDynTree::BerdySensor >::value_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("BerdySensors_append",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_iDynTree__BerdySensor_std__allocatorT_iDynTree__BerdySensor_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdySensors_append" "', argument " "1"" of type '" "std::vector< iDynTree::BerdySensor > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< iDynTree::BerdySensor > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__BerdySensor,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BerdySensors_append" "', argument " "2"" of type '" "std::vector< iDynTree::BerdySensor >::value_type""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BerdySensors_append" "', argument " "2"" of type '" "std::vector< iDynTree::BerdySensor >::value_type""'");
    } else {
      arg2 = *(reinterpret_cast< std::vector< iDynTree::BerdySensor >::value_type * >(argp2));
    }
  }
  std_vector_Sl_iDynTree_BerdySensor_Sg__append(arg1,arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_BerdySensors__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  std::vector< iDynTree::BerdySensor > *result = 0 ;
  
  if (!SWIG_check_num_args("new_BerdySensors",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (std::vector< iDynTree::BerdySensor > *)new std::vector< iDynTree::BerdySensor >();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_iDynTree__BerdySensor_std__allocatorT_iDynTree__BerdySensor_t_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_BerdySensors__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< iDynTree::BerdySensor > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  mxArray * _out;
  std::vector< iDynTree::BerdySensor > *result = 0 ;
  
  if (!SWIG_check_num_args("new_BerdySensors",argc,1,1,0)) {
    SWIG_fail;
  }
  {
    std::vector< iDynTree::BerdySensor,std::allocator< iDynTree::BerdySensor > > *ptr = (std::vector< iDynTree::BerdySensor,std::allocator< iDynTree::BerdySensor > > *)0;
    res1 = swig::asptr(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_BerdySensors" "', argument " "1"" of type '" "std::vector< iDynTree::BerdySensor > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_BerdySensors" "', argument " "1"" of type '" "std::vector< iDynTree::BerdySensor > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< iDynTree::BerdySensor > *)new std::vector< iDynTree::BerdySensor >((std::vector< iDynTree::BerdySensor > const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_iDynTree__BerdySensor_std__allocatorT_iDynTree__BerdySensor_t_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res1)) delete arg1;
  return 0;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return 1;
}


int _wrap_BerdySensors_empty(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< iDynTree::BerdySensor > *arg1 = (std::vector< iDynTree::BerdySensor > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("BerdySensors_empty",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_iDynTree__BerdySensor_std__allocatorT_iDynTree__BerdySensor_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdySensors_empty" "', argument " "1"" of type '" "std::vector< iDynTree::BerdySensor > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< iDynTree::BerdySensor > * >(argp1);
  result = (bool)((std::vector< iDynTree::BerdySensor > const *)arg1)->empty();
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdySensors_size(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< iDynTree::BerdySensor > *arg1 = (std::vector< iDynTree::BerdySensor > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< iDynTree::BerdySensor >::size_type result;
  
  if (!SWIG_check_num_args("BerdySensors_size",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_iDynTree__BerdySensor_std__allocatorT_iDynTree__BerdySensor_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdySensors_size" "', argument " "1"" of type '" "std::vector< iDynTree::BerdySensor > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< iDynTree::BerdySensor > * >(argp1);
  result = ((std::vector< iDynTree::BerdySensor > const *)arg1)->size();
  _out = SWIG_From_size_t(static_cast< size_t >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdySensors_swap(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< iDynTree::BerdySensor > *arg1 = (std::vector< iDynTree::BerdySensor > *) 0 ;
  std::vector< iDynTree::BerdySensor > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("BerdySensors_swap",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_iDynTree__BerdySensor_std__allocatorT_iDynTree__BerdySensor_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdySensors_swap" "', argument " "1"" of type '" "std::vector< iDynTree::BerdySensor > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< iDynTree::BerdySensor > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_std__vectorT_iDynTree__BerdySensor_std__allocatorT_iDynTree__BerdySensor_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BerdySensors_swap" "', argument " "2"" of type '" "std::vector< iDynTree::BerdySensor > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BerdySensors_swap" "', argument " "2"" of type '" "std::vector< iDynTree::BerdySensor > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< iDynTree::BerdySensor > * >(argp2);
  (arg1)->swap(*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdySensors_begin(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< iDynTree::BerdySensor > *arg1 = (std::vector< iDynTree::BerdySensor > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< iDynTree::BerdySensor >::iterator result;
  
  if (!SWIG_check_num_args("BerdySensors_begin",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_iDynTree__BerdySensor_std__allocatorT_iDynTree__BerdySensor_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdySensors_begin" "', argument " "1"" of type '" "std::vector< iDynTree::BerdySensor > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< iDynTree::BerdySensor > * >(argp1);
  result = (arg1)->begin();
  _out = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< iDynTree::BerdySensor >::iterator & >(result)),
    swig::MatlabSwigIterator::descriptor(),SWIG_POINTER_OWN);
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdySensors_end(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< iDynTree::BerdySensor > *arg1 = (std::vector< iDynTree::BerdySensor > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< iDynTree::BerdySensor >::iterator result;
  
  if (!SWIG_check_num_args("BerdySensors_end",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_iDynTree__BerdySensor_std__allocatorT_iDynTree__BerdySensor_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdySensors_end" "', argument " "1"" of type '" "std::vector< iDynTree::BerdySensor > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< iDynTree::BerdySensor > * >(argp1);
  result = (arg1)->end();
  _out = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< iDynTree::BerdySensor >::iterator & >(result)),
    swig::MatlabSwigIterator::descriptor(),SWIG_POINTER_OWN);
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdySensors_rbegin(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< iDynTree::BerdySensor > *arg1 = (std::vector< iDynTree::BerdySensor > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< iDynTree::BerdySensor >::reverse_iterator result;
  
  if (!SWIG_check_num_args("BerdySensors_rbegin",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_iDynTree__BerdySensor_std__allocatorT_iDynTree__BerdySensor_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdySensors_rbegin" "', argument " "1"" of type '" "std::vector< iDynTree::BerdySensor > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< iDynTree::BerdySensor > * >(argp1);
  result = (arg1)->rbegin();
  _out = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< iDynTree::BerdySensor >::reverse_iterator & >(result)),
    swig::MatlabSwigIterator::descriptor(),SWIG_POINTER_OWN);
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdySensors_rend(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< iDynTree::BerdySensor > *arg1 = (std::vector< iDynTree::BerdySensor > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< iDynTree::BerdySensor >::reverse_iterator result;
  
  if (!SWIG_check_num_args("BerdySensors_rend",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_iDynTree__BerdySensor_std__allocatorT_iDynTree__BerdySensor_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdySensors_rend" "', argument " "1"" of type '" "std::vector< iDynTree::BerdySensor > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< iDynTree::BerdySensor > * >(argp1);
  result = (arg1)->rend();
  _out = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< iDynTree::BerdySensor >::reverse_iterator & >(result)),
    swig::MatlabSwigIterator::descriptor(),SWIG_POINTER_OWN);
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdySensors_clear(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< iDynTree::BerdySensor > *arg1 = (std::vector< iDynTree::BerdySensor > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("BerdySensors_clear",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_iDynTree__BerdySensor_std__allocatorT_iDynTree__BerdySensor_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdySensors_clear" "', argument " "1"" of type '" "std::vector< iDynTree::BerdySensor > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< iDynTree::BerdySensor > * >(argp1);
  (arg1)->clear();
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdySensors_get_allocator(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< iDynTree::BerdySensor > *arg1 = (std::vector< iDynTree::BerdySensor > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  SwigValueWrapper< std::allocator< iDynTree::BerdySensor > > result;
  
  if (!SWIG_check_num_args("BerdySensors_get_allocator",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_iDynTree__BerdySensor_std__allocatorT_iDynTree__BerdySensor_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdySensors_get_allocator" "', argument " "1"" of type '" "std::vector< iDynTree::BerdySensor > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< iDynTree::BerdySensor > * >(argp1);
  result = ((std::vector< iDynTree::BerdySensor > const *)arg1)->get_allocator();
  _out = SWIG_NewPointerObj((new std::vector< iDynTree::BerdySensor >::allocator_type(static_cast< const std::vector< iDynTree::BerdySensor >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_iDynTree__BerdySensor_t, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_BerdySensors__SWIG_2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< iDynTree::BerdySensor >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  mxArray * _out;
  std::vector< iDynTree::BerdySensor > *result = 0 ;
  
  if (!SWIG_check_num_args("new_BerdySensors",argc,1,1,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_BerdySensors" "', argument " "1"" of type '" "std::vector< iDynTree::BerdySensor >::size_type""'");
  } 
  arg1 = static_cast< std::vector< iDynTree::BerdySensor >::size_type >(val1);
  result = (std::vector< iDynTree::BerdySensor > *)new std::vector< iDynTree::BerdySensor >(arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_iDynTree__BerdySensor_std__allocatorT_iDynTree__BerdySensor_t_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdySensors_pop_back(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< iDynTree::BerdySensor > *arg1 = (std::vector< iDynTree::BerdySensor > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("BerdySensors_pop_back",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_iDynTree__BerdySensor_std__allocatorT_iDynTree__BerdySensor_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdySensors_pop_back" "', argument " "1"" of type '" "std::vector< iDynTree::BerdySensor > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< iDynTree::BerdySensor > * >(argp1);
  (arg1)->pop_back();
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdySensors_resize__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< iDynTree::BerdySensor > *arg1 = (std::vector< iDynTree::BerdySensor > *) 0 ;
  std::vector< iDynTree::BerdySensor >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("BerdySensors_resize",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_iDynTree__BerdySensor_std__allocatorT_iDynTree__BerdySensor_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdySensors_resize" "', argument " "1"" of type '" "std::vector< iDynTree::BerdySensor > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< iDynTree::BerdySensor > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BerdySensors_resize" "', argument " "2"" of type '" "std::vector< iDynTree::BerdySensor >::size_type""'");
  } 
  arg2 = static_cast< std::vector< iDynTree::BerdySensor >::size_type >(val2);
  (arg1)->resize(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdySensors_erase__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< iDynTree::BerdySensor > *arg1 = (std::vector< iDynTree::BerdySensor > *) 0 ;
  std::vector< iDynTree::BerdySensor >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::MatlabSwigIterator *iter2 = 0 ;
  int res2 ;
  mxArray * _out;
  std::vector< iDynTree::BerdySensor >::iterator result;
  
  if (!SWIG_check_num_args("BerdySensors_erase",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_iDynTree__BerdySensor_std__allocatorT_iDynTree__BerdySensor_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdySensors_erase" "', argument " "1"" of type '" "std::vector< iDynTree::BerdySensor > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< iDynTree::BerdySensor > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter2), swig::MatlabSwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "BerdySensors_erase" "', argument " "2"" of type '" "std::vector< iDynTree::BerdySensor >::iterator""'");
  } else {
    swig::MatlabSwigIterator_T<std::vector< iDynTree::BerdySensor >::iterator > *iter_t = dynamic_cast<swig::MatlabSwigIterator_T<std::vector< iDynTree::BerdySensor >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "BerdySensors_erase" "', argument " "2"" of type '" "std::vector< iDynTree::BerdySensor >::iterator""'");
    }
  }
  result = std_vector_Sl_iDynTree_BerdySensor_Sg__erase__SWIG_0(arg1,arg2);
  _out = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< iDynTree::BerdySensor >::iterator & >(result)),
    swig::MatlabSwigIterator::descriptor(),SWIG_POINTER_OWN);
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdySensors_erase__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< iDynTree::BerdySensor > *arg1 = (std::vector< iDynTree::BerdySensor > *) 0 ;
  std::vector< iDynTree::BerdySensor >::iterator arg2 ;
  std::vector< iDynTree::BerdySensor >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::MatlabSwigIterator *iter2 = 0 ;
  int res2 ;
  swig::MatlabSwigIterator *iter3 = 0 ;
  int res3 ;
  mxArray * _out;
  std::vector< iDynTree::BerdySensor >::iterator result;
  
  if (!SWIG_check_num_args("BerdySensors_erase",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_iDynTree__BerdySensor_std__allocatorT_iDynTree__BerdySensor_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdySensors_erase" "', argument " "1"" of type '" "std::vector< iDynTree::BerdySensor > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< iDynTree::BerdySensor > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter2), swig::MatlabSwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "BerdySensors_erase" "', argument " "2"" of type '" "std::vector< iDynTree::BerdySensor >::iterator""'");
  } else {
    swig::MatlabSwigIterator_T<std::vector< iDynTree::BerdySensor >::iterator > *iter_t = dynamic_cast<swig::MatlabSwigIterator_T<std::vector< iDynTree::BerdySensor >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "BerdySensors_erase" "', argument " "2"" of type '" "std::vector< iDynTree::BerdySensor >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter3), swig::MatlabSwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "BerdySensors_erase" "', argument " "3"" of type '" "std::vector< iDynTree::BerdySensor >::iterator""'");
  } else {
    swig::MatlabSwigIterator_T<std::vector< iDynTree::BerdySensor >::iterator > *iter_t = dynamic_cast<swig::MatlabSwigIterator_T<std::vector< iDynTree::BerdySensor >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "BerdySensors_erase" "', argument " "3"" of type '" "std::vector< iDynTree::BerdySensor >::iterator""'");
    }
  }
  result = std_vector_Sl_iDynTree_BerdySensor_Sg__erase__SWIG_1(arg1,arg2,arg3);
  _out = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< iDynTree::BerdySensor >::iterator & >(result)),
    swig::MatlabSwigIterator::descriptor(),SWIG_POINTER_OWN);
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdySensors_erase(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< iDynTree::BerdySensor,std::allocator< iDynTree::BerdySensor > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::MatlabSwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::MatlabSwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::MatlabSwigIterator_T<std::vector< iDynTree::BerdySensor >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_BerdySensors_erase__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< iDynTree::BerdySensor,std::allocator< iDynTree::BerdySensor > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::MatlabSwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::MatlabSwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::MatlabSwigIterator_T<std::vector< iDynTree::BerdySensor >::iterator > *>(iter) != 0));
      if (_v) {
        swig::MatlabSwigIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::MatlabSwigIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::MatlabSwigIterator_T<std::vector< iDynTree::BerdySensor >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_BerdySensors_erase__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'BerdySensors_erase'."
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< iDynTree::BerdySensor >::erase(std::vector< iDynTree::BerdySensor >::iterator)\n"
    "    std::vector< iDynTree::BerdySensor >::erase(std::vector< iDynTree::BerdySensor >::iterator,std::vector< iDynTree::BerdySensor >::iterator)\n");
  return 1;
}


int _wrap_new_BerdySensors__SWIG_3(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< iDynTree::BerdySensor >::size_type arg1 ;
  std::vector< iDynTree::BerdySensor >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  std::vector< iDynTree::BerdySensor > *result = 0 ;
  
  if (!SWIG_check_num_args("new_BerdySensors",argc,2,2,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_BerdySensors" "', argument " "1"" of type '" "std::vector< iDynTree::BerdySensor >::size_type""'");
  } 
  arg1 = static_cast< std::vector< iDynTree::BerdySensor >::size_type >(val1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__BerdySensor,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_BerdySensors" "', argument " "2"" of type '" "std::vector< iDynTree::BerdySensor >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_BerdySensors" "', argument " "2"" of type '" "std::vector< iDynTree::BerdySensor >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< iDynTree::BerdySensor >::value_type * >(argp2);
  result = (std::vector< iDynTree::BerdySensor > *)new std::vector< iDynTree::BerdySensor >(arg1,(std::vector< iDynTree::BerdySensor >::value_type const &)*arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_iDynTree__BerdySensor_std__allocatorT_iDynTree__BerdySensor_t_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_BerdySensors(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_BerdySensors__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_BerdySensors__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< iDynTree::BerdySensor,std::allocator< iDynTree::BerdySensor > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_BerdySensors__SWIG_1(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__BerdySensor, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_BerdySensors__SWIG_3(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_BerdySensors'."
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< iDynTree::BerdySensor >::vector()\n"
    "    std::vector< iDynTree::BerdySensor >::vector(std::vector< iDynTree::BerdySensor > const &)\n"
    "    std::vector< iDynTree::BerdySensor >::vector(std::vector< iDynTree::BerdySensor >::size_type)\n"
    "    std::vector< iDynTree::BerdySensor >::vector(std::vector< iDynTree::BerdySensor >::size_type,std::vector< iDynTree::BerdySensor >::value_type const &)\n");
  return 1;
}


int _wrap_BerdySensors_push_back(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< iDynTree::BerdySensor > *arg1 = (std::vector< iDynTree::BerdySensor > *) 0 ;
  std::vector< iDynTree::BerdySensor >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("BerdySensors_push_back",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_iDynTree__BerdySensor_std__allocatorT_iDynTree__BerdySensor_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdySensors_push_back" "', argument " "1"" of type '" "std::vector< iDynTree::BerdySensor > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< iDynTree::BerdySensor > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__BerdySensor,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BerdySensors_push_back" "', argument " "2"" of type '" "std::vector< iDynTree::BerdySensor >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BerdySensors_push_back" "', argument " "2"" of type '" "std::vector< iDynTree::BerdySensor >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< iDynTree::BerdySensor >::value_type * >(argp2);
  (arg1)->push_back((std::vector< iDynTree::BerdySensor >::value_type const &)*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdySensors_front(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< iDynTree::BerdySensor > *arg1 = (std::vector< iDynTree::BerdySensor > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< iDynTree::BerdySensor >::value_type *result = 0 ;
  
  if (!SWIG_check_num_args("BerdySensors_front",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_iDynTree__BerdySensor_std__allocatorT_iDynTree__BerdySensor_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdySensors_front" "', argument " "1"" of type '" "std::vector< iDynTree::BerdySensor > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< iDynTree::BerdySensor > * >(argp1);
  result = (std::vector< iDynTree::BerdySensor >::value_type *) &((std::vector< iDynTree::BerdySensor > const *)arg1)->front();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__BerdySensor, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdySensors_back(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< iDynTree::BerdySensor > *arg1 = (std::vector< iDynTree::BerdySensor > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< iDynTree::BerdySensor >::value_type *result = 0 ;
  
  if (!SWIG_check_num_args("BerdySensors_back",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_iDynTree__BerdySensor_std__allocatorT_iDynTree__BerdySensor_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdySensors_back" "', argument " "1"" of type '" "std::vector< iDynTree::BerdySensor > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< iDynTree::BerdySensor > * >(argp1);
  result = (std::vector< iDynTree::BerdySensor >::value_type *) &((std::vector< iDynTree::BerdySensor > const *)arg1)->back();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__BerdySensor, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdySensors_assign(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< iDynTree::BerdySensor > *arg1 = (std::vector< iDynTree::BerdySensor > *) 0 ;
  std::vector< iDynTree::BerdySensor >::size_type arg2 ;
  std::vector< iDynTree::BerdySensor >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("BerdySensors_assign",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_iDynTree__BerdySensor_std__allocatorT_iDynTree__BerdySensor_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdySensors_assign" "', argument " "1"" of type '" "std::vector< iDynTree::BerdySensor > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< iDynTree::BerdySensor > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BerdySensors_assign" "', argument " "2"" of type '" "std::vector< iDynTree::BerdySensor >::size_type""'");
  } 
  arg2 = static_cast< std::vector< iDynTree::BerdySensor >::size_type >(val2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__BerdySensor,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BerdySensors_assign" "', argument " "3"" of type '" "std::vector< iDynTree::BerdySensor >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BerdySensors_assign" "', argument " "3"" of type '" "std::vector< iDynTree::BerdySensor >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< iDynTree::BerdySensor >::value_type * >(argp3);
  (arg1)->assign(arg2,(std::vector< iDynTree::BerdySensor >::value_type const &)*arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdySensors_resize__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< iDynTree::BerdySensor > *arg1 = (std::vector< iDynTree::BerdySensor > *) 0 ;
  std::vector< iDynTree::BerdySensor >::size_type arg2 ;
  std::vector< iDynTree::BerdySensor >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("BerdySensors_resize",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_iDynTree__BerdySensor_std__allocatorT_iDynTree__BerdySensor_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdySensors_resize" "', argument " "1"" of type '" "std::vector< iDynTree::BerdySensor > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< iDynTree::BerdySensor > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BerdySensors_resize" "', argument " "2"" of type '" "std::vector< iDynTree::BerdySensor >::size_type""'");
  } 
  arg2 = static_cast< std::vector< iDynTree::BerdySensor >::size_type >(val2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__BerdySensor,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BerdySensors_resize" "', argument " "3"" of type '" "std::vector< iDynTree::BerdySensor >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BerdySensors_resize" "', argument " "3"" of type '" "std::vector< iDynTree::BerdySensor >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< iDynTree::BerdySensor >::value_type * >(argp3);
  (arg1)->resize(arg2,(std::vector< iDynTree::BerdySensor >::value_type const &)*arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdySensors_resize(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< iDynTree::BerdySensor,std::allocator< iDynTree::BerdySensor > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_BerdySensors_resize__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< iDynTree::BerdySensor,std::allocator< iDynTree::BerdySensor > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_iDynTree__BerdySensor, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_BerdySensors_resize__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'BerdySensors_resize'."
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< iDynTree::BerdySensor >::resize(std::vector< iDynTree::BerdySensor >::size_type)\n"
    "    std::vector< iDynTree::BerdySensor >::resize(std::vector< iDynTree::BerdySensor >::size_type,std::vector< iDynTree::BerdySensor >::value_type const &)\n");
  return 1;
}


int _wrap_BerdySensors_insert__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< iDynTree::BerdySensor > *arg1 = (std::vector< iDynTree::BerdySensor > *) 0 ;
  std::vector< iDynTree::BerdySensor >::iterator arg2 ;
  std::vector< iDynTree::BerdySensor >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::MatlabSwigIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 ;
  int res3 = 0 ;
  mxArray * _out;
  std::vector< iDynTree::BerdySensor >::iterator result;
  
  if (!SWIG_check_num_args("BerdySensors_insert",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_iDynTree__BerdySensor_std__allocatorT_iDynTree__BerdySensor_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdySensors_insert" "', argument " "1"" of type '" "std::vector< iDynTree::BerdySensor > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< iDynTree::BerdySensor > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter2), swig::MatlabSwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "BerdySensors_insert" "', argument " "2"" of type '" "std::vector< iDynTree::BerdySensor >::iterator""'");
  } else {
    swig::MatlabSwigIterator_T<std::vector< iDynTree::BerdySensor >::iterator > *iter_t = dynamic_cast<swig::MatlabSwigIterator_T<std::vector< iDynTree::BerdySensor >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "BerdySensors_insert" "', argument " "2"" of type '" "std::vector< iDynTree::BerdySensor >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__BerdySensor,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BerdySensors_insert" "', argument " "3"" of type '" "std::vector< iDynTree::BerdySensor >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BerdySensors_insert" "', argument " "3"" of type '" "std::vector< iDynTree::BerdySensor >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< iDynTree::BerdySensor >::value_type * >(argp3);
  result = std_vector_Sl_iDynTree_BerdySensor_Sg__insert__SWIG_0(arg1,arg2,(iDynTree::BerdySensor const &)*arg3);
  _out = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< iDynTree::BerdySensor >::iterator & >(result)),
    swig::MatlabSwigIterator::descriptor(),SWIG_POINTER_OWN);
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdySensors_insert__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< iDynTree::BerdySensor > *arg1 = (std::vector< iDynTree::BerdySensor > *) 0 ;
  std::vector< iDynTree::BerdySensor >::iterator arg2 ;
  std::vector< iDynTree::BerdySensor >::size_type arg3 ;
  std::vector< iDynTree::BerdySensor >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::MatlabSwigIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("BerdySensors_insert",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_iDynTree__BerdySensor_std__allocatorT_iDynTree__BerdySensor_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdySensors_insert" "', argument " "1"" of type '" "std::vector< iDynTree::BerdySensor > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< iDynTree::BerdySensor > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter2), swig::MatlabSwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "BerdySensors_insert" "', argument " "2"" of type '" "std::vector< iDynTree::BerdySensor >::iterator""'");
  } else {
    swig::MatlabSwigIterator_T<std::vector< iDynTree::BerdySensor >::iterator > *iter_t = dynamic_cast<swig::MatlabSwigIterator_T<std::vector< iDynTree::BerdySensor >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "BerdySensors_insert" "', argument " "2"" of type '" "std::vector< iDynTree::BerdySensor >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BerdySensors_insert" "', argument " "3"" of type '" "std::vector< iDynTree::BerdySensor >::size_type""'");
  } 
  arg3 = static_cast< std::vector< iDynTree::BerdySensor >::size_type >(val3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__BerdySensor,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "BerdySensors_insert" "', argument " "4"" of type '" "std::vector< iDynTree::BerdySensor >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BerdySensors_insert" "', argument " "4"" of type '" "std::vector< iDynTree::BerdySensor >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< iDynTree::BerdySensor >::value_type * >(argp4);
  std_vector_Sl_iDynTree_BerdySensor_Sg__insert__SWIG_1(arg1,arg2,arg3,(iDynTree::BerdySensor const &)*arg4);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdySensors_insert(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< iDynTree::BerdySensor,std::allocator< iDynTree::BerdySensor > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::MatlabSwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::MatlabSwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::MatlabSwigIterator_T<std::vector< iDynTree::BerdySensor >::iterator > *>(iter) != 0));
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_iDynTree__BerdySensor, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_BerdySensors_insert__SWIG_0(resc,resv,argc,argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< iDynTree::BerdySensor,std::allocator< iDynTree::BerdySensor > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::MatlabSwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::MatlabSwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::MatlabSwigIterator_T<std::vector< iDynTree::BerdySensor >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_iDynTree__BerdySensor, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_BerdySensors_insert__SWIG_1(resc,resv,argc,argv);
          }
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'BerdySensors_insert'."
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< iDynTree::BerdySensor >::insert(std::vector< iDynTree::BerdySensor >::iterator,std::vector< iDynTree::BerdySensor >::value_type const &)\n"
    "    std::vector< iDynTree::BerdySensor >::insert(std::vector< iDynTree::BerdySensor >::iterator,std::vector< iDynTree::BerdySensor >::size_type,std::vector< iDynTree::BerdySensor >::value_type const &)\n");
  return 1;
}


int _wrap_BerdySensors_reserve(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< iDynTree::BerdySensor > *arg1 = (std::vector< iDynTree::BerdySensor > *) 0 ;
  std::vector< iDynTree::BerdySensor >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("BerdySensors_reserve",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_iDynTree__BerdySensor_std__allocatorT_iDynTree__BerdySensor_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdySensors_reserve" "', argument " "1"" of type '" "std::vector< iDynTree::BerdySensor > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< iDynTree::BerdySensor > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BerdySensors_reserve" "', argument " "2"" of type '" "std::vector< iDynTree::BerdySensor >::size_type""'");
  } 
  arg2 = static_cast< std::vector< iDynTree::BerdySensor >::size_type >(val2);
  (arg1)->reserve(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdySensors_capacity(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< iDynTree::BerdySensor > *arg1 = (std::vector< iDynTree::BerdySensor > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< iDynTree::BerdySensor >::size_type result;
  
  if (!SWIG_check_num_args("BerdySensors_capacity",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_iDynTree__BerdySensor_std__allocatorT_iDynTree__BerdySensor_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdySensors_capacity" "', argument " "1"" of type '" "std::vector< iDynTree::BerdySensor > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< iDynTree::BerdySensor > * >(argp1);
  result = ((std::vector< iDynTree::BerdySensor > const *)arg1)->capacity();
  _out = SWIG_From_size_t(static_cast< size_t >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_BerdySensors(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< iDynTree::BerdySensor > *arg1 = (std::vector< iDynTree::BerdySensor > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_BerdySensors",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_iDynTree__BerdySensor_std__allocatorT_iDynTree__BerdySensor_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BerdySensors" "', argument " "1"" of type '" "std::vector< iDynTree::BerdySensor > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< iDynTree::BerdySensor > * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdyDynamicVariables_pop(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< iDynTree::BerdyDynamicVariable > *arg1 = (std::vector< iDynTree::BerdyDynamicVariable > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< iDynTree::BerdyDynamicVariable >::value_type result;
  
  if (!SWIG_check_num_args("BerdyDynamicVariables_pop",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_iDynTree__BerdyDynamicVariable_std__allocatorT_iDynTree__BerdyDynamicVariable_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdyDynamicVariables_pop" "', argument " "1"" of type '" "std::vector< iDynTree::BerdyDynamicVariable > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< iDynTree::BerdyDynamicVariable > * >(argp1);
  try {
    result = std_vector_Sl_iDynTree_BerdyDynamicVariable_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  _out = SWIG_NewPointerObj((new std::vector< iDynTree::BerdyDynamicVariable >::value_type(static_cast< const std::vector< iDynTree::BerdyDynamicVariable >::value_type& >(result))), SWIGTYPE_p_iDynTree__BerdyDynamicVariable, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdyDynamicVariables_brace(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< iDynTree::BerdyDynamicVariable > *arg1 = (std::vector< iDynTree::BerdyDynamicVariable > *) 0 ;
  std::vector< iDynTree::BerdyDynamicVariable >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  std::vector< iDynTree::BerdyDynamicVariable >::value_type result;
  
  if (!SWIG_check_num_args("BerdyDynamicVariables_brace",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_iDynTree__BerdyDynamicVariable_std__allocatorT_iDynTree__BerdyDynamicVariable_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdyDynamicVariables_brace" "', argument " "1"" of type '" "std::vector< iDynTree::BerdyDynamicVariable > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< iDynTree::BerdyDynamicVariable > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BerdyDynamicVariables_brace" "', argument " "2"" of type '" "std::vector< iDynTree::BerdyDynamicVariable >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< iDynTree::BerdyDynamicVariable >::difference_type >(val2);
  try {
    result = std_vector_Sl_iDynTree_BerdyDynamicVariable_Sg__brace(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  _out = SWIG_NewPointerObj((new std::vector< iDynTree::BerdyDynamicVariable >::value_type(static_cast< const std::vector< iDynTree::BerdyDynamicVariable >::value_type& >(result))), SWIGTYPE_p_iDynTree__BerdyDynamicVariable, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdyDynamicVariables_setbrace(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< iDynTree::BerdyDynamicVariable > *arg1 = (std::vector< iDynTree::BerdyDynamicVariable > *) 0 ;
  std::vector< iDynTree::BerdyDynamicVariable >::value_type arg2 ;
  std::vector< iDynTree::BerdyDynamicVariable >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("BerdyDynamicVariables_setbrace",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_iDynTree__BerdyDynamicVariable_std__allocatorT_iDynTree__BerdyDynamicVariable_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdyDynamicVariables_setbrace" "', argument " "1"" of type '" "std::vector< iDynTree::BerdyDynamicVariable > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< iDynTree::BerdyDynamicVariable > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__BerdyDynamicVariable,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BerdyDynamicVariables_setbrace" "', argument " "2"" of type '" "std::vector< iDynTree::BerdyDynamicVariable >::value_type""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BerdyDynamicVariables_setbrace" "', argument " "2"" of type '" "std::vector< iDynTree::BerdyDynamicVariable >::value_type""'");
    } else {
      arg2 = *(reinterpret_cast< std::vector< iDynTree::BerdyDynamicVariable >::value_type * >(argp2));
    }
  }
  ecode3 = SWIG_AsVal_ptrdiff_t(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BerdyDynamicVariables_setbrace" "', argument " "3"" of type '" "std::vector< iDynTree::BerdyDynamicVariable >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< iDynTree::BerdyDynamicVariable >::difference_type >(val3);
  try {
    std_vector_Sl_iDynTree_BerdyDynamicVariable_Sg__setbrace(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdyDynamicVariables_append(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< iDynTree::BerdyDynamicVariable > *arg1 = (std::vector< iDynTree::BerdyDynamicVariable > *) 0 ;
  std::vector< iDynTree::BerdyDynamicVariable >::value_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("BerdyDynamicVariables_append",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_iDynTree__BerdyDynamicVariable_std__allocatorT_iDynTree__BerdyDynamicVariable_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdyDynamicVariables_append" "', argument " "1"" of type '" "std::vector< iDynTree::BerdyDynamicVariable > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< iDynTree::BerdyDynamicVariable > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__BerdyDynamicVariable,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BerdyDynamicVariables_append" "', argument " "2"" of type '" "std::vector< iDynTree::BerdyDynamicVariable >::value_type""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BerdyDynamicVariables_append" "', argument " "2"" of type '" "std::vector< iDynTree::BerdyDynamicVariable >::value_type""'");
    } else {
      arg2 = *(reinterpret_cast< std::vector< iDynTree::BerdyDynamicVariable >::value_type * >(argp2));
    }
  }
  std_vector_Sl_iDynTree_BerdyDynamicVariable_Sg__append(arg1,arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_BerdyDynamicVariables__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  std::vector< iDynTree::BerdyDynamicVariable > *result = 0 ;
  
  if (!SWIG_check_num_args("new_BerdyDynamicVariables",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (std::vector< iDynTree::BerdyDynamicVariable > *)new std::vector< iDynTree::BerdyDynamicVariable >();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_iDynTree__BerdyDynamicVariable_std__allocatorT_iDynTree__BerdyDynamicVariable_t_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_BerdyDynamicVariables__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< iDynTree::BerdyDynamicVariable > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  mxArray * _out;
  std::vector< iDynTree::BerdyDynamicVariable > *result = 0 ;
  
  if (!SWIG_check_num_args("new_BerdyDynamicVariables",argc,1,1,0)) {
    SWIG_fail;
  }
  {
    std::vector< iDynTree::BerdyDynamicVariable,std::allocator< iDynTree::BerdyDynamicVariable > > *ptr = (std::vector< iDynTree::BerdyDynamicVariable,std::allocator< iDynTree::BerdyDynamicVariable > > *)0;
    res1 = swig::asptr(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_BerdyDynamicVariables" "', argument " "1"" of type '" "std::vector< iDynTree::BerdyDynamicVariable > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_BerdyDynamicVariables" "', argument " "1"" of type '" "std::vector< iDynTree::BerdyDynamicVariable > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< iDynTree::BerdyDynamicVariable > *)new std::vector< iDynTree::BerdyDynamicVariable >((std::vector< iDynTree::BerdyDynamicVariable > const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_iDynTree__BerdyDynamicVariable_std__allocatorT_iDynTree__BerdyDynamicVariable_t_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res1)) delete arg1;
  return 0;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return 1;
}


int _wrap_BerdyDynamicVariables_empty(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< iDynTree::BerdyDynamicVariable > *arg1 = (std::vector< iDynTree::BerdyDynamicVariable > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("BerdyDynamicVariables_empty",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_iDynTree__BerdyDynamicVariable_std__allocatorT_iDynTree__BerdyDynamicVariable_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdyDynamicVariables_empty" "', argument " "1"" of type '" "std::vector< iDynTree::BerdyDynamicVariable > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< iDynTree::BerdyDynamicVariable > * >(argp1);
  result = (bool)((std::vector< iDynTree::BerdyDynamicVariable > const *)arg1)->empty();
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdyDynamicVariables_size(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< iDynTree::BerdyDynamicVariable > *arg1 = (std::vector< iDynTree::BerdyDynamicVariable > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< iDynTree::BerdyDynamicVariable >::size_type result;
  
  if (!SWIG_check_num_args("BerdyDynamicVariables_size",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_iDynTree__BerdyDynamicVariable_std__allocatorT_iDynTree__BerdyDynamicVariable_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdyDynamicVariables_size" "', argument " "1"" of type '" "std::vector< iDynTree::BerdyDynamicVariable > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< iDynTree::BerdyDynamicVariable > * >(argp1);
  result = ((std::vector< iDynTree::BerdyDynamicVariable > const *)arg1)->size();
  _out = SWIG_From_size_t(static_cast< size_t >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdyDynamicVariables_swap(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< iDynTree::BerdyDynamicVariable > *arg1 = (std::vector< iDynTree::BerdyDynamicVariable > *) 0 ;
  std::vector< iDynTree::BerdyDynamicVariable > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("BerdyDynamicVariables_swap",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_iDynTree__BerdyDynamicVariable_std__allocatorT_iDynTree__BerdyDynamicVariable_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdyDynamicVariables_swap" "', argument " "1"" of type '" "std::vector< iDynTree::BerdyDynamicVariable > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< iDynTree::BerdyDynamicVariable > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_std__vectorT_iDynTree__BerdyDynamicVariable_std__allocatorT_iDynTree__BerdyDynamicVariable_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BerdyDynamicVariables_swap" "', argument " "2"" of type '" "std::vector< iDynTree::BerdyDynamicVariable > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BerdyDynamicVariables_swap" "', argument " "2"" of type '" "std::vector< iDynTree::BerdyDynamicVariable > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< iDynTree::BerdyDynamicVariable > * >(argp2);
  (arg1)->swap(*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdyDynamicVariables_begin(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< iDynTree::BerdyDynamicVariable > *arg1 = (std::vector< iDynTree::BerdyDynamicVariable > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< iDynTree::BerdyDynamicVariable >::iterator result;
  
  if (!SWIG_check_num_args("BerdyDynamicVariables_begin",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_iDynTree__BerdyDynamicVariable_std__allocatorT_iDynTree__BerdyDynamicVariable_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdyDynamicVariables_begin" "', argument " "1"" of type '" "std::vector< iDynTree::BerdyDynamicVariable > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< iDynTree::BerdyDynamicVariable > * >(argp1);
  result = (arg1)->begin();
  _out = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< iDynTree::BerdyDynamicVariable >::iterator & >(result)),
    swig::MatlabSwigIterator::descriptor(),SWIG_POINTER_OWN);
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdyDynamicVariables_end(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< iDynTree::BerdyDynamicVariable > *arg1 = (std::vector< iDynTree::BerdyDynamicVariable > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< iDynTree::BerdyDynamicVariable >::iterator result;
  
  if (!SWIG_check_num_args("BerdyDynamicVariables_end",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_iDynTree__BerdyDynamicVariable_std__allocatorT_iDynTree__BerdyDynamicVariable_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdyDynamicVariables_end" "', argument " "1"" of type '" "std::vector< iDynTree::BerdyDynamicVariable > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< iDynTree::BerdyDynamicVariable > * >(argp1);
  result = (arg1)->end();
  _out = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< iDynTree::BerdyDynamicVariable >::iterator & >(result)),
    swig::MatlabSwigIterator::descriptor(),SWIG_POINTER_OWN);
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdyDynamicVariables_rbegin(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< iDynTree::BerdyDynamicVariable > *arg1 = (std::vector< iDynTree::BerdyDynamicVariable > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< iDynTree::BerdyDynamicVariable >::reverse_iterator result;
  
  if (!SWIG_check_num_args("BerdyDynamicVariables_rbegin",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_iDynTree__BerdyDynamicVariable_std__allocatorT_iDynTree__BerdyDynamicVariable_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdyDynamicVariables_rbegin" "', argument " "1"" of type '" "std::vector< iDynTree::BerdyDynamicVariable > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< iDynTree::BerdyDynamicVariable > * >(argp1);
  result = (arg1)->rbegin();
  _out = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< iDynTree::BerdyDynamicVariable >::reverse_iterator & >(result)),
    swig::MatlabSwigIterator::descriptor(),SWIG_POINTER_OWN);
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdyDynamicVariables_rend(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< iDynTree::BerdyDynamicVariable > *arg1 = (std::vector< iDynTree::BerdyDynamicVariable > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< iDynTree::BerdyDynamicVariable >::reverse_iterator result;
  
  if (!SWIG_check_num_args("BerdyDynamicVariables_rend",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_iDynTree__BerdyDynamicVariable_std__allocatorT_iDynTree__BerdyDynamicVariable_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdyDynamicVariables_rend" "', argument " "1"" of type '" "std::vector< iDynTree::BerdyDynamicVariable > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< iDynTree::BerdyDynamicVariable > * >(argp1);
  result = (arg1)->rend();
  _out = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< iDynTree::BerdyDynamicVariable >::reverse_iterator & >(result)),
    swig::MatlabSwigIterator::descriptor(),SWIG_POINTER_OWN);
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdyDynamicVariables_clear(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< iDynTree::BerdyDynamicVariable > *arg1 = (std::vector< iDynTree::BerdyDynamicVariable > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("BerdyDynamicVariables_clear",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_iDynTree__BerdyDynamicVariable_std__allocatorT_iDynTree__BerdyDynamicVariable_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdyDynamicVariables_clear" "', argument " "1"" of type '" "std::vector< iDynTree::BerdyDynamicVariable > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< iDynTree::BerdyDynamicVariable > * >(argp1);
  (arg1)->clear();
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdyDynamicVariables_get_allocator(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< iDynTree::BerdyDynamicVariable > *arg1 = (std::vector< iDynTree::BerdyDynamicVariable > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  SwigValueWrapper< std::allocator< iDynTree::BerdyDynamicVariable > > result;
  
  if (!SWIG_check_num_args("BerdyDynamicVariables_get_allocator",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_iDynTree__BerdyDynamicVariable_std__allocatorT_iDynTree__BerdyDynamicVariable_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdyDynamicVariables_get_allocator" "', argument " "1"" of type '" "std::vector< iDynTree::BerdyDynamicVariable > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< iDynTree::BerdyDynamicVariable > * >(argp1);
  result = ((std::vector< iDynTree::BerdyDynamicVariable > const *)arg1)->get_allocator();
  _out = SWIG_NewPointerObj((new std::vector< iDynTree::BerdyDynamicVariable >::allocator_type(static_cast< const std::vector< iDynTree::BerdyDynamicVariable >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_iDynTree__BerdyDynamicVariable_t, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_BerdyDynamicVariables__SWIG_2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< iDynTree::BerdyDynamicVariable >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  mxArray * _out;
  std::vector< iDynTree::BerdyDynamicVariable > *result = 0 ;
  
  if (!SWIG_check_num_args("new_BerdyDynamicVariables",argc,1,1,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_BerdyDynamicVariables" "', argument " "1"" of type '" "std::vector< iDynTree::BerdyDynamicVariable >::size_type""'");
  } 
  arg1 = static_cast< std::vector< iDynTree::BerdyDynamicVariable >::size_type >(val1);
  result = (std::vector< iDynTree::BerdyDynamicVariable > *)new std::vector< iDynTree::BerdyDynamicVariable >(arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_iDynTree__BerdyDynamicVariable_std__allocatorT_iDynTree__BerdyDynamicVariable_t_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdyDynamicVariables_pop_back(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< iDynTree::BerdyDynamicVariable > *arg1 = (std::vector< iDynTree::BerdyDynamicVariable > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("BerdyDynamicVariables_pop_back",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_iDynTree__BerdyDynamicVariable_std__allocatorT_iDynTree__BerdyDynamicVariable_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdyDynamicVariables_pop_back" "', argument " "1"" of type '" "std::vector< iDynTree::BerdyDynamicVariable > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< iDynTree::BerdyDynamicVariable > * >(argp1);
  (arg1)->pop_back();
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdyDynamicVariables_resize__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< iDynTree::BerdyDynamicVariable > *arg1 = (std::vector< iDynTree::BerdyDynamicVariable > *) 0 ;
  std::vector< iDynTree::BerdyDynamicVariable >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("BerdyDynamicVariables_resize",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_iDynTree__BerdyDynamicVariable_std__allocatorT_iDynTree__BerdyDynamicVariable_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdyDynamicVariables_resize" "', argument " "1"" of type '" "std::vector< iDynTree::BerdyDynamicVariable > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< iDynTree::BerdyDynamicVariable > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BerdyDynamicVariables_resize" "', argument " "2"" of type '" "std::vector< iDynTree::BerdyDynamicVariable >::size_type""'");
  } 
  arg2 = static_cast< std::vector< iDynTree::BerdyDynamicVariable >::size_type >(val2);
  (arg1)->resize(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdyDynamicVariables_erase__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< iDynTree::BerdyDynamicVariable > *arg1 = (std::vector< iDynTree::BerdyDynamicVariable > *) 0 ;
  std::vector< iDynTree::BerdyDynamicVariable >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::MatlabSwigIterator *iter2 = 0 ;
  int res2 ;
  mxArray * _out;
  std::vector< iDynTree::BerdyDynamicVariable >::iterator result;
  
  if (!SWIG_check_num_args("BerdyDynamicVariables_erase",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_iDynTree__BerdyDynamicVariable_std__allocatorT_iDynTree__BerdyDynamicVariable_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdyDynamicVariables_erase" "', argument " "1"" of type '" "std::vector< iDynTree::BerdyDynamicVariable > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< iDynTree::BerdyDynamicVariable > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter2), swig::MatlabSwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "BerdyDynamicVariables_erase" "', argument " "2"" of type '" "std::vector< iDynTree::BerdyDynamicVariable >::iterator""'");
  } else {
    swig::MatlabSwigIterator_T<std::vector< iDynTree::BerdyDynamicVariable >::iterator > *iter_t = dynamic_cast<swig::MatlabSwigIterator_T<std::vector< iDynTree::BerdyDynamicVariable >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "BerdyDynamicVariables_erase" "', argument " "2"" of type '" "std::vector< iDynTree::BerdyDynamicVariable >::iterator""'");
    }
  }
  result = std_vector_Sl_iDynTree_BerdyDynamicVariable_Sg__erase__SWIG_0(arg1,arg2);
  _out = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< iDynTree::BerdyDynamicVariable >::iterator & >(result)),
    swig::MatlabSwigIterator::descriptor(),SWIG_POINTER_OWN);
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdyDynamicVariables_erase__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< iDynTree::BerdyDynamicVariable > *arg1 = (std::vector< iDynTree::BerdyDynamicVariable > *) 0 ;
  std::vector< iDynTree::BerdyDynamicVariable >::iterator arg2 ;
  std::vector< iDynTree::BerdyDynamicVariable >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::MatlabSwigIterator *iter2 = 0 ;
  int res2 ;
  swig::MatlabSwigIterator *iter3 = 0 ;
  int res3 ;
  mxArray * _out;
  std::vector< iDynTree::BerdyDynamicVariable >::iterator result;
  
  if (!SWIG_check_num_args("BerdyDynamicVariables_erase",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_iDynTree__BerdyDynamicVariable_std__allocatorT_iDynTree__BerdyDynamicVariable_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdyDynamicVariables_erase" "', argument " "1"" of type '" "std::vector< iDynTree::BerdyDynamicVariable > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< iDynTree::BerdyDynamicVariable > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter2), swig::MatlabSwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "BerdyDynamicVariables_erase" "', argument " "2"" of type '" "std::vector< iDynTree::BerdyDynamicVariable >::iterator""'");
  } else {
    swig::MatlabSwigIterator_T<std::vector< iDynTree::BerdyDynamicVariable >::iterator > *iter_t = dynamic_cast<swig::MatlabSwigIterator_T<std::vector< iDynTree::BerdyDynamicVariable >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "BerdyDynamicVariables_erase" "', argument " "2"" of type '" "std::vector< iDynTree::BerdyDynamicVariable >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter3), swig::MatlabSwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "BerdyDynamicVariables_erase" "', argument " "3"" of type '" "std::vector< iDynTree::BerdyDynamicVariable >::iterator""'");
  } else {
    swig::MatlabSwigIterator_T<std::vector< iDynTree::BerdyDynamicVariable >::iterator > *iter_t = dynamic_cast<swig::MatlabSwigIterator_T<std::vector< iDynTree::BerdyDynamicVariable >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "BerdyDynamicVariables_erase" "', argument " "3"" of type '" "std::vector< iDynTree::BerdyDynamicVariable >::iterator""'");
    }
  }
  result = std_vector_Sl_iDynTree_BerdyDynamicVariable_Sg__erase__SWIG_1(arg1,arg2,arg3);
  _out = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< iDynTree::BerdyDynamicVariable >::iterator & >(result)),
    swig::MatlabSwigIterator::descriptor(),SWIG_POINTER_OWN);
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdyDynamicVariables_erase(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< iDynTree::BerdyDynamicVariable,std::allocator< iDynTree::BerdyDynamicVariable > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::MatlabSwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::MatlabSwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::MatlabSwigIterator_T<std::vector< iDynTree::BerdyDynamicVariable >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_BerdyDynamicVariables_erase__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< iDynTree::BerdyDynamicVariable,std::allocator< iDynTree::BerdyDynamicVariable > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::MatlabSwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::MatlabSwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::MatlabSwigIterator_T<std::vector< iDynTree::BerdyDynamicVariable >::iterator > *>(iter) != 0));
      if (_v) {
        swig::MatlabSwigIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::MatlabSwigIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::MatlabSwigIterator_T<std::vector< iDynTree::BerdyDynamicVariable >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_BerdyDynamicVariables_erase__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'BerdyDynamicVariables_erase'."
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< iDynTree::BerdyDynamicVariable >::erase(std::vector< iDynTree::BerdyDynamicVariable >::iterator)\n"
    "    std::vector< iDynTree::BerdyDynamicVariable >::erase(std::vector< iDynTree::BerdyDynamicVariable >::iterator,std::vector< iDynTree::BerdyDynamicVariable >::iterator)\n");
  return 1;
}


int _wrap_new_BerdyDynamicVariables__SWIG_3(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< iDynTree::BerdyDynamicVariable >::size_type arg1 ;
  std::vector< iDynTree::BerdyDynamicVariable >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  std::vector< iDynTree::BerdyDynamicVariable > *result = 0 ;
  
  if (!SWIG_check_num_args("new_BerdyDynamicVariables",argc,2,2,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_BerdyDynamicVariables" "', argument " "1"" of type '" "std::vector< iDynTree::BerdyDynamicVariable >::size_type""'");
  } 
  arg1 = static_cast< std::vector< iDynTree::BerdyDynamicVariable >::size_type >(val1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__BerdyDynamicVariable,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_BerdyDynamicVariables" "', argument " "2"" of type '" "std::vector< iDynTree::BerdyDynamicVariable >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_BerdyDynamicVariables" "', argument " "2"" of type '" "std::vector< iDynTree::BerdyDynamicVariable >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< iDynTree::BerdyDynamicVariable >::value_type * >(argp2);
  result = (std::vector< iDynTree::BerdyDynamicVariable > *)new std::vector< iDynTree::BerdyDynamicVariable >(arg1,(std::vector< iDynTree::BerdyDynamicVariable >::value_type const &)*arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_iDynTree__BerdyDynamicVariable_std__allocatorT_iDynTree__BerdyDynamicVariable_t_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_BerdyDynamicVariables(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_BerdyDynamicVariables__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_BerdyDynamicVariables__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< iDynTree::BerdyDynamicVariable,std::allocator< iDynTree::BerdyDynamicVariable > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_BerdyDynamicVariables__SWIG_1(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__BerdyDynamicVariable, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_BerdyDynamicVariables__SWIG_3(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_BerdyDynamicVariables'."
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< iDynTree::BerdyDynamicVariable >::vector()\n"
    "    std::vector< iDynTree::BerdyDynamicVariable >::vector(std::vector< iDynTree::BerdyDynamicVariable > const &)\n"
    "    std::vector< iDynTree::BerdyDynamicVariable >::vector(std::vector< iDynTree::BerdyDynamicVariable >::size_type)\n"
    "    std::vector< iDynTree::BerdyDynamicVariable >::vector(std::vector< iDynTree::BerdyDynamicVariable >::size_type,std::vector< iDynTree::BerdyDynamicVariable >::value_type const &)\n");
  return 1;
}


int _wrap_BerdyDynamicVariables_push_back(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< iDynTree::BerdyDynamicVariable > *arg1 = (std::vector< iDynTree::BerdyDynamicVariable > *) 0 ;
  std::vector< iDynTree::BerdyDynamicVariable >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("BerdyDynamicVariables_push_back",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_iDynTree__BerdyDynamicVariable_std__allocatorT_iDynTree__BerdyDynamicVariable_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdyDynamicVariables_push_back" "', argument " "1"" of type '" "std::vector< iDynTree::BerdyDynamicVariable > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< iDynTree::BerdyDynamicVariable > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__BerdyDynamicVariable,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BerdyDynamicVariables_push_back" "', argument " "2"" of type '" "std::vector< iDynTree::BerdyDynamicVariable >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BerdyDynamicVariables_push_back" "', argument " "2"" of type '" "std::vector< iDynTree::BerdyDynamicVariable >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< iDynTree::BerdyDynamicVariable >::value_type * >(argp2);
  (arg1)->push_back((std::vector< iDynTree::BerdyDynamicVariable >::value_type const &)*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdyDynamicVariables_front(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< iDynTree::BerdyDynamicVariable > *arg1 = (std::vector< iDynTree::BerdyDynamicVariable > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< iDynTree::BerdyDynamicVariable >::value_type *result = 0 ;
  
  if (!SWIG_check_num_args("BerdyDynamicVariables_front",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_iDynTree__BerdyDynamicVariable_std__allocatorT_iDynTree__BerdyDynamicVariable_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdyDynamicVariables_front" "', argument " "1"" of type '" "std::vector< iDynTree::BerdyDynamicVariable > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< iDynTree::BerdyDynamicVariable > * >(argp1);
  result = (std::vector< iDynTree::BerdyDynamicVariable >::value_type *) &((std::vector< iDynTree::BerdyDynamicVariable > const *)arg1)->front();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__BerdyDynamicVariable, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdyDynamicVariables_back(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< iDynTree::BerdyDynamicVariable > *arg1 = (std::vector< iDynTree::BerdyDynamicVariable > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< iDynTree::BerdyDynamicVariable >::value_type *result = 0 ;
  
  if (!SWIG_check_num_args("BerdyDynamicVariables_back",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_iDynTree__BerdyDynamicVariable_std__allocatorT_iDynTree__BerdyDynamicVariable_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdyDynamicVariables_back" "', argument " "1"" of type '" "std::vector< iDynTree::BerdyDynamicVariable > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< iDynTree::BerdyDynamicVariable > * >(argp1);
  result = (std::vector< iDynTree::BerdyDynamicVariable >::value_type *) &((std::vector< iDynTree::BerdyDynamicVariable > const *)arg1)->back();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__BerdyDynamicVariable, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdyDynamicVariables_assign(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< iDynTree::BerdyDynamicVariable > *arg1 = (std::vector< iDynTree::BerdyDynamicVariable > *) 0 ;
  std::vector< iDynTree::BerdyDynamicVariable >::size_type arg2 ;
  std::vector< iDynTree::BerdyDynamicVariable >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("BerdyDynamicVariables_assign",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_iDynTree__BerdyDynamicVariable_std__allocatorT_iDynTree__BerdyDynamicVariable_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdyDynamicVariables_assign" "', argument " "1"" of type '" "std::vector< iDynTree::BerdyDynamicVariable > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< iDynTree::BerdyDynamicVariable > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BerdyDynamicVariables_assign" "', argument " "2"" of type '" "std::vector< iDynTree::BerdyDynamicVariable >::size_type""'");
  } 
  arg2 = static_cast< std::vector< iDynTree::BerdyDynamicVariable >::size_type >(val2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__BerdyDynamicVariable,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BerdyDynamicVariables_assign" "', argument " "3"" of type '" "std::vector< iDynTree::BerdyDynamicVariable >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BerdyDynamicVariables_assign" "', argument " "3"" of type '" "std::vector< iDynTree::BerdyDynamicVariable >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< iDynTree::BerdyDynamicVariable >::value_type * >(argp3);
  (arg1)->assign(arg2,(std::vector< iDynTree::BerdyDynamicVariable >::value_type const &)*arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdyDynamicVariables_resize__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< iDynTree::BerdyDynamicVariable > *arg1 = (std::vector< iDynTree::BerdyDynamicVariable > *) 0 ;
  std::vector< iDynTree::BerdyDynamicVariable >::size_type arg2 ;
  std::vector< iDynTree::BerdyDynamicVariable >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("BerdyDynamicVariables_resize",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_iDynTree__BerdyDynamicVariable_std__allocatorT_iDynTree__BerdyDynamicVariable_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdyDynamicVariables_resize" "', argument " "1"" of type '" "std::vector< iDynTree::BerdyDynamicVariable > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< iDynTree::BerdyDynamicVariable > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BerdyDynamicVariables_resize" "', argument " "2"" of type '" "std::vector< iDynTree::BerdyDynamicVariable >::size_type""'");
  } 
  arg2 = static_cast< std::vector< iDynTree::BerdyDynamicVariable >::size_type >(val2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__BerdyDynamicVariable,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BerdyDynamicVariables_resize" "', argument " "3"" of type '" "std::vector< iDynTree::BerdyDynamicVariable >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BerdyDynamicVariables_resize" "', argument " "3"" of type '" "std::vector< iDynTree::BerdyDynamicVariable >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< iDynTree::BerdyDynamicVariable >::value_type * >(argp3);
  (arg1)->resize(arg2,(std::vector< iDynTree::BerdyDynamicVariable >::value_type const &)*arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdyDynamicVariables_resize(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< iDynTree::BerdyDynamicVariable,std::allocator< iDynTree::BerdyDynamicVariable > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_BerdyDynamicVariables_resize__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< iDynTree::BerdyDynamicVariable,std::allocator< iDynTree::BerdyDynamicVariable > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_iDynTree__BerdyDynamicVariable, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_BerdyDynamicVariables_resize__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'BerdyDynamicVariables_resize'."
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< iDynTree::BerdyDynamicVariable >::resize(std::vector< iDynTree::BerdyDynamicVariable >::size_type)\n"
    "    std::vector< iDynTree::BerdyDynamicVariable >::resize(std::vector< iDynTree::BerdyDynamicVariable >::size_type,std::vector< iDynTree::BerdyDynamicVariable >::value_type const &)\n");
  return 1;
}


int _wrap_BerdyDynamicVariables_insert__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< iDynTree::BerdyDynamicVariable > *arg1 = (std::vector< iDynTree::BerdyDynamicVariable > *) 0 ;
  std::vector< iDynTree::BerdyDynamicVariable >::iterator arg2 ;
  std::vector< iDynTree::BerdyDynamicVariable >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::MatlabSwigIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 ;
  int res3 = 0 ;
  mxArray * _out;
  std::vector< iDynTree::BerdyDynamicVariable >::iterator result;
  
  if (!SWIG_check_num_args("BerdyDynamicVariables_insert",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_iDynTree__BerdyDynamicVariable_std__allocatorT_iDynTree__BerdyDynamicVariable_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdyDynamicVariables_insert" "', argument " "1"" of type '" "std::vector< iDynTree::BerdyDynamicVariable > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< iDynTree::BerdyDynamicVariable > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter2), swig::MatlabSwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "BerdyDynamicVariables_insert" "', argument " "2"" of type '" "std::vector< iDynTree::BerdyDynamicVariable >::iterator""'");
  } else {
    swig::MatlabSwigIterator_T<std::vector< iDynTree::BerdyDynamicVariable >::iterator > *iter_t = dynamic_cast<swig::MatlabSwigIterator_T<std::vector< iDynTree::BerdyDynamicVariable >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "BerdyDynamicVariables_insert" "', argument " "2"" of type '" "std::vector< iDynTree::BerdyDynamicVariable >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__BerdyDynamicVariable,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BerdyDynamicVariables_insert" "', argument " "3"" of type '" "std::vector< iDynTree::BerdyDynamicVariable >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BerdyDynamicVariables_insert" "', argument " "3"" of type '" "std::vector< iDynTree::BerdyDynamicVariable >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< iDynTree::BerdyDynamicVariable >::value_type * >(argp3);
  result = std_vector_Sl_iDynTree_BerdyDynamicVariable_Sg__insert__SWIG_0(arg1,arg2,(iDynTree::BerdyDynamicVariable const &)*arg3);
  _out = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< iDynTree::BerdyDynamicVariable >::iterator & >(result)),
    swig::MatlabSwigIterator::descriptor(),SWIG_POINTER_OWN);
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdyDynamicVariables_insert__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< iDynTree::BerdyDynamicVariable > *arg1 = (std::vector< iDynTree::BerdyDynamicVariable > *) 0 ;
  std::vector< iDynTree::BerdyDynamicVariable >::iterator arg2 ;
  std::vector< iDynTree::BerdyDynamicVariable >::size_type arg3 ;
  std::vector< iDynTree::BerdyDynamicVariable >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::MatlabSwigIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("BerdyDynamicVariables_insert",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_iDynTree__BerdyDynamicVariable_std__allocatorT_iDynTree__BerdyDynamicVariable_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdyDynamicVariables_insert" "', argument " "1"" of type '" "std::vector< iDynTree::BerdyDynamicVariable > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< iDynTree::BerdyDynamicVariable > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter2), swig::MatlabSwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "BerdyDynamicVariables_insert" "', argument " "2"" of type '" "std::vector< iDynTree::BerdyDynamicVariable >::iterator""'");
  } else {
    swig::MatlabSwigIterator_T<std::vector< iDynTree::BerdyDynamicVariable >::iterator > *iter_t = dynamic_cast<swig::MatlabSwigIterator_T<std::vector< iDynTree::BerdyDynamicVariable >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "BerdyDynamicVariables_insert" "', argument " "2"" of type '" "std::vector< iDynTree::BerdyDynamicVariable >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BerdyDynamicVariables_insert" "', argument " "3"" of type '" "std::vector< iDynTree::BerdyDynamicVariable >::size_type""'");
  } 
  arg3 = static_cast< std::vector< iDynTree::BerdyDynamicVariable >::size_type >(val3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__BerdyDynamicVariable,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "BerdyDynamicVariables_insert" "', argument " "4"" of type '" "std::vector< iDynTree::BerdyDynamicVariable >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BerdyDynamicVariables_insert" "', argument " "4"" of type '" "std::vector< iDynTree::BerdyDynamicVariable >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< iDynTree::BerdyDynamicVariable >::value_type * >(argp4);
  std_vector_Sl_iDynTree_BerdyDynamicVariable_Sg__insert__SWIG_1(arg1,arg2,arg3,(iDynTree::BerdyDynamicVariable const &)*arg4);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdyDynamicVariables_insert(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< iDynTree::BerdyDynamicVariable,std::allocator< iDynTree::BerdyDynamicVariable > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::MatlabSwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::MatlabSwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::MatlabSwigIterator_T<std::vector< iDynTree::BerdyDynamicVariable >::iterator > *>(iter) != 0));
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_iDynTree__BerdyDynamicVariable, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_BerdyDynamicVariables_insert__SWIG_0(resc,resv,argc,argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< iDynTree::BerdyDynamicVariable,std::allocator< iDynTree::BerdyDynamicVariable > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::MatlabSwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::MatlabSwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::MatlabSwigIterator_T<std::vector< iDynTree::BerdyDynamicVariable >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_iDynTree__BerdyDynamicVariable, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_BerdyDynamicVariables_insert__SWIG_1(resc,resv,argc,argv);
          }
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'BerdyDynamicVariables_insert'."
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< iDynTree::BerdyDynamicVariable >::insert(std::vector< iDynTree::BerdyDynamicVariable >::iterator,std::vector< iDynTree::BerdyDynamicVariable >::value_type const &)\n"
    "    std::vector< iDynTree::BerdyDynamicVariable >::insert(std::vector< iDynTree::BerdyDynamicVariable >::iterator,std::vector< iDynTree::BerdyDynamicVariable >::size_type,std::vector< iDynTree::BerdyDynamicVariable >::value_type const &)\n");
  return 1;
}


int _wrap_BerdyDynamicVariables_reserve(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< iDynTree::BerdyDynamicVariable > *arg1 = (std::vector< iDynTree::BerdyDynamicVariable > *) 0 ;
  std::vector< iDynTree::BerdyDynamicVariable >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("BerdyDynamicVariables_reserve",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_iDynTree__BerdyDynamicVariable_std__allocatorT_iDynTree__BerdyDynamicVariable_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdyDynamicVariables_reserve" "', argument " "1"" of type '" "std::vector< iDynTree::BerdyDynamicVariable > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< iDynTree::BerdyDynamicVariable > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BerdyDynamicVariables_reserve" "', argument " "2"" of type '" "std::vector< iDynTree::BerdyDynamicVariable >::size_type""'");
  } 
  arg2 = static_cast< std::vector< iDynTree::BerdyDynamicVariable >::size_type >(val2);
  (arg1)->reserve(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdyDynamicVariables_capacity(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< iDynTree::BerdyDynamicVariable > *arg1 = (std::vector< iDynTree::BerdyDynamicVariable > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< iDynTree::BerdyDynamicVariable >::size_type result;
  
  if (!SWIG_check_num_args("BerdyDynamicVariables_capacity",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_iDynTree__BerdyDynamicVariable_std__allocatorT_iDynTree__BerdyDynamicVariable_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdyDynamicVariables_capacity" "', argument " "1"" of type '" "std::vector< iDynTree::BerdyDynamicVariable > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< iDynTree::BerdyDynamicVariable > * >(argp1);
  result = ((std::vector< iDynTree::BerdyDynamicVariable > const *)arg1)->capacity();
  _out = SWIG_From_size_t(static_cast< size_t >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_BerdyDynamicVariables(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< iDynTree::BerdyDynamicVariable > *arg1 = (std::vector< iDynTree::BerdyDynamicVariable > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_BerdyDynamicVariables",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_iDynTree__BerdyDynamicVariable_std__allocatorT_iDynTree__BerdyDynamicVariable_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BerdyDynamicVariables" "', argument " "1"" of type '" "std::vector< iDynTree::BerdyDynamicVariable > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< iDynTree::BerdyDynamicVariable > * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_IndexRange_offset_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IndexRange *arg1 = (iDynTree::IndexRange *) 0 ;
  std::ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("IndexRange_offset_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IndexRange, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexRange_offset_set" "', argument " "1"" of type '" "iDynTree::IndexRange *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IndexRange * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IndexRange_offset_set" "', argument " "2"" of type '" "std::ptrdiff_t""'");
  } 
  arg2 = static_cast< std::ptrdiff_t >(val2);
  if (arg1) (arg1)->offset = arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_IndexRange_offset_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IndexRange *arg1 = (iDynTree::IndexRange *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::ptrdiff_t result;
  
  if (!SWIG_check_num_args("IndexRange_offset_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IndexRange, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexRange_offset_get" "', argument " "1"" of type '" "iDynTree::IndexRange *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IndexRange * >(argp1);
  result =  ((arg1)->offset);
  _out = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_IndexRange_size_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IndexRange *arg1 = (iDynTree::IndexRange *) 0 ;
  std::ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("IndexRange_size_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IndexRange, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexRange_size_set" "', argument " "1"" of type '" "iDynTree::IndexRange *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IndexRange * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IndexRange_size_set" "', argument " "2"" of type '" "std::ptrdiff_t""'");
  } 
  arg2 = static_cast< std::ptrdiff_t >(val2);
  if (arg1) (arg1)->size = arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_IndexRange_size_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IndexRange *arg1 = (iDynTree::IndexRange *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::ptrdiff_t result;
  
  if (!SWIG_check_num_args("IndexRange_size_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IndexRange, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexRange_size_get" "', argument " "1"" of type '" "iDynTree::IndexRange *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IndexRange * >(argp1);
  result =  ((arg1)->size);
  _out = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_IndexRange_isValid(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IndexRange *arg1 = (iDynTree::IndexRange *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("IndexRange_isValid",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IndexRange, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexRange_isValid" "', argument " "1"" of type '" "iDynTree::IndexRange const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IndexRange * >(argp1);
  result = (bool)((iDynTree::IndexRange const *)arg1)->isValid();
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_IndexRange_InvalidRange(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::IndexRange result;
  
  if (!SWIG_check_num_args("IndexRange_InvalidRange",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = iDynTree::IndexRange::InvalidRange();
  _out = SWIG_NewPointerObj((new iDynTree::IndexRange(static_cast< const iDynTree::IndexRange& >(result))), SWIGTYPE_p_iDynTree__IndexRange, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_IndexRange(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::IndexRange *result = 0 ;
  
  if (!SWIG_check_num_args("new_IndexRange",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::IndexRange *)new iDynTree::IndexRange();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__IndexRange, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_IndexRange(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IndexRange *arg1 = (iDynTree::IndexRange *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_IndexRange",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IndexRange, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IndexRange" "', argument " "1"" of type '" "iDynTree::IndexRange *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IndexRange * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_MatrixDynSize__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::MatrixDynSize *result = 0 ;
  
  if (!SWIG_check_num_args("new_MatrixDynSize",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::MatrixDynSize *)new iDynTree::MatrixDynSize();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__MatrixDynSize, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_MatrixDynSize__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::MatrixDynSize *result = 0 ;
  
  if (!SWIG_check_num_args("new_MatrixDynSize",argc,2,2,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_unsigned_SS_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_MatrixDynSize" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_MatrixDynSize" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (iDynTree::MatrixDynSize *)new iDynTree::MatrixDynSize(arg1,arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__MatrixDynSize, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_MatrixDynSize__SWIG_2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double *arg1 = (double *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  iDynTree::MatrixDynSize *result = 0 ;
  
  if (!SWIG_check_num_args("new_MatrixDynSize",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MatrixDynSize" "', argument " "1"" of type '" "double const *""'"); 
  }
  arg1 = reinterpret_cast< double * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_MatrixDynSize" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_MatrixDynSize" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  result = (iDynTree::MatrixDynSize *)new iDynTree::MatrixDynSize((double const *)arg1,arg2,arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__MatrixDynSize, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_MatrixDynSize__SWIG_3(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixDynSize *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::MatrixDynSize *result = 0 ;
  
  if (!SWIG_check_num_args("new_MatrixDynSize",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__MatrixDynSize,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MatrixDynSize" "', argument " "1"" of type '" "iDynTree::MatrixDynSize const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MatrixDynSize" "', argument " "1"" of type '" "iDynTree::MatrixDynSize const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixDynSize * >(argp1);
  result = (iDynTree::MatrixDynSize *)new iDynTree::MatrixDynSize((iDynTree::MatrixDynSize const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__MatrixDynSize, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_MatrixDynSize(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_MatrixDynSize__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__MatrixDynSize, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_MatrixDynSize__SWIG_3(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_MatrixDynSize__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_double, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_MatrixDynSize__SWIG_2(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_MatrixDynSize'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::MatrixDynSize::MatrixDynSize()\n"
    "    iDynTree::MatrixDynSize::MatrixDynSize(unsigned int,unsigned int)\n"
    "    iDynTree::MatrixDynSize::MatrixDynSize(double const *,unsigned int const,unsigned int const)\n"
    "    iDynTree::MatrixDynSize::MatrixDynSize(iDynTree::MatrixDynSize const &)\n");
  return 1;
}


int _wrap_delete_MatrixDynSize(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixDynSize *arg1 = (iDynTree::MatrixDynSize *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_MatrixDynSize",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixDynSize, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MatrixDynSize" "', argument " "1"" of type '" "iDynTree::MatrixDynSize *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixDynSize * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatrixDynSize_paren(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixDynSize *arg1 = (iDynTree::MatrixDynSize *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  double *result = 0 ;
  
  if (!SWIG_check_num_args("MatrixDynSize_paren",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixDynSize, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixDynSize_paren" "', argument " "1"" of type '" "iDynTree::MatrixDynSize *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixDynSize * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MatrixDynSize_paren" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MatrixDynSize_paren" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  result = (double *) &(arg1)->operator ()(arg2,arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatrixDynSize_getVal(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixDynSize *arg1 = (iDynTree::MatrixDynSize *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("MatrixDynSize_getVal",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixDynSize, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixDynSize_getVal" "', argument " "1"" of type '" "iDynTree::MatrixDynSize const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixDynSize * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MatrixDynSize_getVal" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MatrixDynSize_getVal" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  result = (double)((iDynTree::MatrixDynSize const *)arg1)->getVal(arg2,arg3);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatrixDynSize_setVal(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixDynSize *arg1 = (iDynTree::MatrixDynSize *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("MatrixDynSize_setVal",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixDynSize, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixDynSize_setVal" "', argument " "1"" of type '" "iDynTree::MatrixDynSize *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixDynSize * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MatrixDynSize_setVal" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MatrixDynSize_setVal" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  ecode4 = SWIG_AsVal_double(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "MatrixDynSize_setVal" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  result = (bool)(arg1)->setVal(arg2,arg3,arg4);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatrixDynSize_rows(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixDynSize *arg1 = (iDynTree::MatrixDynSize *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("MatrixDynSize_rows",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixDynSize, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixDynSize_rows" "', argument " "1"" of type '" "iDynTree::MatrixDynSize const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixDynSize * >(argp1);
  result = (unsigned int)((iDynTree::MatrixDynSize const *)arg1)->rows();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatrixDynSize_cols(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixDynSize *arg1 = (iDynTree::MatrixDynSize *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("MatrixDynSize_cols",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixDynSize, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixDynSize_cols" "', argument " "1"" of type '" "iDynTree::MatrixDynSize const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixDynSize * >(argp1);
  result = (unsigned int)((iDynTree::MatrixDynSize const *)arg1)->cols();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatrixDynSize_data(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixDynSize *arg1 = (iDynTree::MatrixDynSize *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double *result = 0 ;
  
  if (!SWIG_check_num_args("MatrixDynSize_data",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixDynSize, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixDynSize_data" "', argument " "1"" of type '" "iDynTree::MatrixDynSize *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixDynSize * >(argp1);
  result = (double *)(arg1)->data();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatrixDynSize_zero(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixDynSize *arg1 = (iDynTree::MatrixDynSize *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("MatrixDynSize_zero",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixDynSize, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixDynSize_zero" "', argument " "1"" of type '" "iDynTree::MatrixDynSize *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixDynSize * >(argp1);
  (arg1)->zero();
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatrixDynSize_resize(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixDynSize *arg1 = (iDynTree::MatrixDynSize *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("MatrixDynSize_resize",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixDynSize, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixDynSize_resize" "', argument " "1"" of type '" "iDynTree::MatrixDynSize *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixDynSize * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MatrixDynSize_resize" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MatrixDynSize_resize" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  (arg1)->resize(arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatrixDynSize_reserve(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixDynSize *arg1 = (iDynTree::MatrixDynSize *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("MatrixDynSize_reserve",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixDynSize, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixDynSize_reserve" "', argument " "1"" of type '" "iDynTree::MatrixDynSize *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixDynSize * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MatrixDynSize_reserve" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  (arg1)->reserve(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatrixDynSize_capacity(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixDynSize *arg1 = (iDynTree::MatrixDynSize *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  size_t result;
  
  if (!SWIG_check_num_args("MatrixDynSize_capacity",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixDynSize, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixDynSize_capacity" "', argument " "1"" of type '" "iDynTree::MatrixDynSize const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixDynSize * >(argp1);
  result = ((iDynTree::MatrixDynSize const *)arg1)->capacity();
  _out = SWIG_From_size_t(static_cast< size_t >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatrixDynSize_shrink_to_fit(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixDynSize *arg1 = (iDynTree::MatrixDynSize *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("MatrixDynSize_shrink_to_fit",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixDynSize, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixDynSize_shrink_to_fit" "', argument " "1"" of type '" "iDynTree::MatrixDynSize *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixDynSize * >(argp1);
  (arg1)->shrink_to_fit();
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatrixDynSize_fillRowMajorBuffer(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixDynSize *arg1 = (iDynTree::MatrixDynSize *) 0 ;
  double *arg2 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("MatrixDynSize_fillRowMajorBuffer",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixDynSize, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixDynSize_fillRowMajorBuffer" "', argument " "1"" of type '" "iDynTree::MatrixDynSize const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixDynSize * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatrixDynSize_fillRowMajorBuffer" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  ((iDynTree::MatrixDynSize const *)arg1)->fillRowMajorBuffer(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatrixDynSize_fillColMajorBuffer(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixDynSize *arg1 = (iDynTree::MatrixDynSize *) 0 ;
  double *arg2 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("MatrixDynSize_fillColMajorBuffer",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixDynSize, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixDynSize_fillColMajorBuffer" "', argument " "1"" of type '" "iDynTree::MatrixDynSize const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixDynSize * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatrixDynSize_fillColMajorBuffer" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  ((iDynTree::MatrixDynSize const *)arg1)->fillColMajorBuffer(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatrixDynSize_toString(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixDynSize *arg1 = (iDynTree::MatrixDynSize *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("MatrixDynSize_toString",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixDynSize, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixDynSize_toString" "', argument " "1"" of type '" "iDynTree::MatrixDynSize const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixDynSize * >(argp1);
  result = ((iDynTree::MatrixDynSize const *)arg1)->toString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatrixDynSize_display(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixDynSize *arg1 = (iDynTree::MatrixDynSize *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("MatrixDynSize_display",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixDynSize, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixDynSize_display" "', argument " "1"" of type '" "iDynTree::MatrixDynSize const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixDynSize * >(argp1);
  result = ((iDynTree::MatrixDynSize const *)arg1)->reservedToString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatrixDynSize_toMatlab(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixDynSize *arg1 = (iDynTree::MatrixDynSize *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  mxArray *result = 0 ;
  
  if (!SWIG_check_num_args("MatrixDynSize_toMatlab",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixDynSize, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixDynSize_toMatlab" "', argument " "1"" of type '" "iDynTree::MatrixDynSize const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixDynSize * >(argp1);
  result = (mxArray *)iDynTree_MatrixDynSize_toMatlab((iDynTree::MatrixDynSize const *)arg1);
  _out = result;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatrixDynSize_fromMatlab(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixDynSize *arg1 = (iDynTree::MatrixDynSize *) 0 ;
  mxArray *arg2 = (mxArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("MatrixDynSize_fromMatlab",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixDynSize, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixDynSize_fromMatlab" "', argument " "1"" of type '" "iDynTree::MatrixDynSize *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixDynSize * >(argp1);
  arg2 = argv[1];
  iDynTree_MatrixDynSize_fromMatlab(arg1,arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SparseMatrix__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::SparseMatrix *result = 0 ;
  
  if (!SWIG_check_num_args("new_SparseMatrix",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::SparseMatrix *)new iDynTree::SparseMatrix();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SparseMatrix, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SparseMatrix__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::SparseMatrix *result = 0 ;
  
  if (!SWIG_check_num_args("new_SparseMatrix",argc,2,2,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_unsigned_SS_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SparseMatrix" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SparseMatrix" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (iDynTree::SparseMatrix *)new iDynTree::SparseMatrix(arg1,arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SparseMatrix, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SparseMatrix__SWIG_2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  unsigned int arg1 ;
  unsigned int arg2 ;
  iDynTree::VectorDynSize *arg3 = 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  mxArray * _out;
  iDynTree::SparseMatrix *result = 0 ;
  
  if (!SWIG_check_num_args("new_SparseMatrix",argc,3,3,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_unsigned_SS_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SparseMatrix" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SparseMatrix" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_SparseMatrix" "', argument " "3"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SparseMatrix" "', argument " "3"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::VectorDynSize * >(argp3);
  result = (iDynTree::SparseMatrix *)new iDynTree::SparseMatrix(arg1,arg2,(iDynTree::VectorDynSize const &)*arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SparseMatrix, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SparseMatrix(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_SparseMatrix__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_SparseMatrix__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_iDynTree__VectorDynSize, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_SparseMatrix__SWIG_2(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_SparseMatrix'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::SparseMatrix::SparseMatrix()\n"
    "    iDynTree::SparseMatrix::SparseMatrix(unsigned int,unsigned int)\n"
    "    iDynTree::SparseMatrix::SparseMatrix(unsigned int,unsigned int,iDynTree::VectorDynSize const &)\n");
  return 1;
}


int _wrap_delete_SparseMatrix(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SparseMatrix *arg1 = (iDynTree::SparseMatrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_SparseMatrix",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SparseMatrix, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SparseMatrix" "', argument " "1"" of type '" "iDynTree::SparseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SparseMatrix * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SparseMatrix_numberOfNonZeros(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SparseMatrix *arg1 = (iDynTree::SparseMatrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("SparseMatrix_numberOfNonZeros",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SparseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SparseMatrix_numberOfNonZeros" "', argument " "1"" of type '" "iDynTree::SparseMatrix const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SparseMatrix * >(argp1);
  result = (unsigned int)((iDynTree::SparseMatrix const *)arg1)->numberOfNonZeros();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SparseMatrix_nonZeroElementsForRowAtIndex(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SparseMatrix *arg1 = (iDynTree::SparseMatrix *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("SparseMatrix_nonZeroElementsForRowAtIndex",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SparseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SparseMatrix_nonZeroElementsForRowAtIndex" "', argument " "1"" of type '" "iDynTree::SparseMatrix const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SparseMatrix * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SparseMatrix_nonZeroElementsForRowAtIndex" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (unsigned int)((iDynTree::SparseMatrix const *)arg1)->nonZeroElementsForRowAtIndex(arg2);
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SparseMatrix_resize__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SparseMatrix *arg1 = (iDynTree::SparseMatrix *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("SparseMatrix_resize",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SparseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SparseMatrix_resize" "', argument " "1"" of type '" "iDynTree::SparseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SparseMatrix * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SparseMatrix_resize" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SparseMatrix_resize" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  (arg1)->resize(arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SparseMatrix_resize__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SparseMatrix *arg1 = (iDynTree::SparseMatrix *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  iDynTree::VectorDynSize *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("SparseMatrix_resize",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SparseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SparseMatrix_resize" "', argument " "1"" of type '" "iDynTree::SparseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SparseMatrix * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SparseMatrix_resize" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SparseMatrix_resize" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "SparseMatrix_resize" "', argument " "4"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SparseMatrix_resize" "', argument " "4"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  arg4 = reinterpret_cast< iDynTree::VectorDynSize * >(argp4);
  (arg1)->resize(arg2,arg3,(iDynTree::VectorDynSize const &)*arg4);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SparseMatrix_resize(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SparseMatrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_SparseMatrix_resize__SWIG_0(resc,resv,argc,argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SparseMatrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_iDynTree__VectorDynSize, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_SparseMatrix_resize__SWIG_1(resc,resv,argc,argv);
          }
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'SparseMatrix_resize'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::SparseMatrix::resize(unsigned int,unsigned int)\n"
    "    iDynTree::SparseMatrix::resize(unsigned int,unsigned int,iDynTree::VectorDynSize const &)\n");
  return 1;
}


int _wrap_SparseMatrix_reserve(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SparseMatrix *arg1 = (iDynTree::SparseMatrix *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("SparseMatrix_reserve",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SparseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SparseMatrix_reserve" "', argument " "1"" of type '" "iDynTree::SparseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SparseMatrix * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SparseMatrix_reserve" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  (arg1)->reserve(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SparseMatrix_zero(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SparseMatrix *arg1 = (iDynTree::SparseMatrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("SparseMatrix_zero",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SparseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SparseMatrix_zero" "', argument " "1"" of type '" "iDynTree::SparseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SparseMatrix * >(argp1);
  (arg1)->zero();
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SparseMatrix_setFromConstTriplets(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SparseMatrix *arg1 = (iDynTree::SparseMatrix *) 0 ;
  iDynTree::Triplets *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("SparseMatrix_setFromConstTriplets",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SparseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SparseMatrix_setFromConstTriplets" "', argument " "1"" of type '" "iDynTree::SparseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SparseMatrix * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Triplets,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SparseMatrix_setFromConstTriplets" "', argument " "2"" of type '" "iDynTree::Triplets const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SparseMatrix_setFromConstTriplets" "', argument " "2"" of type '" "iDynTree::Triplets const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Triplets * >(argp2);
  (arg1)->setFromConstTriplets((iDynTree::Triplets const &)*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SparseMatrix_setFromTriplets(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SparseMatrix *arg1 = (iDynTree::SparseMatrix *) 0 ;
  iDynTree::Triplets *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("SparseMatrix_setFromTriplets",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SparseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SparseMatrix_setFromTriplets" "', argument " "1"" of type '" "iDynTree::SparseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SparseMatrix * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Triplets,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SparseMatrix_setFromTriplets" "', argument " "2"" of type '" "iDynTree::Triplets &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SparseMatrix_setFromTriplets" "', argument " "2"" of type '" "iDynTree::Triplets &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Triplets * >(argp2);
  (arg1)->setFromTriplets(*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SparseMatrix_getValue(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SparseMatrix *arg1 = (iDynTree::SparseMatrix *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("SparseMatrix_getValue",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SparseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SparseMatrix_getValue" "', argument " "1"" of type '" "iDynTree::SparseMatrix const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SparseMatrix * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SparseMatrix_getValue" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SparseMatrix_getValue" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  result = (double)((iDynTree::SparseMatrix const *)arg1)->getValue(arg2,arg3);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SparseMatrix_setValue(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SparseMatrix *arg1 = (iDynTree::SparseMatrix *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("SparseMatrix_setValue",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SparseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SparseMatrix_setValue" "', argument " "1"" of type '" "iDynTree::SparseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SparseMatrix * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SparseMatrix_setValue" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SparseMatrix_setValue" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  ecode4 = SWIG_AsVal_double(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "SparseMatrix_setValue" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  (arg1)->setValue(arg2,arg3,arg4);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SparseMatrix_rows(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SparseMatrix *arg1 = (iDynTree::SparseMatrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("SparseMatrix_rows",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SparseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SparseMatrix_rows" "', argument " "1"" of type '" "iDynTree::SparseMatrix const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SparseMatrix * >(argp1);
  result = (unsigned int)((iDynTree::SparseMatrix const *)arg1)->rows();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SparseMatrix_columns(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SparseMatrix *arg1 = (iDynTree::SparseMatrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("SparseMatrix_columns",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SparseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SparseMatrix_columns" "', argument " "1"" of type '" "iDynTree::SparseMatrix const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SparseMatrix * >(argp1);
  result = (unsigned int)((iDynTree::SparseMatrix const *)arg1)->columns();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SparseMatrix_innerIndecesBuffer__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SparseMatrix *arg1 = (iDynTree::SparseMatrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  int *result = 0 ;
  
  if (!SWIG_check_num_args("SparseMatrix_innerIndecesBuffer",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SparseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SparseMatrix_innerIndecesBuffer" "', argument " "1"" of type '" "iDynTree::SparseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SparseMatrix * >(argp1);
  result = (int *)(arg1)->innerIndecesBuffer();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_int, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SparseMatrix_innerIndecesBuffer__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SparseMatrix *arg1 = (iDynTree::SparseMatrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  int *result = 0 ;
  
  if (!SWIG_check_num_args("SparseMatrix_innerIndecesBuffer",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SparseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SparseMatrix_innerIndecesBuffer" "', argument " "1"" of type '" "iDynTree::SparseMatrix const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SparseMatrix * >(argp1);
  result = (int *)((iDynTree::SparseMatrix const *)arg1)->innerIndecesBuffer();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_int, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SparseMatrix_innerIndecesBuffer(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SparseMatrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SparseMatrix_innerIndecesBuffer__SWIG_0(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SparseMatrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SparseMatrix_innerIndecesBuffer__SWIG_1(resc,resv,argc,argv);
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'SparseMatrix_innerIndecesBuffer'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::SparseMatrix::innerIndecesBuffer()\n"
    "    iDynTree::SparseMatrix::innerIndecesBuffer() const\n");
  return 1;
}


int _wrap_SparseMatrix_outerIndecesBuffer__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SparseMatrix *arg1 = (iDynTree::SparseMatrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  int *result = 0 ;
  
  if (!SWIG_check_num_args("SparseMatrix_outerIndecesBuffer",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SparseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SparseMatrix_outerIndecesBuffer" "', argument " "1"" of type '" "iDynTree::SparseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SparseMatrix * >(argp1);
  result = (int *)(arg1)->outerIndecesBuffer();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_int, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SparseMatrix_outerIndecesBuffer__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SparseMatrix *arg1 = (iDynTree::SparseMatrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  int *result = 0 ;
  
  if (!SWIG_check_num_args("SparseMatrix_outerIndecesBuffer",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SparseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SparseMatrix_outerIndecesBuffer" "', argument " "1"" of type '" "iDynTree::SparseMatrix const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SparseMatrix * >(argp1);
  result = (int *)((iDynTree::SparseMatrix const *)arg1)->outerIndecesBuffer();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_int, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SparseMatrix_outerIndecesBuffer(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SparseMatrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SparseMatrix_outerIndecesBuffer__SWIG_0(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SparseMatrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SparseMatrix_outerIndecesBuffer__SWIG_1(resc,resv,argc,argv);
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'SparseMatrix_outerIndecesBuffer'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::SparseMatrix::outerIndecesBuffer()\n"
    "    iDynTree::SparseMatrix::outerIndecesBuffer() const\n");
  return 1;
}


int _wrap_SparseMatrix_description__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SparseMatrix *arg1 = (iDynTree::SparseMatrix *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("SparseMatrix_description",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SparseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SparseMatrix_description" "', argument " "1"" of type '" "iDynTree::SparseMatrix const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SparseMatrix * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SparseMatrix_description" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = ((iDynTree::SparseMatrix const *)arg1)->description(arg2);
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SparseMatrix_description__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SparseMatrix *arg1 = (iDynTree::SparseMatrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("SparseMatrix_description",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SparseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SparseMatrix_description" "', argument " "1"" of type '" "iDynTree::SparseMatrix const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SparseMatrix * >(argp1);
  result = ((iDynTree::SparseMatrix const *)arg1)->description();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SparseMatrix_description(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SparseMatrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SparseMatrix_description__SWIG_1(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SparseMatrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SparseMatrix_description__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'SparseMatrix_description'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::SparseMatrix::description(bool) const\n"
    "    iDynTree::SparseMatrix::description() const\n");
  return 1;
}


int _wrap_SparseMatrix_convertFromColumnMajor(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SparseMatrix *arg1 = (iDynTree::SparseMatrix *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  double *arg5 = (double *) (double *)0 ;
  int *arg6 = (int *) (int *)0 ;
  int *arg7 = (int *) (int *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("SparseMatrix_convertFromColumnMajor",argc,7,7,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SparseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SparseMatrix_convertFromColumnMajor" "', argument " "1"" of type '" "iDynTree::SparseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SparseMatrix * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SparseMatrix_convertFromColumnMajor" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SparseMatrix_convertFromColumnMajor" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "SparseMatrix_convertFromColumnMajor" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  res5 = SWIG_ConvertPtr(argv[4], &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "SparseMatrix_convertFromColumnMajor" "', argument " "5"" of type '" "double *const""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  res6 = SWIG_ConvertPtr(argv[5], &argp6,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "SparseMatrix_convertFromColumnMajor" "', argument " "6"" of type '" "int *const""'"); 
  }
  arg6 = reinterpret_cast< int * >(argp6);
  res7 = SWIG_ConvertPtr(argv[6], &argp7,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "SparseMatrix_convertFromColumnMajor" "', argument " "7"" of type '" "int *const""'"); 
  }
  arg7 = reinterpret_cast< int * >(argp7);
  (arg1)->convertFromColumnMajor(arg2,arg3,arg4,arg5,arg6,arg7);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SparseMatrix_toMatlab(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SparseMatrix *arg1 = (iDynTree::SparseMatrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  mxArray *result = 0 ;
  
  if (!SWIG_check_num_args("SparseMatrix_toMatlab",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SparseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SparseMatrix_toMatlab" "', argument " "1"" of type '" "iDynTree::SparseMatrix const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SparseMatrix * >(argp1);
  result = (mxArray *)iDynTree_SparseMatrix_toMatlab((iDynTree::SparseMatrix const *)arg1);
  _out = result;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SparseMatrix_toMatlabDense(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SparseMatrix *arg1 = (iDynTree::SparseMatrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  mxArray *result = 0 ;
  
  if (!SWIG_check_num_args("SparseMatrix_toMatlabDense",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SparseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SparseMatrix_toMatlabDense" "', argument " "1"" of type '" "iDynTree::SparseMatrix const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SparseMatrix * >(argp1);
  result = (mxArray *)iDynTree_SparseMatrix_toMatlabDense((iDynTree::SparseMatrix const *)arg1);
  _out = result;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SparseMatrix_fromMatlab(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SparseMatrix *arg1 = (iDynTree::SparseMatrix *) 0 ;
  mxArray *arg2 = (mxArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("SparseMatrix_fromMatlab",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SparseMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SparseMatrix_fromMatlab" "', argument " "1"" of type '" "iDynTree::SparseMatrix *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SparseMatrix * >(argp1);
  arg2 = argv[1];
  iDynTree_SparseMatrix_fromMatlab(arg1,arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_VectorDynSize__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::VectorDynSize *result = 0 ;
  
  if (!SWIG_check_num_args("new_VectorDynSize",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::VectorDynSize *)new iDynTree::VectorDynSize();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__VectorDynSize, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_VectorDynSize__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  mxArray * _out;
  iDynTree::VectorDynSize *result = 0 ;
  
  if (!SWIG_check_num_args("new_VectorDynSize",argc,1,1,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_unsigned_SS_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VectorDynSize" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  result = (iDynTree::VectorDynSize *)new iDynTree::VectorDynSize(arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__VectorDynSize, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_VectorDynSize__SWIG_2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double *arg1 = (double *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::VectorDynSize *result = 0 ;
  
  if (!SWIG_check_num_args("new_VectorDynSize",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VectorDynSize" "', argument " "1"" of type '" "double const *""'"); 
  }
  arg1 = reinterpret_cast< double * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_VectorDynSize" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (iDynTree::VectorDynSize *)new iDynTree::VectorDynSize((double const *)arg1,arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__VectorDynSize, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_VectorDynSize__SWIG_3(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorDynSize *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::VectorDynSize *result = 0 ;
  
  if (!SWIG_check_num_args("new_VectorDynSize",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VectorDynSize" "', argument " "1"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VectorDynSize" "', argument " "1"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorDynSize * >(argp1);
  result = (iDynTree::VectorDynSize *)new iDynTree::VectorDynSize((iDynTree::VectorDynSize const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__VectorDynSize, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_VectorDynSize(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_VectorDynSize__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__VectorDynSize, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_VectorDynSize__SWIG_3(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_VectorDynSize__SWIG_1(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_double, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_VectorDynSize__SWIG_2(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_VectorDynSize'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::VectorDynSize::VectorDynSize()\n"
    "    iDynTree::VectorDynSize::VectorDynSize(unsigned int)\n"
    "    iDynTree::VectorDynSize::VectorDynSize(double const *,unsigned int const)\n"
    "    iDynTree::VectorDynSize::VectorDynSize(iDynTree::VectorDynSize const &)\n");
  return 1;
}


int _wrap_delete_VectorDynSize(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorDynSize *arg1 = (iDynTree::VectorDynSize *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_VectorDynSize",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorDynSize, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VectorDynSize" "', argument " "1"" of type '" "iDynTree::VectorDynSize *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorDynSize * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_VectorDynSize_paren(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorDynSize *arg1 = (iDynTree::VectorDynSize *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  double *result = 0 ;
  
  if (!SWIG_check_num_args("VectorDynSize_paren",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorDynSize, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDynSize_paren" "', argument " "1"" of type '" "iDynTree::VectorDynSize *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorDynSize * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorDynSize_paren" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (double *) &(arg1)->operator ()(arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_VectorDynSize_getVal(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorDynSize *arg1 = (iDynTree::VectorDynSize *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("VectorDynSize_getVal",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorDynSize, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDynSize_getVal" "', argument " "1"" of type '" "iDynTree::VectorDynSize const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorDynSize * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorDynSize_getVal" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (double)((iDynTree::VectorDynSize const *)arg1)->getVal(arg2);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_VectorDynSize_setVal(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorDynSize *arg1 = (iDynTree::VectorDynSize *) 0 ;
  unsigned int arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("VectorDynSize_setVal",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorDynSize, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDynSize_setVal" "', argument " "1"" of type '" "iDynTree::VectorDynSize *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorDynSize * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorDynSize_setVal" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorDynSize_setVal" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (bool)(arg1)->setVal(arg2,arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_VectorDynSize_size(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorDynSize *arg1 = (iDynTree::VectorDynSize *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("VectorDynSize_size",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorDynSize, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDynSize_size" "', argument " "1"" of type '" "iDynTree::VectorDynSize const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorDynSize * >(argp1);
  result = (unsigned int)((iDynTree::VectorDynSize const *)arg1)->size();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_VectorDynSize_data(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorDynSize *arg1 = (iDynTree::VectorDynSize *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double *result = 0 ;
  
  if (!SWIG_check_num_args("VectorDynSize_data",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorDynSize, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDynSize_data" "', argument " "1"" of type '" "iDynTree::VectorDynSize *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorDynSize * >(argp1);
  result = (double *)(arg1)->data();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_VectorDynSize_zero(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorDynSize *arg1 = (iDynTree::VectorDynSize *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("VectorDynSize_zero",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorDynSize, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDynSize_zero" "', argument " "1"" of type '" "iDynTree::VectorDynSize *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorDynSize * >(argp1);
  (arg1)->zero();
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_VectorDynSize_reserve(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorDynSize *arg1 = (iDynTree::VectorDynSize *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("VectorDynSize_reserve",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorDynSize, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDynSize_reserve" "', argument " "1"" of type '" "iDynTree::VectorDynSize *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorDynSize * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorDynSize_reserve" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  (arg1)->reserve(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_VectorDynSize_resize(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorDynSize *arg1 = (iDynTree::VectorDynSize *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("VectorDynSize_resize",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorDynSize, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDynSize_resize" "', argument " "1"" of type '" "iDynTree::VectorDynSize *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorDynSize * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorDynSize_resize" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  (arg1)->resize(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_VectorDynSize_shrink_to_fit(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorDynSize *arg1 = (iDynTree::VectorDynSize *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("VectorDynSize_shrink_to_fit",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorDynSize, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDynSize_shrink_to_fit" "', argument " "1"" of type '" "iDynTree::VectorDynSize *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorDynSize * >(argp1);
  (arg1)->shrink_to_fit();
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_VectorDynSize_capacity(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorDynSize *arg1 = (iDynTree::VectorDynSize *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  size_t result;
  
  if (!SWIG_check_num_args("VectorDynSize_capacity",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorDynSize, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDynSize_capacity" "', argument " "1"" of type '" "iDynTree::VectorDynSize const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorDynSize * >(argp1);
  result = ((iDynTree::VectorDynSize const *)arg1)->capacity();
  _out = SWIG_From_size_t(static_cast< size_t >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_VectorDynSize_fillBuffer(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorDynSize *arg1 = (iDynTree::VectorDynSize *) 0 ;
  double *arg2 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("VectorDynSize_fillBuffer",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorDynSize, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDynSize_fillBuffer" "', argument " "1"" of type '" "iDynTree::VectorDynSize const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorDynSize * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorDynSize_fillBuffer" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  ((iDynTree::VectorDynSize const *)arg1)->fillBuffer(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_VectorDynSize_toString(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorDynSize *arg1 = (iDynTree::VectorDynSize *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("VectorDynSize_toString",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorDynSize, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDynSize_toString" "', argument " "1"" of type '" "iDynTree::VectorDynSize const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorDynSize * >(argp1);
  result = ((iDynTree::VectorDynSize const *)arg1)->toString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_VectorDynSize_display(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorDynSize *arg1 = (iDynTree::VectorDynSize *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("VectorDynSize_display",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorDynSize, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDynSize_display" "', argument " "1"" of type '" "iDynTree::VectorDynSize const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorDynSize * >(argp1);
  result = ((iDynTree::VectorDynSize const *)arg1)->reservedToString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_VectorDynSize_toMatlab(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorDynSize *arg1 = (iDynTree::VectorDynSize *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  mxArray *result = 0 ;
  
  if (!SWIG_check_num_args("VectorDynSize_toMatlab",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorDynSize, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDynSize_toMatlab" "', argument " "1"" of type '" "iDynTree::VectorDynSize const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorDynSize * >(argp1);
  result = (mxArray *)iDynTree_VectorDynSize_toMatlab((iDynTree::VectorDynSize const *)arg1);
  _out = result;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_VectorDynSize_fromMatlab(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorDynSize *arg1 = (iDynTree::VectorDynSize *) 0 ;
  mxArray *arg2 = (mxArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("VectorDynSize_fromMatlab",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorDynSize, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDynSize_fromMatlab" "', argument " "1"" of type '" "iDynTree::VectorDynSize *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorDynSize * >(argp1);
  arg2 = argv[1];
  iDynTree_VectorDynSize_fromMatlab(arg1,arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Matrix1x6__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::MatrixFixSize< 1,6 > *result = 0 ;
  
  if (!SWIG_check_num_args("new_Matrix1x6",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::MatrixFixSize< 1,6 > *)new iDynTree::MatrixFixSize< 1,6 >();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__MatrixFixSizeT_1_6_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Matrix1x6__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double *arg1 = (double *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  iDynTree::MatrixFixSize< 1,6 > *result = 0 ;
  
  if (!SWIG_check_num_args("new_Matrix1x6",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Matrix1x6" "', argument " "1"" of type '" "double const *""'"); 
  }
  arg1 = reinterpret_cast< double * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Matrix1x6" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Matrix1x6" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  result = (iDynTree::MatrixFixSize< 1,6 > *)new iDynTree::MatrixFixSize< 1,6 >((double const *)arg1,arg2,arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__MatrixFixSizeT_1_6_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Matrix1x6(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_Matrix1x6__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_double, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_Matrix1x6__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_Matrix1x6'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::MatrixFixSize< 1,6 >::MatrixFixSize()\n"
    "    iDynTree::MatrixFixSize< 1,6 >::MatrixFixSize(double const *,unsigned int const,unsigned int const)\n");
  return 1;
}


int _wrap_Matrix1x6_paren(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 1,6 > *arg1 = (iDynTree::MatrixFixSize< 1,6 > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  double *result = 0 ;
  
  if (!SWIG_check_num_args("Matrix1x6_paren",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_1_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix1x6_paren" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 1,6 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 1,6 > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matrix1x6_paren" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Matrix1x6_paren" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  result = (double *) &(arg1)->operator ()(arg2,arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix1x6_getVal(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 1,6 > *arg1 = (iDynTree::MatrixFixSize< 1,6 > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("Matrix1x6_getVal",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_1_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix1x6_getVal" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 1,6 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 1,6 > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matrix1x6_getVal" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Matrix1x6_getVal" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  result = (double)((iDynTree::MatrixFixSize< 1,6 > const *)arg1)->getVal(arg2,arg3);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix1x6_setVal(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 1,6 > *arg1 = (iDynTree::MatrixFixSize< 1,6 > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("Matrix1x6_setVal",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_1_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix1x6_setVal" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 1,6 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 1,6 > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matrix1x6_setVal" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Matrix1x6_setVal" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  ecode4 = SWIG_AsVal_double(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Matrix1x6_setVal" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  result = (bool)(arg1)->setVal(arg2,arg3,arg4);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix1x6_rows(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 1,6 > *arg1 = (iDynTree::MatrixFixSize< 1,6 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("Matrix1x6_rows",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_1_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix1x6_rows" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 1,6 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 1,6 > * >(argp1);
  result = (unsigned int)((iDynTree::MatrixFixSize< 1,6 > const *)arg1)->rows();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix1x6_cols(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 1,6 > *arg1 = (iDynTree::MatrixFixSize< 1,6 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("Matrix1x6_cols",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_1_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix1x6_cols" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 1,6 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 1,6 > * >(argp1);
  result = (unsigned int)((iDynTree::MatrixFixSize< 1,6 > const *)arg1)->cols();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix1x6_data(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 1,6 > *arg1 = (iDynTree::MatrixFixSize< 1,6 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double *result = 0 ;
  
  if (!SWIG_check_num_args("Matrix1x6_data",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_1_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix1x6_data" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 1,6 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 1,6 > * >(argp1);
  result = (double *)(arg1)->data();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix1x6_zero(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 1,6 > *arg1 = (iDynTree::MatrixFixSize< 1,6 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Matrix1x6_zero",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_1_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix1x6_zero" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 1,6 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 1,6 > * >(argp1);
  (arg1)->zero();
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix1x6_fillRowMajorBuffer(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 1,6 > *arg1 = (iDynTree::MatrixFixSize< 1,6 > *) 0 ;
  double *arg2 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Matrix1x6_fillRowMajorBuffer",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_1_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix1x6_fillRowMajorBuffer" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 1,6 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 1,6 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Matrix1x6_fillRowMajorBuffer" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  ((iDynTree::MatrixFixSize< 1,6 > const *)arg1)->fillRowMajorBuffer(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix1x6_fillColMajorBuffer(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 1,6 > *arg1 = (iDynTree::MatrixFixSize< 1,6 > *) 0 ;
  double *arg2 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Matrix1x6_fillColMajorBuffer",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_1_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix1x6_fillColMajorBuffer" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 1,6 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 1,6 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Matrix1x6_fillColMajorBuffer" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  ((iDynTree::MatrixFixSize< 1,6 > const *)arg1)->fillColMajorBuffer(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix1x6_toString(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 1,6 > *arg1 = (iDynTree::MatrixFixSize< 1,6 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("Matrix1x6_toString",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_1_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix1x6_toString" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 1,6 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 1,6 > * >(argp1);
  result = ((iDynTree::MatrixFixSize< 1,6 > const *)arg1)->toString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix1x6_display(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 1,6 > *arg1 = (iDynTree::MatrixFixSize< 1,6 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("Matrix1x6_display",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_1_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix1x6_display" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 1,6 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 1,6 > * >(argp1);
  result = ((iDynTree::MatrixFixSize< 1,6 > const *)arg1)->reservedToString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix1x6_toMatlab(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 1,6 > *arg1 = (iDynTree::MatrixFixSize< 1,6 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  mxArray *result = 0 ;
  
  if (!SWIG_check_num_args("Matrix1x6_toMatlab",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_1_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix1x6_toMatlab" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 1,6 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 1,6 > * >(argp1);
  result = (mxArray *)iDynTree_MatrixFixSize_Sl_1_Sc_6_Sg__toMatlab((iDynTree::MatrixFixSize< 1,6 > const *)arg1);
  _out = result;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix1x6_fromMatlab(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 1,6 > *arg1 = (iDynTree::MatrixFixSize< 1,6 > *) 0 ;
  mxArray *arg2 = (mxArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Matrix1x6_fromMatlab",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_1_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix1x6_fromMatlab" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 1,6 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 1,6 > * >(argp1);
  arg2 = argv[1];
  iDynTree_MatrixFixSize_Sl_1_Sc_6_Sg__fromMatlab(arg1,arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_Matrix1x6(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 1,6 > *arg1 = (iDynTree::MatrixFixSize< 1,6 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_Matrix1x6",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_1_6_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Matrix1x6" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 1,6 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 1,6 > * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Matrix2x3__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::MatrixFixSize< 2,3 > *result = 0 ;
  
  if (!SWIG_check_num_args("new_Matrix2x3",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::MatrixFixSize< 2,3 > *)new iDynTree::MatrixFixSize< 2,3 >();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__MatrixFixSizeT_2_3_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Matrix2x3__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double *arg1 = (double *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  iDynTree::MatrixFixSize< 2,3 > *result = 0 ;
  
  if (!SWIG_check_num_args("new_Matrix2x3",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Matrix2x3" "', argument " "1"" of type '" "double const *""'"); 
  }
  arg1 = reinterpret_cast< double * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Matrix2x3" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Matrix2x3" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  result = (iDynTree::MatrixFixSize< 2,3 > *)new iDynTree::MatrixFixSize< 2,3 >((double const *)arg1,arg2,arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__MatrixFixSizeT_2_3_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Matrix2x3(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_Matrix2x3__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_double, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_Matrix2x3__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_Matrix2x3'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::MatrixFixSize< 2,3 >::MatrixFixSize()\n"
    "    iDynTree::MatrixFixSize< 2,3 >::MatrixFixSize(double const *,unsigned int const,unsigned int const)\n");
  return 1;
}


int _wrap_Matrix2x3_paren(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 2,3 > *arg1 = (iDynTree::MatrixFixSize< 2,3 > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  double *result = 0 ;
  
  if (!SWIG_check_num_args("Matrix2x3_paren",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_2_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix2x3_paren" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 2,3 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 2,3 > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matrix2x3_paren" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Matrix2x3_paren" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  result = (double *) &(arg1)->operator ()(arg2,arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix2x3_getVal(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 2,3 > *arg1 = (iDynTree::MatrixFixSize< 2,3 > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("Matrix2x3_getVal",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_2_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix2x3_getVal" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 2,3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 2,3 > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matrix2x3_getVal" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Matrix2x3_getVal" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  result = (double)((iDynTree::MatrixFixSize< 2,3 > const *)arg1)->getVal(arg2,arg3);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix2x3_setVal(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 2,3 > *arg1 = (iDynTree::MatrixFixSize< 2,3 > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("Matrix2x3_setVal",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_2_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix2x3_setVal" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 2,3 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 2,3 > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matrix2x3_setVal" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Matrix2x3_setVal" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  ecode4 = SWIG_AsVal_double(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Matrix2x3_setVal" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  result = (bool)(arg1)->setVal(arg2,arg3,arg4);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix2x3_rows(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 2,3 > *arg1 = (iDynTree::MatrixFixSize< 2,3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("Matrix2x3_rows",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_2_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix2x3_rows" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 2,3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 2,3 > * >(argp1);
  result = (unsigned int)((iDynTree::MatrixFixSize< 2,3 > const *)arg1)->rows();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix2x3_cols(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 2,3 > *arg1 = (iDynTree::MatrixFixSize< 2,3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("Matrix2x3_cols",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_2_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix2x3_cols" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 2,3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 2,3 > * >(argp1);
  result = (unsigned int)((iDynTree::MatrixFixSize< 2,3 > const *)arg1)->cols();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix2x3_data(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 2,3 > *arg1 = (iDynTree::MatrixFixSize< 2,3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double *result = 0 ;
  
  if (!SWIG_check_num_args("Matrix2x3_data",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_2_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix2x3_data" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 2,3 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 2,3 > * >(argp1);
  result = (double *)(arg1)->data();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix2x3_zero(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 2,3 > *arg1 = (iDynTree::MatrixFixSize< 2,3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Matrix2x3_zero",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_2_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix2x3_zero" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 2,3 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 2,3 > * >(argp1);
  (arg1)->zero();
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix2x3_fillRowMajorBuffer(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 2,3 > *arg1 = (iDynTree::MatrixFixSize< 2,3 > *) 0 ;
  double *arg2 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Matrix2x3_fillRowMajorBuffer",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_2_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix2x3_fillRowMajorBuffer" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 2,3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 2,3 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Matrix2x3_fillRowMajorBuffer" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  ((iDynTree::MatrixFixSize< 2,3 > const *)arg1)->fillRowMajorBuffer(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix2x3_fillColMajorBuffer(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 2,3 > *arg1 = (iDynTree::MatrixFixSize< 2,3 > *) 0 ;
  double *arg2 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Matrix2x3_fillColMajorBuffer",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_2_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix2x3_fillColMajorBuffer" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 2,3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 2,3 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Matrix2x3_fillColMajorBuffer" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  ((iDynTree::MatrixFixSize< 2,3 > const *)arg1)->fillColMajorBuffer(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix2x3_toString(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 2,3 > *arg1 = (iDynTree::MatrixFixSize< 2,3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("Matrix2x3_toString",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_2_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix2x3_toString" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 2,3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 2,3 > * >(argp1);
  result = ((iDynTree::MatrixFixSize< 2,3 > const *)arg1)->toString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix2x3_display(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 2,3 > *arg1 = (iDynTree::MatrixFixSize< 2,3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("Matrix2x3_display",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_2_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix2x3_display" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 2,3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 2,3 > * >(argp1);
  result = ((iDynTree::MatrixFixSize< 2,3 > const *)arg1)->reservedToString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix2x3_toMatlab(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 2,3 > *arg1 = (iDynTree::MatrixFixSize< 2,3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  mxArray *result = 0 ;
  
  if (!SWIG_check_num_args("Matrix2x3_toMatlab",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_2_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix2x3_toMatlab" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 2,3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 2,3 > * >(argp1);
  result = (mxArray *)iDynTree_MatrixFixSize_Sl_2_Sc_3_Sg__toMatlab((iDynTree::MatrixFixSize< 2,3 > const *)arg1);
  _out = result;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix2x3_fromMatlab(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 2,3 > *arg1 = (iDynTree::MatrixFixSize< 2,3 > *) 0 ;
  mxArray *arg2 = (mxArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Matrix2x3_fromMatlab",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_2_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix2x3_fromMatlab" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 2,3 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 2,3 > * >(argp1);
  arg2 = argv[1];
  iDynTree_MatrixFixSize_Sl_2_Sc_3_Sg__fromMatlab(arg1,arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_Matrix2x3(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 2,3 > *arg1 = (iDynTree::MatrixFixSize< 2,3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_Matrix2x3",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_2_3_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Matrix2x3" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 2,3 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 2,3 > * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Matrix3x3__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::MatrixFixSize< 3,3 > *result = 0 ;
  
  if (!SWIG_check_num_args("new_Matrix3x3",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::MatrixFixSize< 3,3 > *)new iDynTree::MatrixFixSize< 3,3 >();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__MatrixFixSizeT_3_3_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Matrix3x3__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double *arg1 = (double *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  iDynTree::MatrixFixSize< 3,3 > *result = 0 ;
  
  if (!SWIG_check_num_args("new_Matrix3x3",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Matrix3x3" "', argument " "1"" of type '" "double const *""'"); 
  }
  arg1 = reinterpret_cast< double * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Matrix3x3" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Matrix3x3" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  result = (iDynTree::MatrixFixSize< 3,3 > *)new iDynTree::MatrixFixSize< 3,3 >((double const *)arg1,arg2,arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__MatrixFixSizeT_3_3_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Matrix3x3(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_Matrix3x3__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_double, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_Matrix3x3__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_Matrix3x3'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::MatrixFixSize< 3,3 >::MatrixFixSize()\n"
    "    iDynTree::MatrixFixSize< 3,3 >::MatrixFixSize(double const *,unsigned int const,unsigned int const)\n");
  return 1;
}


int _wrap_Matrix3x3_paren(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 3,3 > *arg1 = (iDynTree::MatrixFixSize< 3,3 > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  double *result = 0 ;
  
  if (!SWIG_check_num_args("Matrix3x3_paren",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_3_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix3x3_paren" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 3,3 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 3,3 > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matrix3x3_paren" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Matrix3x3_paren" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  result = (double *) &(arg1)->operator ()(arg2,arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix3x3_getVal(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 3,3 > *arg1 = (iDynTree::MatrixFixSize< 3,3 > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("Matrix3x3_getVal",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_3_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix3x3_getVal" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 3,3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 3,3 > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matrix3x3_getVal" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Matrix3x3_getVal" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  result = (double)((iDynTree::MatrixFixSize< 3,3 > const *)arg1)->getVal(arg2,arg3);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix3x3_setVal(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 3,3 > *arg1 = (iDynTree::MatrixFixSize< 3,3 > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("Matrix3x3_setVal",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_3_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix3x3_setVal" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 3,3 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 3,3 > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matrix3x3_setVal" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Matrix3x3_setVal" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  ecode4 = SWIG_AsVal_double(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Matrix3x3_setVal" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  result = (bool)(arg1)->setVal(arg2,arg3,arg4);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix3x3_rows(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 3,3 > *arg1 = (iDynTree::MatrixFixSize< 3,3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("Matrix3x3_rows",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_3_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix3x3_rows" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 3,3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 3,3 > * >(argp1);
  result = (unsigned int)((iDynTree::MatrixFixSize< 3,3 > const *)arg1)->rows();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix3x3_cols(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 3,3 > *arg1 = (iDynTree::MatrixFixSize< 3,3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("Matrix3x3_cols",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_3_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix3x3_cols" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 3,3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 3,3 > * >(argp1);
  result = (unsigned int)((iDynTree::MatrixFixSize< 3,3 > const *)arg1)->cols();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix3x3_data(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 3,3 > *arg1 = (iDynTree::MatrixFixSize< 3,3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double *result = 0 ;
  
  if (!SWIG_check_num_args("Matrix3x3_data",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_3_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix3x3_data" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 3,3 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 3,3 > * >(argp1);
  result = (double *)(arg1)->data();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix3x3_zero(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 3,3 > *arg1 = (iDynTree::MatrixFixSize< 3,3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Matrix3x3_zero",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_3_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix3x3_zero" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 3,3 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 3,3 > * >(argp1);
  (arg1)->zero();
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix3x3_fillRowMajorBuffer(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 3,3 > *arg1 = (iDynTree::MatrixFixSize< 3,3 > *) 0 ;
  double *arg2 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Matrix3x3_fillRowMajorBuffer",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_3_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix3x3_fillRowMajorBuffer" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 3,3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 3,3 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Matrix3x3_fillRowMajorBuffer" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  ((iDynTree::MatrixFixSize< 3,3 > const *)arg1)->fillRowMajorBuffer(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix3x3_fillColMajorBuffer(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 3,3 > *arg1 = (iDynTree::MatrixFixSize< 3,3 > *) 0 ;
  double *arg2 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Matrix3x3_fillColMajorBuffer",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_3_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix3x3_fillColMajorBuffer" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 3,3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 3,3 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Matrix3x3_fillColMajorBuffer" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  ((iDynTree::MatrixFixSize< 3,3 > const *)arg1)->fillColMajorBuffer(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix3x3_toString(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 3,3 > *arg1 = (iDynTree::MatrixFixSize< 3,3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("Matrix3x3_toString",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_3_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix3x3_toString" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 3,3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 3,3 > * >(argp1);
  result = ((iDynTree::MatrixFixSize< 3,3 > const *)arg1)->toString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix3x3_display(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 3,3 > *arg1 = (iDynTree::MatrixFixSize< 3,3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("Matrix3x3_display",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_3_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix3x3_display" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 3,3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 3,3 > * >(argp1);
  result = ((iDynTree::MatrixFixSize< 3,3 > const *)arg1)->reservedToString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix3x3_toMatlab(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 3,3 > *arg1 = (iDynTree::MatrixFixSize< 3,3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  mxArray *result = 0 ;
  
  if (!SWIG_check_num_args("Matrix3x3_toMatlab",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_3_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix3x3_toMatlab" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 3,3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 3,3 > * >(argp1);
  result = (mxArray *)iDynTree_MatrixFixSize_Sl_3_Sc_3_Sg__toMatlab((iDynTree::MatrixFixSize< 3,3 > const *)arg1);
  _out = result;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix3x3_fromMatlab(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 3,3 > *arg1 = (iDynTree::MatrixFixSize< 3,3 > *) 0 ;
  mxArray *arg2 = (mxArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Matrix3x3_fromMatlab",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_3_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix3x3_fromMatlab" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 3,3 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 3,3 > * >(argp1);
  arg2 = argv[1];
  iDynTree_MatrixFixSize_Sl_3_Sc_3_Sg__fromMatlab(arg1,arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_Matrix3x3(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 3,3 > *arg1 = (iDynTree::MatrixFixSize< 3,3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_Matrix3x3",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_3_3_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Matrix3x3" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 3,3 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 3,3 > * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Matrix4x4__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::MatrixFixSize< 4,4 > *result = 0 ;
  
  if (!SWIG_check_num_args("new_Matrix4x4",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::MatrixFixSize< 4,4 > *)new iDynTree::MatrixFixSize< 4,4 >();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__MatrixFixSizeT_4_4_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Matrix4x4__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double *arg1 = (double *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  iDynTree::MatrixFixSize< 4,4 > *result = 0 ;
  
  if (!SWIG_check_num_args("new_Matrix4x4",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Matrix4x4" "', argument " "1"" of type '" "double const *""'"); 
  }
  arg1 = reinterpret_cast< double * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Matrix4x4" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Matrix4x4" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  result = (iDynTree::MatrixFixSize< 4,4 > *)new iDynTree::MatrixFixSize< 4,4 >((double const *)arg1,arg2,arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__MatrixFixSizeT_4_4_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Matrix4x4(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_Matrix4x4__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_double, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_Matrix4x4__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_Matrix4x4'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::MatrixFixSize< 4,4 >::MatrixFixSize()\n"
    "    iDynTree::MatrixFixSize< 4,4 >::MatrixFixSize(double const *,unsigned int const,unsigned int const)\n");
  return 1;
}


int _wrap_Matrix4x4_paren(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 4,4 > *arg1 = (iDynTree::MatrixFixSize< 4,4 > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  double *result = 0 ;
  
  if (!SWIG_check_num_args("Matrix4x4_paren",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_4_4_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix4x4_paren" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 4,4 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 4,4 > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matrix4x4_paren" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Matrix4x4_paren" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  result = (double *) &(arg1)->operator ()(arg2,arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix4x4_getVal(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 4,4 > *arg1 = (iDynTree::MatrixFixSize< 4,4 > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("Matrix4x4_getVal",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_4_4_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix4x4_getVal" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 4,4 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 4,4 > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matrix4x4_getVal" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Matrix4x4_getVal" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  result = (double)((iDynTree::MatrixFixSize< 4,4 > const *)arg1)->getVal(arg2,arg3);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix4x4_setVal(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 4,4 > *arg1 = (iDynTree::MatrixFixSize< 4,4 > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("Matrix4x4_setVal",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_4_4_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix4x4_setVal" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 4,4 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 4,4 > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matrix4x4_setVal" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Matrix4x4_setVal" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  ecode4 = SWIG_AsVal_double(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Matrix4x4_setVal" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  result = (bool)(arg1)->setVal(arg2,arg3,arg4);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix4x4_rows(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 4,4 > *arg1 = (iDynTree::MatrixFixSize< 4,4 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("Matrix4x4_rows",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_4_4_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix4x4_rows" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 4,4 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 4,4 > * >(argp1);
  result = (unsigned int)((iDynTree::MatrixFixSize< 4,4 > const *)arg1)->rows();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix4x4_cols(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 4,4 > *arg1 = (iDynTree::MatrixFixSize< 4,4 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("Matrix4x4_cols",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_4_4_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix4x4_cols" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 4,4 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 4,4 > * >(argp1);
  result = (unsigned int)((iDynTree::MatrixFixSize< 4,4 > const *)arg1)->cols();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix4x4_data(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 4,4 > *arg1 = (iDynTree::MatrixFixSize< 4,4 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double *result = 0 ;
  
  if (!SWIG_check_num_args("Matrix4x4_data",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_4_4_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix4x4_data" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 4,4 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 4,4 > * >(argp1);
  result = (double *)(arg1)->data();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix4x4_zero(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 4,4 > *arg1 = (iDynTree::MatrixFixSize< 4,4 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Matrix4x4_zero",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_4_4_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix4x4_zero" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 4,4 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 4,4 > * >(argp1);
  (arg1)->zero();
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix4x4_fillRowMajorBuffer(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 4,4 > *arg1 = (iDynTree::MatrixFixSize< 4,4 > *) 0 ;
  double *arg2 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Matrix4x4_fillRowMajorBuffer",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_4_4_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix4x4_fillRowMajorBuffer" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 4,4 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 4,4 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Matrix4x4_fillRowMajorBuffer" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  ((iDynTree::MatrixFixSize< 4,4 > const *)arg1)->fillRowMajorBuffer(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix4x4_fillColMajorBuffer(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 4,4 > *arg1 = (iDynTree::MatrixFixSize< 4,4 > *) 0 ;
  double *arg2 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Matrix4x4_fillColMajorBuffer",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_4_4_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix4x4_fillColMajorBuffer" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 4,4 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 4,4 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Matrix4x4_fillColMajorBuffer" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  ((iDynTree::MatrixFixSize< 4,4 > const *)arg1)->fillColMajorBuffer(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix4x4_toString(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 4,4 > *arg1 = (iDynTree::MatrixFixSize< 4,4 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("Matrix4x4_toString",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_4_4_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix4x4_toString" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 4,4 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 4,4 > * >(argp1);
  result = ((iDynTree::MatrixFixSize< 4,4 > const *)arg1)->toString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix4x4_display(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 4,4 > *arg1 = (iDynTree::MatrixFixSize< 4,4 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("Matrix4x4_display",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_4_4_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix4x4_display" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 4,4 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 4,4 > * >(argp1);
  result = ((iDynTree::MatrixFixSize< 4,4 > const *)arg1)->reservedToString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix4x4_toMatlab(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 4,4 > *arg1 = (iDynTree::MatrixFixSize< 4,4 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  mxArray *result = 0 ;
  
  if (!SWIG_check_num_args("Matrix4x4_toMatlab",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_4_4_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix4x4_toMatlab" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 4,4 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 4,4 > * >(argp1);
  result = (mxArray *)iDynTree_MatrixFixSize_Sl_4_Sc_4_Sg__toMatlab((iDynTree::MatrixFixSize< 4,4 > const *)arg1);
  _out = result;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix4x4_fromMatlab(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 4,4 > *arg1 = (iDynTree::MatrixFixSize< 4,4 > *) 0 ;
  mxArray *arg2 = (mxArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Matrix4x4_fromMatlab",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_4_4_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix4x4_fromMatlab" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 4,4 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 4,4 > * >(argp1);
  arg2 = argv[1];
  iDynTree_MatrixFixSize_Sl_4_Sc_4_Sg__fromMatlab(arg1,arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_Matrix4x4(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 4,4 > *arg1 = (iDynTree::MatrixFixSize< 4,4 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_Matrix4x4",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_4_4_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Matrix4x4" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 4,4 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 4,4 > * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Matrix6x6__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::MatrixFixSize< 6,6 > *result = 0 ;
  
  if (!SWIG_check_num_args("new_Matrix6x6",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::MatrixFixSize< 6,6 > *)new iDynTree::MatrixFixSize< 6,6 >();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__MatrixFixSizeT_6_6_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Matrix6x6__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double *arg1 = (double *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  iDynTree::MatrixFixSize< 6,6 > *result = 0 ;
  
  if (!SWIG_check_num_args("new_Matrix6x6",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Matrix6x6" "', argument " "1"" of type '" "double const *""'"); 
  }
  arg1 = reinterpret_cast< double * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Matrix6x6" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Matrix6x6" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  result = (iDynTree::MatrixFixSize< 6,6 > *)new iDynTree::MatrixFixSize< 6,6 >((double const *)arg1,arg2,arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__MatrixFixSizeT_6_6_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Matrix6x6(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_Matrix6x6__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_double, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_Matrix6x6__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_Matrix6x6'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::MatrixFixSize< 6,6 >::MatrixFixSize()\n"
    "    iDynTree::MatrixFixSize< 6,6 >::MatrixFixSize(double const *,unsigned int const,unsigned int const)\n");
  return 1;
}


int _wrap_Matrix6x6_paren(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 6,6 > *arg1 = (iDynTree::MatrixFixSize< 6,6 > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  double *result = 0 ;
  
  if (!SWIG_check_num_args("Matrix6x6_paren",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_6_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix6x6_paren" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 6,6 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 6,6 > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matrix6x6_paren" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Matrix6x6_paren" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  result = (double *) &(arg1)->operator ()(arg2,arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix6x6_getVal(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 6,6 > *arg1 = (iDynTree::MatrixFixSize< 6,6 > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("Matrix6x6_getVal",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_6_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix6x6_getVal" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 6,6 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 6,6 > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matrix6x6_getVal" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Matrix6x6_getVal" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  result = (double)((iDynTree::MatrixFixSize< 6,6 > const *)arg1)->getVal(arg2,arg3);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix6x6_setVal(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 6,6 > *arg1 = (iDynTree::MatrixFixSize< 6,6 > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("Matrix6x6_setVal",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_6_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix6x6_setVal" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 6,6 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 6,6 > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matrix6x6_setVal" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Matrix6x6_setVal" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  ecode4 = SWIG_AsVal_double(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Matrix6x6_setVal" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  result = (bool)(arg1)->setVal(arg2,arg3,arg4);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix6x6_rows(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 6,6 > *arg1 = (iDynTree::MatrixFixSize< 6,6 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("Matrix6x6_rows",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_6_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix6x6_rows" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 6,6 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 6,6 > * >(argp1);
  result = (unsigned int)((iDynTree::MatrixFixSize< 6,6 > const *)arg1)->rows();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix6x6_cols(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 6,6 > *arg1 = (iDynTree::MatrixFixSize< 6,6 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("Matrix6x6_cols",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_6_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix6x6_cols" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 6,6 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 6,6 > * >(argp1);
  result = (unsigned int)((iDynTree::MatrixFixSize< 6,6 > const *)arg1)->cols();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix6x6_data(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 6,6 > *arg1 = (iDynTree::MatrixFixSize< 6,6 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double *result = 0 ;
  
  if (!SWIG_check_num_args("Matrix6x6_data",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_6_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix6x6_data" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 6,6 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 6,6 > * >(argp1);
  result = (double *)(arg1)->data();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix6x6_zero(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 6,6 > *arg1 = (iDynTree::MatrixFixSize< 6,6 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Matrix6x6_zero",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_6_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix6x6_zero" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 6,6 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 6,6 > * >(argp1);
  (arg1)->zero();
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix6x6_fillRowMajorBuffer(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 6,6 > *arg1 = (iDynTree::MatrixFixSize< 6,6 > *) 0 ;
  double *arg2 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Matrix6x6_fillRowMajorBuffer",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_6_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix6x6_fillRowMajorBuffer" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 6,6 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 6,6 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Matrix6x6_fillRowMajorBuffer" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  ((iDynTree::MatrixFixSize< 6,6 > const *)arg1)->fillRowMajorBuffer(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix6x6_fillColMajorBuffer(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 6,6 > *arg1 = (iDynTree::MatrixFixSize< 6,6 > *) 0 ;
  double *arg2 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Matrix6x6_fillColMajorBuffer",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_6_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix6x6_fillColMajorBuffer" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 6,6 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 6,6 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Matrix6x6_fillColMajorBuffer" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  ((iDynTree::MatrixFixSize< 6,6 > const *)arg1)->fillColMajorBuffer(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix6x6_toString(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 6,6 > *arg1 = (iDynTree::MatrixFixSize< 6,6 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("Matrix6x6_toString",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_6_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix6x6_toString" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 6,6 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 6,6 > * >(argp1);
  result = ((iDynTree::MatrixFixSize< 6,6 > const *)arg1)->toString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix6x6_display(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 6,6 > *arg1 = (iDynTree::MatrixFixSize< 6,6 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("Matrix6x6_display",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_6_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix6x6_display" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 6,6 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 6,6 > * >(argp1);
  result = ((iDynTree::MatrixFixSize< 6,6 > const *)arg1)->reservedToString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix6x6_toMatlab(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 6,6 > *arg1 = (iDynTree::MatrixFixSize< 6,6 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  mxArray *result = 0 ;
  
  if (!SWIG_check_num_args("Matrix6x6_toMatlab",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_6_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix6x6_toMatlab" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 6,6 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 6,6 > * >(argp1);
  result = (mxArray *)iDynTree_MatrixFixSize_Sl_6_Sc_6_Sg__toMatlab((iDynTree::MatrixFixSize< 6,6 > const *)arg1);
  _out = result;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix6x6_fromMatlab(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 6,6 > *arg1 = (iDynTree::MatrixFixSize< 6,6 > *) 0 ;
  mxArray *arg2 = (mxArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Matrix6x6_fromMatlab",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_6_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix6x6_fromMatlab" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 6,6 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 6,6 > * >(argp1);
  arg2 = argv[1];
  iDynTree_MatrixFixSize_Sl_6_Sc_6_Sg__fromMatlab(arg1,arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_Matrix6x6(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 6,6 > *arg1 = (iDynTree::MatrixFixSize< 6,6 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_Matrix6x6",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_6_6_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Matrix6x6" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 6,6 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 6,6 > * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Matrix6x10__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::MatrixFixSize< 6,10 > *result = 0 ;
  
  if (!SWIG_check_num_args("new_Matrix6x10",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::MatrixFixSize< 6,10 > *)new iDynTree::MatrixFixSize< 6,10 >();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__MatrixFixSizeT_6_10_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Matrix6x10__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double *arg1 = (double *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  iDynTree::MatrixFixSize< 6,10 > *result = 0 ;
  
  if (!SWIG_check_num_args("new_Matrix6x10",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Matrix6x10" "', argument " "1"" of type '" "double const *""'"); 
  }
  arg1 = reinterpret_cast< double * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Matrix6x10" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Matrix6x10" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  result = (iDynTree::MatrixFixSize< 6,10 > *)new iDynTree::MatrixFixSize< 6,10 >((double const *)arg1,arg2,arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__MatrixFixSizeT_6_10_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Matrix6x10(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_Matrix6x10__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_double, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_Matrix6x10__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_Matrix6x10'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::MatrixFixSize< 6,10 >::MatrixFixSize()\n"
    "    iDynTree::MatrixFixSize< 6,10 >::MatrixFixSize(double const *,unsigned int const,unsigned int const)\n");
  return 1;
}


int _wrap_Matrix6x10_paren(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 6,10 > *arg1 = (iDynTree::MatrixFixSize< 6,10 > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  double *result = 0 ;
  
  if (!SWIG_check_num_args("Matrix6x10_paren",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_6_10_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix6x10_paren" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 6,10 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 6,10 > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matrix6x10_paren" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Matrix6x10_paren" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  result = (double *) &(arg1)->operator ()(arg2,arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix6x10_getVal(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 6,10 > *arg1 = (iDynTree::MatrixFixSize< 6,10 > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("Matrix6x10_getVal",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_6_10_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix6x10_getVal" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 6,10 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 6,10 > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matrix6x10_getVal" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Matrix6x10_getVal" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  result = (double)((iDynTree::MatrixFixSize< 6,10 > const *)arg1)->getVal(arg2,arg3);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix6x10_setVal(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 6,10 > *arg1 = (iDynTree::MatrixFixSize< 6,10 > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("Matrix6x10_setVal",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_6_10_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix6x10_setVal" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 6,10 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 6,10 > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matrix6x10_setVal" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Matrix6x10_setVal" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  ecode4 = SWIG_AsVal_double(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Matrix6x10_setVal" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  result = (bool)(arg1)->setVal(arg2,arg3,arg4);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix6x10_rows(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 6,10 > *arg1 = (iDynTree::MatrixFixSize< 6,10 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("Matrix6x10_rows",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_6_10_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix6x10_rows" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 6,10 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 6,10 > * >(argp1);
  result = (unsigned int)((iDynTree::MatrixFixSize< 6,10 > const *)arg1)->rows();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix6x10_cols(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 6,10 > *arg1 = (iDynTree::MatrixFixSize< 6,10 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("Matrix6x10_cols",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_6_10_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix6x10_cols" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 6,10 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 6,10 > * >(argp1);
  result = (unsigned int)((iDynTree::MatrixFixSize< 6,10 > const *)arg1)->cols();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix6x10_data(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 6,10 > *arg1 = (iDynTree::MatrixFixSize< 6,10 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double *result = 0 ;
  
  if (!SWIG_check_num_args("Matrix6x10_data",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_6_10_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix6x10_data" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 6,10 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 6,10 > * >(argp1);
  result = (double *)(arg1)->data();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix6x10_zero(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 6,10 > *arg1 = (iDynTree::MatrixFixSize< 6,10 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Matrix6x10_zero",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_6_10_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix6x10_zero" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 6,10 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 6,10 > * >(argp1);
  (arg1)->zero();
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix6x10_fillRowMajorBuffer(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 6,10 > *arg1 = (iDynTree::MatrixFixSize< 6,10 > *) 0 ;
  double *arg2 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Matrix6x10_fillRowMajorBuffer",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_6_10_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix6x10_fillRowMajorBuffer" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 6,10 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 6,10 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Matrix6x10_fillRowMajorBuffer" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  ((iDynTree::MatrixFixSize< 6,10 > const *)arg1)->fillRowMajorBuffer(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix6x10_fillColMajorBuffer(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 6,10 > *arg1 = (iDynTree::MatrixFixSize< 6,10 > *) 0 ;
  double *arg2 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Matrix6x10_fillColMajorBuffer",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_6_10_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix6x10_fillColMajorBuffer" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 6,10 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 6,10 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Matrix6x10_fillColMajorBuffer" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  ((iDynTree::MatrixFixSize< 6,10 > const *)arg1)->fillColMajorBuffer(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix6x10_toString(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 6,10 > *arg1 = (iDynTree::MatrixFixSize< 6,10 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("Matrix6x10_toString",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_6_10_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix6x10_toString" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 6,10 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 6,10 > * >(argp1);
  result = ((iDynTree::MatrixFixSize< 6,10 > const *)arg1)->toString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix6x10_display(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 6,10 > *arg1 = (iDynTree::MatrixFixSize< 6,10 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("Matrix6x10_display",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_6_10_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix6x10_display" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 6,10 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 6,10 > * >(argp1);
  result = ((iDynTree::MatrixFixSize< 6,10 > const *)arg1)->reservedToString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix6x10_toMatlab(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 6,10 > *arg1 = (iDynTree::MatrixFixSize< 6,10 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  mxArray *result = 0 ;
  
  if (!SWIG_check_num_args("Matrix6x10_toMatlab",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_6_10_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix6x10_toMatlab" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 6,10 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 6,10 > * >(argp1);
  result = (mxArray *)iDynTree_MatrixFixSize_Sl_6_Sc_10_Sg__toMatlab((iDynTree::MatrixFixSize< 6,10 > const *)arg1);
  _out = result;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix6x10_fromMatlab(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 6,10 > *arg1 = (iDynTree::MatrixFixSize< 6,10 > *) 0 ;
  mxArray *arg2 = (mxArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Matrix6x10_fromMatlab",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_6_10_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix6x10_fromMatlab" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 6,10 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 6,10 > * >(argp1);
  arg2 = argv[1];
  iDynTree_MatrixFixSize_Sl_6_Sc_10_Sg__fromMatlab(arg1,arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_Matrix6x10(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 6,10 > *arg1 = (iDynTree::MatrixFixSize< 6,10 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_Matrix6x10",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_6_10_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Matrix6x10" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 6,10 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 6,10 > * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Matrix10x16__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::MatrixFixSize< 10,16 > *result = 0 ;
  
  if (!SWIG_check_num_args("new_Matrix10x16",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::MatrixFixSize< 10,16 > *)new iDynTree::MatrixFixSize< 10,16 >();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__MatrixFixSizeT_10_16_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Matrix10x16__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double *arg1 = (double *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  iDynTree::MatrixFixSize< 10,16 > *result = 0 ;
  
  if (!SWIG_check_num_args("new_Matrix10x16",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Matrix10x16" "', argument " "1"" of type '" "double const *""'"); 
  }
  arg1 = reinterpret_cast< double * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Matrix10x16" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Matrix10x16" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  result = (iDynTree::MatrixFixSize< 10,16 > *)new iDynTree::MatrixFixSize< 10,16 >((double const *)arg1,arg2,arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__MatrixFixSizeT_10_16_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Matrix10x16(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_Matrix10x16__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_double, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_Matrix10x16__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_Matrix10x16'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::MatrixFixSize< 10,16 >::MatrixFixSize()\n"
    "    iDynTree::MatrixFixSize< 10,16 >::MatrixFixSize(double const *,unsigned int const,unsigned int const)\n");
  return 1;
}


int _wrap_Matrix10x16_paren(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 10,16 > *arg1 = (iDynTree::MatrixFixSize< 10,16 > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  double *result = 0 ;
  
  if (!SWIG_check_num_args("Matrix10x16_paren",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_10_16_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix10x16_paren" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 10,16 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 10,16 > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matrix10x16_paren" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Matrix10x16_paren" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  result = (double *) &(arg1)->operator ()(arg2,arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix10x16_getVal(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 10,16 > *arg1 = (iDynTree::MatrixFixSize< 10,16 > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("Matrix10x16_getVal",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_10_16_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix10x16_getVal" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 10,16 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 10,16 > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matrix10x16_getVal" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Matrix10x16_getVal" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  result = (double)((iDynTree::MatrixFixSize< 10,16 > const *)arg1)->getVal(arg2,arg3);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix10x16_setVal(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 10,16 > *arg1 = (iDynTree::MatrixFixSize< 10,16 > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("Matrix10x16_setVal",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_10_16_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix10x16_setVal" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 10,16 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 10,16 > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matrix10x16_setVal" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Matrix10x16_setVal" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  ecode4 = SWIG_AsVal_double(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Matrix10x16_setVal" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  result = (bool)(arg1)->setVal(arg2,arg3,arg4);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix10x16_rows(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 10,16 > *arg1 = (iDynTree::MatrixFixSize< 10,16 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("Matrix10x16_rows",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_10_16_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix10x16_rows" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 10,16 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 10,16 > * >(argp1);
  result = (unsigned int)((iDynTree::MatrixFixSize< 10,16 > const *)arg1)->rows();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix10x16_cols(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 10,16 > *arg1 = (iDynTree::MatrixFixSize< 10,16 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("Matrix10x16_cols",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_10_16_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix10x16_cols" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 10,16 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 10,16 > * >(argp1);
  result = (unsigned int)((iDynTree::MatrixFixSize< 10,16 > const *)arg1)->cols();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix10x16_data(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 10,16 > *arg1 = (iDynTree::MatrixFixSize< 10,16 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double *result = 0 ;
  
  if (!SWIG_check_num_args("Matrix10x16_data",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_10_16_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix10x16_data" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 10,16 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 10,16 > * >(argp1);
  result = (double *)(arg1)->data();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix10x16_zero(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 10,16 > *arg1 = (iDynTree::MatrixFixSize< 10,16 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Matrix10x16_zero",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_10_16_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix10x16_zero" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 10,16 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 10,16 > * >(argp1);
  (arg1)->zero();
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix10x16_fillRowMajorBuffer(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 10,16 > *arg1 = (iDynTree::MatrixFixSize< 10,16 > *) 0 ;
  double *arg2 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Matrix10x16_fillRowMajorBuffer",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_10_16_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix10x16_fillRowMajorBuffer" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 10,16 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 10,16 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Matrix10x16_fillRowMajorBuffer" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  ((iDynTree::MatrixFixSize< 10,16 > const *)arg1)->fillRowMajorBuffer(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix10x16_fillColMajorBuffer(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 10,16 > *arg1 = (iDynTree::MatrixFixSize< 10,16 > *) 0 ;
  double *arg2 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Matrix10x16_fillColMajorBuffer",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_10_16_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix10x16_fillColMajorBuffer" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 10,16 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 10,16 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Matrix10x16_fillColMajorBuffer" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  ((iDynTree::MatrixFixSize< 10,16 > const *)arg1)->fillColMajorBuffer(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix10x16_toString(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 10,16 > *arg1 = (iDynTree::MatrixFixSize< 10,16 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("Matrix10x16_toString",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_10_16_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix10x16_toString" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 10,16 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 10,16 > * >(argp1);
  result = ((iDynTree::MatrixFixSize< 10,16 > const *)arg1)->toString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix10x16_display(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 10,16 > *arg1 = (iDynTree::MatrixFixSize< 10,16 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("Matrix10x16_display",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_10_16_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix10x16_display" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 10,16 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 10,16 > * >(argp1);
  result = ((iDynTree::MatrixFixSize< 10,16 > const *)arg1)->reservedToString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix10x16_toMatlab(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 10,16 > *arg1 = (iDynTree::MatrixFixSize< 10,16 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  mxArray *result = 0 ;
  
  if (!SWIG_check_num_args("Matrix10x16_toMatlab",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_10_16_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix10x16_toMatlab" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 10,16 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 10,16 > * >(argp1);
  result = (mxArray *)iDynTree_MatrixFixSize_Sl_10_Sc_16_Sg__toMatlab((iDynTree::MatrixFixSize< 10,16 > const *)arg1);
  _out = result;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix10x16_fromMatlab(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 10,16 > *arg1 = (iDynTree::MatrixFixSize< 10,16 > *) 0 ;
  mxArray *arg2 = (mxArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Matrix10x16_fromMatlab",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_10_16_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix10x16_fromMatlab" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 10,16 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 10,16 > * >(argp1);
  arg2 = argv[1];
  iDynTree_MatrixFixSize_Sl_10_Sc_16_Sg__fromMatlab(arg1,arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_Matrix10x16(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 10,16 > *arg1 = (iDynTree::MatrixFixSize< 10,16 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_Matrix10x16",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_10_16_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Matrix10x16" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 10,16 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 10,16 > * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Vector3__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::VectorFixSize< 3 > *result = 0 ;
  
  if (!SWIG_check_num_args("new_Vector3",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::VectorFixSize< 3 > *)new iDynTree::VectorFixSize< 3 >();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__VectorFixSizeT_3_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Vector3__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double *arg1 = (double *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::VectorFixSize< 3 > *result = 0 ;
  
  if (!SWIG_check_num_args("new_Vector3",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Vector3" "', argument " "1"" of type '" "double const *""'"); 
  }
  arg1 = reinterpret_cast< double * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Vector3" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (iDynTree::VectorFixSize< 3 > *)new iDynTree::VectorFixSize< 3 >((double const *)arg1,arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__VectorFixSizeT_3_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Vector3(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_Vector3__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_double, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Vector3__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_Vector3'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::VectorFixSize< 3 >::VectorFixSize()\n"
    "    iDynTree::VectorFixSize< 3 >::VectorFixSize(double const *,unsigned int const)\n");
  return 1;
}


int _wrap_Vector3_paren(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorFixSize< 3 > *arg1 = (iDynTree::VectorFixSize< 3 > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  double *result = 0 ;
  
  if (!SWIG_check_num_args("Vector3_paren",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorFixSizeT_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector3_paren" "', argument " "1"" of type '" "iDynTree::VectorFixSize< 3 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorFixSize< 3 > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector3_paren" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (double *) &(arg1)->operator ()(arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Vector3_getVal(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorFixSize< 3 > *arg1 = (iDynTree::VectorFixSize< 3 > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("Vector3_getVal",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorFixSizeT_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector3_getVal" "', argument " "1"" of type '" "iDynTree::VectorFixSize< 3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorFixSize< 3 > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector3_getVal" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (double)((iDynTree::VectorFixSize< 3 > const *)arg1)->getVal(arg2);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Vector3_setVal(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorFixSize< 3 > *arg1 = (iDynTree::VectorFixSize< 3 > *) 0 ;
  unsigned int arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("Vector3_setVal",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorFixSizeT_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector3_setVal" "', argument " "1"" of type '" "iDynTree::VectorFixSize< 3 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorFixSize< 3 > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector3_setVal" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Vector3_setVal" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (bool)(arg1)->setVal(arg2,arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Vector3_size(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorFixSize< 3 > *arg1 = (iDynTree::VectorFixSize< 3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("Vector3_size",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorFixSizeT_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector3_size" "', argument " "1"" of type '" "iDynTree::VectorFixSize< 3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorFixSize< 3 > * >(argp1);
  result = (unsigned int)((iDynTree::VectorFixSize< 3 > const *)arg1)->size();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Vector3_data(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorFixSize< 3 > *arg1 = (iDynTree::VectorFixSize< 3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double *result = 0 ;
  
  if (!SWIG_check_num_args("Vector3_data",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorFixSizeT_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector3_data" "', argument " "1"" of type '" "iDynTree::VectorFixSize< 3 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorFixSize< 3 > * >(argp1);
  result = (double *)(arg1)->data();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Vector3_zero(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorFixSize< 3 > *arg1 = (iDynTree::VectorFixSize< 3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Vector3_zero",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorFixSizeT_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector3_zero" "', argument " "1"" of type '" "iDynTree::VectorFixSize< 3 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorFixSize< 3 > * >(argp1);
  (arg1)->zero();
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Vector3_fillBuffer(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorFixSize< 3 > *arg1 = (iDynTree::VectorFixSize< 3 > *) 0 ;
  double *arg2 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Vector3_fillBuffer",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorFixSizeT_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector3_fillBuffer" "', argument " "1"" of type '" "iDynTree::VectorFixSize< 3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorFixSize< 3 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vector3_fillBuffer" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  ((iDynTree::VectorFixSize< 3 > const *)arg1)->fillBuffer(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Vector3_toString(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorFixSize< 3 > *arg1 = (iDynTree::VectorFixSize< 3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("Vector3_toString",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorFixSizeT_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector3_toString" "', argument " "1"" of type '" "iDynTree::VectorFixSize< 3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorFixSize< 3 > * >(argp1);
  result = ((iDynTree::VectorFixSize< 3 > const *)arg1)->toString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Vector3_display(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorFixSize< 3 > *arg1 = (iDynTree::VectorFixSize< 3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("Vector3_display",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorFixSizeT_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector3_display" "', argument " "1"" of type '" "iDynTree::VectorFixSize< 3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorFixSize< 3 > * >(argp1);
  result = ((iDynTree::VectorFixSize< 3 > const *)arg1)->reservedToString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Vector3_toMatlab(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorFixSize< 3 > *arg1 = (iDynTree::VectorFixSize< 3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  mxArray *result = 0 ;
  
  if (!SWIG_check_num_args("Vector3_toMatlab",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorFixSizeT_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector3_toMatlab" "', argument " "1"" of type '" "iDynTree::VectorFixSize< 3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorFixSize< 3 > * >(argp1);
  result = (mxArray *)iDynTree_VectorFixSize_Sl_3_Sg__toMatlab((iDynTree::VectorFixSize< 3 > const *)arg1);
  _out = result;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Vector3_fromMatlab(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorFixSize< 3 > *arg1 = (iDynTree::VectorFixSize< 3 > *) 0 ;
  mxArray *arg2 = (mxArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Vector3_fromMatlab",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorFixSizeT_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector3_fromMatlab" "', argument " "1"" of type '" "iDynTree::VectorFixSize< 3 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorFixSize< 3 > * >(argp1);
  arg2 = argv[1];
  iDynTree_VectorFixSize_Sl_3_Sg__fromMatlab(arg1,arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_Vector3(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorFixSize< 3 > *arg1 = (iDynTree::VectorFixSize< 3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_Vector3",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorFixSizeT_3_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Vector3" "', argument " "1"" of type '" "iDynTree::VectorFixSize< 3 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorFixSize< 3 > * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Vector4__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::VectorFixSize< 4 > *result = 0 ;
  
  if (!SWIG_check_num_args("new_Vector4",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::VectorFixSize< 4 > *)new iDynTree::VectorFixSize< 4 >();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__VectorFixSizeT_4_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Vector4__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double *arg1 = (double *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::VectorFixSize< 4 > *result = 0 ;
  
  if (!SWIG_check_num_args("new_Vector4",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Vector4" "', argument " "1"" of type '" "double const *""'"); 
  }
  arg1 = reinterpret_cast< double * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Vector4" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (iDynTree::VectorFixSize< 4 > *)new iDynTree::VectorFixSize< 4 >((double const *)arg1,arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__VectorFixSizeT_4_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Vector4(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_Vector4__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_double, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Vector4__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_Vector4'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::VectorFixSize< 4 >::VectorFixSize()\n"
    "    iDynTree::VectorFixSize< 4 >::VectorFixSize(double const *,unsigned int const)\n");
  return 1;
}


int _wrap_Vector4_paren(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorFixSize< 4 > *arg1 = (iDynTree::VectorFixSize< 4 > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  double *result = 0 ;
  
  if (!SWIG_check_num_args("Vector4_paren",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorFixSizeT_4_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector4_paren" "', argument " "1"" of type '" "iDynTree::VectorFixSize< 4 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorFixSize< 4 > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector4_paren" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (double *) &(arg1)->operator ()(arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Vector4_getVal(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorFixSize< 4 > *arg1 = (iDynTree::VectorFixSize< 4 > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("Vector4_getVal",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorFixSizeT_4_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector4_getVal" "', argument " "1"" of type '" "iDynTree::VectorFixSize< 4 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorFixSize< 4 > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector4_getVal" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (double)((iDynTree::VectorFixSize< 4 > const *)arg1)->getVal(arg2);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Vector4_setVal(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorFixSize< 4 > *arg1 = (iDynTree::VectorFixSize< 4 > *) 0 ;
  unsigned int arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("Vector4_setVal",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorFixSizeT_4_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector4_setVal" "', argument " "1"" of type '" "iDynTree::VectorFixSize< 4 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorFixSize< 4 > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector4_setVal" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Vector4_setVal" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (bool)(arg1)->setVal(arg2,arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Vector4_size(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorFixSize< 4 > *arg1 = (iDynTree::VectorFixSize< 4 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("Vector4_size",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorFixSizeT_4_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector4_size" "', argument " "1"" of type '" "iDynTree::VectorFixSize< 4 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorFixSize< 4 > * >(argp1);
  result = (unsigned int)((iDynTree::VectorFixSize< 4 > const *)arg1)->size();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Vector4_data(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorFixSize< 4 > *arg1 = (iDynTree::VectorFixSize< 4 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double *result = 0 ;
  
  if (!SWIG_check_num_args("Vector4_data",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorFixSizeT_4_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector4_data" "', argument " "1"" of type '" "iDynTree::VectorFixSize< 4 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorFixSize< 4 > * >(argp1);
  result = (double *)(arg1)->data();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Vector4_zero(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorFixSize< 4 > *arg1 = (iDynTree::VectorFixSize< 4 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Vector4_zero",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorFixSizeT_4_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector4_zero" "', argument " "1"" of type '" "iDynTree::VectorFixSize< 4 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorFixSize< 4 > * >(argp1);
  (arg1)->zero();
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Vector4_fillBuffer(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorFixSize< 4 > *arg1 = (iDynTree::VectorFixSize< 4 > *) 0 ;
  double *arg2 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Vector4_fillBuffer",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorFixSizeT_4_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector4_fillBuffer" "', argument " "1"" of type '" "iDynTree::VectorFixSize< 4 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorFixSize< 4 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vector4_fillBuffer" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  ((iDynTree::VectorFixSize< 4 > const *)arg1)->fillBuffer(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Vector4_toString(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorFixSize< 4 > *arg1 = (iDynTree::VectorFixSize< 4 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("Vector4_toString",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorFixSizeT_4_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector4_toString" "', argument " "1"" of type '" "iDynTree::VectorFixSize< 4 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorFixSize< 4 > * >(argp1);
  result = ((iDynTree::VectorFixSize< 4 > const *)arg1)->toString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Vector4_display(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorFixSize< 4 > *arg1 = (iDynTree::VectorFixSize< 4 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("Vector4_display",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorFixSizeT_4_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector4_display" "', argument " "1"" of type '" "iDynTree::VectorFixSize< 4 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorFixSize< 4 > * >(argp1);
  result = ((iDynTree::VectorFixSize< 4 > const *)arg1)->reservedToString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Vector4_toMatlab(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorFixSize< 4 > *arg1 = (iDynTree::VectorFixSize< 4 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  mxArray *result = 0 ;
  
  if (!SWIG_check_num_args("Vector4_toMatlab",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorFixSizeT_4_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector4_toMatlab" "', argument " "1"" of type '" "iDynTree::VectorFixSize< 4 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorFixSize< 4 > * >(argp1);
  result = (mxArray *)iDynTree_VectorFixSize_Sl_4_Sg__toMatlab((iDynTree::VectorFixSize< 4 > const *)arg1);
  _out = result;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Vector4_fromMatlab(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorFixSize< 4 > *arg1 = (iDynTree::VectorFixSize< 4 > *) 0 ;
  mxArray *arg2 = (mxArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Vector4_fromMatlab",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorFixSizeT_4_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector4_fromMatlab" "', argument " "1"" of type '" "iDynTree::VectorFixSize< 4 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorFixSize< 4 > * >(argp1);
  arg2 = argv[1];
  iDynTree_VectorFixSize_Sl_4_Sg__fromMatlab(arg1,arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_Vector4(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorFixSize< 4 > *arg1 = (iDynTree::VectorFixSize< 4 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_Vector4",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorFixSizeT_4_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Vector4" "', argument " "1"" of type '" "iDynTree::VectorFixSize< 4 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorFixSize< 4 > * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Vector6__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::VectorFixSize< 6 > *result = 0 ;
  
  if (!SWIG_check_num_args("new_Vector6",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::VectorFixSize< 6 > *)new iDynTree::VectorFixSize< 6 >();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__VectorFixSizeT_6_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Vector6__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double *arg1 = (double *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::VectorFixSize< 6 > *result = 0 ;
  
  if (!SWIG_check_num_args("new_Vector6",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Vector6" "', argument " "1"" of type '" "double const *""'"); 
  }
  arg1 = reinterpret_cast< double * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Vector6" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (iDynTree::VectorFixSize< 6 > *)new iDynTree::VectorFixSize< 6 >((double const *)arg1,arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__VectorFixSizeT_6_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Vector6(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_Vector6__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_double, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Vector6__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_Vector6'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::VectorFixSize< 6 >::VectorFixSize()\n"
    "    iDynTree::VectorFixSize< 6 >::VectorFixSize(double const *,unsigned int const)\n");
  return 1;
}


int _wrap_Vector6_paren(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorFixSize< 6 > *arg1 = (iDynTree::VectorFixSize< 6 > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  double *result = 0 ;
  
  if (!SWIG_check_num_args("Vector6_paren",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorFixSizeT_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector6_paren" "', argument " "1"" of type '" "iDynTree::VectorFixSize< 6 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorFixSize< 6 > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector6_paren" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (double *) &(arg1)->operator ()(arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Vector6_getVal(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorFixSize< 6 > *arg1 = (iDynTree::VectorFixSize< 6 > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("Vector6_getVal",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorFixSizeT_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector6_getVal" "', argument " "1"" of type '" "iDynTree::VectorFixSize< 6 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorFixSize< 6 > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector6_getVal" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (double)((iDynTree::VectorFixSize< 6 > const *)arg1)->getVal(arg2);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Vector6_setVal(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorFixSize< 6 > *arg1 = (iDynTree::VectorFixSize< 6 > *) 0 ;
  unsigned int arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("Vector6_setVal",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorFixSizeT_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector6_setVal" "', argument " "1"" of type '" "iDynTree::VectorFixSize< 6 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorFixSize< 6 > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector6_setVal" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Vector6_setVal" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (bool)(arg1)->setVal(arg2,arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Vector6_size(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorFixSize< 6 > *arg1 = (iDynTree::VectorFixSize< 6 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("Vector6_size",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorFixSizeT_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector6_size" "', argument " "1"" of type '" "iDynTree::VectorFixSize< 6 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorFixSize< 6 > * >(argp1);
  result = (unsigned int)((iDynTree::VectorFixSize< 6 > const *)arg1)->size();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Vector6_data(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorFixSize< 6 > *arg1 = (iDynTree::VectorFixSize< 6 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double *result = 0 ;
  
  if (!SWIG_check_num_args("Vector6_data",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorFixSizeT_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector6_data" "', argument " "1"" of type '" "iDynTree::VectorFixSize< 6 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorFixSize< 6 > * >(argp1);
  result = (double *)(arg1)->data();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Vector6_zero(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorFixSize< 6 > *arg1 = (iDynTree::VectorFixSize< 6 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Vector6_zero",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorFixSizeT_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector6_zero" "', argument " "1"" of type '" "iDynTree::VectorFixSize< 6 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorFixSize< 6 > * >(argp1);
  (arg1)->zero();
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Vector6_fillBuffer(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorFixSize< 6 > *arg1 = (iDynTree::VectorFixSize< 6 > *) 0 ;
  double *arg2 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Vector6_fillBuffer",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorFixSizeT_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector6_fillBuffer" "', argument " "1"" of type '" "iDynTree::VectorFixSize< 6 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorFixSize< 6 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vector6_fillBuffer" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  ((iDynTree::VectorFixSize< 6 > const *)arg1)->fillBuffer(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Vector6_toString(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorFixSize< 6 > *arg1 = (iDynTree::VectorFixSize< 6 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("Vector6_toString",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorFixSizeT_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector6_toString" "', argument " "1"" of type '" "iDynTree::VectorFixSize< 6 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorFixSize< 6 > * >(argp1);
  result = ((iDynTree::VectorFixSize< 6 > const *)arg1)->toString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Vector6_display(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorFixSize< 6 > *arg1 = (iDynTree::VectorFixSize< 6 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("Vector6_display",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorFixSizeT_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector6_display" "', argument " "1"" of type '" "iDynTree::VectorFixSize< 6 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorFixSize< 6 > * >(argp1);
  result = ((iDynTree::VectorFixSize< 6 > const *)arg1)->reservedToString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Vector6_toMatlab(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorFixSize< 6 > *arg1 = (iDynTree::VectorFixSize< 6 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  mxArray *result = 0 ;
  
  if (!SWIG_check_num_args("Vector6_toMatlab",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorFixSizeT_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector6_toMatlab" "', argument " "1"" of type '" "iDynTree::VectorFixSize< 6 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorFixSize< 6 > * >(argp1);
  result = (mxArray *)iDynTree_VectorFixSize_Sl_6_Sg__toMatlab((iDynTree::VectorFixSize< 6 > const *)arg1);
  _out = result;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Vector6_fromMatlab(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorFixSize< 6 > *arg1 = (iDynTree::VectorFixSize< 6 > *) 0 ;
  mxArray *arg2 = (mxArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Vector6_fromMatlab",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorFixSizeT_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector6_fromMatlab" "', argument " "1"" of type '" "iDynTree::VectorFixSize< 6 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorFixSize< 6 > * >(argp1);
  arg2 = argv[1];
  iDynTree_VectorFixSize_Sl_6_Sg__fromMatlab(arg1,arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_Vector6(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorFixSize< 6 > *arg1 = (iDynTree::VectorFixSize< 6 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_Vector6",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorFixSizeT_6_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Vector6" "', argument " "1"" of type '" "iDynTree::VectorFixSize< 6 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorFixSize< 6 > * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Vector10__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::VectorFixSize< 10 > *result = 0 ;
  
  if (!SWIG_check_num_args("new_Vector10",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::VectorFixSize< 10 > *)new iDynTree::VectorFixSize< 10 >();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__VectorFixSizeT_10_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Vector10__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double *arg1 = (double *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::VectorFixSize< 10 > *result = 0 ;
  
  if (!SWIG_check_num_args("new_Vector10",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Vector10" "', argument " "1"" of type '" "double const *""'"); 
  }
  arg1 = reinterpret_cast< double * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Vector10" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (iDynTree::VectorFixSize< 10 > *)new iDynTree::VectorFixSize< 10 >((double const *)arg1,arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__VectorFixSizeT_10_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Vector10(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_Vector10__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_double, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Vector10__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_Vector10'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::VectorFixSize< 10 >::VectorFixSize()\n"
    "    iDynTree::VectorFixSize< 10 >::VectorFixSize(double const *,unsigned int const)\n");
  return 1;
}


int _wrap_Vector10_paren(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorFixSize< 10 > *arg1 = (iDynTree::VectorFixSize< 10 > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  double *result = 0 ;
  
  if (!SWIG_check_num_args("Vector10_paren",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorFixSizeT_10_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector10_paren" "', argument " "1"" of type '" "iDynTree::VectorFixSize< 10 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorFixSize< 10 > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector10_paren" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (double *) &(arg1)->operator ()(arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Vector10_getVal(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorFixSize< 10 > *arg1 = (iDynTree::VectorFixSize< 10 > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("Vector10_getVal",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorFixSizeT_10_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector10_getVal" "', argument " "1"" of type '" "iDynTree::VectorFixSize< 10 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorFixSize< 10 > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector10_getVal" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (double)((iDynTree::VectorFixSize< 10 > const *)arg1)->getVal(arg2);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Vector10_setVal(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorFixSize< 10 > *arg1 = (iDynTree::VectorFixSize< 10 > *) 0 ;
  unsigned int arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("Vector10_setVal",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorFixSizeT_10_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector10_setVal" "', argument " "1"" of type '" "iDynTree::VectorFixSize< 10 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorFixSize< 10 > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector10_setVal" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Vector10_setVal" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (bool)(arg1)->setVal(arg2,arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Vector10_size(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorFixSize< 10 > *arg1 = (iDynTree::VectorFixSize< 10 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("Vector10_size",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorFixSizeT_10_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector10_size" "', argument " "1"" of type '" "iDynTree::VectorFixSize< 10 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorFixSize< 10 > * >(argp1);
  result = (unsigned int)((iDynTree::VectorFixSize< 10 > const *)arg1)->size();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Vector10_data(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorFixSize< 10 > *arg1 = (iDynTree::VectorFixSize< 10 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double *result = 0 ;
  
  if (!SWIG_check_num_args("Vector10_data",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorFixSizeT_10_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector10_data" "', argument " "1"" of type '" "iDynTree::VectorFixSize< 10 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorFixSize< 10 > * >(argp1);
  result = (double *)(arg1)->data();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Vector10_zero(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorFixSize< 10 > *arg1 = (iDynTree::VectorFixSize< 10 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Vector10_zero",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorFixSizeT_10_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector10_zero" "', argument " "1"" of type '" "iDynTree::VectorFixSize< 10 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorFixSize< 10 > * >(argp1);
  (arg1)->zero();
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Vector10_fillBuffer(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorFixSize< 10 > *arg1 = (iDynTree::VectorFixSize< 10 > *) 0 ;
  double *arg2 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Vector10_fillBuffer",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorFixSizeT_10_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector10_fillBuffer" "', argument " "1"" of type '" "iDynTree::VectorFixSize< 10 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorFixSize< 10 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vector10_fillBuffer" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  ((iDynTree::VectorFixSize< 10 > const *)arg1)->fillBuffer(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Vector10_toString(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorFixSize< 10 > *arg1 = (iDynTree::VectorFixSize< 10 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("Vector10_toString",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorFixSizeT_10_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector10_toString" "', argument " "1"" of type '" "iDynTree::VectorFixSize< 10 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorFixSize< 10 > * >(argp1);
  result = ((iDynTree::VectorFixSize< 10 > const *)arg1)->toString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Vector10_display(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorFixSize< 10 > *arg1 = (iDynTree::VectorFixSize< 10 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("Vector10_display",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorFixSizeT_10_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector10_display" "', argument " "1"" of type '" "iDynTree::VectorFixSize< 10 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorFixSize< 10 > * >(argp1);
  result = ((iDynTree::VectorFixSize< 10 > const *)arg1)->reservedToString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Vector10_toMatlab(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorFixSize< 10 > *arg1 = (iDynTree::VectorFixSize< 10 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  mxArray *result = 0 ;
  
  if (!SWIG_check_num_args("Vector10_toMatlab",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorFixSizeT_10_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector10_toMatlab" "', argument " "1"" of type '" "iDynTree::VectorFixSize< 10 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorFixSize< 10 > * >(argp1);
  result = (mxArray *)iDynTree_VectorFixSize_Sl_10_Sg__toMatlab((iDynTree::VectorFixSize< 10 > const *)arg1);
  _out = result;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Vector10_fromMatlab(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorFixSize< 10 > *arg1 = (iDynTree::VectorFixSize< 10 > *) 0 ;
  mxArray *arg2 = (mxArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Vector10_fromMatlab",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorFixSizeT_10_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector10_fromMatlab" "', argument " "1"" of type '" "iDynTree::VectorFixSize< 10 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorFixSize< 10 > * >(argp1);
  arg2 = argv[1];
  iDynTree_VectorFixSize_Sl_10_Sg__fromMatlab(arg1,arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_Vector10(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorFixSize< 10 > *arg1 = (iDynTree::VectorFixSize< 10 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_Vector10",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorFixSizeT_10_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Vector10" "', argument " "1"" of type '" "iDynTree::VectorFixSize< 10 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorFixSize< 10 > * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Vector16__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::VectorFixSize< 16 > *result = 0 ;
  
  if (!SWIG_check_num_args("new_Vector16",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::VectorFixSize< 16 > *)new iDynTree::VectorFixSize< 16 >();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__VectorFixSizeT_16_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Vector16__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double *arg1 = (double *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::VectorFixSize< 16 > *result = 0 ;
  
  if (!SWIG_check_num_args("new_Vector16",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Vector16" "', argument " "1"" of type '" "double const *""'"); 
  }
  arg1 = reinterpret_cast< double * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Vector16" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (iDynTree::VectorFixSize< 16 > *)new iDynTree::VectorFixSize< 16 >((double const *)arg1,arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__VectorFixSizeT_16_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Vector16(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_Vector16__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_double, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Vector16__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_Vector16'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::VectorFixSize< 16 >::VectorFixSize()\n"
    "    iDynTree::VectorFixSize< 16 >::VectorFixSize(double const *,unsigned int const)\n");
  return 1;
}


int _wrap_Vector16_paren(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorFixSize< 16 > *arg1 = (iDynTree::VectorFixSize< 16 > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  double *result = 0 ;
  
  if (!SWIG_check_num_args("Vector16_paren",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorFixSizeT_16_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector16_paren" "', argument " "1"" of type '" "iDynTree::VectorFixSize< 16 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorFixSize< 16 > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector16_paren" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (double *) &(arg1)->operator ()(arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Vector16_getVal(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorFixSize< 16 > *arg1 = (iDynTree::VectorFixSize< 16 > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("Vector16_getVal",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorFixSizeT_16_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector16_getVal" "', argument " "1"" of type '" "iDynTree::VectorFixSize< 16 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorFixSize< 16 > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector16_getVal" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (double)((iDynTree::VectorFixSize< 16 > const *)arg1)->getVal(arg2);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Vector16_setVal(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorFixSize< 16 > *arg1 = (iDynTree::VectorFixSize< 16 > *) 0 ;
  unsigned int arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("Vector16_setVal",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorFixSizeT_16_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector16_setVal" "', argument " "1"" of type '" "iDynTree::VectorFixSize< 16 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorFixSize< 16 > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector16_setVal" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Vector16_setVal" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (bool)(arg1)->setVal(arg2,arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Vector16_size(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorFixSize< 16 > *arg1 = (iDynTree::VectorFixSize< 16 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("Vector16_size",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorFixSizeT_16_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector16_size" "', argument " "1"" of type '" "iDynTree::VectorFixSize< 16 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorFixSize< 16 > * >(argp1);
  result = (unsigned int)((iDynTree::VectorFixSize< 16 > const *)arg1)->size();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Vector16_data(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorFixSize< 16 > *arg1 = (iDynTree::VectorFixSize< 16 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double *result = 0 ;
  
  if (!SWIG_check_num_args("Vector16_data",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorFixSizeT_16_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector16_data" "', argument " "1"" of type '" "iDynTree::VectorFixSize< 16 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorFixSize< 16 > * >(argp1);
  result = (double *)(arg1)->data();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Vector16_zero(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorFixSize< 16 > *arg1 = (iDynTree::VectorFixSize< 16 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Vector16_zero",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorFixSizeT_16_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector16_zero" "', argument " "1"" of type '" "iDynTree::VectorFixSize< 16 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorFixSize< 16 > * >(argp1);
  (arg1)->zero();
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Vector16_fillBuffer(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorFixSize< 16 > *arg1 = (iDynTree::VectorFixSize< 16 > *) 0 ;
  double *arg2 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Vector16_fillBuffer",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorFixSizeT_16_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector16_fillBuffer" "', argument " "1"" of type '" "iDynTree::VectorFixSize< 16 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorFixSize< 16 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vector16_fillBuffer" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  ((iDynTree::VectorFixSize< 16 > const *)arg1)->fillBuffer(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Vector16_toString(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorFixSize< 16 > *arg1 = (iDynTree::VectorFixSize< 16 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("Vector16_toString",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorFixSizeT_16_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector16_toString" "', argument " "1"" of type '" "iDynTree::VectorFixSize< 16 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorFixSize< 16 > * >(argp1);
  result = ((iDynTree::VectorFixSize< 16 > const *)arg1)->toString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Vector16_display(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorFixSize< 16 > *arg1 = (iDynTree::VectorFixSize< 16 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("Vector16_display",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorFixSizeT_16_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector16_display" "', argument " "1"" of type '" "iDynTree::VectorFixSize< 16 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorFixSize< 16 > * >(argp1);
  result = ((iDynTree::VectorFixSize< 16 > const *)arg1)->reservedToString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Vector16_toMatlab(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorFixSize< 16 > *arg1 = (iDynTree::VectorFixSize< 16 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  mxArray *result = 0 ;
  
  if (!SWIG_check_num_args("Vector16_toMatlab",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorFixSizeT_16_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector16_toMatlab" "', argument " "1"" of type '" "iDynTree::VectorFixSize< 16 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorFixSize< 16 > * >(argp1);
  result = (mxArray *)iDynTree_VectorFixSize_Sl_16_Sg__toMatlab((iDynTree::VectorFixSize< 16 > const *)arg1);
  _out = result;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Vector16_fromMatlab(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorFixSize< 16 > *arg1 = (iDynTree::VectorFixSize< 16 > *) 0 ;
  mxArray *arg2 = (mxArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Vector16_fromMatlab",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorFixSizeT_16_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector16_fromMatlab" "', argument " "1"" of type '" "iDynTree::VectorFixSize< 16 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorFixSize< 16 > * >(argp1);
  arg2 = argv[1];
  iDynTree_VectorFixSize_Sl_16_Sg__fromMatlab(arg1,arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_Vector16(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorFixSize< 16 > *arg1 = (iDynTree::VectorFixSize< 16 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_Vector16",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorFixSizeT_16_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Vector16" "', argument " "1"" of type '" "iDynTree::VectorFixSize< 16 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorFixSize< 16 > * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_PositionRaw__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::PositionRaw *result = 0 ;
  
  if (!SWIG_check_num_args("new_PositionRaw",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::PositionRaw *)new iDynTree::PositionRaw();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__PositionRaw, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_PositionRaw__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  iDynTree::PositionRaw *result = 0 ;
  
  if (!SWIG_check_num_args("new_PositionRaw",argc,3,3,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_PositionRaw" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_PositionRaw" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_PositionRaw" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (iDynTree::PositionRaw *)new iDynTree::PositionRaw(arg1,arg2,arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__PositionRaw, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_PositionRaw__SWIG_2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double *arg1 = (double *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::PositionRaw *result = 0 ;
  
  if (!SWIG_check_num_args("new_PositionRaw",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PositionRaw" "', argument " "1"" of type '" "double const *""'"); 
  }
  arg1 = reinterpret_cast< double * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_PositionRaw" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (iDynTree::PositionRaw *)new iDynTree::PositionRaw((double const *)arg1,arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__PositionRaw, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_PositionRaw__SWIG_3(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::PositionRaw *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::PositionRaw *result = 0 ;
  
  if (!SWIG_check_num_args("new_PositionRaw",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__PositionRaw,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PositionRaw" "', argument " "1"" of type '" "iDynTree::PositionRaw const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PositionRaw" "', argument " "1"" of type '" "iDynTree::PositionRaw const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::PositionRaw * >(argp1);
  result = (iDynTree::PositionRaw *)new iDynTree::PositionRaw((iDynTree::PositionRaw const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__PositionRaw, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_PositionRaw(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_PositionRaw__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__PositionRaw, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_PositionRaw__SWIG_3(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_double, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_PositionRaw__SWIG_2(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_PositionRaw__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_PositionRaw'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::PositionRaw::PositionRaw()\n"
    "    iDynTree::PositionRaw::PositionRaw(double,double,double)\n"
    "    iDynTree::PositionRaw::PositionRaw(double const *,unsigned int const)\n"
    "    iDynTree::PositionRaw::PositionRaw(iDynTree::PositionRaw const &)\n");
  return 1;
}


int _wrap_PositionRaw_changePoint(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::PositionRaw *arg1 = (iDynTree::PositionRaw *) 0 ;
  iDynTree::PositionRaw *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::PositionRaw *result = 0 ;
  
  if (!SWIG_check_num_args("PositionRaw_changePoint",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__PositionRaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionRaw_changePoint" "', argument " "1"" of type '" "iDynTree::PositionRaw *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::PositionRaw * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__PositionRaw,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PositionRaw_changePoint" "', argument " "2"" of type '" "iDynTree::PositionRaw const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PositionRaw_changePoint" "', argument " "2"" of type '" "iDynTree::PositionRaw const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::PositionRaw * >(argp2);
  result = (iDynTree::PositionRaw *) &(arg1)->changePoint((iDynTree::PositionRaw const &)*arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__PositionRaw, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PositionRaw_changeRefPoint(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::PositionRaw *arg1 = (iDynTree::PositionRaw *) 0 ;
  iDynTree::PositionRaw *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::PositionRaw *result = 0 ;
  
  if (!SWIG_check_num_args("PositionRaw_changeRefPoint",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__PositionRaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionRaw_changeRefPoint" "', argument " "1"" of type '" "iDynTree::PositionRaw *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::PositionRaw * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__PositionRaw,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PositionRaw_changeRefPoint" "', argument " "2"" of type '" "iDynTree::PositionRaw const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PositionRaw_changeRefPoint" "', argument " "2"" of type '" "iDynTree::PositionRaw const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::PositionRaw * >(argp2);
  result = (iDynTree::PositionRaw *) &(arg1)->changeRefPoint((iDynTree::PositionRaw const &)*arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__PositionRaw, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PositionRaw_compose(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::PositionRaw *arg1 = 0 ;
  iDynTree::PositionRaw *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::PositionRaw result;
  
  if (!SWIG_check_num_args("PositionRaw_compose",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__PositionRaw,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionRaw_compose" "', argument " "1"" of type '" "iDynTree::PositionRaw const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PositionRaw_compose" "', argument " "1"" of type '" "iDynTree::PositionRaw const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::PositionRaw * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__PositionRaw,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PositionRaw_compose" "', argument " "2"" of type '" "iDynTree::PositionRaw const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PositionRaw_compose" "', argument " "2"" of type '" "iDynTree::PositionRaw const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::PositionRaw * >(argp2);
  result = iDynTree::PositionRaw::compose((iDynTree::PositionRaw const &)*arg1,(iDynTree::PositionRaw const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::PositionRaw(static_cast< const iDynTree::PositionRaw& >(result))), SWIGTYPE_p_iDynTree__PositionRaw, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PositionRaw_inverse(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::PositionRaw *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::PositionRaw result;
  
  if (!SWIG_check_num_args("PositionRaw_inverse",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__PositionRaw,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionRaw_inverse" "', argument " "1"" of type '" "iDynTree::PositionRaw const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PositionRaw_inverse" "', argument " "1"" of type '" "iDynTree::PositionRaw const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::PositionRaw * >(argp1);
  result = iDynTree::PositionRaw::inverse((iDynTree::PositionRaw const &)*arg1);
  _out = SWIG_NewPointerObj((new iDynTree::PositionRaw(static_cast< const iDynTree::PositionRaw& >(result))), SWIGTYPE_p_iDynTree__PositionRaw, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PositionRaw_changePointOf__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::PositionRaw *arg1 = (iDynTree::PositionRaw *) 0 ;
  iDynTree::SpatialMotionVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialMotionVector result;
  
  if (!SWIG_check_num_args("PositionRaw_changePointOf",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__PositionRaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionRaw_changePointOf" "', argument " "1"" of type '" "iDynTree::PositionRaw const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::PositionRaw * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialMotionVector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PositionRaw_changePointOf" "', argument " "2"" of type '" "iDynTree::SpatialMotionVector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PositionRaw_changePointOf" "', argument " "2"" of type '" "iDynTree::SpatialMotionVector const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialMotionVector * >(argp2);
  result = ((iDynTree::PositionRaw const *)arg1)->changePointOf((iDynTree::SpatialMotionVector const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialMotionVector(static_cast< const iDynTree::SpatialMotionVector& >(result))), SWIGTYPE_p_iDynTree__SpatialMotionVector, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PositionRaw_changePointOf__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::PositionRaw *arg1 = (iDynTree::PositionRaw *) 0 ;
  iDynTree::SpatialForceVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialForceVector result;
  
  if (!SWIG_check_num_args("PositionRaw_changePointOf",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__PositionRaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionRaw_changePointOf" "', argument " "1"" of type '" "iDynTree::PositionRaw const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::PositionRaw * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialForceVector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PositionRaw_changePointOf" "', argument " "2"" of type '" "iDynTree::SpatialForceVector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PositionRaw_changePointOf" "', argument " "2"" of type '" "iDynTree::SpatialForceVector const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialForceVector * >(argp2);
  result = ((iDynTree::PositionRaw const *)arg1)->changePointOf((iDynTree::SpatialForceVector const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialForceVector(static_cast< const iDynTree::SpatialForceVector& >(result))), SWIGTYPE_p_iDynTree__SpatialForceVector, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PositionRaw_changePointOf(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__PositionRaw, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__SpatialMotionVector, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_PositionRaw_changePointOf__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__PositionRaw, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__SpatialForceVector, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_PositionRaw_changePointOf__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'PositionRaw_changePointOf'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::PositionRaw::changePointOf(iDynTree::SpatialMotionVector const &) const\n"
    "    iDynTree::PositionRaw::changePointOf(iDynTree::SpatialForceVector const &) const\n");
  return 1;
}


int _wrap_PositionRaw_toString(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::PositionRaw *arg1 = (iDynTree::PositionRaw *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("PositionRaw_toString",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__PositionRaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionRaw_toString" "', argument " "1"" of type '" "iDynTree::PositionRaw const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::PositionRaw * >(argp1);
  result = ((iDynTree::PositionRaw const *)arg1)->toString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PositionRaw_display(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::PositionRaw *arg1 = (iDynTree::PositionRaw *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("PositionRaw_display",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__PositionRaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionRaw_display" "', argument " "1"" of type '" "iDynTree::PositionRaw const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::PositionRaw * >(argp1);
  result = ((iDynTree::PositionRaw const *)arg1)->reservedToString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_PositionRaw(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::PositionRaw *arg1 = (iDynTree::PositionRaw *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_PositionRaw",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__PositionRaw, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PositionRaw" "', argument " "1"" of type '" "iDynTree::PositionRaw *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::PositionRaw * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_PositionSemantics__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::PositionSemantics *result = 0 ;
  
  if (!SWIG_check_num_args("new_PositionSemantics",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::PositionSemantics *)new iDynTree::PositionSemantics();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__PositionSemantics, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_PositionSemantics__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  mxArray * _out;
  iDynTree::PositionSemantics *result = 0 ;
  
  if (!SWIG_check_num_args("new_PositionSemantics",argc,5,5,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_PositionSemantics" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_PositionSemantics" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_PositionSemantics" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_PositionSemantics" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(argv[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_PositionSemantics" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  result = (iDynTree::PositionSemantics *)new iDynTree::PositionSemantics(arg1,arg2,arg3,arg4,arg5);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__PositionSemantics, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_PositionSemantics__SWIG_2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::PositionSemantics *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::PositionSemantics *result = 0 ;
  
  if (!SWIG_check_num_args("new_PositionSemantics",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__PositionSemantics,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PositionSemantics" "', argument " "1"" of type '" "iDynTree::PositionSemantics const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PositionSemantics" "', argument " "1"" of type '" "iDynTree::PositionSemantics const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::PositionSemantics * >(argp1);
  result = (iDynTree::PositionSemantics *)new iDynTree::PositionSemantics((iDynTree::PositionSemantics const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__PositionSemantics, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_PositionSemantics(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_PositionSemantics__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__PositionSemantics, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_PositionSemantics__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_PositionSemantics__SWIG_1(resc,resv,argc,argv);
            }
          }
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_PositionSemantics'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::PositionSemantics::PositionSemantics()\n"
    "    iDynTree::PositionSemantics::PositionSemantics(int,int,int,int,int)\n"
    "    iDynTree::PositionSemantics::PositionSemantics(iDynTree::PositionSemantics const &)\n");
  return 1;
}


int _wrap_PositionSemantics_setToUnknown(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::PositionSemantics *arg1 = (iDynTree::PositionSemantics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("PositionSemantics_setToUnknown",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__PositionSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionSemantics_setToUnknown" "', argument " "1"" of type '" "iDynTree::PositionSemantics *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::PositionSemantics * >(argp1);
  (arg1)->setToUnknown();
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PositionSemantics_getPoint(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::PositionSemantics *arg1 = (iDynTree::PositionSemantics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("PositionSemantics_getPoint",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__PositionSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionSemantics_getPoint" "', argument " "1"" of type '" "iDynTree::PositionSemantics const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::PositionSemantics * >(argp1);
  result = (int)((iDynTree::PositionSemantics const *)arg1)->getPoint();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PositionSemantics_getBody(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::PositionSemantics *arg1 = (iDynTree::PositionSemantics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("PositionSemantics_getBody",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__PositionSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionSemantics_getBody" "', argument " "1"" of type '" "iDynTree::PositionSemantics const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::PositionSemantics * >(argp1);
  result = (int)((iDynTree::PositionSemantics const *)arg1)->getBody();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PositionSemantics_getReferencePoint(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::PositionSemantics *arg1 = (iDynTree::PositionSemantics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("PositionSemantics_getReferencePoint",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__PositionSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionSemantics_getReferencePoint" "', argument " "1"" of type '" "iDynTree::PositionSemantics const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::PositionSemantics * >(argp1);
  result = (int)((iDynTree::PositionSemantics const *)arg1)->getReferencePoint();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PositionSemantics_getRefBody(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::PositionSemantics *arg1 = (iDynTree::PositionSemantics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("PositionSemantics_getRefBody",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__PositionSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionSemantics_getRefBody" "', argument " "1"" of type '" "iDynTree::PositionSemantics const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::PositionSemantics * >(argp1);
  result = (int)((iDynTree::PositionSemantics const *)arg1)->getRefBody();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PositionSemantics_getCoordinateFrame(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::PositionSemantics *arg1 = (iDynTree::PositionSemantics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("PositionSemantics_getCoordinateFrame",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__PositionSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionSemantics_getCoordinateFrame" "', argument " "1"" of type '" "iDynTree::PositionSemantics const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::PositionSemantics * >(argp1);
  result = (int)((iDynTree::PositionSemantics const *)arg1)->getCoordinateFrame();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PositionSemantics_setPoint(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::PositionSemantics *arg1 = (iDynTree::PositionSemantics *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("PositionSemantics_setPoint",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__PositionSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionSemantics_setPoint" "', argument " "1"" of type '" "iDynTree::PositionSemantics *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::PositionSemantics * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PositionSemantics_setPoint" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->setPoint(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PositionSemantics_setBody(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::PositionSemantics *arg1 = (iDynTree::PositionSemantics *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("PositionSemantics_setBody",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__PositionSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionSemantics_setBody" "', argument " "1"" of type '" "iDynTree::PositionSemantics *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::PositionSemantics * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PositionSemantics_setBody" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->setBody(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PositionSemantics_setReferencePoint(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::PositionSemantics *arg1 = (iDynTree::PositionSemantics *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("PositionSemantics_setReferencePoint",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__PositionSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionSemantics_setReferencePoint" "', argument " "1"" of type '" "iDynTree::PositionSemantics *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::PositionSemantics * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PositionSemantics_setReferencePoint" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->setReferencePoint(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PositionSemantics_setRefBody(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::PositionSemantics *arg1 = (iDynTree::PositionSemantics *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("PositionSemantics_setRefBody",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__PositionSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionSemantics_setRefBody" "', argument " "1"" of type '" "iDynTree::PositionSemantics *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::PositionSemantics * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PositionSemantics_setRefBody" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->setRefBody(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PositionSemantics_setCoordinateFrame(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::PositionSemantics *arg1 = (iDynTree::PositionSemantics *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("PositionSemantics_setCoordinateFrame",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__PositionSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionSemantics_setCoordinateFrame" "', argument " "1"" of type '" "iDynTree::PositionSemantics *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::PositionSemantics * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PositionSemantics_setCoordinateFrame" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->setCoordinateFrame(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PositionSemantics_changePoint(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::PositionSemantics *arg1 = (iDynTree::PositionSemantics *) 0 ;
  iDynTree::PositionSemantics *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("PositionSemantics_changePoint",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__PositionSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionSemantics_changePoint" "', argument " "1"" of type '" "iDynTree::PositionSemantics *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::PositionSemantics * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__PositionSemantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PositionSemantics_changePoint" "', argument " "2"" of type '" "iDynTree::PositionSemantics const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PositionSemantics_changePoint" "', argument " "2"" of type '" "iDynTree::PositionSemantics const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::PositionSemantics * >(argp2);
  result = (bool)(arg1)->changePoint((iDynTree::PositionSemantics const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PositionSemantics_changeRefPoint(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::PositionSemantics *arg1 = (iDynTree::PositionSemantics *) 0 ;
  iDynTree::PositionSemantics *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("PositionSemantics_changeRefPoint",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__PositionSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionSemantics_changeRefPoint" "', argument " "1"" of type '" "iDynTree::PositionSemantics *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::PositionSemantics * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__PositionSemantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PositionSemantics_changeRefPoint" "', argument " "2"" of type '" "iDynTree::PositionSemantics const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PositionSemantics_changeRefPoint" "', argument " "2"" of type '" "iDynTree::PositionSemantics const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::PositionSemantics * >(argp2);
  result = (bool)(arg1)->changeRefPoint((iDynTree::PositionSemantics const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PositionSemantics_compose(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::PositionSemantics *arg1 = 0 ;
  iDynTree::PositionSemantics *arg2 = 0 ;
  iDynTree::PositionSemantics *arg3 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("PositionSemantics_compose",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__PositionSemantics,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionSemantics_compose" "', argument " "1"" of type '" "iDynTree::PositionSemantics const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PositionSemantics_compose" "', argument " "1"" of type '" "iDynTree::PositionSemantics const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::PositionSemantics * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__PositionSemantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PositionSemantics_compose" "', argument " "2"" of type '" "iDynTree::PositionSemantics const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PositionSemantics_compose" "', argument " "2"" of type '" "iDynTree::PositionSemantics const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::PositionSemantics * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__PositionSemantics,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PositionSemantics_compose" "', argument " "3"" of type '" "iDynTree::PositionSemantics &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PositionSemantics_compose" "', argument " "3"" of type '" "iDynTree::PositionSemantics &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::PositionSemantics * >(argp3);
  result = (bool)iDynTree::PositionSemantics::compose((iDynTree::PositionSemantics const &)*arg1,(iDynTree::PositionSemantics const &)*arg2,*arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PositionSemantics_inverse(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::PositionSemantics *arg1 = 0 ;
  iDynTree::PositionSemantics *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("PositionSemantics_inverse",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__PositionSemantics,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionSemantics_inverse" "', argument " "1"" of type '" "iDynTree::PositionSemantics const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PositionSemantics_inverse" "', argument " "1"" of type '" "iDynTree::PositionSemantics const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::PositionSemantics * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__PositionSemantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PositionSemantics_inverse" "', argument " "2"" of type '" "iDynTree::PositionSemantics &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PositionSemantics_inverse" "', argument " "2"" of type '" "iDynTree::PositionSemantics &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::PositionSemantics * >(argp2);
  result = (bool)iDynTree::PositionSemantics::inverse((iDynTree::PositionSemantics const &)*arg1,*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PositionSemantics_toString(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::PositionSemantics *arg1 = (iDynTree::PositionSemantics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("PositionSemantics_toString",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__PositionSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionSemantics_toString" "', argument " "1"" of type '" "iDynTree::PositionSemantics const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::PositionSemantics * >(argp1);
  result = ((iDynTree::PositionSemantics const *)arg1)->toString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PositionSemantics_display(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::PositionSemantics *arg1 = (iDynTree::PositionSemantics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("PositionSemantics_display",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__PositionSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionSemantics_display" "', argument " "1"" of type '" "iDynTree::PositionSemantics const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::PositionSemantics * >(argp1);
  result = ((iDynTree::PositionSemantics const *)arg1)->reservedToString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_PositionSemantics(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::PositionSemantics *arg1 = (iDynTree::PositionSemantics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_PositionSemantics",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__PositionSemantics, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PositionSemantics" "', argument " "1"" of type '" "iDynTree::PositionSemantics *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::PositionSemantics * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Position__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::Position *result = 0 ;
  
  if (!SWIG_check_num_args("new_Position",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::Position *)new iDynTree::Position();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Position, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Position__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  iDynTree::Position *result = 0 ;
  
  if (!SWIG_check_num_args("new_Position",argc,3,3,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Position" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Position" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Position" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (iDynTree::Position *)new iDynTree::Position(arg1,arg2,arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Position, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Position__SWIG_2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Position *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Position *result = 0 ;
  
  if (!SWIG_check_num_args("new_Position",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Position,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Position" "', argument " "1"" of type '" "iDynTree::Position const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Position" "', argument " "1"" of type '" "iDynTree::Position const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Position * >(argp1);
  result = (iDynTree::Position *)new iDynTree::Position((iDynTree::Position const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Position, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Position__SWIG_3(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::PositionRaw *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Position *result = 0 ;
  
  if (!SWIG_check_num_args("new_Position",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__PositionRaw,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Position" "', argument " "1"" of type '" "iDynTree::PositionRaw const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Position" "', argument " "1"" of type '" "iDynTree::PositionRaw const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::PositionRaw * >(argp1);
  result = (iDynTree::Position *)new iDynTree::Position((iDynTree::PositionRaw const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Position, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Position(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_Position__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Position, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Position__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__PositionRaw, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Position__SWIG_3(resc,resv,argc,argv);
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_Position__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_Position'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::Position::Position()\n"
    "    iDynTree::Position::Position(double,double,double)\n"
    "    iDynTree::Position::Position(iDynTree::Position const &)\n"
    "    iDynTree::Position::Position(iDynTree::PositionRaw const &)\n");
  return 1;
}


int _wrap_Position_getSemantics(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Position *arg1 = (iDynTree::Position *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::PositionSemantics *result = 0 ;
  
  if (!SWIG_check_num_args("Position_getSemantics",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Position, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position_getSemantics" "', argument " "1"" of type '" "iDynTree::Position *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Position * >(argp1);
  result = (iDynTree::PositionSemantics *) &(arg1)->getSemantics();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__PositionSemantics, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Position_changePoint(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Position *arg1 = (iDynTree::Position *) 0 ;
  iDynTree::Position *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Position *result = 0 ;
  
  if (!SWIG_check_num_args("Position_changePoint",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Position, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position_changePoint" "', argument " "1"" of type '" "iDynTree::Position *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Position * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Position,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Position_changePoint" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position_changePoint" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Position * >(argp2);
  result = (iDynTree::Position *) &(arg1)->changePoint((iDynTree::Position const &)*arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Position, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Position_changeRefPoint(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Position *arg1 = (iDynTree::Position *) 0 ;
  iDynTree::Position *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Position *result = 0 ;
  
  if (!SWIG_check_num_args("Position_changeRefPoint",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Position, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position_changeRefPoint" "', argument " "1"" of type '" "iDynTree::Position *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Position * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Position,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Position_changeRefPoint" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position_changeRefPoint" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Position * >(argp2);
  result = (iDynTree::Position *) &(arg1)->changeRefPoint((iDynTree::Position const &)*arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Position, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Position_changeCoordinateFrame(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Position *arg1 = (iDynTree::Position *) 0 ;
  iDynTree::Rotation *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Position *result = 0 ;
  
  if (!SWIG_check_num_args("Position_changeCoordinateFrame",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Position, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position_changeCoordinateFrame" "', argument " "1"" of type '" "iDynTree::Position *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Position * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Rotation,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Position_changeCoordinateFrame" "', argument " "2"" of type '" "iDynTree::Rotation const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position_changeCoordinateFrame" "', argument " "2"" of type '" "iDynTree::Rotation const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Rotation * >(argp2);
  result = (iDynTree::Position *) &(arg1)->changeCoordinateFrame((iDynTree::Rotation const &)*arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Position, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Position_compose(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Position *arg1 = 0 ;
  iDynTree::Position *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Position result;
  
  if (!SWIG_check_num_args("Position_compose",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Position,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position_compose" "', argument " "1"" of type '" "iDynTree::Position const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position_compose" "', argument " "1"" of type '" "iDynTree::Position const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Position * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Position,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Position_compose" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position_compose" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Position * >(argp2);
  result = iDynTree::Position::compose((iDynTree::Position const &)*arg1,(iDynTree::Position const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Position(static_cast< const iDynTree::Position& >(result))), SWIGTYPE_p_iDynTree__Position, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Position_inverse(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Position *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Position result;
  
  if (!SWIG_check_num_args("Position_inverse",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Position,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position_inverse" "', argument " "1"" of type '" "iDynTree::Position const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position_inverse" "', argument " "1"" of type '" "iDynTree::Position const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Position * >(argp1);
  result = iDynTree::Position::inverse((iDynTree::Position const &)*arg1);
  _out = SWIG_NewPointerObj((new iDynTree::Position(static_cast< const iDynTree::Position& >(result))), SWIGTYPE_p_iDynTree__Position, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Position_changePointOf__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Position *arg1 = (iDynTree::Position *) 0 ;
  iDynTree::SpatialMotionVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialMotionVector result;
  
  if (!SWIG_check_num_args("Position_changePointOf",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Position, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position_changePointOf" "', argument " "1"" of type '" "iDynTree::Position const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Position * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialMotionVector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Position_changePointOf" "', argument " "2"" of type '" "iDynTree::SpatialMotionVector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position_changePointOf" "', argument " "2"" of type '" "iDynTree::SpatialMotionVector const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialMotionVector * >(argp2);
  result = ((iDynTree::Position const *)arg1)->changePointOf((iDynTree::SpatialMotionVector const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialMotionVector(static_cast< const iDynTree::SpatialMotionVector& >(result))), SWIGTYPE_p_iDynTree__SpatialMotionVector, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Position_changePointOf__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Position *arg1 = (iDynTree::Position *) 0 ;
  iDynTree::SpatialForceVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialForceVector result;
  
  if (!SWIG_check_num_args("Position_changePointOf",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Position, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position_changePointOf" "', argument " "1"" of type '" "iDynTree::Position const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Position * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialForceVector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Position_changePointOf" "', argument " "2"" of type '" "iDynTree::SpatialForceVector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position_changePointOf" "', argument " "2"" of type '" "iDynTree::SpatialForceVector const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialForceVector * >(argp2);
  result = ((iDynTree::Position const *)arg1)->changePointOf((iDynTree::SpatialForceVector const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialForceVector(static_cast< const iDynTree::SpatialForceVector& >(result))), SWIGTYPE_p_iDynTree__SpatialForceVector, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Position_changePointOf__SWIG_2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Position *arg1 = (iDynTree::Position *) 0 ;
  iDynTree::Twist *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Twist result;
  
  if (!SWIG_check_num_args("Position_changePointOf",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Position, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position_changePointOf" "', argument " "1"" of type '" "iDynTree::Position const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Position * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Twist,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Position_changePointOf" "', argument " "2"" of type '" "iDynTree::Twist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position_changePointOf" "', argument " "2"" of type '" "iDynTree::Twist const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Twist * >(argp2);
  result = ((iDynTree::Position const *)arg1)->changePointOf((iDynTree::Twist const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Twist(static_cast< const iDynTree::Twist& >(result))), SWIGTYPE_p_iDynTree__Twist, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Position_changePointOf__SWIG_3(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Position *arg1 = (iDynTree::Position *) 0 ;
  iDynTree::SpatialAcc *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialAcc result;
  
  if (!SWIG_check_num_args("Position_changePointOf",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Position, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position_changePointOf" "', argument " "1"" of type '" "iDynTree::Position const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Position * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialAcc,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Position_changePointOf" "', argument " "2"" of type '" "iDynTree::SpatialAcc const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position_changePointOf" "', argument " "2"" of type '" "iDynTree::SpatialAcc const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialAcc * >(argp2);
  result = ((iDynTree::Position const *)arg1)->changePointOf((iDynTree::SpatialAcc const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialAcc(static_cast< const iDynTree::SpatialAcc& >(result))), SWIGTYPE_p_iDynTree__SpatialAcc, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Position_changePointOf__SWIG_4(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Position *arg1 = (iDynTree::Position *) 0 ;
  iDynTree::SpatialMomentum *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialMomentum result;
  
  if (!SWIG_check_num_args("Position_changePointOf",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Position, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position_changePointOf" "', argument " "1"" of type '" "iDynTree::Position const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Position * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialMomentum,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Position_changePointOf" "', argument " "2"" of type '" "iDynTree::SpatialMomentum const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position_changePointOf" "', argument " "2"" of type '" "iDynTree::SpatialMomentum const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialMomentum * >(argp2);
  result = ((iDynTree::Position const *)arg1)->changePointOf((iDynTree::SpatialMomentum const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialMomentum(static_cast< const iDynTree::SpatialMomentum& >(result))), SWIGTYPE_p_iDynTree__SpatialMomentum, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Position_changePointOf__SWIG_5(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Position *arg1 = (iDynTree::Position *) 0 ;
  iDynTree::Wrench *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Wrench result;
  
  if (!SWIG_check_num_args("Position_changePointOf",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Position, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position_changePointOf" "', argument " "1"" of type '" "iDynTree::Position const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Position * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Wrench,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Position_changePointOf" "', argument " "2"" of type '" "iDynTree::Wrench const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position_changePointOf" "', argument " "2"" of type '" "iDynTree::Wrench const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Wrench * >(argp2);
  result = ((iDynTree::Position const *)arg1)->changePointOf((iDynTree::Wrench const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Wrench(static_cast< const iDynTree::Wrench& >(result))), SWIGTYPE_p_iDynTree__Wrench, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Position_changePointOf(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Position, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Twist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Position_changePointOf__SWIG_2(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Position, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__SpatialMomentum, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Position_changePointOf__SWIG_4(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Position, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__SpatialAcc, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Position_changePointOf__SWIG_3(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Position, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__SpatialMotionVector, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Position_changePointOf__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Position, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Wrench, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Position_changePointOf__SWIG_5(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Position, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__SpatialForceVector, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Position_changePointOf__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Position_changePointOf'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::Position::changePointOf(iDynTree::SpatialMotionVector const &) const\n"
    "    iDynTree::Position::changePointOf(iDynTree::SpatialForceVector const &) const\n"
    "    iDynTree::Position::changePointOf(iDynTree::Twist const &) const\n"
    "    iDynTree::Position::changePointOf(iDynTree::SpatialAcc const &) const\n"
    "    iDynTree::Position::changePointOf(iDynTree::SpatialMomentum const &) const\n"
    "    iDynTree::Position::changePointOf(iDynTree::Wrench const &) const\n");
  return 1;
}


int _wrap_Position_plus(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Position *arg1 = (iDynTree::Position *) 0 ;
  iDynTree::Position *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Position result;
  
  if (!SWIG_check_num_args("Position_plus",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Position, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position_plus" "', argument " "1"" of type '" "iDynTree::Position const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Position * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Position,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Position_plus" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position_plus" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Position * >(argp2);
  result = ((iDynTree::Position const *)arg1)->operator +((iDynTree::Position const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Position(static_cast< const iDynTree::Position& >(result))), SWIGTYPE_p_iDynTree__Position, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Position_minus(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Position *arg1 = (iDynTree::Position *) 0 ;
  iDynTree::Position *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Position result;
  
  if (!SWIG_check_num_args("Position_minus",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Position, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position_minus" "', argument " "1"" of type '" "iDynTree::Position const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Position * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Position,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Position_minus" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position_minus" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Position * >(argp2);
  result = ((iDynTree::Position const *)arg1)->operator -((iDynTree::Position const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Position(static_cast< const iDynTree::Position& >(result))), SWIGTYPE_p_iDynTree__Position, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Position_uminus(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Position *arg1 = (iDynTree::Position *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Position result;
  
  if (!SWIG_check_num_args("Position_uminus",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Position, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position_uminus" "', argument " "1"" of type '" "iDynTree::Position const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Position * >(argp1);
  result = ((iDynTree::Position const *)arg1)->operator -();
  _out = SWIG_NewPointerObj((new iDynTree::Position(static_cast< const iDynTree::Position& >(result))), SWIGTYPE_p_iDynTree__Position, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Position_mtimes__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Position *arg1 = (iDynTree::Position *) 0 ;
  iDynTree::Twist *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Twist result;
  
  if (!SWIG_check_num_args("Position_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Position, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position_mtimes" "', argument " "1"" of type '" "iDynTree::Position const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Position * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Twist,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Position_mtimes" "', argument " "2"" of type '" "iDynTree::Twist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position_mtimes" "', argument " "2"" of type '" "iDynTree::Twist const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Twist * >(argp2);
  result = ((iDynTree::Position const *)arg1)->operator *((iDynTree::Twist const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Twist(static_cast< const iDynTree::Twist& >(result))), SWIGTYPE_p_iDynTree__Twist, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Position_mtimes__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Position *arg1 = (iDynTree::Position *) 0 ;
  iDynTree::SpatialForceVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialForceVector result;
  
  if (!SWIG_check_num_args("Position_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Position, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position_mtimes" "', argument " "1"" of type '" "iDynTree::Position const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Position * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialForceVector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Position_mtimes" "', argument " "2"" of type '" "iDynTree::SpatialForceVector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position_mtimes" "', argument " "2"" of type '" "iDynTree::SpatialForceVector const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialForceVector * >(argp2);
  result = ((iDynTree::Position const *)arg1)->operator *((iDynTree::SpatialForceVector const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialForceVector(static_cast< const iDynTree::SpatialForceVector& >(result))), SWIGTYPE_p_iDynTree__SpatialForceVector, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Position_mtimes__SWIG_2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Position *arg1 = (iDynTree::Position *) 0 ;
  iDynTree::SpatialAcc *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialAcc result;
  
  if (!SWIG_check_num_args("Position_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Position, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position_mtimes" "', argument " "1"" of type '" "iDynTree::Position const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Position * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialAcc,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Position_mtimes" "', argument " "2"" of type '" "iDynTree::SpatialAcc const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position_mtimes" "', argument " "2"" of type '" "iDynTree::SpatialAcc const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialAcc * >(argp2);
  result = ((iDynTree::Position const *)arg1)->operator *((iDynTree::SpatialAcc const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialAcc(static_cast< const iDynTree::SpatialAcc& >(result))), SWIGTYPE_p_iDynTree__SpatialAcc, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Position_mtimes__SWIG_3(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Position *arg1 = (iDynTree::Position *) 0 ;
  iDynTree::SpatialMomentum *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialMomentum result;
  
  if (!SWIG_check_num_args("Position_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Position, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position_mtimes" "', argument " "1"" of type '" "iDynTree::Position const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Position * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialMomentum,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Position_mtimes" "', argument " "2"" of type '" "iDynTree::SpatialMomentum const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position_mtimes" "', argument " "2"" of type '" "iDynTree::SpatialMomentum const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialMomentum * >(argp2);
  result = ((iDynTree::Position const *)arg1)->operator *((iDynTree::SpatialMomentum const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialMomentum(static_cast< const iDynTree::SpatialMomentum& >(result))), SWIGTYPE_p_iDynTree__SpatialMomentum, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Position_mtimes__SWIG_4(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Position *arg1 = (iDynTree::Position *) 0 ;
  iDynTree::Wrench *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Wrench result;
  
  if (!SWIG_check_num_args("Position_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Position, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position_mtimes" "', argument " "1"" of type '" "iDynTree::Position const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Position * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Wrench,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Position_mtimes" "', argument " "2"" of type '" "iDynTree::Wrench const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position_mtimes" "', argument " "2"" of type '" "iDynTree::Wrench const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Wrench * >(argp2);
  result = ((iDynTree::Position const *)arg1)->operator *((iDynTree::Wrench const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Wrench(static_cast< const iDynTree::Wrench& >(result))), SWIGTYPE_p_iDynTree__Wrench, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Position_mtimes(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Position, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Twist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Position_mtimes__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Position, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__SpatialMomentum, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Position_mtimes__SWIG_3(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Position, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__SpatialAcc, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Position_mtimes__SWIG_2(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Position, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Wrench, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Position_mtimes__SWIG_4(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Position, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__SpatialForceVector, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Position_mtimes__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Position_mtimes'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::Position::operator *(iDynTree::Twist const &) const\n"
    "    iDynTree::Position::operator *(iDynTree::SpatialForceVector const &) const\n"
    "    iDynTree::Position::operator *(iDynTree::SpatialAcc const &) const\n"
    "    iDynTree::Position::operator *(iDynTree::SpatialMomentum const &) const\n"
    "    iDynTree::Position::operator *(iDynTree::Wrench const &) const\n");
  return 1;
}


int _wrap_Position_toString(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Position *arg1 = (iDynTree::Position *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("Position_toString",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Position, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position_toString" "', argument " "1"" of type '" "iDynTree::Position const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Position * >(argp1);
  result = ((iDynTree::Position const *)arg1)->toString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Position_display(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Position *arg1 = (iDynTree::Position *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("Position_display",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Position, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position_display" "', argument " "1"" of type '" "iDynTree::Position const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Position * >(argp1);
  result = ((iDynTree::Position const *)arg1)->reservedToString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Position_Zero(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::Position result;
  
  if (!SWIG_check_num_args("Position_Zero",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = iDynTree::Position::Zero();
  _out = SWIG_NewPointerObj((new iDynTree::Position(static_cast< const iDynTree::Position& >(result))), SWIGTYPE_p_iDynTree__Position, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_Position(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Position *arg1 = (iDynTree::Position *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_Position",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Position, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Position" "', argument " "1"" of type '" "iDynTree::Position *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Position * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_GeomVector3Semantics__LinearMotionVector3Semantics__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > *result = 0 ;
  
  if (!SWIG_check_num_args("new_GeomVector3Semantics__LinearMotionVector3Semantics",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > *)new iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics >();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__LinearMotionVector3Semantics_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_GeomVector3Semantics__LinearMotionVector3Semantics__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > *result = 0 ;
  
  if (!SWIG_check_num_args("new_GeomVector3Semantics__LinearMotionVector3Semantics",argc,3,3,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_GeomVector3Semantics__LinearMotionVector3Semantics" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_GeomVector3Semantics__LinearMotionVector3Semantics" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_GeomVector3Semantics__LinearMotionVector3Semantics" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > *)new iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics >(arg1,arg2,arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__LinearMotionVector3Semantics_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_GeomVector3Semantics__LinearMotionVector3Semantics__SWIG_2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > *result = 0 ;
  
  if (!SWIG_check_num_args("new_GeomVector3Semantics__LinearMotionVector3Semantics",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__LinearMotionVector3Semantics_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GeomVector3Semantics__LinearMotionVector3Semantics" "', argument " "1"" of type '" "iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GeomVector3Semantics__LinearMotionVector3Semantics" "', argument " "1"" of type '" "iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > * >(argp1);
  result = (iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > *)new iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics >((iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__LinearMotionVector3Semantics_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_GeomVector3Semantics__LinearMotionVector3Semantics(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_GeomVector3Semantics__LinearMotionVector3Semantics__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__LinearMotionVector3Semantics_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_GeomVector3Semantics__LinearMotionVector3Semantics__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_GeomVector3Semantics__LinearMotionVector3Semantics__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_GeomVector3Semantics__LinearMotionVector3Semantics'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics >::GeomVector3Semantics()\n"
    "    iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics >::GeomVector3Semantics(int,int,int)\n"
    "    iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics >::GeomVector3Semantics(iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > const &)\n");
  return 1;
}


int _wrap_GeomVector3Semantics__LinearMotionVector3Semantics_setToUnknown(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > *arg1 = (iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("GeomVector3Semantics__LinearMotionVector3Semantics_setToUnknown",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__LinearMotionVector3Semantics_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3Semantics__LinearMotionVector3Semantics_setToUnknown" "', argument " "1"" of type '" "iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > * >(argp1);
  (arg1)->setToUnknown();
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3Semantics__LinearMotionVector3Semantics_getBody(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > *arg1 = (iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("GeomVector3Semantics__LinearMotionVector3Semantics_getBody",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__LinearMotionVector3Semantics_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3Semantics__LinearMotionVector3Semantics_getBody" "', argument " "1"" of type '" "iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > * >(argp1);
  result = (int)((iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > const *)arg1)->getBody();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3Semantics__LinearMotionVector3Semantics_getRefBody(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > *arg1 = (iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("GeomVector3Semantics__LinearMotionVector3Semantics_getRefBody",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__LinearMotionVector3Semantics_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3Semantics__LinearMotionVector3Semantics_getRefBody" "', argument " "1"" of type '" "iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > * >(argp1);
  result = (int)((iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > const *)arg1)->getRefBody();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3Semantics__LinearMotionVector3Semantics_getCoordinateFrame(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > *arg1 = (iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("GeomVector3Semantics__LinearMotionVector3Semantics_getCoordinateFrame",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__LinearMotionVector3Semantics_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3Semantics__LinearMotionVector3Semantics_getCoordinateFrame" "', argument " "1"" of type '" "iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > * >(argp1);
  result = (int)((iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > const *)arg1)->getCoordinateFrame();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3Semantics__LinearMotionVector3Semantics_isUnknown(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > *arg1 = (iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("GeomVector3Semantics__LinearMotionVector3Semantics_isUnknown",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__LinearMotionVector3Semantics_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3Semantics__LinearMotionVector3Semantics_isUnknown" "', argument " "1"" of type '" "iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > * >(argp1);
  result = (bool)((iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > const *)arg1)->isUnknown();
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3Semantics__LinearMotionVector3Semantics_changeCoordFrame(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > *arg1 = (iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > *) 0 ;
  iDynTree::RotationSemantics *arg2 = 0 ;
  iDynTree::LinearMotionVector3Semantics *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("GeomVector3Semantics__LinearMotionVector3Semantics_changeCoordFrame",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__LinearMotionVector3Semantics_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3Semantics__LinearMotionVector3Semantics_changeCoordFrame" "', argument " "1"" of type '" "iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__RotationSemantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeomVector3Semantics__LinearMotionVector3Semantics_changeCoordFrame" "', argument " "2"" of type '" "iDynTree::RotationSemantics const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3Semantics__LinearMotionVector3Semantics_changeCoordFrame" "', argument " "2"" of type '" "iDynTree::RotationSemantics const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::RotationSemantics * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__LinearMotionVector3Semantics,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GeomVector3Semantics__LinearMotionVector3Semantics_changeCoordFrame" "', argument " "3"" of type '" "iDynTree::LinearMotionVector3Semantics &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3Semantics__LinearMotionVector3Semantics_changeCoordFrame" "', argument " "3"" of type '" "iDynTree::LinearMotionVector3Semantics &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::LinearMotionVector3Semantics * >(argp3);
  result = (bool)((iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > const *)arg1)->changeCoordFrame((iDynTree::RotationSemantics const &)*arg2,*arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3Semantics__LinearMotionVector3Semantics_compose(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinearMotionVector3Semantics *arg1 = 0 ;
  iDynTree::LinearMotionVector3Semantics *arg2 = 0 ;
  iDynTree::LinearMotionVector3Semantics *arg3 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("GeomVector3Semantics__LinearMotionVector3Semantics_compose",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__LinearMotionVector3Semantics,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3Semantics__LinearMotionVector3Semantics_compose" "', argument " "1"" of type '" "iDynTree::LinearMotionVector3Semantics const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3Semantics__LinearMotionVector3Semantics_compose" "', argument " "1"" of type '" "iDynTree::LinearMotionVector3Semantics const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinearMotionVector3Semantics * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__LinearMotionVector3Semantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeomVector3Semantics__LinearMotionVector3Semantics_compose" "', argument " "2"" of type '" "iDynTree::LinearMotionVector3Semantics const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3Semantics__LinearMotionVector3Semantics_compose" "', argument " "2"" of type '" "iDynTree::LinearMotionVector3Semantics const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::LinearMotionVector3Semantics * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__LinearMotionVector3Semantics,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GeomVector3Semantics__LinearMotionVector3Semantics_compose" "', argument " "3"" of type '" "iDynTree::LinearMotionVector3Semantics &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3Semantics__LinearMotionVector3Semantics_compose" "', argument " "3"" of type '" "iDynTree::LinearMotionVector3Semantics &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::LinearMotionVector3Semantics * >(argp3);
  result = (bool)iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics >::SWIGTEMPLATEDISAMBIGUATOR compose((iDynTree::LinearMotionVector3Semantics const &)*arg1,(iDynTree::LinearMotionVector3Semantics const &)*arg2,*arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3Semantics__LinearMotionVector3Semantics_inverse(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinearMotionVector3Semantics *arg1 = 0 ;
  iDynTree::LinearMotionVector3Semantics *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("GeomVector3Semantics__LinearMotionVector3Semantics_inverse",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__LinearMotionVector3Semantics,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3Semantics__LinearMotionVector3Semantics_inverse" "', argument " "1"" of type '" "iDynTree::LinearMotionVector3Semantics const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3Semantics__LinearMotionVector3Semantics_inverse" "', argument " "1"" of type '" "iDynTree::LinearMotionVector3Semantics const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinearMotionVector3Semantics * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__LinearMotionVector3Semantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeomVector3Semantics__LinearMotionVector3Semantics_inverse" "', argument " "2"" of type '" "iDynTree::LinearMotionVector3Semantics &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3Semantics__LinearMotionVector3Semantics_inverse" "', argument " "2"" of type '" "iDynTree::LinearMotionVector3Semantics &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::LinearMotionVector3Semantics * >(argp2);
  result = (bool)iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics >::SWIGTEMPLATEDISAMBIGUATOR inverse((iDynTree::LinearMotionVector3Semantics const &)*arg1,*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3Semantics__LinearMotionVector3Semantics_dot(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > *arg1 = (iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > *) 0 ;
  iDynTree::DualMotionForceSemanticsT< iDynTree::LinearMotionVector3Semantics >::Type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("GeomVector3Semantics__LinearMotionVector3Semantics_dot",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__LinearMotionVector3Semantics_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3Semantics__LinearMotionVector3Semantics_dot" "', argument " "1"" of type '" "iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__LinearForceVector3Semantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeomVector3Semantics__LinearMotionVector3Semantics_dot" "', argument " "2"" of type '" "iDynTree::DualMotionForceSemanticsT< iDynTree::LinearMotionVector3Semantics >::Type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3Semantics__LinearMotionVector3Semantics_dot" "', argument " "2"" of type '" "iDynTree::DualMotionForceSemanticsT< iDynTree::LinearMotionVector3Semantics >::Type const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::DualMotionForceSemanticsT< iDynTree::LinearMotionVector3Semantics >::Type * >(argp2);
  result = (bool)((iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > const *)arg1)->dot((iDynTree::DualMotionForceSemanticsT< iDynTree::LinearMotionVector3Semantics >::Type const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_GeomVector3Semantics__LinearMotionVector3Semantics(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > *arg1 = (iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_GeomVector3Semantics__LinearMotionVector3Semantics",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__LinearMotionVector3Semantics_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GeomVector3Semantics__LinearMotionVector3Semantics" "', argument " "1"" of type '" "iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_GeomVector3Semantics__AngularMotionVector3Semantics__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > *result = 0 ;
  
  if (!SWIG_check_num_args("new_GeomVector3Semantics__AngularMotionVector3Semantics",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > *)new iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics >();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__AngularMotionVector3Semantics_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_GeomVector3Semantics__AngularMotionVector3Semantics__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > *result = 0 ;
  
  if (!SWIG_check_num_args("new_GeomVector3Semantics__AngularMotionVector3Semantics",argc,3,3,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_GeomVector3Semantics__AngularMotionVector3Semantics" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_GeomVector3Semantics__AngularMotionVector3Semantics" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_GeomVector3Semantics__AngularMotionVector3Semantics" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > *)new iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics >(arg1,arg2,arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__AngularMotionVector3Semantics_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_GeomVector3Semantics__AngularMotionVector3Semantics__SWIG_2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > *result = 0 ;
  
  if (!SWIG_check_num_args("new_GeomVector3Semantics__AngularMotionVector3Semantics",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__AngularMotionVector3Semantics_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GeomVector3Semantics__AngularMotionVector3Semantics" "', argument " "1"" of type '" "iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GeomVector3Semantics__AngularMotionVector3Semantics" "', argument " "1"" of type '" "iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > * >(argp1);
  result = (iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > *)new iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics >((iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__AngularMotionVector3Semantics_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_GeomVector3Semantics__AngularMotionVector3Semantics(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_GeomVector3Semantics__AngularMotionVector3Semantics__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__AngularMotionVector3Semantics_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_GeomVector3Semantics__AngularMotionVector3Semantics__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_GeomVector3Semantics__AngularMotionVector3Semantics__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_GeomVector3Semantics__AngularMotionVector3Semantics'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics >::GeomVector3Semantics()\n"
    "    iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics >::GeomVector3Semantics(int,int,int)\n"
    "    iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics >::GeomVector3Semantics(iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > const &)\n");
  return 1;
}


int _wrap_GeomVector3Semantics__AngularMotionVector3Semantics_setToUnknown(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > *arg1 = (iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("GeomVector3Semantics__AngularMotionVector3Semantics_setToUnknown",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__AngularMotionVector3Semantics_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3Semantics__AngularMotionVector3Semantics_setToUnknown" "', argument " "1"" of type '" "iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > * >(argp1);
  (arg1)->setToUnknown();
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3Semantics__AngularMotionVector3Semantics_getBody(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > *arg1 = (iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("GeomVector3Semantics__AngularMotionVector3Semantics_getBody",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__AngularMotionVector3Semantics_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3Semantics__AngularMotionVector3Semantics_getBody" "', argument " "1"" of type '" "iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > * >(argp1);
  result = (int)((iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > const *)arg1)->getBody();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3Semantics__AngularMotionVector3Semantics_getRefBody(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > *arg1 = (iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("GeomVector3Semantics__AngularMotionVector3Semantics_getRefBody",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__AngularMotionVector3Semantics_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3Semantics__AngularMotionVector3Semantics_getRefBody" "', argument " "1"" of type '" "iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > * >(argp1);
  result = (int)((iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > const *)arg1)->getRefBody();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3Semantics__AngularMotionVector3Semantics_getCoordinateFrame(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > *arg1 = (iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("GeomVector3Semantics__AngularMotionVector3Semantics_getCoordinateFrame",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__AngularMotionVector3Semantics_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3Semantics__AngularMotionVector3Semantics_getCoordinateFrame" "', argument " "1"" of type '" "iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > * >(argp1);
  result = (int)((iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > const *)arg1)->getCoordinateFrame();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3Semantics__AngularMotionVector3Semantics_isUnknown(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > *arg1 = (iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("GeomVector3Semantics__AngularMotionVector3Semantics_isUnknown",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__AngularMotionVector3Semantics_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3Semantics__AngularMotionVector3Semantics_isUnknown" "', argument " "1"" of type '" "iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > * >(argp1);
  result = (bool)((iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > const *)arg1)->isUnknown();
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3Semantics__AngularMotionVector3Semantics_changeCoordFrame(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > *arg1 = (iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > *) 0 ;
  iDynTree::RotationSemantics *arg2 = 0 ;
  iDynTree::AngularMotionVector3Semantics *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("GeomVector3Semantics__AngularMotionVector3Semantics_changeCoordFrame",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__AngularMotionVector3Semantics_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3Semantics__AngularMotionVector3Semantics_changeCoordFrame" "', argument " "1"" of type '" "iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__RotationSemantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeomVector3Semantics__AngularMotionVector3Semantics_changeCoordFrame" "', argument " "2"" of type '" "iDynTree::RotationSemantics const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3Semantics__AngularMotionVector3Semantics_changeCoordFrame" "', argument " "2"" of type '" "iDynTree::RotationSemantics const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::RotationSemantics * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__AngularMotionVector3Semantics,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GeomVector3Semantics__AngularMotionVector3Semantics_changeCoordFrame" "', argument " "3"" of type '" "iDynTree::AngularMotionVector3Semantics &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3Semantics__AngularMotionVector3Semantics_changeCoordFrame" "', argument " "3"" of type '" "iDynTree::AngularMotionVector3Semantics &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::AngularMotionVector3Semantics * >(argp3);
  result = (bool)((iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > const *)arg1)->changeCoordFrame((iDynTree::RotationSemantics const &)*arg2,*arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3Semantics__AngularMotionVector3Semantics_compose(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::AngularMotionVector3Semantics *arg1 = 0 ;
  iDynTree::AngularMotionVector3Semantics *arg2 = 0 ;
  iDynTree::AngularMotionVector3Semantics *arg3 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("GeomVector3Semantics__AngularMotionVector3Semantics_compose",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__AngularMotionVector3Semantics,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3Semantics__AngularMotionVector3Semantics_compose" "', argument " "1"" of type '" "iDynTree::AngularMotionVector3Semantics const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3Semantics__AngularMotionVector3Semantics_compose" "', argument " "1"" of type '" "iDynTree::AngularMotionVector3Semantics const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::AngularMotionVector3Semantics * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__AngularMotionVector3Semantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeomVector3Semantics__AngularMotionVector3Semantics_compose" "', argument " "2"" of type '" "iDynTree::AngularMotionVector3Semantics const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3Semantics__AngularMotionVector3Semantics_compose" "', argument " "2"" of type '" "iDynTree::AngularMotionVector3Semantics const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::AngularMotionVector3Semantics * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__AngularMotionVector3Semantics,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GeomVector3Semantics__AngularMotionVector3Semantics_compose" "', argument " "3"" of type '" "iDynTree::AngularMotionVector3Semantics &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3Semantics__AngularMotionVector3Semantics_compose" "', argument " "3"" of type '" "iDynTree::AngularMotionVector3Semantics &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::AngularMotionVector3Semantics * >(argp3);
  result = (bool)iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics >::SWIGTEMPLATEDISAMBIGUATOR compose((iDynTree::AngularMotionVector3Semantics const &)*arg1,(iDynTree::AngularMotionVector3Semantics const &)*arg2,*arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3Semantics__AngularMotionVector3Semantics_inverse(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::AngularMotionVector3Semantics *arg1 = 0 ;
  iDynTree::AngularMotionVector3Semantics *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("GeomVector3Semantics__AngularMotionVector3Semantics_inverse",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__AngularMotionVector3Semantics,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3Semantics__AngularMotionVector3Semantics_inverse" "', argument " "1"" of type '" "iDynTree::AngularMotionVector3Semantics const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3Semantics__AngularMotionVector3Semantics_inverse" "', argument " "1"" of type '" "iDynTree::AngularMotionVector3Semantics const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::AngularMotionVector3Semantics * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__AngularMotionVector3Semantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeomVector3Semantics__AngularMotionVector3Semantics_inverse" "', argument " "2"" of type '" "iDynTree::AngularMotionVector3Semantics &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3Semantics__AngularMotionVector3Semantics_inverse" "', argument " "2"" of type '" "iDynTree::AngularMotionVector3Semantics &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::AngularMotionVector3Semantics * >(argp2);
  result = (bool)iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics >::SWIGTEMPLATEDISAMBIGUATOR inverse((iDynTree::AngularMotionVector3Semantics const &)*arg1,*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3Semantics__AngularMotionVector3Semantics_dot(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > *arg1 = (iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > *) 0 ;
  iDynTree::DualMotionForceSemanticsT< iDynTree::AngularMotionVector3Semantics >::Type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("GeomVector3Semantics__AngularMotionVector3Semantics_dot",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__AngularMotionVector3Semantics_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3Semantics__AngularMotionVector3Semantics_dot" "', argument " "1"" of type '" "iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__AngularForceVector3Semantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeomVector3Semantics__AngularMotionVector3Semantics_dot" "', argument " "2"" of type '" "iDynTree::DualMotionForceSemanticsT< iDynTree::AngularMotionVector3Semantics >::Type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3Semantics__AngularMotionVector3Semantics_dot" "', argument " "2"" of type '" "iDynTree::DualMotionForceSemanticsT< iDynTree::AngularMotionVector3Semantics >::Type const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::DualMotionForceSemanticsT< iDynTree::AngularMotionVector3Semantics >::Type * >(argp2);
  result = (bool)((iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > const *)arg1)->dot((iDynTree::DualMotionForceSemanticsT< iDynTree::AngularMotionVector3Semantics >::Type const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_GeomVector3Semantics__AngularMotionVector3Semantics(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > *arg1 = (iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_GeomVector3Semantics__AngularMotionVector3Semantics",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__AngularMotionVector3Semantics_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GeomVector3Semantics__AngularMotionVector3Semantics" "', argument " "1"" of type '" "iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_GeomVector3Semantics__LinearForceVector3Semantics__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > *result = 0 ;
  
  if (!SWIG_check_num_args("new_GeomVector3Semantics__LinearForceVector3Semantics",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > *)new iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics >();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__LinearForceVector3Semantics_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_GeomVector3Semantics__LinearForceVector3Semantics__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > *result = 0 ;
  
  if (!SWIG_check_num_args("new_GeomVector3Semantics__LinearForceVector3Semantics",argc,3,3,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_GeomVector3Semantics__LinearForceVector3Semantics" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_GeomVector3Semantics__LinearForceVector3Semantics" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_GeomVector3Semantics__LinearForceVector3Semantics" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > *)new iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics >(arg1,arg2,arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__LinearForceVector3Semantics_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_GeomVector3Semantics__LinearForceVector3Semantics__SWIG_2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > *result = 0 ;
  
  if (!SWIG_check_num_args("new_GeomVector3Semantics__LinearForceVector3Semantics",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__LinearForceVector3Semantics_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GeomVector3Semantics__LinearForceVector3Semantics" "', argument " "1"" of type '" "iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GeomVector3Semantics__LinearForceVector3Semantics" "', argument " "1"" of type '" "iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > * >(argp1);
  result = (iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > *)new iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics >((iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__LinearForceVector3Semantics_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_GeomVector3Semantics__LinearForceVector3Semantics(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_GeomVector3Semantics__LinearForceVector3Semantics__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__LinearForceVector3Semantics_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_GeomVector3Semantics__LinearForceVector3Semantics__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_GeomVector3Semantics__LinearForceVector3Semantics__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_GeomVector3Semantics__LinearForceVector3Semantics'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics >::GeomVector3Semantics()\n"
    "    iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics >::GeomVector3Semantics(int,int,int)\n"
    "    iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics >::GeomVector3Semantics(iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > const &)\n");
  return 1;
}


int _wrap_GeomVector3Semantics__LinearForceVector3Semantics_setToUnknown(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > *arg1 = (iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("GeomVector3Semantics__LinearForceVector3Semantics_setToUnknown",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__LinearForceVector3Semantics_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3Semantics__LinearForceVector3Semantics_setToUnknown" "', argument " "1"" of type '" "iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > * >(argp1);
  (arg1)->setToUnknown();
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3Semantics__LinearForceVector3Semantics_getBody(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > *arg1 = (iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("GeomVector3Semantics__LinearForceVector3Semantics_getBody",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__LinearForceVector3Semantics_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3Semantics__LinearForceVector3Semantics_getBody" "', argument " "1"" of type '" "iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > * >(argp1);
  result = (int)((iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > const *)arg1)->getBody();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3Semantics__LinearForceVector3Semantics_getRefBody(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > *arg1 = (iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("GeomVector3Semantics__LinearForceVector3Semantics_getRefBody",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__LinearForceVector3Semantics_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3Semantics__LinearForceVector3Semantics_getRefBody" "', argument " "1"" of type '" "iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > * >(argp1);
  result = (int)((iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > const *)arg1)->getRefBody();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3Semantics__LinearForceVector3Semantics_getCoordinateFrame(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > *arg1 = (iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("GeomVector3Semantics__LinearForceVector3Semantics_getCoordinateFrame",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__LinearForceVector3Semantics_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3Semantics__LinearForceVector3Semantics_getCoordinateFrame" "', argument " "1"" of type '" "iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > * >(argp1);
  result = (int)((iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > const *)arg1)->getCoordinateFrame();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3Semantics__LinearForceVector3Semantics_isUnknown(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > *arg1 = (iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("GeomVector3Semantics__LinearForceVector3Semantics_isUnknown",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__LinearForceVector3Semantics_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3Semantics__LinearForceVector3Semantics_isUnknown" "', argument " "1"" of type '" "iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > * >(argp1);
  result = (bool)((iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > const *)arg1)->isUnknown();
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3Semantics__LinearForceVector3Semantics_changeCoordFrame(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > *arg1 = (iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > *) 0 ;
  iDynTree::RotationSemantics *arg2 = 0 ;
  iDynTree::LinearForceVector3Semantics *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("GeomVector3Semantics__LinearForceVector3Semantics_changeCoordFrame",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__LinearForceVector3Semantics_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3Semantics__LinearForceVector3Semantics_changeCoordFrame" "', argument " "1"" of type '" "iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__RotationSemantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeomVector3Semantics__LinearForceVector3Semantics_changeCoordFrame" "', argument " "2"" of type '" "iDynTree::RotationSemantics const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3Semantics__LinearForceVector3Semantics_changeCoordFrame" "', argument " "2"" of type '" "iDynTree::RotationSemantics const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::RotationSemantics * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__LinearForceVector3Semantics,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GeomVector3Semantics__LinearForceVector3Semantics_changeCoordFrame" "', argument " "3"" of type '" "iDynTree::LinearForceVector3Semantics &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3Semantics__LinearForceVector3Semantics_changeCoordFrame" "', argument " "3"" of type '" "iDynTree::LinearForceVector3Semantics &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::LinearForceVector3Semantics * >(argp3);
  result = (bool)((iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > const *)arg1)->changeCoordFrame((iDynTree::RotationSemantics const &)*arg2,*arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3Semantics__LinearForceVector3Semantics_compose(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinearForceVector3Semantics *arg1 = 0 ;
  iDynTree::LinearForceVector3Semantics *arg2 = 0 ;
  iDynTree::LinearForceVector3Semantics *arg3 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("GeomVector3Semantics__LinearForceVector3Semantics_compose",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__LinearForceVector3Semantics,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3Semantics__LinearForceVector3Semantics_compose" "', argument " "1"" of type '" "iDynTree::LinearForceVector3Semantics const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3Semantics__LinearForceVector3Semantics_compose" "', argument " "1"" of type '" "iDynTree::LinearForceVector3Semantics const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinearForceVector3Semantics * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__LinearForceVector3Semantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeomVector3Semantics__LinearForceVector3Semantics_compose" "', argument " "2"" of type '" "iDynTree::LinearForceVector3Semantics const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3Semantics__LinearForceVector3Semantics_compose" "', argument " "2"" of type '" "iDynTree::LinearForceVector3Semantics const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::LinearForceVector3Semantics * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__LinearForceVector3Semantics,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GeomVector3Semantics__LinearForceVector3Semantics_compose" "', argument " "3"" of type '" "iDynTree::LinearForceVector3Semantics &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3Semantics__LinearForceVector3Semantics_compose" "', argument " "3"" of type '" "iDynTree::LinearForceVector3Semantics &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::LinearForceVector3Semantics * >(argp3);
  result = (bool)iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics >::SWIGTEMPLATEDISAMBIGUATOR compose((iDynTree::LinearForceVector3Semantics const &)*arg1,(iDynTree::LinearForceVector3Semantics const &)*arg2,*arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3Semantics__LinearForceVector3Semantics_inverse(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinearForceVector3Semantics *arg1 = 0 ;
  iDynTree::LinearForceVector3Semantics *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("GeomVector3Semantics__LinearForceVector3Semantics_inverse",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__LinearForceVector3Semantics,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3Semantics__LinearForceVector3Semantics_inverse" "', argument " "1"" of type '" "iDynTree::LinearForceVector3Semantics const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3Semantics__LinearForceVector3Semantics_inverse" "', argument " "1"" of type '" "iDynTree::LinearForceVector3Semantics const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinearForceVector3Semantics * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__LinearForceVector3Semantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeomVector3Semantics__LinearForceVector3Semantics_inverse" "', argument " "2"" of type '" "iDynTree::LinearForceVector3Semantics &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3Semantics__LinearForceVector3Semantics_inverse" "', argument " "2"" of type '" "iDynTree::LinearForceVector3Semantics &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::LinearForceVector3Semantics * >(argp2);
  result = (bool)iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics >::SWIGTEMPLATEDISAMBIGUATOR inverse((iDynTree::LinearForceVector3Semantics const &)*arg1,*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3Semantics__LinearForceVector3Semantics_dot(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > *arg1 = (iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > *) 0 ;
  iDynTree::DualMotionForceSemanticsT< iDynTree::LinearForceVector3Semantics >::Type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("GeomVector3Semantics__LinearForceVector3Semantics_dot",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__LinearForceVector3Semantics_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3Semantics__LinearForceVector3Semantics_dot" "', argument " "1"" of type '" "iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__LinearMotionVector3Semantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeomVector3Semantics__LinearForceVector3Semantics_dot" "', argument " "2"" of type '" "iDynTree::DualMotionForceSemanticsT< iDynTree::LinearForceVector3Semantics >::Type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3Semantics__LinearForceVector3Semantics_dot" "', argument " "2"" of type '" "iDynTree::DualMotionForceSemanticsT< iDynTree::LinearForceVector3Semantics >::Type const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::DualMotionForceSemanticsT< iDynTree::LinearForceVector3Semantics >::Type * >(argp2);
  result = (bool)((iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > const *)arg1)->dot((iDynTree::DualMotionForceSemanticsT< iDynTree::LinearForceVector3Semantics >::Type const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_GeomVector3Semantics__LinearForceVector3Semantics(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > *arg1 = (iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_GeomVector3Semantics__LinearForceVector3Semantics",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__LinearForceVector3Semantics_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GeomVector3Semantics__LinearForceVector3Semantics" "', argument " "1"" of type '" "iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_GeomVector3Semantics__AngularForceVector3Semantics__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > *result = 0 ;
  
  if (!SWIG_check_num_args("new_GeomVector3Semantics__AngularForceVector3Semantics",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > *)new iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics >();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__AngularForceVector3Semantics_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_GeomVector3Semantics__AngularForceVector3Semantics__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > *result = 0 ;
  
  if (!SWIG_check_num_args("new_GeomVector3Semantics__AngularForceVector3Semantics",argc,3,3,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_GeomVector3Semantics__AngularForceVector3Semantics" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_GeomVector3Semantics__AngularForceVector3Semantics" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_GeomVector3Semantics__AngularForceVector3Semantics" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > *)new iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics >(arg1,arg2,arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__AngularForceVector3Semantics_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_GeomVector3Semantics__AngularForceVector3Semantics__SWIG_2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > *result = 0 ;
  
  if (!SWIG_check_num_args("new_GeomVector3Semantics__AngularForceVector3Semantics",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__AngularForceVector3Semantics_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GeomVector3Semantics__AngularForceVector3Semantics" "', argument " "1"" of type '" "iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GeomVector3Semantics__AngularForceVector3Semantics" "', argument " "1"" of type '" "iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > * >(argp1);
  result = (iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > *)new iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics >((iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__AngularForceVector3Semantics_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_GeomVector3Semantics__AngularForceVector3Semantics(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_GeomVector3Semantics__AngularForceVector3Semantics__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__AngularForceVector3Semantics_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_GeomVector3Semantics__AngularForceVector3Semantics__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_GeomVector3Semantics__AngularForceVector3Semantics__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_GeomVector3Semantics__AngularForceVector3Semantics'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics >::GeomVector3Semantics()\n"
    "    iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics >::GeomVector3Semantics(int,int,int)\n"
    "    iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics >::GeomVector3Semantics(iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > const &)\n");
  return 1;
}


int _wrap_GeomVector3Semantics__AngularForceVector3Semantics_setToUnknown(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > *arg1 = (iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("GeomVector3Semantics__AngularForceVector3Semantics_setToUnknown",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__AngularForceVector3Semantics_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3Semantics__AngularForceVector3Semantics_setToUnknown" "', argument " "1"" of type '" "iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > * >(argp1);
  (arg1)->setToUnknown();
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3Semantics__AngularForceVector3Semantics_getBody(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > *arg1 = (iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("GeomVector3Semantics__AngularForceVector3Semantics_getBody",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__AngularForceVector3Semantics_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3Semantics__AngularForceVector3Semantics_getBody" "', argument " "1"" of type '" "iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > * >(argp1);
  result = (int)((iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > const *)arg1)->getBody();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3Semantics__AngularForceVector3Semantics_getRefBody(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > *arg1 = (iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("GeomVector3Semantics__AngularForceVector3Semantics_getRefBody",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__AngularForceVector3Semantics_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3Semantics__AngularForceVector3Semantics_getRefBody" "', argument " "1"" of type '" "iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > * >(argp1);
  result = (int)((iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > const *)arg1)->getRefBody();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3Semantics__AngularForceVector3Semantics_getCoordinateFrame(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > *arg1 = (iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("GeomVector3Semantics__AngularForceVector3Semantics_getCoordinateFrame",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__AngularForceVector3Semantics_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3Semantics__AngularForceVector3Semantics_getCoordinateFrame" "', argument " "1"" of type '" "iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > * >(argp1);
  result = (int)((iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > const *)arg1)->getCoordinateFrame();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3Semantics__AngularForceVector3Semantics_isUnknown(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > *arg1 = (iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("GeomVector3Semantics__AngularForceVector3Semantics_isUnknown",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__AngularForceVector3Semantics_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3Semantics__AngularForceVector3Semantics_isUnknown" "', argument " "1"" of type '" "iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > * >(argp1);
  result = (bool)((iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > const *)arg1)->isUnknown();
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3Semantics__AngularForceVector3Semantics_changeCoordFrame(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > *arg1 = (iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > *) 0 ;
  iDynTree::RotationSemantics *arg2 = 0 ;
  iDynTree::AngularForceVector3Semantics *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("GeomVector3Semantics__AngularForceVector3Semantics_changeCoordFrame",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__AngularForceVector3Semantics_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3Semantics__AngularForceVector3Semantics_changeCoordFrame" "', argument " "1"" of type '" "iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__RotationSemantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeomVector3Semantics__AngularForceVector3Semantics_changeCoordFrame" "', argument " "2"" of type '" "iDynTree::RotationSemantics const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3Semantics__AngularForceVector3Semantics_changeCoordFrame" "', argument " "2"" of type '" "iDynTree::RotationSemantics const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::RotationSemantics * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__AngularForceVector3Semantics,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GeomVector3Semantics__AngularForceVector3Semantics_changeCoordFrame" "', argument " "3"" of type '" "iDynTree::AngularForceVector3Semantics &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3Semantics__AngularForceVector3Semantics_changeCoordFrame" "', argument " "3"" of type '" "iDynTree::AngularForceVector3Semantics &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::AngularForceVector3Semantics * >(argp3);
  result = (bool)((iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > const *)arg1)->changeCoordFrame((iDynTree::RotationSemantics const &)*arg2,*arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3Semantics__AngularForceVector3Semantics_compose(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::AngularForceVector3Semantics *arg1 = 0 ;
  iDynTree::AngularForceVector3Semantics *arg2 = 0 ;
  iDynTree::AngularForceVector3Semantics *arg3 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("GeomVector3Semantics__AngularForceVector3Semantics_compose",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__AngularForceVector3Semantics,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3Semantics__AngularForceVector3Semantics_compose" "', argument " "1"" of type '" "iDynTree::AngularForceVector3Semantics const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3Semantics__AngularForceVector3Semantics_compose" "', argument " "1"" of type '" "iDynTree::AngularForceVector3Semantics const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::AngularForceVector3Semantics * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__AngularForceVector3Semantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeomVector3Semantics__AngularForceVector3Semantics_compose" "', argument " "2"" of type '" "iDynTree::AngularForceVector3Semantics const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3Semantics__AngularForceVector3Semantics_compose" "', argument " "2"" of type '" "iDynTree::AngularForceVector3Semantics const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::AngularForceVector3Semantics * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__AngularForceVector3Semantics,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GeomVector3Semantics__AngularForceVector3Semantics_compose" "', argument " "3"" of type '" "iDynTree::AngularForceVector3Semantics &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3Semantics__AngularForceVector3Semantics_compose" "', argument " "3"" of type '" "iDynTree::AngularForceVector3Semantics &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::AngularForceVector3Semantics * >(argp3);
  result = (bool)iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics >::SWIGTEMPLATEDISAMBIGUATOR compose((iDynTree::AngularForceVector3Semantics const &)*arg1,(iDynTree::AngularForceVector3Semantics const &)*arg2,*arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3Semantics__AngularForceVector3Semantics_inverse(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::AngularForceVector3Semantics *arg1 = 0 ;
  iDynTree::AngularForceVector3Semantics *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("GeomVector3Semantics__AngularForceVector3Semantics_inverse",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__AngularForceVector3Semantics,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3Semantics__AngularForceVector3Semantics_inverse" "', argument " "1"" of type '" "iDynTree::AngularForceVector3Semantics const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3Semantics__AngularForceVector3Semantics_inverse" "', argument " "1"" of type '" "iDynTree::AngularForceVector3Semantics const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::AngularForceVector3Semantics * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__AngularForceVector3Semantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeomVector3Semantics__AngularForceVector3Semantics_inverse" "', argument " "2"" of type '" "iDynTree::AngularForceVector3Semantics &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3Semantics__AngularForceVector3Semantics_inverse" "', argument " "2"" of type '" "iDynTree::AngularForceVector3Semantics &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::AngularForceVector3Semantics * >(argp2);
  result = (bool)iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics >::SWIGTEMPLATEDISAMBIGUATOR inverse((iDynTree::AngularForceVector3Semantics const &)*arg1,*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3Semantics__AngularForceVector3Semantics_dot(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > *arg1 = (iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > *) 0 ;
  iDynTree::DualMotionForceSemanticsT< iDynTree::AngularForceVector3Semantics >::Type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("GeomVector3Semantics__AngularForceVector3Semantics_dot",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__AngularForceVector3Semantics_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3Semantics__AngularForceVector3Semantics_dot" "', argument " "1"" of type '" "iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__AngularMotionVector3Semantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeomVector3Semantics__AngularForceVector3Semantics_dot" "', argument " "2"" of type '" "iDynTree::DualMotionForceSemanticsT< iDynTree::AngularForceVector3Semantics >::Type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3Semantics__AngularForceVector3Semantics_dot" "', argument " "2"" of type '" "iDynTree::DualMotionForceSemanticsT< iDynTree::AngularForceVector3Semantics >::Type const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::DualMotionForceSemanticsT< iDynTree::AngularForceVector3Semantics >::Type * >(argp2);
  result = (bool)((iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > const *)arg1)->dot((iDynTree::DualMotionForceSemanticsT< iDynTree::AngularForceVector3Semantics >::Type const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_GeomVector3Semantics__AngularForceVector3Semantics(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > *arg1 = (iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_GeomVector3Semantics__AngularForceVector3Semantics",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__AngularForceVector3Semantics_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GeomVector3Semantics__AngularForceVector3Semantics" "', argument " "1"" of type '" "iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3__LinearMotionVector3_semantics_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > *arg1 = (iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > *) 0 ;
  iDynTree::GeomVector3< iDynTree::LinearMotionVector3 >::MotionForceSemanticsT *arg2 = (iDynTree::GeomVector3< iDynTree::LinearMotionVector3 >::MotionForceSemanticsT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("GeomVector3__LinearMotionVector3_semantics_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__LinearMotionVector3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3__LinearMotionVector3_semantics_set" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_iDynTree__LinearMotionVector3Semantics, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeomVector3__LinearMotionVector3_semantics_set" "', argument " "2"" of type '" "iDynTree::GeomVector3< iDynTree::LinearMotionVector3 >::MotionForceSemanticsT *""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::LinearMotionVector3 >::MotionForceSemanticsT * >(argp2);
  if (arg1) (arg1)->semantics = *arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3__LinearMotionVector3_semantics_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > *arg1 = (iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::GeomVector3< iDynTree::LinearMotionVector3 >::MotionForceSemanticsT *result = 0 ;
  
  if (!SWIG_check_num_args("GeomVector3__LinearMotionVector3_semantics_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__LinearMotionVector3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3__LinearMotionVector3_semantics_get" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > * >(argp1);
  result = (iDynTree::GeomVector3< iDynTree::LinearMotionVector3 >::MotionForceSemanticsT *)& ((arg1)->semantics);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__LinearMotionVector3Semantics, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_GeomVector3__LinearMotionVector3__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > *result = 0 ;
  
  if (!SWIG_check_num_args("new_GeomVector3__LinearMotionVector3",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > *)new iDynTree::GeomVector3< iDynTree::LinearMotionVector3 >();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__LinearMotionVector3_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_GeomVector3__LinearMotionVector3__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double *arg1 = (double *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > *result = 0 ;
  
  if (!SWIG_check_num_args("new_GeomVector3__LinearMotionVector3",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GeomVector3__LinearMotionVector3" "', argument " "1"" of type '" "double const *""'"); 
  }
  arg1 = reinterpret_cast< double * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_GeomVector3__LinearMotionVector3" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > *)new iDynTree::GeomVector3< iDynTree::LinearMotionVector3 >((double const *)arg1,arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__LinearMotionVector3_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_GeomVector3__LinearMotionVector3__SWIG_2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > *result = 0 ;
  
  if (!SWIG_check_num_args("new_GeomVector3__LinearMotionVector3",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__LinearMotionVector3_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GeomVector3__LinearMotionVector3" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GeomVector3__LinearMotionVector3" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > * >(argp1);
  result = (iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > *)new iDynTree::GeomVector3< iDynTree::LinearMotionVector3 >((iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__LinearMotionVector3_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_GeomVector3__LinearMotionVector3(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_GeomVector3__LinearMotionVector3__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__LinearMotionVector3_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_GeomVector3__LinearMotionVector3__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_double, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_GeomVector3__LinearMotionVector3__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_GeomVector3__LinearMotionVector3'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::GeomVector3< iDynTree::LinearMotionVector3 >::GeomVector3()\n"
    "    iDynTree::GeomVector3< iDynTree::LinearMotionVector3 >::GeomVector3(double const *,unsigned int const)\n"
    "    iDynTree::GeomVector3< iDynTree::LinearMotionVector3 >::GeomVector3(iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > const &)\n");
  return 1;
}


int _wrap_GeomVector3__LinearMotionVector3_setSemantics(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > *arg1 = (iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > *) 0 ;
  iDynTree::GeomVector3< iDynTree::LinearMotionVector3 >::MotionForceSemanticsT *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("GeomVector3__LinearMotionVector3_setSemantics",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__LinearMotionVector3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3__LinearMotionVector3_setSemantics" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__LinearMotionVector3Semantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeomVector3__LinearMotionVector3_setSemantics" "', argument " "2"" of type '" "iDynTree::GeomVector3< iDynTree::LinearMotionVector3 >::MotionForceSemanticsT &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3__LinearMotionVector3_setSemantics" "', argument " "2"" of type '" "iDynTree::GeomVector3< iDynTree::LinearMotionVector3 >::MotionForceSemanticsT &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::LinearMotionVector3 >::MotionForceSemanticsT * >(argp2);
  (arg1)->setSemantics(*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3__LinearMotionVector3_changeCoordFrame(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > *arg1 = (iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > *) 0 ;
  iDynTree::Rotation *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::LinearMotionVector3 result;
  
  if (!SWIG_check_num_args("GeomVector3__LinearMotionVector3_changeCoordFrame",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__LinearMotionVector3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3__LinearMotionVector3_changeCoordFrame" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Rotation,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeomVector3__LinearMotionVector3_changeCoordFrame" "', argument " "2"" of type '" "iDynTree::Rotation const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3__LinearMotionVector3_changeCoordFrame" "', argument " "2"" of type '" "iDynTree::Rotation const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Rotation * >(argp2);
  result = ((iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > const *)arg1)->changeCoordFrame((iDynTree::Rotation const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::LinearMotionVector3(static_cast< const iDynTree::LinearMotionVector3& >(result))), SWIGTYPE_p_iDynTree__LinearMotionVector3, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3__LinearMotionVector3_compose(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3< iDynTree::LinearMotionVector3 >::MotionForceTbase *arg1 = 0 ;
  iDynTree::LinearMotionVector3 *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::LinearMotionVector3 result;
  
  if (!SWIG_check_num_args("GeomVector3__LinearMotionVector3_compose",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__LinearMotionVector3_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3__LinearMotionVector3_compose" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::LinearMotionVector3 >::MotionForceTbase const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3__LinearMotionVector3_compose" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::LinearMotionVector3 >::MotionForceTbase const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::LinearMotionVector3 >::MotionForceTbase * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__LinearMotionVector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeomVector3__LinearMotionVector3_compose" "', argument " "2"" of type '" "iDynTree::LinearMotionVector3 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3__LinearMotionVector3_compose" "', argument " "2"" of type '" "iDynTree::LinearMotionVector3 const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::LinearMotionVector3 * >(argp2);
  result = iDynTree::GeomVector3< iDynTree::LinearMotionVector3 >::SWIGTEMPLATEDISAMBIGUATOR compose((iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > const &)*arg1,(iDynTree::LinearMotionVector3 const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::LinearMotionVector3(static_cast< const iDynTree::LinearMotionVector3& >(result))), SWIGTYPE_p_iDynTree__LinearMotionVector3, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3__LinearMotionVector3_inverse(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3< iDynTree::LinearMotionVector3 >::MotionForceTbase *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::LinearMotionVector3 result;
  
  if (!SWIG_check_num_args("GeomVector3__LinearMotionVector3_inverse",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__LinearMotionVector3_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3__LinearMotionVector3_inverse" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::LinearMotionVector3 >::MotionForceTbase const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3__LinearMotionVector3_inverse" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::LinearMotionVector3 >::MotionForceTbase const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::LinearMotionVector3 >::MotionForceTbase * >(argp1);
  result = iDynTree::GeomVector3< iDynTree::LinearMotionVector3 >::SWIGTEMPLATEDISAMBIGUATOR inverse((iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > const &)*arg1);
  _out = SWIG_NewPointerObj((new iDynTree::LinearMotionVector3(static_cast< const iDynTree::LinearMotionVector3& >(result))), SWIGTYPE_p_iDynTree__LinearMotionVector3, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3__LinearMotionVector3_dot(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > *arg1 = (iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > *) 0 ;
  iDynTree::MotionForce_traits< iDynTree::LinearMotionVector3 >::DualSpace *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("GeomVector3__LinearMotionVector3_dot",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__LinearMotionVector3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3__LinearMotionVector3_dot" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__LinearForceVector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeomVector3__LinearMotionVector3_dot" "', argument " "2"" of type '" "iDynTree::MotionForce_traits< iDynTree::LinearMotionVector3 >::DualSpace const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3__LinearMotionVector3_dot" "', argument " "2"" of type '" "iDynTree::MotionForce_traits< iDynTree::LinearMotionVector3 >::DualSpace const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::MotionForce_traits< iDynTree::LinearMotionVector3 >::DualSpace * >(argp2);
  result = (double)((iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > const *)arg1)->dot((iDynTree::MotionForce_traits< iDynTree::LinearMotionVector3 >::DualSpace const &)*arg2);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3__LinearMotionVector3_plus(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > *arg1 = (iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > *) 0 ;
  iDynTree::LinearMotionVector3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::LinearMotionVector3 result;
  
  if (!SWIG_check_num_args("GeomVector3__LinearMotionVector3_plus",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__LinearMotionVector3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3__LinearMotionVector3_plus" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__LinearMotionVector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeomVector3__LinearMotionVector3_plus" "', argument " "2"" of type '" "iDynTree::LinearMotionVector3 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3__LinearMotionVector3_plus" "', argument " "2"" of type '" "iDynTree::LinearMotionVector3 const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::LinearMotionVector3 * >(argp2);
  result = ((iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > const *)arg1)->operator +((iDynTree::LinearMotionVector3 const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::LinearMotionVector3(static_cast< const iDynTree::LinearMotionVector3& >(result))), SWIGTYPE_p_iDynTree__LinearMotionVector3, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3__LinearMotionVector3_minus(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > *arg1 = (iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > *) 0 ;
  iDynTree::LinearMotionVector3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::LinearMotionVector3 result;
  
  if (!SWIG_check_num_args("GeomVector3__LinearMotionVector3_minus",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__LinearMotionVector3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3__LinearMotionVector3_minus" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__LinearMotionVector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeomVector3__LinearMotionVector3_minus" "', argument " "2"" of type '" "iDynTree::LinearMotionVector3 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3__LinearMotionVector3_minus" "', argument " "2"" of type '" "iDynTree::LinearMotionVector3 const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::LinearMotionVector3 * >(argp2);
  result = ((iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > const *)arg1)->operator -((iDynTree::LinearMotionVector3 const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::LinearMotionVector3(static_cast< const iDynTree::LinearMotionVector3& >(result))), SWIGTYPE_p_iDynTree__LinearMotionVector3, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3__LinearMotionVector3_uminus(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > *arg1 = (iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::LinearMotionVector3 result;
  
  if (!SWIG_check_num_args("GeomVector3__LinearMotionVector3_uminus",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__LinearMotionVector3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3__LinearMotionVector3_uminus" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > * >(argp1);
  result = ((iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > const *)arg1)->operator -();
  _out = SWIG_NewPointerObj((new iDynTree::LinearMotionVector3(static_cast< const iDynTree::LinearMotionVector3& >(result))), SWIGTYPE_p_iDynTree__LinearMotionVector3, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_GeomVector3__LinearMotionVector3(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > *arg1 = (iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_GeomVector3__LinearMotionVector3",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__LinearMotionVector3_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GeomVector3__LinearMotionVector3" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3__AngularMotionVector3_semantics_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > *arg1 = (iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > *) 0 ;
  iDynTree::GeomVector3< iDynTree::AngularMotionVector3 >::MotionForceSemanticsT *arg2 = (iDynTree::GeomVector3< iDynTree::AngularMotionVector3 >::MotionForceSemanticsT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("GeomVector3__AngularMotionVector3_semantics_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__AngularMotionVector3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3__AngularMotionVector3_semantics_set" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_iDynTree__AngularMotionVector3Semantics, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeomVector3__AngularMotionVector3_semantics_set" "', argument " "2"" of type '" "iDynTree::GeomVector3< iDynTree::AngularMotionVector3 >::MotionForceSemanticsT *""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::AngularMotionVector3 >::MotionForceSemanticsT * >(argp2);
  if (arg1) (arg1)->semantics = *arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3__AngularMotionVector3_semantics_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > *arg1 = (iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::GeomVector3< iDynTree::AngularMotionVector3 >::MotionForceSemanticsT *result = 0 ;
  
  if (!SWIG_check_num_args("GeomVector3__AngularMotionVector3_semantics_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__AngularMotionVector3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3__AngularMotionVector3_semantics_get" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > * >(argp1);
  result = (iDynTree::GeomVector3< iDynTree::AngularMotionVector3 >::MotionForceSemanticsT *)& ((arg1)->semantics);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__AngularMotionVector3Semantics, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_GeomVector3__AngularMotionVector3__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > *result = 0 ;
  
  if (!SWIG_check_num_args("new_GeomVector3__AngularMotionVector3",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > *)new iDynTree::GeomVector3< iDynTree::AngularMotionVector3 >();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__AngularMotionVector3_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_GeomVector3__AngularMotionVector3__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double *arg1 = (double *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > *result = 0 ;
  
  if (!SWIG_check_num_args("new_GeomVector3__AngularMotionVector3",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GeomVector3__AngularMotionVector3" "', argument " "1"" of type '" "double const *""'"); 
  }
  arg1 = reinterpret_cast< double * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_GeomVector3__AngularMotionVector3" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > *)new iDynTree::GeomVector3< iDynTree::AngularMotionVector3 >((double const *)arg1,arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__AngularMotionVector3_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_GeomVector3__AngularMotionVector3__SWIG_2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > *result = 0 ;
  
  if (!SWIG_check_num_args("new_GeomVector3__AngularMotionVector3",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__AngularMotionVector3_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GeomVector3__AngularMotionVector3" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GeomVector3__AngularMotionVector3" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > * >(argp1);
  result = (iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > *)new iDynTree::GeomVector3< iDynTree::AngularMotionVector3 >((iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__AngularMotionVector3_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_GeomVector3__AngularMotionVector3(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_GeomVector3__AngularMotionVector3__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__AngularMotionVector3_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_GeomVector3__AngularMotionVector3__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_double, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_GeomVector3__AngularMotionVector3__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_GeomVector3__AngularMotionVector3'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::GeomVector3< iDynTree::AngularMotionVector3 >::GeomVector3()\n"
    "    iDynTree::GeomVector3< iDynTree::AngularMotionVector3 >::GeomVector3(double const *,unsigned int const)\n"
    "    iDynTree::GeomVector3< iDynTree::AngularMotionVector3 >::GeomVector3(iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > const &)\n");
  return 1;
}


int _wrap_GeomVector3__AngularMotionVector3_setSemantics(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > *arg1 = (iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > *) 0 ;
  iDynTree::GeomVector3< iDynTree::AngularMotionVector3 >::MotionForceSemanticsT *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("GeomVector3__AngularMotionVector3_setSemantics",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__AngularMotionVector3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3__AngularMotionVector3_setSemantics" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__AngularMotionVector3Semantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeomVector3__AngularMotionVector3_setSemantics" "', argument " "2"" of type '" "iDynTree::GeomVector3< iDynTree::AngularMotionVector3 >::MotionForceSemanticsT &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3__AngularMotionVector3_setSemantics" "', argument " "2"" of type '" "iDynTree::GeomVector3< iDynTree::AngularMotionVector3 >::MotionForceSemanticsT &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::AngularMotionVector3 >::MotionForceSemanticsT * >(argp2);
  (arg1)->setSemantics(*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3__AngularMotionVector3_changeCoordFrame(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > *arg1 = (iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > *) 0 ;
  iDynTree::Rotation *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::AngularMotionVector3 result;
  
  if (!SWIG_check_num_args("GeomVector3__AngularMotionVector3_changeCoordFrame",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__AngularMotionVector3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3__AngularMotionVector3_changeCoordFrame" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Rotation,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeomVector3__AngularMotionVector3_changeCoordFrame" "', argument " "2"" of type '" "iDynTree::Rotation const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3__AngularMotionVector3_changeCoordFrame" "', argument " "2"" of type '" "iDynTree::Rotation const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Rotation * >(argp2);
  result = ((iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > const *)arg1)->changeCoordFrame((iDynTree::Rotation const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::AngularMotionVector3(static_cast< const iDynTree::AngularMotionVector3& >(result))), SWIGTYPE_p_iDynTree__AngularMotionVector3, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3__AngularMotionVector3_compose(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3< iDynTree::AngularMotionVector3 >::MotionForceTbase *arg1 = 0 ;
  iDynTree::AngularMotionVector3 *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::AngularMotionVector3 result;
  
  if (!SWIG_check_num_args("GeomVector3__AngularMotionVector3_compose",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__AngularMotionVector3_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3__AngularMotionVector3_compose" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::AngularMotionVector3 >::MotionForceTbase const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3__AngularMotionVector3_compose" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::AngularMotionVector3 >::MotionForceTbase const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::AngularMotionVector3 >::MotionForceTbase * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__AngularMotionVector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeomVector3__AngularMotionVector3_compose" "', argument " "2"" of type '" "iDynTree::AngularMotionVector3 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3__AngularMotionVector3_compose" "', argument " "2"" of type '" "iDynTree::AngularMotionVector3 const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::AngularMotionVector3 * >(argp2);
  result = iDynTree::GeomVector3< iDynTree::AngularMotionVector3 >::SWIGTEMPLATEDISAMBIGUATOR compose((iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > const &)*arg1,(iDynTree::AngularMotionVector3 const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::AngularMotionVector3(static_cast< const iDynTree::AngularMotionVector3& >(result))), SWIGTYPE_p_iDynTree__AngularMotionVector3, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3__AngularMotionVector3_inverse(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3< iDynTree::AngularMotionVector3 >::MotionForceTbase *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::AngularMotionVector3 result;
  
  if (!SWIG_check_num_args("GeomVector3__AngularMotionVector3_inverse",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__AngularMotionVector3_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3__AngularMotionVector3_inverse" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::AngularMotionVector3 >::MotionForceTbase const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3__AngularMotionVector3_inverse" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::AngularMotionVector3 >::MotionForceTbase const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::AngularMotionVector3 >::MotionForceTbase * >(argp1);
  result = iDynTree::GeomVector3< iDynTree::AngularMotionVector3 >::SWIGTEMPLATEDISAMBIGUATOR inverse((iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > const &)*arg1);
  _out = SWIG_NewPointerObj((new iDynTree::AngularMotionVector3(static_cast< const iDynTree::AngularMotionVector3& >(result))), SWIGTYPE_p_iDynTree__AngularMotionVector3, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3__AngularMotionVector3_dot(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > *arg1 = (iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > *) 0 ;
  iDynTree::MotionForce_traits< iDynTree::AngularMotionVector3 >::DualSpace *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("GeomVector3__AngularMotionVector3_dot",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__AngularMotionVector3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3__AngularMotionVector3_dot" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__AngularForceVector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeomVector3__AngularMotionVector3_dot" "', argument " "2"" of type '" "iDynTree::MotionForce_traits< iDynTree::AngularMotionVector3 >::DualSpace const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3__AngularMotionVector3_dot" "', argument " "2"" of type '" "iDynTree::MotionForce_traits< iDynTree::AngularMotionVector3 >::DualSpace const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::MotionForce_traits< iDynTree::AngularMotionVector3 >::DualSpace * >(argp2);
  result = (double)((iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > const *)arg1)->dot((iDynTree::MotionForce_traits< iDynTree::AngularMotionVector3 >::DualSpace const &)*arg2);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3__AngularMotionVector3_plus(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > *arg1 = (iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > *) 0 ;
  iDynTree::AngularMotionVector3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::AngularMotionVector3 result;
  
  if (!SWIG_check_num_args("GeomVector3__AngularMotionVector3_plus",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__AngularMotionVector3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3__AngularMotionVector3_plus" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__AngularMotionVector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeomVector3__AngularMotionVector3_plus" "', argument " "2"" of type '" "iDynTree::AngularMotionVector3 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3__AngularMotionVector3_plus" "', argument " "2"" of type '" "iDynTree::AngularMotionVector3 const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::AngularMotionVector3 * >(argp2);
  result = ((iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > const *)arg1)->operator +((iDynTree::AngularMotionVector3 const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::AngularMotionVector3(static_cast< const iDynTree::AngularMotionVector3& >(result))), SWIGTYPE_p_iDynTree__AngularMotionVector3, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3__AngularMotionVector3_minus(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > *arg1 = (iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > *) 0 ;
  iDynTree::AngularMotionVector3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::AngularMotionVector3 result;
  
  if (!SWIG_check_num_args("GeomVector3__AngularMotionVector3_minus",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__AngularMotionVector3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3__AngularMotionVector3_minus" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__AngularMotionVector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeomVector3__AngularMotionVector3_minus" "', argument " "2"" of type '" "iDynTree::AngularMotionVector3 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3__AngularMotionVector3_minus" "', argument " "2"" of type '" "iDynTree::AngularMotionVector3 const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::AngularMotionVector3 * >(argp2);
  result = ((iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > const *)arg1)->operator -((iDynTree::AngularMotionVector3 const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::AngularMotionVector3(static_cast< const iDynTree::AngularMotionVector3& >(result))), SWIGTYPE_p_iDynTree__AngularMotionVector3, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3__AngularMotionVector3_uminus(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > *arg1 = (iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::AngularMotionVector3 result;
  
  if (!SWIG_check_num_args("GeomVector3__AngularMotionVector3_uminus",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__AngularMotionVector3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3__AngularMotionVector3_uminus" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > * >(argp1);
  result = ((iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > const *)arg1)->operator -();
  _out = SWIG_NewPointerObj((new iDynTree::AngularMotionVector3(static_cast< const iDynTree::AngularMotionVector3& >(result))), SWIGTYPE_p_iDynTree__AngularMotionVector3, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_GeomVector3__AngularMotionVector3(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > *arg1 = (iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_GeomVector3__AngularMotionVector3",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__AngularMotionVector3_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GeomVector3__AngularMotionVector3" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3__LinearForceVector3_semantics_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3< iDynTree::LinearForceVector3 > *arg1 = (iDynTree::GeomVector3< iDynTree::LinearForceVector3 > *) 0 ;
  iDynTree::GeomVector3< iDynTree::LinearForceVector3 >::MotionForceSemanticsT *arg2 = (iDynTree::GeomVector3< iDynTree::LinearForceVector3 >::MotionForceSemanticsT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("GeomVector3__LinearForceVector3_semantics_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__LinearForceVector3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3__LinearForceVector3_semantics_set" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::LinearForceVector3 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::LinearForceVector3 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_iDynTree__LinearForceVector3Semantics, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeomVector3__LinearForceVector3_semantics_set" "', argument " "2"" of type '" "iDynTree::GeomVector3< iDynTree::LinearForceVector3 >::MotionForceSemanticsT *""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::LinearForceVector3 >::MotionForceSemanticsT * >(argp2);
  if (arg1) (arg1)->semantics = *arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3__LinearForceVector3_semantics_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3< iDynTree::LinearForceVector3 > *arg1 = (iDynTree::GeomVector3< iDynTree::LinearForceVector3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::GeomVector3< iDynTree::LinearForceVector3 >::MotionForceSemanticsT *result = 0 ;
  
  if (!SWIG_check_num_args("GeomVector3__LinearForceVector3_semantics_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__LinearForceVector3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3__LinearForceVector3_semantics_get" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::LinearForceVector3 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::LinearForceVector3 > * >(argp1);
  result = (iDynTree::GeomVector3< iDynTree::LinearForceVector3 >::MotionForceSemanticsT *)& ((arg1)->semantics);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__LinearForceVector3Semantics, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_GeomVector3__LinearForceVector3__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::GeomVector3< iDynTree::LinearForceVector3 > *result = 0 ;
  
  if (!SWIG_check_num_args("new_GeomVector3__LinearForceVector3",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::GeomVector3< iDynTree::LinearForceVector3 > *)new iDynTree::GeomVector3< iDynTree::LinearForceVector3 >();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__LinearForceVector3_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_GeomVector3__LinearForceVector3__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double *arg1 = (double *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::GeomVector3< iDynTree::LinearForceVector3 > *result = 0 ;
  
  if (!SWIG_check_num_args("new_GeomVector3__LinearForceVector3",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GeomVector3__LinearForceVector3" "', argument " "1"" of type '" "double const *""'"); 
  }
  arg1 = reinterpret_cast< double * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_GeomVector3__LinearForceVector3" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (iDynTree::GeomVector3< iDynTree::LinearForceVector3 > *)new iDynTree::GeomVector3< iDynTree::LinearForceVector3 >((double const *)arg1,arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__LinearForceVector3_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_GeomVector3__LinearForceVector3__SWIG_2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3< iDynTree::LinearForceVector3 > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::GeomVector3< iDynTree::LinearForceVector3 > *result = 0 ;
  
  if (!SWIG_check_num_args("new_GeomVector3__LinearForceVector3",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__LinearForceVector3_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GeomVector3__LinearForceVector3" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::LinearForceVector3 > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GeomVector3__LinearForceVector3" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::LinearForceVector3 > const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::LinearForceVector3 > * >(argp1);
  result = (iDynTree::GeomVector3< iDynTree::LinearForceVector3 > *)new iDynTree::GeomVector3< iDynTree::LinearForceVector3 >((iDynTree::GeomVector3< iDynTree::LinearForceVector3 > const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__LinearForceVector3_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_GeomVector3__LinearForceVector3(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_GeomVector3__LinearForceVector3__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__LinearForceVector3_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_GeomVector3__LinearForceVector3__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_double, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_GeomVector3__LinearForceVector3__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_GeomVector3__LinearForceVector3'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::GeomVector3< iDynTree::LinearForceVector3 >::GeomVector3()\n"
    "    iDynTree::GeomVector3< iDynTree::LinearForceVector3 >::GeomVector3(double const *,unsigned int const)\n"
    "    iDynTree::GeomVector3< iDynTree::LinearForceVector3 >::GeomVector3(iDynTree::GeomVector3< iDynTree::LinearForceVector3 > const &)\n");
  return 1;
}


int _wrap_GeomVector3__LinearForceVector3_setSemantics(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3< iDynTree::LinearForceVector3 > *arg1 = (iDynTree::GeomVector3< iDynTree::LinearForceVector3 > *) 0 ;
  iDynTree::GeomVector3< iDynTree::LinearForceVector3 >::MotionForceSemanticsT *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("GeomVector3__LinearForceVector3_setSemantics",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__LinearForceVector3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3__LinearForceVector3_setSemantics" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::LinearForceVector3 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::LinearForceVector3 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__LinearForceVector3Semantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeomVector3__LinearForceVector3_setSemantics" "', argument " "2"" of type '" "iDynTree::GeomVector3< iDynTree::LinearForceVector3 >::MotionForceSemanticsT &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3__LinearForceVector3_setSemantics" "', argument " "2"" of type '" "iDynTree::GeomVector3< iDynTree::LinearForceVector3 >::MotionForceSemanticsT &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::LinearForceVector3 >::MotionForceSemanticsT * >(argp2);
  (arg1)->setSemantics(*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3__LinearForceVector3_changeCoordFrame(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3< iDynTree::LinearForceVector3 > *arg1 = (iDynTree::GeomVector3< iDynTree::LinearForceVector3 > *) 0 ;
  iDynTree::Rotation *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::LinearForceVector3 result;
  
  if (!SWIG_check_num_args("GeomVector3__LinearForceVector3_changeCoordFrame",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__LinearForceVector3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3__LinearForceVector3_changeCoordFrame" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::LinearForceVector3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::LinearForceVector3 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Rotation,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeomVector3__LinearForceVector3_changeCoordFrame" "', argument " "2"" of type '" "iDynTree::Rotation const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3__LinearForceVector3_changeCoordFrame" "', argument " "2"" of type '" "iDynTree::Rotation const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Rotation * >(argp2);
  result = ((iDynTree::GeomVector3< iDynTree::LinearForceVector3 > const *)arg1)->changeCoordFrame((iDynTree::Rotation const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::LinearForceVector3(static_cast< const iDynTree::LinearForceVector3& >(result))), SWIGTYPE_p_iDynTree__LinearForceVector3, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3__LinearForceVector3_compose(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3< iDynTree::LinearForceVector3 >::MotionForceTbase *arg1 = 0 ;
  iDynTree::LinearForceVector3 *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::LinearForceVector3 result;
  
  if (!SWIG_check_num_args("GeomVector3__LinearForceVector3_compose",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__LinearForceVector3_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3__LinearForceVector3_compose" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::LinearForceVector3 >::MotionForceTbase const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3__LinearForceVector3_compose" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::LinearForceVector3 >::MotionForceTbase const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::LinearForceVector3 >::MotionForceTbase * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__LinearForceVector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeomVector3__LinearForceVector3_compose" "', argument " "2"" of type '" "iDynTree::LinearForceVector3 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3__LinearForceVector3_compose" "', argument " "2"" of type '" "iDynTree::LinearForceVector3 const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::LinearForceVector3 * >(argp2);
  result = iDynTree::GeomVector3< iDynTree::LinearForceVector3 >::SWIGTEMPLATEDISAMBIGUATOR compose((iDynTree::GeomVector3< iDynTree::LinearForceVector3 > const &)*arg1,(iDynTree::LinearForceVector3 const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::LinearForceVector3(static_cast< const iDynTree::LinearForceVector3& >(result))), SWIGTYPE_p_iDynTree__LinearForceVector3, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3__LinearForceVector3_inverse(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3< iDynTree::LinearForceVector3 >::MotionForceTbase *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::LinearForceVector3 result;
  
  if (!SWIG_check_num_args("GeomVector3__LinearForceVector3_inverse",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__LinearForceVector3_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3__LinearForceVector3_inverse" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::LinearForceVector3 >::MotionForceTbase const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3__LinearForceVector3_inverse" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::LinearForceVector3 >::MotionForceTbase const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::LinearForceVector3 >::MotionForceTbase * >(argp1);
  result = iDynTree::GeomVector3< iDynTree::LinearForceVector3 >::SWIGTEMPLATEDISAMBIGUATOR inverse((iDynTree::GeomVector3< iDynTree::LinearForceVector3 > const &)*arg1);
  _out = SWIG_NewPointerObj((new iDynTree::LinearForceVector3(static_cast< const iDynTree::LinearForceVector3& >(result))), SWIGTYPE_p_iDynTree__LinearForceVector3, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3__LinearForceVector3_dot(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3< iDynTree::LinearForceVector3 > *arg1 = (iDynTree::GeomVector3< iDynTree::LinearForceVector3 > *) 0 ;
  iDynTree::MotionForce_traits< iDynTree::LinearForceVector3 >::DualSpace *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("GeomVector3__LinearForceVector3_dot",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__LinearForceVector3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3__LinearForceVector3_dot" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::LinearForceVector3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::LinearForceVector3 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__LinearMotionVector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeomVector3__LinearForceVector3_dot" "', argument " "2"" of type '" "iDynTree::MotionForce_traits< iDynTree::LinearForceVector3 >::DualSpace const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3__LinearForceVector3_dot" "', argument " "2"" of type '" "iDynTree::MotionForce_traits< iDynTree::LinearForceVector3 >::DualSpace const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::MotionForce_traits< iDynTree::LinearForceVector3 >::DualSpace * >(argp2);
  result = (double)((iDynTree::GeomVector3< iDynTree::LinearForceVector3 > const *)arg1)->dot((iDynTree::MotionForce_traits< iDynTree::LinearForceVector3 >::DualSpace const &)*arg2);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3__LinearForceVector3_plus(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3< iDynTree::LinearForceVector3 > *arg1 = (iDynTree::GeomVector3< iDynTree::LinearForceVector3 > *) 0 ;
  iDynTree::LinearForceVector3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::LinearForceVector3 result;
  
  if (!SWIG_check_num_args("GeomVector3__LinearForceVector3_plus",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__LinearForceVector3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3__LinearForceVector3_plus" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::LinearForceVector3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::LinearForceVector3 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__LinearForceVector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeomVector3__LinearForceVector3_plus" "', argument " "2"" of type '" "iDynTree::LinearForceVector3 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3__LinearForceVector3_plus" "', argument " "2"" of type '" "iDynTree::LinearForceVector3 const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::LinearForceVector3 * >(argp2);
  result = ((iDynTree::GeomVector3< iDynTree::LinearForceVector3 > const *)arg1)->operator +((iDynTree::LinearForceVector3 const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::LinearForceVector3(static_cast< const iDynTree::LinearForceVector3& >(result))), SWIGTYPE_p_iDynTree__LinearForceVector3, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3__LinearForceVector3_minus(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3< iDynTree::LinearForceVector3 > *arg1 = (iDynTree::GeomVector3< iDynTree::LinearForceVector3 > *) 0 ;
  iDynTree::LinearForceVector3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::LinearForceVector3 result;
  
  if (!SWIG_check_num_args("GeomVector3__LinearForceVector3_minus",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__LinearForceVector3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3__LinearForceVector3_minus" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::LinearForceVector3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::LinearForceVector3 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__LinearForceVector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeomVector3__LinearForceVector3_minus" "', argument " "2"" of type '" "iDynTree::LinearForceVector3 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3__LinearForceVector3_minus" "', argument " "2"" of type '" "iDynTree::LinearForceVector3 const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::LinearForceVector3 * >(argp2);
  result = ((iDynTree::GeomVector3< iDynTree::LinearForceVector3 > const *)arg1)->operator -((iDynTree::LinearForceVector3 const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::LinearForceVector3(static_cast< const iDynTree::LinearForceVector3& >(result))), SWIGTYPE_p_iDynTree__LinearForceVector3, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3__LinearForceVector3_uminus(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3< iDynTree::LinearForceVector3 > *arg1 = (iDynTree::GeomVector3< iDynTree::LinearForceVector3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::LinearForceVector3 result;
  
  if (!SWIG_check_num_args("GeomVector3__LinearForceVector3_uminus",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__LinearForceVector3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3__LinearForceVector3_uminus" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::LinearForceVector3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::LinearForceVector3 > * >(argp1);
  result = ((iDynTree::GeomVector3< iDynTree::LinearForceVector3 > const *)arg1)->operator -();
  _out = SWIG_NewPointerObj((new iDynTree::LinearForceVector3(static_cast< const iDynTree::LinearForceVector3& >(result))), SWIGTYPE_p_iDynTree__LinearForceVector3, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_GeomVector3__LinearForceVector3(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3< iDynTree::LinearForceVector3 > *arg1 = (iDynTree::GeomVector3< iDynTree::LinearForceVector3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_GeomVector3__LinearForceVector3",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__LinearForceVector3_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GeomVector3__LinearForceVector3" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::LinearForceVector3 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::LinearForceVector3 > * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3__AngularForceVector3_semantics_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3< iDynTree::AngularForceVector3 > *arg1 = (iDynTree::GeomVector3< iDynTree::AngularForceVector3 > *) 0 ;
  iDynTree::GeomVector3< iDynTree::AngularForceVector3 >::MotionForceSemanticsT *arg2 = (iDynTree::GeomVector3< iDynTree::AngularForceVector3 >::MotionForceSemanticsT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("GeomVector3__AngularForceVector3_semantics_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__AngularForceVector3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3__AngularForceVector3_semantics_set" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::AngularForceVector3 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::AngularForceVector3 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_iDynTree__AngularForceVector3Semantics, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeomVector3__AngularForceVector3_semantics_set" "', argument " "2"" of type '" "iDynTree::GeomVector3< iDynTree::AngularForceVector3 >::MotionForceSemanticsT *""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::AngularForceVector3 >::MotionForceSemanticsT * >(argp2);
  if (arg1) (arg1)->semantics = *arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3__AngularForceVector3_semantics_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3< iDynTree::AngularForceVector3 > *arg1 = (iDynTree::GeomVector3< iDynTree::AngularForceVector3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::GeomVector3< iDynTree::AngularForceVector3 >::MotionForceSemanticsT *result = 0 ;
  
  if (!SWIG_check_num_args("GeomVector3__AngularForceVector3_semantics_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__AngularForceVector3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3__AngularForceVector3_semantics_get" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::AngularForceVector3 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::AngularForceVector3 > * >(argp1);
  result = (iDynTree::GeomVector3< iDynTree::AngularForceVector3 >::MotionForceSemanticsT *)& ((arg1)->semantics);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__AngularForceVector3Semantics, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_GeomVector3__AngularForceVector3__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::GeomVector3< iDynTree::AngularForceVector3 > *result = 0 ;
  
  if (!SWIG_check_num_args("new_GeomVector3__AngularForceVector3",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::GeomVector3< iDynTree::AngularForceVector3 > *)new iDynTree::GeomVector3< iDynTree::AngularForceVector3 >();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__AngularForceVector3_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_GeomVector3__AngularForceVector3__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double *arg1 = (double *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::GeomVector3< iDynTree::AngularForceVector3 > *result = 0 ;
  
  if (!SWIG_check_num_args("new_GeomVector3__AngularForceVector3",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GeomVector3__AngularForceVector3" "', argument " "1"" of type '" "double const *""'"); 
  }
  arg1 = reinterpret_cast< double * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_GeomVector3__AngularForceVector3" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (iDynTree::GeomVector3< iDynTree::AngularForceVector3 > *)new iDynTree::GeomVector3< iDynTree::AngularForceVector3 >((double const *)arg1,arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__AngularForceVector3_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_GeomVector3__AngularForceVector3__SWIG_2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3< iDynTree::AngularForceVector3 > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::GeomVector3< iDynTree::AngularForceVector3 > *result = 0 ;
  
  if (!SWIG_check_num_args("new_GeomVector3__AngularForceVector3",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__AngularForceVector3_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GeomVector3__AngularForceVector3" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::AngularForceVector3 > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GeomVector3__AngularForceVector3" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::AngularForceVector3 > const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::AngularForceVector3 > * >(argp1);
  result = (iDynTree::GeomVector3< iDynTree::AngularForceVector3 > *)new iDynTree::GeomVector3< iDynTree::AngularForceVector3 >((iDynTree::GeomVector3< iDynTree::AngularForceVector3 > const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__AngularForceVector3_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_GeomVector3__AngularForceVector3(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_GeomVector3__AngularForceVector3__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__AngularForceVector3_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_GeomVector3__AngularForceVector3__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_double, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_GeomVector3__AngularForceVector3__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_GeomVector3__AngularForceVector3'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::GeomVector3< iDynTree::AngularForceVector3 >::GeomVector3()\n"
    "    iDynTree::GeomVector3< iDynTree::AngularForceVector3 >::GeomVector3(double const *,unsigned int const)\n"
    "    iDynTree::GeomVector3< iDynTree::AngularForceVector3 >::GeomVector3(iDynTree::GeomVector3< iDynTree::AngularForceVector3 > const &)\n");
  return 1;
}


int _wrap_GeomVector3__AngularForceVector3_setSemantics(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3< iDynTree::AngularForceVector3 > *arg1 = (iDynTree::GeomVector3< iDynTree::AngularForceVector3 > *) 0 ;
  iDynTree::GeomVector3< iDynTree::AngularForceVector3 >::MotionForceSemanticsT *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("GeomVector3__AngularForceVector3_setSemantics",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__AngularForceVector3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3__AngularForceVector3_setSemantics" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::AngularForceVector3 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::AngularForceVector3 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__AngularForceVector3Semantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeomVector3__AngularForceVector3_setSemantics" "', argument " "2"" of type '" "iDynTree::GeomVector3< iDynTree::AngularForceVector3 >::MotionForceSemanticsT &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3__AngularForceVector3_setSemantics" "', argument " "2"" of type '" "iDynTree::GeomVector3< iDynTree::AngularForceVector3 >::MotionForceSemanticsT &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::AngularForceVector3 >::MotionForceSemanticsT * >(argp2);
  (arg1)->setSemantics(*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3__AngularForceVector3_changeCoordFrame(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3< iDynTree::AngularForceVector3 > *arg1 = (iDynTree::GeomVector3< iDynTree::AngularForceVector3 > *) 0 ;
  iDynTree::Rotation *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::AngularForceVector3 result;
  
  if (!SWIG_check_num_args("GeomVector3__AngularForceVector3_changeCoordFrame",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__AngularForceVector3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3__AngularForceVector3_changeCoordFrame" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::AngularForceVector3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::AngularForceVector3 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Rotation,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeomVector3__AngularForceVector3_changeCoordFrame" "', argument " "2"" of type '" "iDynTree::Rotation const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3__AngularForceVector3_changeCoordFrame" "', argument " "2"" of type '" "iDynTree::Rotation const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Rotation * >(argp2);
  result = ((iDynTree::GeomVector3< iDynTree::AngularForceVector3 > const *)arg1)->changeCoordFrame((iDynTree::Rotation const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::AngularForceVector3(static_cast< const iDynTree::AngularForceVector3& >(result))), SWIGTYPE_p_iDynTree__AngularForceVector3, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3__AngularForceVector3_compose(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3< iDynTree::AngularForceVector3 >::MotionForceTbase *arg1 = 0 ;
  iDynTree::AngularForceVector3 *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::AngularForceVector3 result;
  
  if (!SWIG_check_num_args("GeomVector3__AngularForceVector3_compose",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__AngularForceVector3_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3__AngularForceVector3_compose" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::AngularForceVector3 >::MotionForceTbase const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3__AngularForceVector3_compose" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::AngularForceVector3 >::MotionForceTbase const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::AngularForceVector3 >::MotionForceTbase * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__AngularForceVector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeomVector3__AngularForceVector3_compose" "', argument " "2"" of type '" "iDynTree::AngularForceVector3 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3__AngularForceVector3_compose" "', argument " "2"" of type '" "iDynTree::AngularForceVector3 const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::AngularForceVector3 * >(argp2);
  result = iDynTree::GeomVector3< iDynTree::AngularForceVector3 >::SWIGTEMPLATEDISAMBIGUATOR compose((iDynTree::GeomVector3< iDynTree::AngularForceVector3 > const &)*arg1,(iDynTree::AngularForceVector3 const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::AngularForceVector3(static_cast< const iDynTree::AngularForceVector3& >(result))), SWIGTYPE_p_iDynTree__AngularForceVector3, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3__AngularForceVector3_inverse(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3< iDynTree::AngularForceVector3 >::MotionForceTbase *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::AngularForceVector3 result;
  
  if (!SWIG_check_num_args("GeomVector3__AngularForceVector3_inverse",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__AngularForceVector3_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3__AngularForceVector3_inverse" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::AngularForceVector3 >::MotionForceTbase const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3__AngularForceVector3_inverse" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::AngularForceVector3 >::MotionForceTbase const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::AngularForceVector3 >::MotionForceTbase * >(argp1);
  result = iDynTree::GeomVector3< iDynTree::AngularForceVector3 >::SWIGTEMPLATEDISAMBIGUATOR inverse((iDynTree::GeomVector3< iDynTree::AngularForceVector3 > const &)*arg1);
  _out = SWIG_NewPointerObj((new iDynTree::AngularForceVector3(static_cast< const iDynTree::AngularForceVector3& >(result))), SWIGTYPE_p_iDynTree__AngularForceVector3, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3__AngularForceVector3_dot(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3< iDynTree::AngularForceVector3 > *arg1 = (iDynTree::GeomVector3< iDynTree::AngularForceVector3 > *) 0 ;
  iDynTree::MotionForce_traits< iDynTree::AngularForceVector3 >::DualSpace *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("GeomVector3__AngularForceVector3_dot",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__AngularForceVector3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3__AngularForceVector3_dot" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::AngularForceVector3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::AngularForceVector3 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__AngularMotionVector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeomVector3__AngularForceVector3_dot" "', argument " "2"" of type '" "iDynTree::MotionForce_traits< iDynTree::AngularForceVector3 >::DualSpace const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3__AngularForceVector3_dot" "', argument " "2"" of type '" "iDynTree::MotionForce_traits< iDynTree::AngularForceVector3 >::DualSpace const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::MotionForce_traits< iDynTree::AngularForceVector3 >::DualSpace * >(argp2);
  result = (double)((iDynTree::GeomVector3< iDynTree::AngularForceVector3 > const *)arg1)->dot((iDynTree::MotionForce_traits< iDynTree::AngularForceVector3 >::DualSpace const &)*arg2);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3__AngularForceVector3_plus(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3< iDynTree::AngularForceVector3 > *arg1 = (iDynTree::GeomVector3< iDynTree::AngularForceVector3 > *) 0 ;
  iDynTree::AngularForceVector3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::AngularForceVector3 result;
  
  if (!SWIG_check_num_args("GeomVector3__AngularForceVector3_plus",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__AngularForceVector3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3__AngularForceVector3_plus" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::AngularForceVector3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::AngularForceVector3 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__AngularForceVector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeomVector3__AngularForceVector3_plus" "', argument " "2"" of type '" "iDynTree::AngularForceVector3 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3__AngularForceVector3_plus" "', argument " "2"" of type '" "iDynTree::AngularForceVector3 const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::AngularForceVector3 * >(argp2);
  result = ((iDynTree::GeomVector3< iDynTree::AngularForceVector3 > const *)arg1)->operator +((iDynTree::AngularForceVector3 const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::AngularForceVector3(static_cast< const iDynTree::AngularForceVector3& >(result))), SWIGTYPE_p_iDynTree__AngularForceVector3, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3__AngularForceVector3_minus(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3< iDynTree::AngularForceVector3 > *arg1 = (iDynTree::GeomVector3< iDynTree::AngularForceVector3 > *) 0 ;
  iDynTree::AngularForceVector3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::AngularForceVector3 result;
  
  if (!SWIG_check_num_args("GeomVector3__AngularForceVector3_minus",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__AngularForceVector3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3__AngularForceVector3_minus" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::AngularForceVector3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::AngularForceVector3 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__AngularForceVector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeomVector3__AngularForceVector3_minus" "', argument " "2"" of type '" "iDynTree::AngularForceVector3 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3__AngularForceVector3_minus" "', argument " "2"" of type '" "iDynTree::AngularForceVector3 const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::AngularForceVector3 * >(argp2);
  result = ((iDynTree::GeomVector3< iDynTree::AngularForceVector3 > const *)arg1)->operator -((iDynTree::AngularForceVector3 const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::AngularForceVector3(static_cast< const iDynTree::AngularForceVector3& >(result))), SWIGTYPE_p_iDynTree__AngularForceVector3, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3__AngularForceVector3_uminus(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3< iDynTree::AngularForceVector3 > *arg1 = (iDynTree::GeomVector3< iDynTree::AngularForceVector3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::AngularForceVector3 result;
  
  if (!SWIG_check_num_args("GeomVector3__AngularForceVector3_uminus",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__AngularForceVector3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3__AngularForceVector3_uminus" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::AngularForceVector3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::AngularForceVector3 > * >(argp1);
  result = ((iDynTree::GeomVector3< iDynTree::AngularForceVector3 > const *)arg1)->operator -();
  _out = SWIG_NewPointerObj((new iDynTree::AngularForceVector3(static_cast< const iDynTree::AngularForceVector3& >(result))), SWIGTYPE_p_iDynTree__AngularForceVector3, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_GeomVector3__AngularForceVector3(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3< iDynTree::AngularForceVector3 > *arg1 = (iDynTree::GeomVector3< iDynTree::AngularForceVector3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_GeomVector3__AngularForceVector3",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__AngularForceVector3_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GeomVector3__AngularForceVector3" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::AngularForceVector3 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::AngularForceVector3 > * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_ForceVector3Semantics__LinearForceVector3Semantics__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics > *result = 0 ;
  
  if (!SWIG_check_num_args("new_ForceVector3Semantics__LinearForceVector3Semantics",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics > *)new iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics >();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__ForceVector3SemanticsT_iDynTree__LinearForceVector3Semantics_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_ForceVector3Semantics__LinearForceVector3Semantics__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics > *result = 0 ;
  
  if (!SWIG_check_num_args("new_ForceVector3Semantics__LinearForceVector3Semantics",argc,3,3,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ForceVector3Semantics__LinearForceVector3Semantics" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ForceVector3Semantics__LinearForceVector3Semantics" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ForceVector3Semantics__LinearForceVector3Semantics" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics > *)new iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics >(arg1,arg2,arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__ForceVector3SemanticsT_iDynTree__LinearForceVector3Semantics_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_ForceVector3Semantics__LinearForceVector3Semantics__SWIG_2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics > *result = 0 ;
  
  if (!SWIG_check_num_args("new_ForceVector3Semantics__LinearForceVector3Semantics",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__ForceVector3SemanticsT_iDynTree__LinearForceVector3Semantics_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ForceVector3Semantics__LinearForceVector3Semantics" "', argument " "1"" of type '" "iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ForceVector3Semantics__LinearForceVector3Semantics" "', argument " "1"" of type '" "iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics > const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics > * >(argp1);
  result = (iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics > *)new iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics >((iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics > const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__ForceVector3SemanticsT_iDynTree__LinearForceVector3Semantics_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_ForceVector3Semantics__LinearForceVector3Semantics(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_ForceVector3Semantics__LinearForceVector3Semantics__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__ForceVector3SemanticsT_iDynTree__LinearForceVector3Semantics_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ForceVector3Semantics__LinearForceVector3Semantics__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_ForceVector3Semantics__LinearForceVector3Semantics__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_ForceVector3Semantics__LinearForceVector3Semantics'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics >::ForceVector3Semantics()\n"
    "    iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics >::ForceVector3Semantics(int,int,int)\n"
    "    iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics >::ForceVector3Semantics(iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics > const &)\n");
  return 1;
}


int _wrap_ForceVector3Semantics__LinearForceVector3Semantics_compose(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics > *arg1 = 0 ;
  iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics > *arg2 = 0 ;
  iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics > *arg3 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("ForceVector3Semantics__LinearForceVector3Semantics_compose",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__ForceVector3SemanticsT_iDynTree__LinearForceVector3Semantics_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ForceVector3Semantics__LinearForceVector3Semantics_compose" "', argument " "1"" of type '" "iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ForceVector3Semantics__LinearForceVector3Semantics_compose" "', argument " "1"" of type '" "iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics > const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__ForceVector3SemanticsT_iDynTree__LinearForceVector3Semantics_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ForceVector3Semantics__LinearForceVector3Semantics_compose" "', argument " "2"" of type '" "iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ForceVector3Semantics__LinearForceVector3Semantics_compose" "', argument " "2"" of type '" "iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics > const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics > * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__ForceVector3SemanticsT_iDynTree__LinearForceVector3Semantics_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ForceVector3Semantics__LinearForceVector3Semantics_compose" "', argument " "3"" of type '" "iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ForceVector3Semantics__LinearForceVector3Semantics_compose" "', argument " "3"" of type '" "iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics > &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics > * >(argp3);
  result = (bool)iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics >::SWIGTEMPLATEDISAMBIGUATOR compose((iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics > const &)*arg1,(iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics > const &)*arg2,*arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ForceVector3Semantics__LinearForceVector3Semantics_inverse(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics > *arg1 = 0 ;
  iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics > *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("ForceVector3Semantics__LinearForceVector3Semantics_inverse",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__ForceVector3SemanticsT_iDynTree__LinearForceVector3Semantics_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ForceVector3Semantics__LinearForceVector3Semantics_inverse" "', argument " "1"" of type '" "iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ForceVector3Semantics__LinearForceVector3Semantics_inverse" "', argument " "1"" of type '" "iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics > const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__ForceVector3SemanticsT_iDynTree__LinearForceVector3Semantics_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ForceVector3Semantics__LinearForceVector3Semantics_inverse" "', argument " "2"" of type '" "iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ForceVector3Semantics__LinearForceVector3Semantics_inverse" "', argument " "2"" of type '" "iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics > &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics > * >(argp2);
  result = (bool)iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics >::SWIGTEMPLATEDISAMBIGUATOR inverse((iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics > const &)*arg1,*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_ForceVector3Semantics__LinearForceVector3Semantics(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics > *arg1 = (iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_ForceVector3Semantics__LinearForceVector3Semantics",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ForceVector3SemanticsT_iDynTree__LinearForceVector3Semantics_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ForceVector3Semantics__LinearForceVector3Semantics" "', argument " "1"" of type '" "iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics > * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_ForceVector3Semantics__AngularForceVector3Semantics__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics > *result = 0 ;
  
  if (!SWIG_check_num_args("new_ForceVector3Semantics__AngularForceVector3Semantics",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics > *)new iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics >();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__ForceVector3SemanticsT_iDynTree__AngularForceVector3Semantics_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_ForceVector3Semantics__AngularForceVector3Semantics__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics > *result = 0 ;
  
  if (!SWIG_check_num_args("new_ForceVector3Semantics__AngularForceVector3Semantics",argc,3,3,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ForceVector3Semantics__AngularForceVector3Semantics" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ForceVector3Semantics__AngularForceVector3Semantics" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ForceVector3Semantics__AngularForceVector3Semantics" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics > *)new iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics >(arg1,arg2,arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__ForceVector3SemanticsT_iDynTree__AngularForceVector3Semantics_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_ForceVector3Semantics__AngularForceVector3Semantics__SWIG_2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics > *result = 0 ;
  
  if (!SWIG_check_num_args("new_ForceVector3Semantics__AngularForceVector3Semantics",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__ForceVector3SemanticsT_iDynTree__AngularForceVector3Semantics_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ForceVector3Semantics__AngularForceVector3Semantics" "', argument " "1"" of type '" "iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ForceVector3Semantics__AngularForceVector3Semantics" "', argument " "1"" of type '" "iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics > const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics > * >(argp1);
  result = (iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics > *)new iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics >((iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics > const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__ForceVector3SemanticsT_iDynTree__AngularForceVector3Semantics_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_ForceVector3Semantics__AngularForceVector3Semantics(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_ForceVector3Semantics__AngularForceVector3Semantics__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__ForceVector3SemanticsT_iDynTree__AngularForceVector3Semantics_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ForceVector3Semantics__AngularForceVector3Semantics__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_ForceVector3Semantics__AngularForceVector3Semantics__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_ForceVector3Semantics__AngularForceVector3Semantics'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics >::ForceVector3Semantics()\n"
    "    iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics >::ForceVector3Semantics(int,int,int)\n"
    "    iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics >::ForceVector3Semantics(iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics > const &)\n");
  return 1;
}


int _wrap_ForceVector3Semantics__AngularForceVector3Semantics_compose(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics > *arg1 = 0 ;
  iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics > *arg2 = 0 ;
  iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics > *arg3 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("ForceVector3Semantics__AngularForceVector3Semantics_compose",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__ForceVector3SemanticsT_iDynTree__AngularForceVector3Semantics_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ForceVector3Semantics__AngularForceVector3Semantics_compose" "', argument " "1"" of type '" "iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ForceVector3Semantics__AngularForceVector3Semantics_compose" "', argument " "1"" of type '" "iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics > const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__ForceVector3SemanticsT_iDynTree__AngularForceVector3Semantics_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ForceVector3Semantics__AngularForceVector3Semantics_compose" "', argument " "2"" of type '" "iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ForceVector3Semantics__AngularForceVector3Semantics_compose" "', argument " "2"" of type '" "iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics > const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics > * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__ForceVector3SemanticsT_iDynTree__AngularForceVector3Semantics_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ForceVector3Semantics__AngularForceVector3Semantics_compose" "', argument " "3"" of type '" "iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ForceVector3Semantics__AngularForceVector3Semantics_compose" "', argument " "3"" of type '" "iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics > &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics > * >(argp3);
  result = (bool)iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics >::SWIGTEMPLATEDISAMBIGUATOR compose((iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics > const &)*arg1,(iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics > const &)*arg2,*arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ForceVector3Semantics__AngularForceVector3Semantics_inverse(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics > *arg1 = 0 ;
  iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics > *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("ForceVector3Semantics__AngularForceVector3Semantics_inverse",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__ForceVector3SemanticsT_iDynTree__AngularForceVector3Semantics_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ForceVector3Semantics__AngularForceVector3Semantics_inverse" "', argument " "1"" of type '" "iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ForceVector3Semantics__AngularForceVector3Semantics_inverse" "', argument " "1"" of type '" "iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics > const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__ForceVector3SemanticsT_iDynTree__AngularForceVector3Semantics_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ForceVector3Semantics__AngularForceVector3Semantics_inverse" "', argument " "2"" of type '" "iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ForceVector3Semantics__AngularForceVector3Semantics_inverse" "', argument " "2"" of type '" "iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics > &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics > * >(argp2);
  result = (bool)iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics >::SWIGTEMPLATEDISAMBIGUATOR inverse((iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics > const &)*arg1,*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_ForceVector3Semantics__AngularForceVector3Semantics(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics > *arg1 = (iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_ForceVector3Semantics__AngularForceVector3Semantics",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ForceVector3SemanticsT_iDynTree__AngularForceVector3Semantics_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ForceVector3Semantics__AngularForceVector3Semantics" "', argument " "1"" of type '" "iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics > * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_MotionVector3__LinearMotionVector3__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::MotionVector3< iDynTree::LinearMotionVector3 > *result = 0 ;
  
  if (!SWIG_check_num_args("new_MotionVector3__LinearMotionVector3",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::MotionVector3< iDynTree::LinearMotionVector3 > *)new iDynTree::MotionVector3< iDynTree::LinearMotionVector3 >();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__MotionVector3T_iDynTree__LinearMotionVector3_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_MotionVector3__LinearMotionVector3__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double *arg1 = (double *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::MotionVector3< iDynTree::LinearMotionVector3 > *result = 0 ;
  
  if (!SWIG_check_num_args("new_MotionVector3__LinearMotionVector3",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MotionVector3__LinearMotionVector3" "', argument " "1"" of type '" "double const *""'"); 
  }
  arg1 = reinterpret_cast< double * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_MotionVector3__LinearMotionVector3" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (iDynTree::MotionVector3< iDynTree::LinearMotionVector3 > *)new iDynTree::MotionVector3< iDynTree::LinearMotionVector3 >((double const *)arg1,arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__MotionVector3T_iDynTree__LinearMotionVector3_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_MotionVector3__LinearMotionVector3__SWIG_2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MotionVector3< iDynTree::LinearMotionVector3 > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::MotionVector3< iDynTree::LinearMotionVector3 > *result = 0 ;
  
  if (!SWIG_check_num_args("new_MotionVector3__LinearMotionVector3",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__MotionVector3T_iDynTree__LinearMotionVector3_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MotionVector3__LinearMotionVector3" "', argument " "1"" of type '" "iDynTree::MotionVector3< iDynTree::LinearMotionVector3 > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MotionVector3__LinearMotionVector3" "', argument " "1"" of type '" "iDynTree::MotionVector3< iDynTree::LinearMotionVector3 > const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MotionVector3< iDynTree::LinearMotionVector3 > * >(argp1);
  result = (iDynTree::MotionVector3< iDynTree::LinearMotionVector3 > *)new iDynTree::MotionVector3< iDynTree::LinearMotionVector3 >((iDynTree::MotionVector3< iDynTree::LinearMotionVector3 > const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__MotionVector3T_iDynTree__LinearMotionVector3_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_MotionVector3__LinearMotionVector3(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_MotionVector3__LinearMotionVector3__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__MotionVector3T_iDynTree__LinearMotionVector3_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_MotionVector3__LinearMotionVector3__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_double, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_MotionVector3__LinearMotionVector3__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_MotionVector3__LinearMotionVector3'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::MotionVector3< iDynTree::LinearMotionVector3 >::MotionVector3()\n"
    "    iDynTree::MotionVector3< iDynTree::LinearMotionVector3 >::MotionVector3(double const *,unsigned int const)\n"
    "    iDynTree::MotionVector3< iDynTree::LinearMotionVector3 >::MotionVector3(iDynTree::MotionVector3< iDynTree::LinearMotionVector3 > const &)\n");
  return 1;
}


int _wrap_MotionVector3__LinearMotionVector3_cross__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MotionVector3< iDynTree::LinearMotionVector3 > *arg1 = (iDynTree::MotionVector3< iDynTree::LinearMotionVector3 > *) 0 ;
  iDynTree::LinearMotionVector3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::MotionVector3< iDynTree::LinearMotionVector3 >::MotionCrossLinM result;
  
  if (!SWIG_check_num_args("MotionVector3__LinearMotionVector3_cross",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MotionVector3T_iDynTree__LinearMotionVector3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MotionVector3__LinearMotionVector3_cross" "', argument " "1"" of type '" "iDynTree::MotionVector3< iDynTree::LinearMotionVector3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MotionVector3< iDynTree::LinearMotionVector3 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__LinearMotionVector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MotionVector3__LinearMotionVector3_cross" "', argument " "2"" of type '" "iDynTree::LinearMotionVector3 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MotionVector3__LinearMotionVector3_cross" "', argument " "2"" of type '" "iDynTree::LinearMotionVector3 const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::LinearMotionVector3 * >(argp2);
  result = ((iDynTree::MotionVector3< iDynTree::LinearMotionVector3 > const *)arg1)->cross((iDynTree::LinearMotionVector3 const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::MotionVector3< iDynTree::LinearMotionVector3 >::MotionCrossLinM(static_cast< const iDynTree::MotionVector3< iDynTree::LinearMotionVector3 >::MotionCrossLinM& >(result))), SWIGTYPE_p_iDynTree__AngularMotionVector3, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MotionVector3__LinearMotionVector3_cross__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MotionVector3< iDynTree::LinearMotionVector3 > *arg1 = (iDynTree::MotionVector3< iDynTree::LinearMotionVector3 > *) 0 ;
  iDynTree::AngularMotionVector3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::MotionVector3< iDynTree::LinearMotionVector3 >::MotionCrossAngM result;
  
  if (!SWIG_check_num_args("MotionVector3__LinearMotionVector3_cross",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MotionVector3T_iDynTree__LinearMotionVector3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MotionVector3__LinearMotionVector3_cross" "', argument " "1"" of type '" "iDynTree::MotionVector3< iDynTree::LinearMotionVector3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MotionVector3< iDynTree::LinearMotionVector3 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__AngularMotionVector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MotionVector3__LinearMotionVector3_cross" "', argument " "2"" of type '" "iDynTree::AngularMotionVector3 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MotionVector3__LinearMotionVector3_cross" "', argument " "2"" of type '" "iDynTree::AngularMotionVector3 const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::AngularMotionVector3 * >(argp2);
  result = ((iDynTree::MotionVector3< iDynTree::LinearMotionVector3 > const *)arg1)->cross((iDynTree::AngularMotionVector3 const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::MotionVector3< iDynTree::LinearMotionVector3 >::MotionCrossAngM(static_cast< const iDynTree::MotionVector3< iDynTree::LinearMotionVector3 >::MotionCrossAngM& >(result))), SWIGTYPE_p_iDynTree__LinearMotionVector3, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MotionVector3__LinearMotionVector3_cross__SWIG_2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MotionVector3< iDynTree::LinearMotionVector3 > *arg1 = (iDynTree::MotionVector3< iDynTree::LinearMotionVector3 > *) 0 ;
  iDynTree::LinearForceVector3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::MotionVector3< iDynTree::LinearMotionVector3 >::MotionCrossLinF result;
  
  if (!SWIG_check_num_args("MotionVector3__LinearMotionVector3_cross",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MotionVector3T_iDynTree__LinearMotionVector3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MotionVector3__LinearMotionVector3_cross" "', argument " "1"" of type '" "iDynTree::MotionVector3< iDynTree::LinearMotionVector3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MotionVector3< iDynTree::LinearMotionVector3 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__LinearForceVector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MotionVector3__LinearMotionVector3_cross" "', argument " "2"" of type '" "iDynTree::LinearForceVector3 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MotionVector3__LinearMotionVector3_cross" "', argument " "2"" of type '" "iDynTree::LinearForceVector3 const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::LinearForceVector3 * >(argp2);
  result = ((iDynTree::MotionVector3< iDynTree::LinearMotionVector3 > const *)arg1)->cross((iDynTree::LinearForceVector3 const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::MotionVector3< iDynTree::LinearMotionVector3 >::MotionCrossLinF(static_cast< const iDynTree::MotionVector3< iDynTree::LinearMotionVector3 >::MotionCrossLinF& >(result))), SWIGTYPE_p_iDynTree__AngularForceVector3, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MotionVector3__LinearMotionVector3_cross__SWIG_3(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MotionVector3< iDynTree::LinearMotionVector3 > *arg1 = (iDynTree::MotionVector3< iDynTree::LinearMotionVector3 > *) 0 ;
  iDynTree::AngularForceVector3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::MotionVector3< iDynTree::LinearMotionVector3 >::MotionCrossAngF result;
  
  if (!SWIG_check_num_args("MotionVector3__LinearMotionVector3_cross",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MotionVector3T_iDynTree__LinearMotionVector3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MotionVector3__LinearMotionVector3_cross" "', argument " "1"" of type '" "iDynTree::MotionVector3< iDynTree::LinearMotionVector3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MotionVector3< iDynTree::LinearMotionVector3 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__AngularForceVector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MotionVector3__LinearMotionVector3_cross" "', argument " "2"" of type '" "iDynTree::AngularForceVector3 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MotionVector3__LinearMotionVector3_cross" "', argument " "2"" of type '" "iDynTree::AngularForceVector3 const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::AngularForceVector3 * >(argp2);
  result = ((iDynTree::MotionVector3< iDynTree::LinearMotionVector3 > const *)arg1)->cross((iDynTree::AngularForceVector3 const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::MotionVector3< iDynTree::LinearMotionVector3 >::MotionCrossAngF(static_cast< const iDynTree::MotionVector3< iDynTree::LinearMotionVector3 >::MotionCrossAngF& >(result))), SWIGTYPE_p_iDynTree__LinearForceVector3, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MotionVector3__LinearMotionVector3_cross(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__MotionVector3T_iDynTree__LinearMotionVector3_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__LinearMotionVector3, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MotionVector3__LinearMotionVector3_cross__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__MotionVector3T_iDynTree__LinearMotionVector3_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__AngularMotionVector3, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MotionVector3__LinearMotionVector3_cross__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__MotionVector3T_iDynTree__LinearMotionVector3_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__LinearForceVector3, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MotionVector3__LinearMotionVector3_cross__SWIG_2(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__MotionVector3T_iDynTree__LinearMotionVector3_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__AngularForceVector3, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MotionVector3__LinearMotionVector3_cross__SWIG_3(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'MotionVector3__LinearMotionVector3_cross'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::MotionVector3< iDynTree::LinearMotionVector3 >::cross(iDynTree::LinearMotionVector3 const &) const\n"
    "    iDynTree::MotionVector3< iDynTree::LinearMotionVector3 >::cross(iDynTree::AngularMotionVector3 const &) const\n"
    "    iDynTree::MotionVector3< iDynTree::LinearMotionVector3 >::cross(iDynTree::LinearForceVector3 const &) const\n"
    "    iDynTree::MotionVector3< iDynTree::LinearMotionVector3 >::cross(iDynTree::AngularForceVector3 const &) const\n");
  return 1;
}


int _wrap_delete_MotionVector3__LinearMotionVector3(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MotionVector3< iDynTree::LinearMotionVector3 > *arg1 = (iDynTree::MotionVector3< iDynTree::LinearMotionVector3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_MotionVector3__LinearMotionVector3",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MotionVector3T_iDynTree__LinearMotionVector3_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MotionVector3__LinearMotionVector3" "', argument " "1"" of type '" "iDynTree::MotionVector3< iDynTree::LinearMotionVector3 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MotionVector3< iDynTree::LinearMotionVector3 > * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_MotionVector3__AngularMotionVector3__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::MotionVector3< iDynTree::AngularMotionVector3 > *result = 0 ;
  
  if (!SWIG_check_num_args("new_MotionVector3__AngularMotionVector3",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::MotionVector3< iDynTree::AngularMotionVector3 > *)new iDynTree::MotionVector3< iDynTree::AngularMotionVector3 >();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__MotionVector3T_iDynTree__AngularMotionVector3_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_MotionVector3__AngularMotionVector3__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double *arg1 = (double *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::MotionVector3< iDynTree::AngularMotionVector3 > *result = 0 ;
  
  if (!SWIG_check_num_args("new_MotionVector3__AngularMotionVector3",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MotionVector3__AngularMotionVector3" "', argument " "1"" of type '" "double const *""'"); 
  }
  arg1 = reinterpret_cast< double * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_MotionVector3__AngularMotionVector3" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (iDynTree::MotionVector3< iDynTree::AngularMotionVector3 > *)new iDynTree::MotionVector3< iDynTree::AngularMotionVector3 >((double const *)arg1,arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__MotionVector3T_iDynTree__AngularMotionVector3_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_MotionVector3__AngularMotionVector3__SWIG_2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MotionVector3< iDynTree::AngularMotionVector3 > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::MotionVector3< iDynTree::AngularMotionVector3 > *result = 0 ;
  
  if (!SWIG_check_num_args("new_MotionVector3__AngularMotionVector3",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__MotionVector3T_iDynTree__AngularMotionVector3_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MotionVector3__AngularMotionVector3" "', argument " "1"" of type '" "iDynTree::MotionVector3< iDynTree::AngularMotionVector3 > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MotionVector3__AngularMotionVector3" "', argument " "1"" of type '" "iDynTree::MotionVector3< iDynTree::AngularMotionVector3 > const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MotionVector3< iDynTree::AngularMotionVector3 > * >(argp1);
  result = (iDynTree::MotionVector3< iDynTree::AngularMotionVector3 > *)new iDynTree::MotionVector3< iDynTree::AngularMotionVector3 >((iDynTree::MotionVector3< iDynTree::AngularMotionVector3 > const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__MotionVector3T_iDynTree__AngularMotionVector3_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_MotionVector3__AngularMotionVector3(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_MotionVector3__AngularMotionVector3__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__MotionVector3T_iDynTree__AngularMotionVector3_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_MotionVector3__AngularMotionVector3__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_double, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_MotionVector3__AngularMotionVector3__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_MotionVector3__AngularMotionVector3'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::MotionVector3< iDynTree::AngularMotionVector3 >::MotionVector3()\n"
    "    iDynTree::MotionVector3< iDynTree::AngularMotionVector3 >::MotionVector3(double const *,unsigned int const)\n"
    "    iDynTree::MotionVector3< iDynTree::AngularMotionVector3 >::MotionVector3(iDynTree::MotionVector3< iDynTree::AngularMotionVector3 > const &)\n");
  return 1;
}


int _wrap_MotionVector3__AngularMotionVector3_cross__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MotionVector3< iDynTree::AngularMotionVector3 > *arg1 = (iDynTree::MotionVector3< iDynTree::AngularMotionVector3 > *) 0 ;
  iDynTree::LinearMotionVector3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::MotionVector3< iDynTree::AngularMotionVector3 >::MotionCrossLinM result;
  
  if (!SWIG_check_num_args("MotionVector3__AngularMotionVector3_cross",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MotionVector3T_iDynTree__AngularMotionVector3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MotionVector3__AngularMotionVector3_cross" "', argument " "1"" of type '" "iDynTree::MotionVector3< iDynTree::AngularMotionVector3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MotionVector3< iDynTree::AngularMotionVector3 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__LinearMotionVector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MotionVector3__AngularMotionVector3_cross" "', argument " "2"" of type '" "iDynTree::LinearMotionVector3 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MotionVector3__AngularMotionVector3_cross" "', argument " "2"" of type '" "iDynTree::LinearMotionVector3 const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::LinearMotionVector3 * >(argp2);
  result = ((iDynTree::MotionVector3< iDynTree::AngularMotionVector3 > const *)arg1)->cross((iDynTree::LinearMotionVector3 const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::MotionVector3< iDynTree::AngularMotionVector3 >::MotionCrossLinM(static_cast< const iDynTree::MotionVector3< iDynTree::AngularMotionVector3 >::MotionCrossLinM& >(result))), SWIGTYPE_p_iDynTree__LinearMotionVector3, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MotionVector3__AngularMotionVector3_cross__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MotionVector3< iDynTree::AngularMotionVector3 > *arg1 = (iDynTree::MotionVector3< iDynTree::AngularMotionVector3 > *) 0 ;
  iDynTree::AngularMotionVector3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::MotionVector3< iDynTree::AngularMotionVector3 >::MotionCrossAngM result;
  
  if (!SWIG_check_num_args("MotionVector3__AngularMotionVector3_cross",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MotionVector3T_iDynTree__AngularMotionVector3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MotionVector3__AngularMotionVector3_cross" "', argument " "1"" of type '" "iDynTree::MotionVector3< iDynTree::AngularMotionVector3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MotionVector3< iDynTree::AngularMotionVector3 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__AngularMotionVector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MotionVector3__AngularMotionVector3_cross" "', argument " "2"" of type '" "iDynTree::AngularMotionVector3 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MotionVector3__AngularMotionVector3_cross" "', argument " "2"" of type '" "iDynTree::AngularMotionVector3 const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::AngularMotionVector3 * >(argp2);
  result = ((iDynTree::MotionVector3< iDynTree::AngularMotionVector3 > const *)arg1)->cross((iDynTree::AngularMotionVector3 const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::MotionVector3< iDynTree::AngularMotionVector3 >::MotionCrossAngM(static_cast< const iDynTree::MotionVector3< iDynTree::AngularMotionVector3 >::MotionCrossAngM& >(result))), SWIGTYPE_p_iDynTree__AngularMotionVector3, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MotionVector3__AngularMotionVector3_cross__SWIG_2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MotionVector3< iDynTree::AngularMotionVector3 > *arg1 = (iDynTree::MotionVector3< iDynTree::AngularMotionVector3 > *) 0 ;
  iDynTree::LinearForceVector3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::MotionVector3< iDynTree::AngularMotionVector3 >::MotionCrossLinF result;
  
  if (!SWIG_check_num_args("MotionVector3__AngularMotionVector3_cross",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MotionVector3T_iDynTree__AngularMotionVector3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MotionVector3__AngularMotionVector3_cross" "', argument " "1"" of type '" "iDynTree::MotionVector3< iDynTree::AngularMotionVector3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MotionVector3< iDynTree::AngularMotionVector3 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__LinearForceVector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MotionVector3__AngularMotionVector3_cross" "', argument " "2"" of type '" "iDynTree::LinearForceVector3 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MotionVector3__AngularMotionVector3_cross" "', argument " "2"" of type '" "iDynTree::LinearForceVector3 const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::LinearForceVector3 * >(argp2);
  result = ((iDynTree::MotionVector3< iDynTree::AngularMotionVector3 > const *)arg1)->cross((iDynTree::LinearForceVector3 const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::MotionVector3< iDynTree::AngularMotionVector3 >::MotionCrossLinF(static_cast< const iDynTree::MotionVector3< iDynTree::AngularMotionVector3 >::MotionCrossLinF& >(result))), SWIGTYPE_p_iDynTree__LinearForceVector3, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MotionVector3__AngularMotionVector3_cross__SWIG_3(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MotionVector3< iDynTree::AngularMotionVector3 > *arg1 = (iDynTree::MotionVector3< iDynTree::AngularMotionVector3 > *) 0 ;
  iDynTree::AngularForceVector3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::MotionVector3< iDynTree::AngularMotionVector3 >::MotionCrossAngF result;
  
  if (!SWIG_check_num_args("MotionVector3__AngularMotionVector3_cross",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MotionVector3T_iDynTree__AngularMotionVector3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MotionVector3__AngularMotionVector3_cross" "', argument " "1"" of type '" "iDynTree::MotionVector3< iDynTree::AngularMotionVector3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MotionVector3< iDynTree::AngularMotionVector3 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__AngularForceVector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MotionVector3__AngularMotionVector3_cross" "', argument " "2"" of type '" "iDynTree::AngularForceVector3 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MotionVector3__AngularMotionVector3_cross" "', argument " "2"" of type '" "iDynTree::AngularForceVector3 const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::AngularForceVector3 * >(argp2);
  result = ((iDynTree::MotionVector3< iDynTree::AngularMotionVector3 > const *)arg1)->cross((iDynTree::AngularForceVector3 const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::MotionVector3< iDynTree::AngularMotionVector3 >::MotionCrossAngF(static_cast< const iDynTree::MotionVector3< iDynTree::AngularMotionVector3 >::MotionCrossAngF& >(result))), SWIGTYPE_p_iDynTree__AngularForceVector3, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MotionVector3__AngularMotionVector3_cross(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__MotionVector3T_iDynTree__AngularMotionVector3_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__LinearMotionVector3, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MotionVector3__AngularMotionVector3_cross__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__MotionVector3T_iDynTree__AngularMotionVector3_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__AngularMotionVector3, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MotionVector3__AngularMotionVector3_cross__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__MotionVector3T_iDynTree__AngularMotionVector3_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__LinearForceVector3, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MotionVector3__AngularMotionVector3_cross__SWIG_2(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__MotionVector3T_iDynTree__AngularMotionVector3_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__AngularForceVector3, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MotionVector3__AngularMotionVector3_cross__SWIG_3(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'MotionVector3__AngularMotionVector3_cross'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::MotionVector3< iDynTree::AngularMotionVector3 >::cross(iDynTree::LinearMotionVector3 const &) const\n"
    "    iDynTree::MotionVector3< iDynTree::AngularMotionVector3 >::cross(iDynTree::AngularMotionVector3 const &) const\n"
    "    iDynTree::MotionVector3< iDynTree::AngularMotionVector3 >::cross(iDynTree::LinearForceVector3 const &) const\n"
    "    iDynTree::MotionVector3< iDynTree::AngularMotionVector3 >::cross(iDynTree::AngularForceVector3 const &) const\n");
  return 1;
}


int _wrap_delete_MotionVector3__AngularMotionVector3(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MotionVector3< iDynTree::AngularMotionVector3 > *arg1 = (iDynTree::MotionVector3< iDynTree::AngularMotionVector3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_MotionVector3__AngularMotionVector3",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MotionVector3T_iDynTree__AngularMotionVector3_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MotionVector3__AngularMotionVector3" "', argument " "1"" of type '" "iDynTree::MotionVector3< iDynTree::AngularMotionVector3 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MotionVector3< iDynTree::AngularMotionVector3 > * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_ForceVector3__LinearForceVector3__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::ForceVector3< iDynTree::LinearForceVector3 > *result = 0 ;
  
  if (!SWIG_check_num_args("new_ForceVector3__LinearForceVector3",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::ForceVector3< iDynTree::LinearForceVector3 > *)new iDynTree::ForceVector3< iDynTree::LinearForceVector3 >();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__ForceVector3T_iDynTree__LinearForceVector3_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_ForceVector3__LinearForceVector3__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double *arg1 = (double *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::ForceVector3< iDynTree::LinearForceVector3 > *result = 0 ;
  
  if (!SWIG_check_num_args("new_ForceVector3__LinearForceVector3",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ForceVector3__LinearForceVector3" "', argument " "1"" of type '" "double const *""'"); 
  }
  arg1 = reinterpret_cast< double * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ForceVector3__LinearForceVector3" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (iDynTree::ForceVector3< iDynTree::LinearForceVector3 > *)new iDynTree::ForceVector3< iDynTree::LinearForceVector3 >((double const *)arg1,arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__ForceVector3T_iDynTree__LinearForceVector3_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_ForceVector3__LinearForceVector3__SWIG_2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ForceVector3< iDynTree::LinearForceVector3 > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::ForceVector3< iDynTree::LinearForceVector3 > *result = 0 ;
  
  if (!SWIG_check_num_args("new_ForceVector3__LinearForceVector3",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__ForceVector3T_iDynTree__LinearForceVector3_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ForceVector3__LinearForceVector3" "', argument " "1"" of type '" "iDynTree::ForceVector3< iDynTree::LinearForceVector3 > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ForceVector3__LinearForceVector3" "', argument " "1"" of type '" "iDynTree::ForceVector3< iDynTree::LinearForceVector3 > const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ForceVector3< iDynTree::LinearForceVector3 > * >(argp1);
  result = (iDynTree::ForceVector3< iDynTree::LinearForceVector3 > *)new iDynTree::ForceVector3< iDynTree::LinearForceVector3 >((iDynTree::ForceVector3< iDynTree::LinearForceVector3 > const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__ForceVector3T_iDynTree__LinearForceVector3_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_ForceVector3__LinearForceVector3(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_ForceVector3__LinearForceVector3__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__ForceVector3T_iDynTree__LinearForceVector3_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ForceVector3__LinearForceVector3__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_double, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_ForceVector3__LinearForceVector3__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_ForceVector3__LinearForceVector3'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::ForceVector3< iDynTree::LinearForceVector3 >::ForceVector3()\n"
    "    iDynTree::ForceVector3< iDynTree::LinearForceVector3 >::ForceVector3(double const *,unsigned int const)\n"
    "    iDynTree::ForceVector3< iDynTree::LinearForceVector3 >::ForceVector3(iDynTree::ForceVector3< iDynTree::LinearForceVector3 > const &)\n");
  return 1;
}


int _wrap_delete_ForceVector3__LinearForceVector3(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ForceVector3< iDynTree::LinearForceVector3 > *arg1 = (iDynTree::ForceVector3< iDynTree::LinearForceVector3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_ForceVector3__LinearForceVector3",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ForceVector3T_iDynTree__LinearForceVector3_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ForceVector3__LinearForceVector3" "', argument " "1"" of type '" "iDynTree::ForceVector3< iDynTree::LinearForceVector3 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ForceVector3< iDynTree::LinearForceVector3 > * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_ForceVector3__AngularForceVector3__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::ForceVector3< iDynTree::AngularForceVector3 > *result = 0 ;
  
  if (!SWIG_check_num_args("new_ForceVector3__AngularForceVector3",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::ForceVector3< iDynTree::AngularForceVector3 > *)new iDynTree::ForceVector3< iDynTree::AngularForceVector3 >();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__ForceVector3T_iDynTree__AngularForceVector3_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_ForceVector3__AngularForceVector3__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double *arg1 = (double *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::ForceVector3< iDynTree::AngularForceVector3 > *result = 0 ;
  
  if (!SWIG_check_num_args("new_ForceVector3__AngularForceVector3",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ForceVector3__AngularForceVector3" "', argument " "1"" of type '" "double const *""'"); 
  }
  arg1 = reinterpret_cast< double * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ForceVector3__AngularForceVector3" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (iDynTree::ForceVector3< iDynTree::AngularForceVector3 > *)new iDynTree::ForceVector3< iDynTree::AngularForceVector3 >((double const *)arg1,arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__ForceVector3T_iDynTree__AngularForceVector3_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_ForceVector3__AngularForceVector3__SWIG_2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ForceVector3< iDynTree::AngularForceVector3 > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::ForceVector3< iDynTree::AngularForceVector3 > *result = 0 ;
  
  if (!SWIG_check_num_args("new_ForceVector3__AngularForceVector3",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__ForceVector3T_iDynTree__AngularForceVector3_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ForceVector3__AngularForceVector3" "', argument " "1"" of type '" "iDynTree::ForceVector3< iDynTree::AngularForceVector3 > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ForceVector3__AngularForceVector3" "', argument " "1"" of type '" "iDynTree::ForceVector3< iDynTree::AngularForceVector3 > const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ForceVector3< iDynTree::AngularForceVector3 > * >(argp1);
  result = (iDynTree::ForceVector3< iDynTree::AngularForceVector3 > *)new iDynTree::ForceVector3< iDynTree::AngularForceVector3 >((iDynTree::ForceVector3< iDynTree::AngularForceVector3 > const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__ForceVector3T_iDynTree__AngularForceVector3_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_ForceVector3__AngularForceVector3(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_ForceVector3__AngularForceVector3__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__ForceVector3T_iDynTree__AngularForceVector3_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ForceVector3__AngularForceVector3__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_double, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_ForceVector3__AngularForceVector3__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_ForceVector3__AngularForceVector3'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::ForceVector3< iDynTree::AngularForceVector3 >::ForceVector3()\n"
    "    iDynTree::ForceVector3< iDynTree::AngularForceVector3 >::ForceVector3(double const *,unsigned int const)\n"
    "    iDynTree::ForceVector3< iDynTree::AngularForceVector3 >::ForceVector3(iDynTree::ForceVector3< iDynTree::AngularForceVector3 > const &)\n");
  return 1;
}


int _wrap_delete_ForceVector3__AngularForceVector3(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ForceVector3< iDynTree::AngularForceVector3 > *arg1 = (iDynTree::ForceVector3< iDynTree::AngularForceVector3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_ForceVector3__AngularForceVector3",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ForceVector3T_iDynTree__AngularForceVector3_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ForceVector3__AngularForceVector3" "', argument " "1"" of type '" "iDynTree::ForceVector3< iDynTree::AngularForceVector3 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ForceVector3< iDynTree::AngularForceVector3 > * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_LinearMotionVector3Semantics__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::LinearMotionVector3Semantics *result = 0 ;
  
  if (!SWIG_check_num_args("new_LinearMotionVector3Semantics",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::LinearMotionVector3Semantics *)new iDynTree::LinearMotionVector3Semantics();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__LinearMotionVector3Semantics, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_LinearMotionVector3Semantics__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  mxArray * _out;
  iDynTree::LinearMotionVector3Semantics *result = 0 ;
  
  if (!SWIG_check_num_args("new_LinearMotionVector3Semantics",argc,4,4,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_LinearMotionVector3Semantics" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_LinearMotionVector3Semantics" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_LinearMotionVector3Semantics" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_LinearMotionVector3Semantics" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  result = (iDynTree::LinearMotionVector3Semantics *)new iDynTree::LinearMotionVector3Semantics(arg1,arg2,arg3,arg4);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__LinearMotionVector3Semantics, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_LinearMotionVector3Semantics__SWIG_2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinearMotionVector3Semantics *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::LinearMotionVector3Semantics *result = 0 ;
  
  if (!SWIG_check_num_args("new_LinearMotionVector3Semantics",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__LinearMotionVector3Semantics,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LinearMotionVector3Semantics" "', argument " "1"" of type '" "iDynTree::LinearMotionVector3Semantics const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LinearMotionVector3Semantics" "', argument " "1"" of type '" "iDynTree::LinearMotionVector3Semantics const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinearMotionVector3Semantics * >(argp1);
  result = (iDynTree::LinearMotionVector3Semantics *)new iDynTree::LinearMotionVector3Semantics((iDynTree::LinearMotionVector3Semantics const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__LinearMotionVector3Semantics, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_LinearMotionVector3Semantics(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_LinearMotionVector3Semantics__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__LinearMotionVector3Semantics, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_LinearMotionVector3Semantics__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_LinearMotionVector3Semantics__SWIG_1(resc,resv,argc,argv);
          }
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_LinearMotionVector3Semantics'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::LinearMotionVector3Semantics::LinearMotionVector3Semantics()\n"
    "    iDynTree::LinearMotionVector3Semantics::LinearMotionVector3Semantics(int,int,int,int)\n"
    "    iDynTree::LinearMotionVector3Semantics::LinearMotionVector3Semantics(iDynTree::LinearMotionVector3Semantics const &)\n");
  return 1;
}


int _wrap_LinearMotionVector3Semantics_changePoint(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinearMotionVector3Semantics *arg1 = (iDynTree::LinearMotionVector3Semantics *) 0 ;
  iDynTree::PositionSemantics *arg2 = 0 ;
  iDynTree::AngularMotionVector3Semantics *arg3 = 0 ;
  iDynTree::LinearMotionVector3Semantics *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("LinearMotionVector3Semantics_changePoint",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinearMotionVector3Semantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinearMotionVector3Semantics_changePoint" "', argument " "1"" of type '" "iDynTree::LinearMotionVector3Semantics const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinearMotionVector3Semantics * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__PositionSemantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LinearMotionVector3Semantics_changePoint" "', argument " "2"" of type '" "iDynTree::PositionSemantics const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinearMotionVector3Semantics_changePoint" "', argument " "2"" of type '" "iDynTree::PositionSemantics const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::PositionSemantics * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__AngularMotionVector3Semantics,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LinearMotionVector3Semantics_changePoint" "', argument " "3"" of type '" "iDynTree::AngularMotionVector3Semantics const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinearMotionVector3Semantics_changePoint" "', argument " "3"" of type '" "iDynTree::AngularMotionVector3Semantics const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::AngularMotionVector3Semantics * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__LinearMotionVector3Semantics,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "LinearMotionVector3Semantics_changePoint" "', argument " "4"" of type '" "iDynTree::LinearMotionVector3Semantics &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinearMotionVector3Semantics_changePoint" "', argument " "4"" of type '" "iDynTree::LinearMotionVector3Semantics &""'"); 
  }
  arg4 = reinterpret_cast< iDynTree::LinearMotionVector3Semantics * >(argp4);
  result = (bool)((iDynTree::LinearMotionVector3Semantics const *)arg1)->changePoint((iDynTree::PositionSemantics const &)*arg2,(iDynTree::AngularMotionVector3Semantics const &)*arg3,*arg4);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_LinearMotionVector3Semantics_compose(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinearMotionVector3Semantics *arg1 = 0 ;
  iDynTree::LinearMotionVector3Semantics *arg2 = 0 ;
  iDynTree::LinearMotionVector3Semantics *arg3 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("LinearMotionVector3Semantics_compose",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__LinearMotionVector3Semantics,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinearMotionVector3Semantics_compose" "', argument " "1"" of type '" "iDynTree::LinearMotionVector3Semantics const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinearMotionVector3Semantics_compose" "', argument " "1"" of type '" "iDynTree::LinearMotionVector3Semantics const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinearMotionVector3Semantics * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__LinearMotionVector3Semantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LinearMotionVector3Semantics_compose" "', argument " "2"" of type '" "iDynTree::LinearMotionVector3Semantics const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinearMotionVector3Semantics_compose" "', argument " "2"" of type '" "iDynTree::LinearMotionVector3Semantics const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::LinearMotionVector3Semantics * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__LinearMotionVector3Semantics,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LinearMotionVector3Semantics_compose" "', argument " "3"" of type '" "iDynTree::LinearMotionVector3Semantics &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinearMotionVector3Semantics_compose" "', argument " "3"" of type '" "iDynTree::LinearMotionVector3Semantics &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::LinearMotionVector3Semantics * >(argp3);
  result = (bool)iDynTree::LinearMotionVector3Semantics::compose((iDynTree::LinearMotionVector3Semantics const &)*arg1,(iDynTree::LinearMotionVector3Semantics const &)*arg2,*arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_LinearMotionVector3Semantics(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinearMotionVector3Semantics *arg1 = (iDynTree::LinearMotionVector3Semantics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_LinearMotionVector3Semantics",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinearMotionVector3Semantics, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LinearMotionVector3Semantics" "', argument " "1"" of type '" "iDynTree::LinearMotionVector3Semantics *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinearMotionVector3Semantics * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_LinearMotionVector3__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::LinearMotionVector3 *result = 0 ;
  
  if (!SWIG_check_num_args("new_LinearMotionVector3",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::LinearMotionVector3 *)new iDynTree::LinearMotionVector3();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__LinearMotionVector3, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_LinearMotionVector3__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  iDynTree::LinearMotionVector3 *result = 0 ;
  
  if (!SWIG_check_num_args("new_LinearMotionVector3",argc,3,3,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_LinearMotionVector3" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_LinearMotionVector3" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_LinearMotionVector3" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (iDynTree::LinearMotionVector3 *)new iDynTree::LinearMotionVector3(arg1,arg2,arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__LinearMotionVector3, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_LinearMotionVector3__SWIG_2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double *arg1 = (double *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::LinearMotionVector3 *result = 0 ;
  
  if (!SWIG_check_num_args("new_LinearMotionVector3",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LinearMotionVector3" "', argument " "1"" of type '" "double const *""'"); 
  }
  arg1 = reinterpret_cast< double * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_LinearMotionVector3" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (iDynTree::LinearMotionVector3 *)new iDynTree::LinearMotionVector3((double const *)arg1,arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__LinearMotionVector3, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_LinearMotionVector3__SWIG_3(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinearMotionVector3 *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::LinearMotionVector3 *result = 0 ;
  
  if (!SWIG_check_num_args("new_LinearMotionVector3",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__LinearMotionVector3,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LinearMotionVector3" "', argument " "1"" of type '" "iDynTree::LinearMotionVector3 const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LinearMotionVector3" "', argument " "1"" of type '" "iDynTree::LinearMotionVector3 const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinearMotionVector3 * >(argp1);
  result = (iDynTree::LinearMotionVector3 *)new iDynTree::LinearMotionVector3((iDynTree::LinearMotionVector3 const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__LinearMotionVector3, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_LinearMotionVector3__SWIG_4(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Vector3 *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::LinearMotionVector3 *result = 0 ;
  
  if (!SWIG_check_num_args("new_LinearMotionVector3",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__VectorFixSizeT_3_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LinearMotionVector3" "', argument " "1"" of type '" "iDynTree::Vector3 const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LinearMotionVector3" "', argument " "1"" of type '" "iDynTree::Vector3 const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Vector3 * >(argp1);
  result = (iDynTree::LinearMotionVector3 *)new iDynTree::LinearMotionVector3((iDynTree::Vector3 const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__LinearMotionVector3, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_LinearMotionVector3(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_LinearMotionVector3__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__LinearMotionVector3, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_LinearMotionVector3__SWIG_3(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__VectorFixSizeT_3_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_LinearMotionVector3__SWIG_4(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_double, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_LinearMotionVector3__SWIG_2(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_LinearMotionVector3__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_LinearMotionVector3'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::LinearMotionVector3::LinearMotionVector3()\n"
    "    iDynTree::LinearMotionVector3::LinearMotionVector3(double const,double const,double const)\n"
    "    iDynTree::LinearMotionVector3::LinearMotionVector3(double const *,unsigned int const)\n"
    "    iDynTree::LinearMotionVector3::LinearMotionVector3(iDynTree::LinearMotionVector3 const &)\n"
    "    iDynTree::LinearMotionVector3::LinearMotionVector3(iDynTree::Vector3 const &)\n");
  return 1;
}


int _wrap_LinearMotionVector3_changePoint(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinearMotionVector3 *arg1 = (iDynTree::LinearMotionVector3 *) 0 ;
  iDynTree::Position *arg2 = 0 ;
  iDynTree::AngularMotionVector3 *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  mxArray * _out;
  iDynTree::LinearMotionVector3 result;
  
  if (!SWIG_check_num_args("LinearMotionVector3_changePoint",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinearMotionVector3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinearMotionVector3_changePoint" "', argument " "1"" of type '" "iDynTree::LinearMotionVector3 const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinearMotionVector3 * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Position,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LinearMotionVector3_changePoint" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinearMotionVector3_changePoint" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Position * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__AngularMotionVector3,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LinearMotionVector3_changePoint" "', argument " "3"" of type '" "iDynTree::AngularMotionVector3 const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinearMotionVector3_changePoint" "', argument " "3"" of type '" "iDynTree::AngularMotionVector3 const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::AngularMotionVector3 * >(argp3);
  result = ((iDynTree::LinearMotionVector3 const *)arg1)->changePoint((iDynTree::Position const &)*arg2,(iDynTree::AngularMotionVector3 const &)*arg3);
  _out = SWIG_NewPointerObj((new iDynTree::LinearMotionVector3(static_cast< const iDynTree::LinearMotionVector3& >(result))), SWIGTYPE_p_iDynTree__LinearMotionVector3, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_LinearMotionVector3(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinearMotionVector3 *arg1 = (iDynTree::LinearMotionVector3 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_LinearMotionVector3",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinearMotionVector3, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LinearMotionVector3" "', argument " "1"" of type '" "iDynTree::LinearMotionVector3 *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinearMotionVector3 * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_AngularMotionVector3Semantics__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::AngularMotionVector3Semantics *result = 0 ;
  
  if (!SWIG_check_num_args("new_AngularMotionVector3Semantics",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::AngularMotionVector3Semantics *)new iDynTree::AngularMotionVector3Semantics();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__AngularMotionVector3Semantics, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_AngularMotionVector3Semantics__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  iDynTree::AngularMotionVector3Semantics *result = 0 ;
  
  if (!SWIG_check_num_args("new_AngularMotionVector3Semantics",argc,3,3,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_AngularMotionVector3Semantics" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_AngularMotionVector3Semantics" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_AngularMotionVector3Semantics" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (iDynTree::AngularMotionVector3Semantics *)new iDynTree::AngularMotionVector3Semantics(arg1,arg2,arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__AngularMotionVector3Semantics, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_AngularMotionVector3Semantics__SWIG_2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::AngularMotionVector3Semantics *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::AngularMotionVector3Semantics *result = 0 ;
  
  if (!SWIG_check_num_args("new_AngularMotionVector3Semantics",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__AngularMotionVector3Semantics,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_AngularMotionVector3Semantics" "', argument " "1"" of type '" "iDynTree::AngularMotionVector3Semantics const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_AngularMotionVector3Semantics" "', argument " "1"" of type '" "iDynTree::AngularMotionVector3Semantics const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::AngularMotionVector3Semantics * >(argp1);
  result = (iDynTree::AngularMotionVector3Semantics *)new iDynTree::AngularMotionVector3Semantics((iDynTree::AngularMotionVector3Semantics const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__AngularMotionVector3Semantics, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_AngularMotionVector3Semantics(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_AngularMotionVector3Semantics__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__AngularMotionVector3Semantics, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_AngularMotionVector3Semantics__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_AngularMotionVector3Semantics__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_AngularMotionVector3Semantics'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::AngularMotionVector3Semantics::AngularMotionVector3Semantics()\n"
    "    iDynTree::AngularMotionVector3Semantics::AngularMotionVector3Semantics(int,int,int)\n"
    "    iDynTree::AngularMotionVector3Semantics::AngularMotionVector3Semantics(iDynTree::AngularMotionVector3Semantics const &)\n");
  return 1;
}


int _wrap_delete_AngularMotionVector3Semantics(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::AngularMotionVector3Semantics *arg1 = (iDynTree::AngularMotionVector3Semantics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_AngularMotionVector3Semantics",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__AngularMotionVector3Semantics, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_AngularMotionVector3Semantics" "', argument " "1"" of type '" "iDynTree::AngularMotionVector3Semantics *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::AngularMotionVector3Semantics * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_AngularMotionVector3__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::AngularMotionVector3 *result = 0 ;
  
  if (!SWIG_check_num_args("new_AngularMotionVector3",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::AngularMotionVector3 *)new iDynTree::AngularMotionVector3();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__AngularMotionVector3, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_AngularMotionVector3__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  iDynTree::AngularMotionVector3 *result = 0 ;
  
  if (!SWIG_check_num_args("new_AngularMotionVector3",argc,3,3,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_AngularMotionVector3" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_AngularMotionVector3" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_AngularMotionVector3" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (iDynTree::AngularMotionVector3 *)new iDynTree::AngularMotionVector3(arg1,arg2,arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__AngularMotionVector3, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_AngularMotionVector3__SWIG_2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double *arg1 = (double *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::AngularMotionVector3 *result = 0 ;
  
  if (!SWIG_check_num_args("new_AngularMotionVector3",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_AngularMotionVector3" "', argument " "1"" of type '" "double const *""'"); 
  }
  arg1 = reinterpret_cast< double * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_AngularMotionVector3" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (iDynTree::AngularMotionVector3 *)new iDynTree::AngularMotionVector3((double const *)arg1,arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__AngularMotionVector3, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_AngularMotionVector3__SWIG_3(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::AngularMotionVector3 *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::AngularMotionVector3 *result = 0 ;
  
  if (!SWIG_check_num_args("new_AngularMotionVector3",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__AngularMotionVector3,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_AngularMotionVector3" "', argument " "1"" of type '" "iDynTree::AngularMotionVector3 const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_AngularMotionVector3" "', argument " "1"" of type '" "iDynTree::AngularMotionVector3 const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::AngularMotionVector3 * >(argp1);
  result = (iDynTree::AngularMotionVector3 *)new iDynTree::AngularMotionVector3((iDynTree::AngularMotionVector3 const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__AngularMotionVector3, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_AngularMotionVector3__SWIG_4(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Vector3 *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::AngularMotionVector3 *result = 0 ;
  
  if (!SWIG_check_num_args("new_AngularMotionVector3",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__VectorFixSizeT_3_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_AngularMotionVector3" "', argument " "1"" of type '" "iDynTree::Vector3 const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_AngularMotionVector3" "', argument " "1"" of type '" "iDynTree::Vector3 const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Vector3 * >(argp1);
  result = (iDynTree::AngularMotionVector3 *)new iDynTree::AngularMotionVector3((iDynTree::Vector3 const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__AngularMotionVector3, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_AngularMotionVector3(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_AngularMotionVector3__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__AngularMotionVector3, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_AngularMotionVector3__SWIG_3(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__VectorFixSizeT_3_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_AngularMotionVector3__SWIG_4(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_double, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_AngularMotionVector3__SWIG_2(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_AngularMotionVector3__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_AngularMotionVector3'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::AngularMotionVector3::AngularMotionVector3()\n"
    "    iDynTree::AngularMotionVector3::AngularMotionVector3(double,double,double)\n"
    "    iDynTree::AngularMotionVector3::AngularMotionVector3(double const *,unsigned int const)\n"
    "    iDynTree::AngularMotionVector3::AngularMotionVector3(iDynTree::AngularMotionVector3 const &)\n"
    "    iDynTree::AngularMotionVector3::AngularMotionVector3(iDynTree::Vector3 const &)\n");
  return 1;
}


int _wrap_AngularMotionVector3_exp(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::AngularMotionVector3 *arg1 = (iDynTree::AngularMotionVector3 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Rotation result;
  
  if (!SWIG_check_num_args("AngularMotionVector3_exp",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__AngularMotionVector3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularMotionVector3_exp" "', argument " "1"" of type '" "iDynTree::AngularMotionVector3 const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::AngularMotionVector3 * >(argp1);
  result = ((iDynTree::AngularMotionVector3 const *)arg1)->exp();
  _out = SWIG_NewPointerObj((new iDynTree::Rotation(static_cast< const iDynTree::Rotation& >(result))), SWIGTYPE_p_iDynTree__Rotation, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_AngularMotionVector3(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::AngularMotionVector3 *arg1 = (iDynTree::AngularMotionVector3 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_AngularMotionVector3",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__AngularMotionVector3, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_AngularMotionVector3" "', argument " "1"" of type '" "iDynTree::AngularMotionVector3 *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::AngularMotionVector3 * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_LinearForceVector3Semantics__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::LinearForceVector3Semantics *result = 0 ;
  
  if (!SWIG_check_num_args("new_LinearForceVector3Semantics",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::LinearForceVector3Semantics *)new iDynTree::LinearForceVector3Semantics();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__LinearForceVector3Semantics, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_LinearForceVector3Semantics__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  iDynTree::LinearForceVector3Semantics *result = 0 ;
  
  if (!SWIG_check_num_args("new_LinearForceVector3Semantics",argc,3,3,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_LinearForceVector3Semantics" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_LinearForceVector3Semantics" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_LinearForceVector3Semantics" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (iDynTree::LinearForceVector3Semantics *)new iDynTree::LinearForceVector3Semantics(arg1,arg2,arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__LinearForceVector3Semantics, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_LinearForceVector3Semantics__SWIG_2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinearForceVector3Semantics *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::LinearForceVector3Semantics *result = 0 ;
  
  if (!SWIG_check_num_args("new_LinearForceVector3Semantics",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__LinearForceVector3Semantics,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LinearForceVector3Semantics" "', argument " "1"" of type '" "iDynTree::LinearForceVector3Semantics const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LinearForceVector3Semantics" "', argument " "1"" of type '" "iDynTree::LinearForceVector3Semantics const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinearForceVector3Semantics * >(argp1);
  result = (iDynTree::LinearForceVector3Semantics *)new iDynTree::LinearForceVector3Semantics((iDynTree::LinearForceVector3Semantics const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__LinearForceVector3Semantics, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_LinearForceVector3Semantics(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_LinearForceVector3Semantics__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__LinearForceVector3Semantics, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_LinearForceVector3Semantics__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_LinearForceVector3Semantics__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_LinearForceVector3Semantics'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::LinearForceVector3Semantics::LinearForceVector3Semantics()\n"
    "    iDynTree::LinearForceVector3Semantics::LinearForceVector3Semantics(int,int,int)\n"
    "    iDynTree::LinearForceVector3Semantics::LinearForceVector3Semantics(iDynTree::LinearForceVector3Semantics const &)\n");
  return 1;
}


int _wrap_delete_LinearForceVector3Semantics(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinearForceVector3Semantics *arg1 = (iDynTree::LinearForceVector3Semantics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_LinearForceVector3Semantics",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinearForceVector3Semantics, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LinearForceVector3Semantics" "', argument " "1"" of type '" "iDynTree::LinearForceVector3Semantics *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinearForceVector3Semantics * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_LinearForceVector3__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::LinearForceVector3 *result = 0 ;
  
  if (!SWIG_check_num_args("new_LinearForceVector3",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::LinearForceVector3 *)new iDynTree::LinearForceVector3();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__LinearForceVector3, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_LinearForceVector3__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  iDynTree::LinearForceVector3 *result = 0 ;
  
  if (!SWIG_check_num_args("new_LinearForceVector3",argc,3,3,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_LinearForceVector3" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_LinearForceVector3" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_LinearForceVector3" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (iDynTree::LinearForceVector3 *)new iDynTree::LinearForceVector3(arg1,arg2,arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__LinearForceVector3, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_LinearForceVector3__SWIG_2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double *arg1 = (double *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::LinearForceVector3 *result = 0 ;
  
  if (!SWIG_check_num_args("new_LinearForceVector3",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LinearForceVector3" "', argument " "1"" of type '" "double const *""'"); 
  }
  arg1 = reinterpret_cast< double * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_LinearForceVector3" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (iDynTree::LinearForceVector3 *)new iDynTree::LinearForceVector3((double const *)arg1,arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__LinearForceVector3, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_LinearForceVector3__SWIG_3(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinearForceVector3 *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::LinearForceVector3 *result = 0 ;
  
  if (!SWIG_check_num_args("new_LinearForceVector3",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__LinearForceVector3,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LinearForceVector3" "', argument " "1"" of type '" "iDynTree::LinearForceVector3 const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LinearForceVector3" "', argument " "1"" of type '" "iDynTree::LinearForceVector3 const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinearForceVector3 * >(argp1);
  result = (iDynTree::LinearForceVector3 *)new iDynTree::LinearForceVector3((iDynTree::LinearForceVector3 const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__LinearForceVector3, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_LinearForceVector3__SWIG_4(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Vector3 *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::LinearForceVector3 *result = 0 ;
  
  if (!SWIG_check_num_args("new_LinearForceVector3",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__VectorFixSizeT_3_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LinearForceVector3" "', argument " "1"" of type '" "iDynTree::Vector3 const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LinearForceVector3" "', argument " "1"" of type '" "iDynTree::Vector3 const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Vector3 * >(argp1);
  result = (iDynTree::LinearForceVector3 *)new iDynTree::LinearForceVector3((iDynTree::Vector3 const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__LinearForceVector3, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_LinearForceVector3(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_LinearForceVector3__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__LinearForceVector3, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_LinearForceVector3__SWIG_3(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__VectorFixSizeT_3_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_LinearForceVector3__SWIG_4(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_double, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_LinearForceVector3__SWIG_2(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_LinearForceVector3__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_LinearForceVector3'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::LinearForceVector3::LinearForceVector3()\n"
    "    iDynTree::LinearForceVector3::LinearForceVector3(double const,double const,double const)\n"
    "    iDynTree::LinearForceVector3::LinearForceVector3(double const *,unsigned int const)\n"
    "    iDynTree::LinearForceVector3::LinearForceVector3(iDynTree::LinearForceVector3 const &)\n"
    "    iDynTree::LinearForceVector3::LinearForceVector3(iDynTree::Vector3 const &)\n");
  return 1;
}


int _wrap_delete_LinearForceVector3(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinearForceVector3 *arg1 = (iDynTree::LinearForceVector3 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_LinearForceVector3",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinearForceVector3, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LinearForceVector3" "', argument " "1"" of type '" "iDynTree::LinearForceVector3 *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinearForceVector3 * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_AngularForceVector3Semantics__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::AngularForceVector3Semantics *result = 0 ;
  
  if (!SWIG_check_num_args("new_AngularForceVector3Semantics",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::AngularForceVector3Semantics *)new iDynTree::AngularForceVector3Semantics();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__AngularForceVector3Semantics, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_AngularForceVector3Semantics__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  mxArray * _out;
  iDynTree::AngularForceVector3Semantics *result = 0 ;
  
  if (!SWIG_check_num_args("new_AngularForceVector3Semantics",argc,4,4,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_AngularForceVector3Semantics" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_AngularForceVector3Semantics" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_AngularForceVector3Semantics" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_AngularForceVector3Semantics" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  result = (iDynTree::AngularForceVector3Semantics *)new iDynTree::AngularForceVector3Semantics(arg1,arg2,arg3,arg4);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__AngularForceVector3Semantics, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_AngularForceVector3Semantics__SWIG_2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::AngularForceVector3Semantics *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::AngularForceVector3Semantics *result = 0 ;
  
  if (!SWIG_check_num_args("new_AngularForceVector3Semantics",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__AngularForceVector3Semantics,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_AngularForceVector3Semantics" "', argument " "1"" of type '" "iDynTree::AngularForceVector3Semantics const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_AngularForceVector3Semantics" "', argument " "1"" of type '" "iDynTree::AngularForceVector3Semantics const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::AngularForceVector3Semantics * >(argp1);
  result = (iDynTree::AngularForceVector3Semantics *)new iDynTree::AngularForceVector3Semantics((iDynTree::AngularForceVector3Semantics const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__AngularForceVector3Semantics, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_AngularForceVector3Semantics(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_AngularForceVector3Semantics__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__AngularForceVector3Semantics, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_AngularForceVector3Semantics__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_AngularForceVector3Semantics__SWIG_1(resc,resv,argc,argv);
          }
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_AngularForceVector3Semantics'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::AngularForceVector3Semantics::AngularForceVector3Semantics()\n"
    "    iDynTree::AngularForceVector3Semantics::AngularForceVector3Semantics(int,int,int,int)\n"
    "    iDynTree::AngularForceVector3Semantics::AngularForceVector3Semantics(iDynTree::AngularForceVector3Semantics const &)\n");
  return 1;
}


int _wrap_AngularForceVector3Semantics_changePoint(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::AngularForceVector3Semantics *arg1 = (iDynTree::AngularForceVector3Semantics *) 0 ;
  iDynTree::PositionSemantics *arg2 = 0 ;
  iDynTree::LinearForceVector3Semantics *arg3 = 0 ;
  iDynTree::AngularForceVector3Semantics *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("AngularForceVector3Semantics_changePoint",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__AngularForceVector3Semantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularForceVector3Semantics_changePoint" "', argument " "1"" of type '" "iDynTree::AngularForceVector3Semantics const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::AngularForceVector3Semantics * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__PositionSemantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AngularForceVector3Semantics_changePoint" "', argument " "2"" of type '" "iDynTree::PositionSemantics const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularForceVector3Semantics_changePoint" "', argument " "2"" of type '" "iDynTree::PositionSemantics const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::PositionSemantics * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__LinearForceVector3Semantics,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AngularForceVector3Semantics_changePoint" "', argument " "3"" of type '" "iDynTree::LinearForceVector3Semantics const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularForceVector3Semantics_changePoint" "', argument " "3"" of type '" "iDynTree::LinearForceVector3Semantics const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::LinearForceVector3Semantics * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__AngularForceVector3Semantics,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "AngularForceVector3Semantics_changePoint" "', argument " "4"" of type '" "iDynTree::AngularForceVector3Semantics &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularForceVector3Semantics_changePoint" "', argument " "4"" of type '" "iDynTree::AngularForceVector3Semantics &""'"); 
  }
  arg4 = reinterpret_cast< iDynTree::AngularForceVector3Semantics * >(argp4);
  result = (bool)((iDynTree::AngularForceVector3Semantics const *)arg1)->changePoint((iDynTree::PositionSemantics const &)*arg2,(iDynTree::LinearForceVector3Semantics const &)*arg3,*arg4);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AngularForceVector3Semantics_compose(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::AngularForceVector3Semantics *arg1 = 0 ;
  iDynTree::AngularForceVector3Semantics *arg2 = 0 ;
  iDynTree::AngularForceVector3Semantics *arg3 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("AngularForceVector3Semantics_compose",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__AngularForceVector3Semantics,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularForceVector3Semantics_compose" "', argument " "1"" of type '" "iDynTree::AngularForceVector3Semantics const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularForceVector3Semantics_compose" "', argument " "1"" of type '" "iDynTree::AngularForceVector3Semantics const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::AngularForceVector3Semantics * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__AngularForceVector3Semantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AngularForceVector3Semantics_compose" "', argument " "2"" of type '" "iDynTree::AngularForceVector3Semantics const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularForceVector3Semantics_compose" "', argument " "2"" of type '" "iDynTree::AngularForceVector3Semantics const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::AngularForceVector3Semantics * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__AngularForceVector3Semantics,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AngularForceVector3Semantics_compose" "', argument " "3"" of type '" "iDynTree::AngularForceVector3Semantics &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularForceVector3Semantics_compose" "', argument " "3"" of type '" "iDynTree::AngularForceVector3Semantics &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::AngularForceVector3Semantics * >(argp3);
  result = (bool)iDynTree::AngularForceVector3Semantics::compose((iDynTree::AngularForceVector3Semantics const &)*arg1,(iDynTree::AngularForceVector3Semantics const &)*arg2,*arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_AngularForceVector3Semantics(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::AngularForceVector3Semantics *arg1 = (iDynTree::AngularForceVector3Semantics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_AngularForceVector3Semantics",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__AngularForceVector3Semantics, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_AngularForceVector3Semantics" "', argument " "1"" of type '" "iDynTree::AngularForceVector3Semantics *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::AngularForceVector3Semantics * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_AngularForceVector3__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::AngularForceVector3 *result = 0 ;
  
  if (!SWIG_check_num_args("new_AngularForceVector3",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::AngularForceVector3 *)new iDynTree::AngularForceVector3();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__AngularForceVector3, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_AngularForceVector3__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  iDynTree::AngularForceVector3 *result = 0 ;
  
  if (!SWIG_check_num_args("new_AngularForceVector3",argc,3,3,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_AngularForceVector3" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_AngularForceVector3" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_AngularForceVector3" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (iDynTree::AngularForceVector3 *)new iDynTree::AngularForceVector3(arg1,arg2,arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__AngularForceVector3, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_AngularForceVector3__SWIG_2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double *arg1 = (double *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::AngularForceVector3 *result = 0 ;
  
  if (!SWIG_check_num_args("new_AngularForceVector3",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_AngularForceVector3" "', argument " "1"" of type '" "double const *""'"); 
  }
  arg1 = reinterpret_cast< double * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_AngularForceVector3" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (iDynTree::AngularForceVector3 *)new iDynTree::AngularForceVector3((double const *)arg1,arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__AngularForceVector3, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_AngularForceVector3__SWIG_3(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::AngularForceVector3 *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::AngularForceVector3 *result = 0 ;
  
  if (!SWIG_check_num_args("new_AngularForceVector3",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__AngularForceVector3,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_AngularForceVector3" "', argument " "1"" of type '" "iDynTree::AngularForceVector3 const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_AngularForceVector3" "', argument " "1"" of type '" "iDynTree::AngularForceVector3 const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::AngularForceVector3 * >(argp1);
  result = (iDynTree::AngularForceVector3 *)new iDynTree::AngularForceVector3((iDynTree::AngularForceVector3 const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__AngularForceVector3, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_AngularForceVector3__SWIG_4(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Vector3 *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::AngularForceVector3 *result = 0 ;
  
  if (!SWIG_check_num_args("new_AngularForceVector3",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__VectorFixSizeT_3_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_AngularForceVector3" "', argument " "1"" of type '" "iDynTree::Vector3 const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_AngularForceVector3" "', argument " "1"" of type '" "iDynTree::Vector3 const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Vector3 * >(argp1);
  result = (iDynTree::AngularForceVector3 *)new iDynTree::AngularForceVector3((iDynTree::Vector3 const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__AngularForceVector3, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_AngularForceVector3(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_AngularForceVector3__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__AngularForceVector3, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_AngularForceVector3__SWIG_3(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__VectorFixSizeT_3_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_AngularForceVector3__SWIG_4(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_double, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_AngularForceVector3__SWIG_2(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_AngularForceVector3__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_AngularForceVector3'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::AngularForceVector3::AngularForceVector3()\n"
    "    iDynTree::AngularForceVector3::AngularForceVector3(double const,double const,double const)\n"
    "    iDynTree::AngularForceVector3::AngularForceVector3(double const *,unsigned int const)\n"
    "    iDynTree::AngularForceVector3::AngularForceVector3(iDynTree::AngularForceVector3 const &)\n"
    "    iDynTree::AngularForceVector3::AngularForceVector3(iDynTree::Vector3 const &)\n");
  return 1;
}


int _wrap_AngularForceVector3_changePoint(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::AngularForceVector3 *arg1 = (iDynTree::AngularForceVector3 *) 0 ;
  iDynTree::Position *arg2 = 0 ;
  iDynTree::LinearForceVector3 *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  mxArray * _out;
  iDynTree::AngularForceVector3 result;
  
  if (!SWIG_check_num_args("AngularForceVector3_changePoint",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__AngularForceVector3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularForceVector3_changePoint" "', argument " "1"" of type '" "iDynTree::AngularForceVector3 const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::AngularForceVector3 * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Position,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AngularForceVector3_changePoint" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularForceVector3_changePoint" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Position * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__LinearForceVector3,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AngularForceVector3_changePoint" "', argument " "3"" of type '" "iDynTree::LinearForceVector3 const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularForceVector3_changePoint" "', argument " "3"" of type '" "iDynTree::LinearForceVector3 const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::LinearForceVector3 * >(argp3);
  result = ((iDynTree::AngularForceVector3 const *)arg1)->changePoint((iDynTree::Position const &)*arg2,(iDynTree::LinearForceVector3 const &)*arg3);
  _out = SWIG_NewPointerObj((new iDynTree::AngularForceVector3(static_cast< const iDynTree::AngularForceVector3& >(result))), SWIGTYPE_p_iDynTree__AngularForceVector3, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_AngularForceVector3(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::AngularForceVector3 *arg1 = (iDynTree::AngularForceVector3 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_AngularForceVector3",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__AngularForceVector3, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_AngularForceVector3" "', argument " "1"" of type '" "iDynTree::AngularForceVector3 *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::AngularForceVector3 * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SpatialMotionVectorSemanticsBase(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinearMotionVector3Semantics *arg1 = 0 ;
  iDynTree::AngularMotionVector3Semantics *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialVectorSemantics< iDynTree::LinearMotionVector3Semantics,iDynTree::AngularMotionVector3Semantics > *result = 0 ;
  
  if (!SWIG_check_num_args("new_SpatialMotionVectorSemanticsBase",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__LinearMotionVector3Semantics,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SpatialMotionVectorSemanticsBase" "', argument " "1"" of type '" "iDynTree::LinearMotionVector3Semantics &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpatialMotionVectorSemanticsBase" "', argument " "1"" of type '" "iDynTree::LinearMotionVector3Semantics &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinearMotionVector3Semantics * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__AngularMotionVector3Semantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_SpatialMotionVectorSemanticsBase" "', argument " "2"" of type '" "iDynTree::AngularMotionVector3Semantics &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpatialMotionVectorSemanticsBase" "', argument " "2"" of type '" "iDynTree::AngularMotionVector3Semantics &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::AngularMotionVector3Semantics * >(argp2);
  result = (iDynTree::SpatialVectorSemantics< iDynTree::LinearMotionVector3Semantics,iDynTree::AngularMotionVector3Semantics > *)new iDynTree::SpatialVectorSemantics< iDynTree::LinearMotionVector3Semantics,iDynTree::AngularMotionVector3Semantics >(*arg1,*arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SpatialVectorSemanticsT_iDynTree__LinearMotionVector3Semantics_iDynTree__AngularMotionVector3Semantics_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialMotionVectorSemanticsBase_check_linear2angularConsistency(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVectorSemantics< iDynTree::LinearMotionVector3Semantics,iDynTree::AngularMotionVector3Semantics > *arg1 = (iDynTree::SpatialVectorSemantics< iDynTree::LinearMotionVector3Semantics,iDynTree::AngularMotionVector3Semantics > *) 0 ;
  iDynTree::LinearMotionVector3Semantics *arg2 = 0 ;
  iDynTree::AngularMotionVector3Semantics *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("SpatialMotionVectorSemanticsBase_check_linear2angularConsistency",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorSemanticsT_iDynTree__LinearMotionVector3Semantics_iDynTree__AngularMotionVector3Semantics_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialMotionVectorSemanticsBase_check_linear2angularConsistency" "', argument " "1"" of type '" "iDynTree::SpatialVectorSemantics< iDynTree::LinearMotionVector3Semantics,iDynTree::AngularMotionVector3Semantics > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVectorSemantics< iDynTree::LinearMotionVector3Semantics,iDynTree::AngularMotionVector3Semantics > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__LinearMotionVector3Semantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpatialMotionVectorSemanticsBase_check_linear2angularConsistency" "', argument " "2"" of type '" "iDynTree::LinearMotionVector3Semantics const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialMotionVectorSemanticsBase_check_linear2angularConsistency" "', argument " "2"" of type '" "iDynTree::LinearMotionVector3Semantics const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::LinearMotionVector3Semantics * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__AngularMotionVector3Semantics,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SpatialMotionVectorSemanticsBase_check_linear2angularConsistency" "', argument " "3"" of type '" "iDynTree::AngularMotionVector3Semantics const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialMotionVectorSemanticsBase_check_linear2angularConsistency" "', argument " "3"" of type '" "iDynTree::AngularMotionVector3Semantics const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::AngularMotionVector3Semantics * >(argp3);
  result = (bool)(arg1)->check_linear2angularConsistency((iDynTree::LinearMotionVector3Semantics const &)*arg2,(iDynTree::AngularMotionVector3Semantics const &)*arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialMotionVectorSemanticsBase_toString(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVectorSemantics< iDynTree::LinearMotionVector3Semantics,iDynTree::AngularMotionVector3Semantics > *arg1 = (iDynTree::SpatialVectorSemantics< iDynTree::LinearMotionVector3Semantics,iDynTree::AngularMotionVector3Semantics > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("SpatialMotionVectorSemanticsBase_toString",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorSemanticsT_iDynTree__LinearMotionVector3Semantics_iDynTree__AngularMotionVector3Semantics_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialMotionVectorSemanticsBase_toString" "', argument " "1"" of type '" "iDynTree::SpatialVectorSemantics< iDynTree::LinearMotionVector3Semantics,iDynTree::AngularMotionVector3Semantics > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVectorSemantics< iDynTree::LinearMotionVector3Semantics,iDynTree::AngularMotionVector3Semantics > * >(argp1);
  result = ((iDynTree::SpatialVectorSemantics< iDynTree::LinearMotionVector3Semantics,iDynTree::AngularMotionVector3Semantics > const *)arg1)->toString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialMotionVectorSemanticsBase_display(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVectorSemantics< iDynTree::LinearMotionVector3Semantics,iDynTree::AngularMotionVector3Semantics > *arg1 = (iDynTree::SpatialVectorSemantics< iDynTree::LinearMotionVector3Semantics,iDynTree::AngularMotionVector3Semantics > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("SpatialMotionVectorSemanticsBase_display",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorSemanticsT_iDynTree__LinearMotionVector3Semantics_iDynTree__AngularMotionVector3Semantics_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialMotionVectorSemanticsBase_display" "', argument " "1"" of type '" "iDynTree::SpatialVectorSemantics< iDynTree::LinearMotionVector3Semantics,iDynTree::AngularMotionVector3Semantics > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVectorSemantics< iDynTree::LinearMotionVector3Semantics,iDynTree::AngularMotionVector3Semantics > * >(argp1);
  result = ((iDynTree::SpatialVectorSemantics< iDynTree::LinearMotionVector3Semantics,iDynTree::AngularMotionVector3Semantics > const *)arg1)->reservedToString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_SpatialMotionVectorSemanticsBase(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVectorSemantics< iDynTree::LinearMotionVector3Semantics,iDynTree::AngularMotionVector3Semantics > *arg1 = (iDynTree::SpatialVectorSemantics< iDynTree::LinearMotionVector3Semantics,iDynTree::AngularMotionVector3Semantics > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_SpatialMotionVectorSemanticsBase",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorSemanticsT_iDynTree__LinearMotionVector3Semantics_iDynTree__AngularMotionVector3Semantics_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SpatialMotionVectorSemanticsBase" "', argument " "1"" of type '" "iDynTree::SpatialVectorSemantics< iDynTree::LinearMotionVector3Semantics,iDynTree::AngularMotionVector3Semantics > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVectorSemantics< iDynTree::LinearMotionVector3Semantics,iDynTree::AngularMotionVector3Semantics > * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SpatialForceVectorSemanticsBase(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinearForceVector3Semantics *arg1 = 0 ;
  iDynTree::AngularForceVector3Semantics *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialVectorSemantics< iDynTree::LinearForceVector3Semantics,iDynTree::AngularForceVector3Semantics > *result = 0 ;
  
  if (!SWIG_check_num_args("new_SpatialForceVectorSemanticsBase",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__LinearForceVector3Semantics,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SpatialForceVectorSemanticsBase" "', argument " "1"" of type '" "iDynTree::LinearForceVector3Semantics &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpatialForceVectorSemanticsBase" "', argument " "1"" of type '" "iDynTree::LinearForceVector3Semantics &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinearForceVector3Semantics * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__AngularForceVector3Semantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_SpatialForceVectorSemanticsBase" "', argument " "2"" of type '" "iDynTree::AngularForceVector3Semantics &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpatialForceVectorSemanticsBase" "', argument " "2"" of type '" "iDynTree::AngularForceVector3Semantics &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::AngularForceVector3Semantics * >(argp2);
  result = (iDynTree::SpatialVectorSemantics< iDynTree::LinearForceVector3Semantics,iDynTree::AngularForceVector3Semantics > *)new iDynTree::SpatialVectorSemantics< iDynTree::LinearForceVector3Semantics,iDynTree::AngularForceVector3Semantics >(*arg1,*arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SpatialVectorSemanticsT_iDynTree__LinearForceVector3Semantics_iDynTree__AngularForceVector3Semantics_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialForceVectorSemanticsBase_check_linear2angularConsistency(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVectorSemantics< iDynTree::LinearForceVector3Semantics,iDynTree::AngularForceVector3Semantics > *arg1 = (iDynTree::SpatialVectorSemantics< iDynTree::LinearForceVector3Semantics,iDynTree::AngularForceVector3Semantics > *) 0 ;
  iDynTree::LinearForceVector3Semantics *arg2 = 0 ;
  iDynTree::AngularForceVector3Semantics *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("SpatialForceVectorSemanticsBase_check_linear2angularConsistency",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorSemanticsT_iDynTree__LinearForceVector3Semantics_iDynTree__AngularForceVector3Semantics_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialForceVectorSemanticsBase_check_linear2angularConsistency" "', argument " "1"" of type '" "iDynTree::SpatialVectorSemantics< iDynTree::LinearForceVector3Semantics,iDynTree::AngularForceVector3Semantics > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVectorSemantics< iDynTree::LinearForceVector3Semantics,iDynTree::AngularForceVector3Semantics > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__LinearForceVector3Semantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpatialForceVectorSemanticsBase_check_linear2angularConsistency" "', argument " "2"" of type '" "iDynTree::LinearForceVector3Semantics const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialForceVectorSemanticsBase_check_linear2angularConsistency" "', argument " "2"" of type '" "iDynTree::LinearForceVector3Semantics const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::LinearForceVector3Semantics * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__AngularForceVector3Semantics,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SpatialForceVectorSemanticsBase_check_linear2angularConsistency" "', argument " "3"" of type '" "iDynTree::AngularForceVector3Semantics const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialForceVectorSemanticsBase_check_linear2angularConsistency" "', argument " "3"" of type '" "iDynTree::AngularForceVector3Semantics const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::AngularForceVector3Semantics * >(argp3);
  result = (bool)(arg1)->check_linear2angularConsistency((iDynTree::LinearForceVector3Semantics const &)*arg2,(iDynTree::AngularForceVector3Semantics const &)*arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialForceVectorSemanticsBase_toString(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVectorSemantics< iDynTree::LinearForceVector3Semantics,iDynTree::AngularForceVector3Semantics > *arg1 = (iDynTree::SpatialVectorSemantics< iDynTree::LinearForceVector3Semantics,iDynTree::AngularForceVector3Semantics > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("SpatialForceVectorSemanticsBase_toString",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorSemanticsT_iDynTree__LinearForceVector3Semantics_iDynTree__AngularForceVector3Semantics_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialForceVectorSemanticsBase_toString" "', argument " "1"" of type '" "iDynTree::SpatialVectorSemantics< iDynTree::LinearForceVector3Semantics,iDynTree::AngularForceVector3Semantics > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVectorSemantics< iDynTree::LinearForceVector3Semantics,iDynTree::AngularForceVector3Semantics > * >(argp1);
  result = ((iDynTree::SpatialVectorSemantics< iDynTree::LinearForceVector3Semantics,iDynTree::AngularForceVector3Semantics > const *)arg1)->toString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialForceVectorSemanticsBase_display(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVectorSemantics< iDynTree::LinearForceVector3Semantics,iDynTree::AngularForceVector3Semantics > *arg1 = (iDynTree::SpatialVectorSemantics< iDynTree::LinearForceVector3Semantics,iDynTree::AngularForceVector3Semantics > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("SpatialForceVectorSemanticsBase_display",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorSemanticsT_iDynTree__LinearForceVector3Semantics_iDynTree__AngularForceVector3Semantics_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialForceVectorSemanticsBase_display" "', argument " "1"" of type '" "iDynTree::SpatialVectorSemantics< iDynTree::LinearForceVector3Semantics,iDynTree::AngularForceVector3Semantics > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVectorSemantics< iDynTree::LinearForceVector3Semantics,iDynTree::AngularForceVector3Semantics > * >(argp1);
  result = ((iDynTree::SpatialVectorSemantics< iDynTree::LinearForceVector3Semantics,iDynTree::AngularForceVector3Semantics > const *)arg1)->reservedToString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_SpatialForceVectorSemanticsBase(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVectorSemantics< iDynTree::LinearForceVector3Semantics,iDynTree::AngularForceVector3Semantics > *arg1 = (iDynTree::SpatialVectorSemantics< iDynTree::LinearForceVector3Semantics,iDynTree::AngularForceVector3Semantics > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_SpatialForceVectorSemanticsBase",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorSemanticsT_iDynTree__LinearForceVector3Semantics_iDynTree__AngularForceVector3Semantics_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SpatialForceVectorSemanticsBase" "', argument " "1"" of type '" "iDynTree::SpatialVectorSemantics< iDynTree::LinearForceVector3Semantics,iDynTree::AngularForceVector3Semantics > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVectorSemantics< iDynTree::LinearForceVector3Semantics,iDynTree::AngularForceVector3Semantics > * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SpatialMotionVectorBase__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *result = 0 ;
  
  if (!SWIG_check_num_args("new_SpatialMotionVectorBase",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *)new iDynTree::SpatialVector< iDynTree::SpatialMotionVector >();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialMotionVector_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SpatialMotionVectorBase__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVector< iDynTree::SpatialMotionVector >::LinearVector3T *arg1 = 0 ;
  iDynTree::SpatialVector< iDynTree::SpatialMotionVector >::AngularVector3T *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *result = 0 ;
  
  if (!SWIG_check_num_args("new_SpatialMotionVectorBase",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__LinearMotionVector3,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SpatialMotionVectorBase" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialMotionVector >::LinearVector3T const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpatialMotionVectorBase" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialMotionVector >::LinearVector3T const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialMotionVector >::LinearVector3T * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__AngularMotionVector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_SpatialMotionVectorBase" "', argument " "2"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialMotionVector >::AngularVector3T const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpatialMotionVectorBase" "', argument " "2"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialMotionVector >::AngularVector3T const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialMotionVector >::AngularVector3T * >(argp2);
  result = (iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *)new iDynTree::SpatialVector< iDynTree::SpatialMotionVector >((iDynTree::SpatialVector< iDynTree::SpatialMotionVector >::LinearVector3T const &)*arg1,(iDynTree::SpatialVector< iDynTree::SpatialMotionVector >::AngularVector3T const &)*arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialMotionVector_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SpatialMotionVectorBase__SWIG_2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *result = 0 ;
  
  if (!SWIG_check_num_args("new_SpatialMotionVectorBase",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialMotionVector_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SpatialMotionVectorBase" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialMotionVector > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpatialMotionVectorBase" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialMotionVector > const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialMotionVector > * >(argp1);
  result = (iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *)new iDynTree::SpatialVector< iDynTree::SpatialMotionVector >((iDynTree::SpatialVector< iDynTree::SpatialMotionVector > const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialMotionVector_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SpatialMotionVectorBase(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_SpatialMotionVectorBase__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialMotionVector_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SpatialMotionVectorBase__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__LinearMotionVector3, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__AngularMotionVector3, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_SpatialMotionVectorBase__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_SpatialMotionVectorBase'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::SpatialVector< iDynTree::SpatialMotionVector >::SpatialVector()\n"
    "    iDynTree::SpatialVector< iDynTree::SpatialMotionVector >::SpatialVector(iDynTree::SpatialVector< iDynTree::SpatialMotionVector >::LinearVector3T const &,iDynTree::SpatialVector< iDynTree::SpatialMotionVector >::AngularVector3T const &)\n"
    "    iDynTree::SpatialVector< iDynTree::SpatialMotionVector >::SpatialVector(iDynTree::SpatialVector< iDynTree::SpatialMotionVector > const &)\n");
  return 1;
}


int _wrap_SpatialMotionVectorBase_getLinearVec3(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *arg1 = (iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::SpatialVector< iDynTree::SpatialMotionVector >::LinearVector3T *result = 0 ;
  
  if (!SWIG_check_num_args("SpatialMotionVectorBase_getLinearVec3",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialMotionVector_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialMotionVectorBase_getLinearVec3" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialMotionVector > * >(argp1);
  result = (iDynTree::SpatialVector< iDynTree::SpatialMotionVector >::LinearVector3T *) &(arg1)->getLinearVec3();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__LinearMotionVector3, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialMotionVectorBase_getAngularVec3(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *arg1 = (iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::SpatialVector< iDynTree::SpatialMotionVector >::AngularVector3T *result = 0 ;
  
  if (!SWIG_check_num_args("SpatialMotionVectorBase_getAngularVec3",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialMotionVector_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialMotionVectorBase_getAngularVec3" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialMotionVector > * >(argp1);
  result = (iDynTree::SpatialVector< iDynTree::SpatialMotionVector >::AngularVector3T *) &(arg1)->getAngularVec3();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__AngularMotionVector3, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialMotionVectorBase_setLinearVec3(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *arg1 = (iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *) 0 ;
  iDynTree::SpatialVector< iDynTree::SpatialMotionVector >::LinearVector3T *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("SpatialMotionVectorBase_setLinearVec3",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialMotionVector_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialMotionVectorBase_setLinearVec3" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialMotionVector > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__LinearMotionVector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpatialMotionVectorBase_setLinearVec3" "', argument " "2"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialMotionVector >::LinearVector3T const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialMotionVectorBase_setLinearVec3" "', argument " "2"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialMotionVector >::LinearVector3T const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialMotionVector >::LinearVector3T * >(argp2);
  (arg1)->setLinearVec3((iDynTree::SpatialVector< iDynTree::SpatialMotionVector >::LinearVector3T const &)*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialMotionVectorBase_setAngularVec3(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *arg1 = (iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *) 0 ;
  iDynTree::SpatialVector< iDynTree::SpatialMotionVector >::AngularVector3T *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("SpatialMotionVectorBase_setAngularVec3",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialMotionVector_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialMotionVectorBase_setAngularVec3" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialMotionVector > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__AngularMotionVector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpatialMotionVectorBase_setAngularVec3" "', argument " "2"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialMotionVector >::AngularVector3T const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialMotionVectorBase_setAngularVec3" "', argument " "2"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialMotionVector >::AngularVector3T const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialMotionVector >::AngularVector3T * >(argp2);
  (arg1)->setAngularVec3((iDynTree::SpatialVector< iDynTree::SpatialMotionVector >::AngularVector3T const &)*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialMotionVectorBase_paren(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *arg1 = (iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  double *result = 0 ;
  
  if (!SWIG_check_num_args("SpatialMotionVectorBase_paren",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialMotionVector_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialMotionVectorBase_paren" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialMotionVector > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SpatialMotionVectorBase_paren" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (double *) &(arg1)->operator ()(arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialMotionVectorBase_getVal(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *arg1 = (iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("SpatialMotionVectorBase_getVal",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialMotionVector_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialMotionVectorBase_getVal" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialMotionVector > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialMotionVector > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SpatialMotionVectorBase_getVal" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (double)((iDynTree::SpatialVector< iDynTree::SpatialMotionVector > const *)arg1)->getVal(arg2);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialMotionVectorBase_setVal(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *arg1 = (iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *) 0 ;
  unsigned int arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("SpatialMotionVectorBase_setVal",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialMotionVector_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialMotionVectorBase_setVal" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialMotionVector > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SpatialMotionVectorBase_setVal" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SpatialMotionVectorBase_setVal" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (bool)(arg1)->setVal(arg2,arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialMotionVectorBase_size(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *arg1 = (iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("SpatialMotionVectorBase_size",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialMotionVector_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialMotionVectorBase_size" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialMotionVector > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialMotionVector > * >(argp1);
  result = (unsigned int)((iDynTree::SpatialVector< iDynTree::SpatialMotionVector > const *)arg1)->size();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialMotionVectorBase_zero(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *arg1 = (iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("SpatialMotionVectorBase_zero",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialMotionVector_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialMotionVectorBase_zero" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialMotionVector > * >(argp1);
  (arg1)->zero();
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialMotionVectorBase_changePoint(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *arg1 = (iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *) 0 ;
  iDynTree::Position *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialMotionVector result;
  
  if (!SWIG_check_num_args("SpatialMotionVectorBase_changePoint",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialMotionVector_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialMotionVectorBase_changePoint" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialMotionVector > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Position,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpatialMotionVectorBase_changePoint" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialMotionVectorBase_changePoint" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Position * >(argp2);
  result = (arg1)->changePoint((iDynTree::Position const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialMotionVector(static_cast< const iDynTree::SpatialMotionVector& >(result))), SWIGTYPE_p_iDynTree__SpatialMotionVector, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialMotionVectorBase_changeCoordFrame(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *arg1 = (iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *) 0 ;
  iDynTree::Rotation *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialMotionVector result;
  
  if (!SWIG_check_num_args("SpatialMotionVectorBase_changeCoordFrame",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialMotionVector_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialMotionVectorBase_changeCoordFrame" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialMotionVector > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Rotation,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpatialMotionVectorBase_changeCoordFrame" "', argument " "2"" of type '" "iDynTree::Rotation const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialMotionVectorBase_changeCoordFrame" "', argument " "2"" of type '" "iDynTree::Rotation const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Rotation * >(argp2);
  result = (arg1)->changeCoordFrame((iDynTree::Rotation const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialMotionVector(static_cast< const iDynTree::SpatialMotionVector& >(result))), SWIGTYPE_p_iDynTree__SpatialMotionVector, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialMotionVectorBase_compose(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialMotionVector *arg1 = 0 ;
  iDynTree::SpatialMotionVector *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialMotionVector result;
  
  if (!SWIG_check_num_args("SpatialMotionVectorBase_compose",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__SpatialMotionVector,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialMotionVectorBase_compose" "', argument " "1"" of type '" "iDynTree::SpatialMotionVector const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialMotionVectorBase_compose" "', argument " "1"" of type '" "iDynTree::SpatialMotionVector const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialMotionVector * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialMotionVector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpatialMotionVectorBase_compose" "', argument " "2"" of type '" "iDynTree::SpatialMotionVector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialMotionVectorBase_compose" "', argument " "2"" of type '" "iDynTree::SpatialMotionVector const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialMotionVector * >(argp2);
  result = iDynTree::SpatialVector< iDynTree::SpatialMotionVector >::SWIGTEMPLATEDISAMBIGUATOR compose((iDynTree::SpatialMotionVector const &)*arg1,(iDynTree::SpatialMotionVector const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialMotionVector(static_cast< const iDynTree::SpatialMotionVector& >(result))), SWIGTYPE_p_iDynTree__SpatialMotionVector, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialMotionVectorBase_inverse(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialMotionVector *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::SpatialMotionVector result;
  
  if (!SWIG_check_num_args("SpatialMotionVectorBase_inverse",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__SpatialMotionVector,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialMotionVectorBase_inverse" "', argument " "1"" of type '" "iDynTree::SpatialMotionVector const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialMotionVectorBase_inverse" "', argument " "1"" of type '" "iDynTree::SpatialMotionVector const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialMotionVector * >(argp1);
  result = iDynTree::SpatialVector< iDynTree::SpatialMotionVector >::SWIGTEMPLATEDISAMBIGUATOR inverse((iDynTree::SpatialMotionVector const &)*arg1);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialMotionVector(static_cast< const iDynTree::SpatialMotionVector& >(result))), SWIGTYPE_p_iDynTree__SpatialMotionVector, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialMotionVectorBase_dot(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *arg1 = (iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *) 0 ;
  iDynTree::SpatialVector< iDynTree::SpatialMotionVector >::DualVectorT *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("SpatialMotionVectorBase_dot",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialMotionVector_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialMotionVectorBase_dot" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialMotionVector > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialMotionVector > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialForceVector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpatialMotionVectorBase_dot" "', argument " "2"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialMotionVector >::DualVectorT const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialMotionVectorBase_dot" "', argument " "2"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialMotionVector >::DualVectorT const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialMotionVector >::DualVectorT * >(argp2);
  result = (double)((iDynTree::SpatialVector< iDynTree::SpatialMotionVector > const *)arg1)->dot((iDynTree::SpatialVector< iDynTree::SpatialMotionVector >::DualVectorT const &)*arg2);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialMotionVectorBase_plus(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *arg1 = (iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *) 0 ;
  iDynTree::SpatialMotionVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialMotionVector result;
  
  if (!SWIG_check_num_args("SpatialMotionVectorBase_plus",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialMotionVector_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialMotionVectorBase_plus" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialMotionVector > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialMotionVector > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialMotionVector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpatialMotionVectorBase_plus" "', argument " "2"" of type '" "iDynTree::SpatialMotionVector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialMotionVectorBase_plus" "', argument " "2"" of type '" "iDynTree::SpatialMotionVector const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialMotionVector * >(argp2);
  result = ((iDynTree::SpatialVector< iDynTree::SpatialMotionVector > const *)arg1)->operator +((iDynTree::SpatialMotionVector const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialMotionVector(static_cast< const iDynTree::SpatialMotionVector& >(result))), SWIGTYPE_p_iDynTree__SpatialMotionVector, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialMotionVectorBase_minus(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *arg1 = (iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *) 0 ;
  iDynTree::SpatialMotionVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialMotionVector result;
  
  if (!SWIG_check_num_args("SpatialMotionVectorBase_minus",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialMotionVector_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialMotionVectorBase_minus" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialMotionVector > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialMotionVector > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialMotionVector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpatialMotionVectorBase_minus" "', argument " "2"" of type '" "iDynTree::SpatialMotionVector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialMotionVectorBase_minus" "', argument " "2"" of type '" "iDynTree::SpatialMotionVector const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialMotionVector * >(argp2);
  result = ((iDynTree::SpatialVector< iDynTree::SpatialMotionVector > const *)arg1)->operator -((iDynTree::SpatialMotionVector const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialMotionVector(static_cast< const iDynTree::SpatialMotionVector& >(result))), SWIGTYPE_p_iDynTree__SpatialMotionVector, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialMotionVectorBase_uminus(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *arg1 = (iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::SpatialMotionVector result;
  
  if (!SWIG_check_num_args("SpatialMotionVectorBase_uminus",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialMotionVector_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialMotionVectorBase_uminus" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialMotionVector > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialMotionVector > * >(argp1);
  result = ((iDynTree::SpatialVector< iDynTree::SpatialMotionVector > const *)arg1)->operator -();
  _out = SWIG_NewPointerObj((new iDynTree::SpatialMotionVector(static_cast< const iDynTree::SpatialMotionVector& >(result))), SWIGTYPE_p_iDynTree__SpatialMotionVector, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialMotionVectorBase_Zero(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::SpatialMotionVector result;
  
  if (!SWIG_check_num_args("SpatialMotionVectorBase_Zero",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = iDynTree::SpatialVector< iDynTree::SpatialMotionVector >::SWIGTEMPLATEDISAMBIGUATOR Zero();
  _out = SWIG_NewPointerObj((new iDynTree::SpatialMotionVector(static_cast< const iDynTree::SpatialMotionVector& >(result))), SWIGTYPE_p_iDynTree__SpatialMotionVector, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialMotionVectorBase_asVector(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *arg1 = (iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Vector6 result;
  
  if (!SWIG_check_num_args("SpatialMotionVectorBase_asVector",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialMotionVector_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialMotionVectorBase_asVector" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialMotionVector > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialMotionVector > * >(argp1);
  result = ((iDynTree::SpatialVector< iDynTree::SpatialMotionVector > const *)arg1)->asVector();
  _out = SWIG_NewPointerObj((new iDynTree::Vector6(static_cast< const iDynTree::Vector6& >(result))), SWIGTYPE_p_iDynTree__VectorFixSizeT_6_t, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialMotionVectorBase_toString(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *arg1 = (iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("SpatialMotionVectorBase_toString",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialMotionVector_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialMotionVectorBase_toString" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialMotionVector > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialMotionVector > * >(argp1);
  result = ((iDynTree::SpatialVector< iDynTree::SpatialMotionVector > const *)arg1)->toString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialMotionVectorBase_display(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *arg1 = (iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("SpatialMotionVectorBase_display",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialMotionVector_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialMotionVectorBase_display" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialMotionVector > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialMotionVector > * >(argp1);
  result = ((iDynTree::SpatialVector< iDynTree::SpatialMotionVector > const *)arg1)->reservedToString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialMotionVectorBase_toMatlab(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *arg1 = (iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  mxArray *result = 0 ;
  
  if (!SWIG_check_num_args("SpatialMotionVectorBase_toMatlab",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialMotionVector_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialMotionVectorBase_toMatlab" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialMotionVector > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialMotionVector > * >(argp1);
  result = (mxArray *)iDynTree_SpatialVector_Sl_iDynTree_SpatialMotionVector_Sg__toMatlab((iDynTree::SpatialVector< iDynTree::SpatialMotionVector > const *)arg1);
  _out = result;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialMotionVectorBase_fromMatlab(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *arg1 = (iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *) 0 ;
  mxArray *arg2 = (mxArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("SpatialMotionVectorBase_fromMatlab",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialMotionVector_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialMotionVectorBase_fromMatlab" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialMotionVector > * >(argp1);
  arg2 = argv[1];
  iDynTree_SpatialVector_Sl_iDynTree_SpatialMotionVector_Sg__fromMatlab(arg1,arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_SpatialMotionVectorBase(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *arg1 = (iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_SpatialMotionVectorBase",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialMotionVector_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SpatialMotionVectorBase" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialMotionVector > * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SpatialForceVectorBase__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::SpatialVector< iDynTree::SpatialForceVector > *result = 0 ;
  
  if (!SWIG_check_num_args("new_SpatialForceVectorBase",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::SpatialVector< iDynTree::SpatialForceVector > *)new iDynTree::SpatialVector< iDynTree::SpatialForceVector >();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialForceVector_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SpatialForceVectorBase__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVector< iDynTree::SpatialForceVector >::LinearVector3T *arg1 = 0 ;
  iDynTree::SpatialVector< iDynTree::SpatialForceVector >::AngularVector3T *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialVector< iDynTree::SpatialForceVector > *result = 0 ;
  
  if (!SWIG_check_num_args("new_SpatialForceVectorBase",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__LinearForceVector3,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SpatialForceVectorBase" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialForceVector >::LinearVector3T const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpatialForceVectorBase" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialForceVector >::LinearVector3T const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialForceVector >::LinearVector3T * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__AngularForceVector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_SpatialForceVectorBase" "', argument " "2"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialForceVector >::AngularVector3T const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpatialForceVectorBase" "', argument " "2"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialForceVector >::AngularVector3T const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialForceVector >::AngularVector3T * >(argp2);
  result = (iDynTree::SpatialVector< iDynTree::SpatialForceVector > *)new iDynTree::SpatialVector< iDynTree::SpatialForceVector >((iDynTree::SpatialVector< iDynTree::SpatialForceVector >::LinearVector3T const &)*arg1,(iDynTree::SpatialVector< iDynTree::SpatialForceVector >::AngularVector3T const &)*arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialForceVector_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SpatialForceVectorBase__SWIG_2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVector< iDynTree::SpatialForceVector > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::SpatialVector< iDynTree::SpatialForceVector > *result = 0 ;
  
  if (!SWIG_check_num_args("new_SpatialForceVectorBase",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialForceVector_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SpatialForceVectorBase" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialForceVector > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpatialForceVectorBase" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialForceVector > const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialForceVector > * >(argp1);
  result = (iDynTree::SpatialVector< iDynTree::SpatialForceVector > *)new iDynTree::SpatialVector< iDynTree::SpatialForceVector >((iDynTree::SpatialVector< iDynTree::SpatialForceVector > const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialForceVector_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SpatialForceVectorBase(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_SpatialForceVectorBase__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialForceVector_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SpatialForceVectorBase__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__LinearForceVector3, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__AngularForceVector3, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_SpatialForceVectorBase__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_SpatialForceVectorBase'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::SpatialVector< iDynTree::SpatialForceVector >::SpatialVector()\n"
    "    iDynTree::SpatialVector< iDynTree::SpatialForceVector >::SpatialVector(iDynTree::SpatialVector< iDynTree::SpatialForceVector >::LinearVector3T const &,iDynTree::SpatialVector< iDynTree::SpatialForceVector >::AngularVector3T const &)\n"
    "    iDynTree::SpatialVector< iDynTree::SpatialForceVector >::SpatialVector(iDynTree::SpatialVector< iDynTree::SpatialForceVector > const &)\n");
  return 1;
}


int _wrap_SpatialForceVectorBase_getLinearVec3(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVector< iDynTree::SpatialForceVector > *arg1 = (iDynTree::SpatialVector< iDynTree::SpatialForceVector > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::SpatialVector< iDynTree::SpatialForceVector >::LinearVector3T *result = 0 ;
  
  if (!SWIG_check_num_args("SpatialForceVectorBase_getLinearVec3",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialForceVector_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialForceVectorBase_getLinearVec3" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialForceVector > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialForceVector > * >(argp1);
  result = (iDynTree::SpatialVector< iDynTree::SpatialForceVector >::LinearVector3T *) &(arg1)->getLinearVec3();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__LinearForceVector3, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialForceVectorBase_getAngularVec3(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVector< iDynTree::SpatialForceVector > *arg1 = (iDynTree::SpatialVector< iDynTree::SpatialForceVector > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::SpatialVector< iDynTree::SpatialForceVector >::AngularVector3T *result = 0 ;
  
  if (!SWIG_check_num_args("SpatialForceVectorBase_getAngularVec3",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialForceVector_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialForceVectorBase_getAngularVec3" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialForceVector > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialForceVector > * >(argp1);
  result = (iDynTree::SpatialVector< iDynTree::SpatialForceVector >::AngularVector3T *) &(arg1)->getAngularVec3();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__AngularForceVector3, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialForceVectorBase_setLinearVec3(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVector< iDynTree::SpatialForceVector > *arg1 = (iDynTree::SpatialVector< iDynTree::SpatialForceVector > *) 0 ;
  iDynTree::SpatialVector< iDynTree::SpatialForceVector >::LinearVector3T *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("SpatialForceVectorBase_setLinearVec3",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialForceVector_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialForceVectorBase_setLinearVec3" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialForceVector > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialForceVector > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__LinearForceVector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpatialForceVectorBase_setLinearVec3" "', argument " "2"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialForceVector >::LinearVector3T const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialForceVectorBase_setLinearVec3" "', argument " "2"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialForceVector >::LinearVector3T const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialForceVector >::LinearVector3T * >(argp2);
  (arg1)->setLinearVec3((iDynTree::SpatialVector< iDynTree::SpatialForceVector >::LinearVector3T const &)*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialForceVectorBase_setAngularVec3(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVector< iDynTree::SpatialForceVector > *arg1 = (iDynTree::SpatialVector< iDynTree::SpatialForceVector > *) 0 ;
  iDynTree::SpatialVector< iDynTree::SpatialForceVector >::AngularVector3T *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("SpatialForceVectorBase_setAngularVec3",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialForceVector_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialForceVectorBase_setAngularVec3" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialForceVector > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialForceVector > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__AngularForceVector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpatialForceVectorBase_setAngularVec3" "', argument " "2"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialForceVector >::AngularVector3T const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialForceVectorBase_setAngularVec3" "', argument " "2"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialForceVector >::AngularVector3T const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialForceVector >::AngularVector3T * >(argp2);
  (arg1)->setAngularVec3((iDynTree::SpatialVector< iDynTree::SpatialForceVector >::AngularVector3T const &)*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialForceVectorBase_paren(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVector< iDynTree::SpatialForceVector > *arg1 = (iDynTree::SpatialVector< iDynTree::SpatialForceVector > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  double *result = 0 ;
  
  if (!SWIG_check_num_args("SpatialForceVectorBase_paren",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialForceVector_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialForceVectorBase_paren" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialForceVector > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialForceVector > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SpatialForceVectorBase_paren" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (double *) &(arg1)->operator ()(arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialForceVectorBase_getVal(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVector< iDynTree::SpatialForceVector > *arg1 = (iDynTree::SpatialVector< iDynTree::SpatialForceVector > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("SpatialForceVectorBase_getVal",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialForceVector_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialForceVectorBase_getVal" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialForceVector > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialForceVector > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SpatialForceVectorBase_getVal" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (double)((iDynTree::SpatialVector< iDynTree::SpatialForceVector > const *)arg1)->getVal(arg2);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialForceVectorBase_setVal(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVector< iDynTree::SpatialForceVector > *arg1 = (iDynTree::SpatialVector< iDynTree::SpatialForceVector > *) 0 ;
  unsigned int arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("SpatialForceVectorBase_setVal",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialForceVector_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialForceVectorBase_setVal" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialForceVector > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialForceVector > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SpatialForceVectorBase_setVal" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SpatialForceVectorBase_setVal" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (bool)(arg1)->setVal(arg2,arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialForceVectorBase_size(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVector< iDynTree::SpatialForceVector > *arg1 = (iDynTree::SpatialVector< iDynTree::SpatialForceVector > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("SpatialForceVectorBase_size",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialForceVector_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialForceVectorBase_size" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialForceVector > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialForceVector > * >(argp1);
  result = (unsigned int)((iDynTree::SpatialVector< iDynTree::SpatialForceVector > const *)arg1)->size();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialForceVectorBase_zero(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVector< iDynTree::SpatialForceVector > *arg1 = (iDynTree::SpatialVector< iDynTree::SpatialForceVector > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("SpatialForceVectorBase_zero",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialForceVector_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialForceVectorBase_zero" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialForceVector > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialForceVector > * >(argp1);
  (arg1)->zero();
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialForceVectorBase_changePoint(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVector< iDynTree::SpatialForceVector > *arg1 = (iDynTree::SpatialVector< iDynTree::SpatialForceVector > *) 0 ;
  iDynTree::Position *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialForceVector result;
  
  if (!SWIG_check_num_args("SpatialForceVectorBase_changePoint",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialForceVector_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialForceVectorBase_changePoint" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialForceVector > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialForceVector > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Position,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpatialForceVectorBase_changePoint" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialForceVectorBase_changePoint" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Position * >(argp2);
  result = (arg1)->changePoint((iDynTree::Position const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialForceVector(static_cast< const iDynTree::SpatialForceVector& >(result))), SWIGTYPE_p_iDynTree__SpatialForceVector, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialForceVectorBase_changeCoordFrame(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVector< iDynTree::SpatialForceVector > *arg1 = (iDynTree::SpatialVector< iDynTree::SpatialForceVector > *) 0 ;
  iDynTree::Rotation *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialForceVector result;
  
  if (!SWIG_check_num_args("SpatialForceVectorBase_changeCoordFrame",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialForceVector_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialForceVectorBase_changeCoordFrame" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialForceVector > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialForceVector > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Rotation,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpatialForceVectorBase_changeCoordFrame" "', argument " "2"" of type '" "iDynTree::Rotation const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialForceVectorBase_changeCoordFrame" "', argument " "2"" of type '" "iDynTree::Rotation const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Rotation * >(argp2);
  result = (arg1)->changeCoordFrame((iDynTree::Rotation const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialForceVector(static_cast< const iDynTree::SpatialForceVector& >(result))), SWIGTYPE_p_iDynTree__SpatialForceVector, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialForceVectorBase_compose(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialForceVector *arg1 = 0 ;
  iDynTree::SpatialForceVector *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialForceVector result;
  
  if (!SWIG_check_num_args("SpatialForceVectorBase_compose",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__SpatialForceVector,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialForceVectorBase_compose" "', argument " "1"" of type '" "iDynTree::SpatialForceVector const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialForceVectorBase_compose" "', argument " "1"" of type '" "iDynTree::SpatialForceVector const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialForceVector * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialForceVector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpatialForceVectorBase_compose" "', argument " "2"" of type '" "iDynTree::SpatialForceVector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialForceVectorBase_compose" "', argument " "2"" of type '" "iDynTree::SpatialForceVector const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialForceVector * >(argp2);
  result = iDynTree::SpatialVector< iDynTree::SpatialForceVector >::SWIGTEMPLATEDISAMBIGUATOR compose((iDynTree::SpatialForceVector const &)*arg1,(iDynTree::SpatialForceVector const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialForceVector(static_cast< const iDynTree::SpatialForceVector& >(result))), SWIGTYPE_p_iDynTree__SpatialForceVector, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialForceVectorBase_inverse(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialForceVector *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::SpatialForceVector result;
  
  if (!SWIG_check_num_args("SpatialForceVectorBase_inverse",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__SpatialForceVector,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialForceVectorBase_inverse" "', argument " "1"" of type '" "iDynTree::SpatialForceVector const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialForceVectorBase_inverse" "', argument " "1"" of type '" "iDynTree::SpatialForceVector const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialForceVector * >(argp1);
  result = iDynTree::SpatialVector< iDynTree::SpatialForceVector >::SWIGTEMPLATEDISAMBIGUATOR inverse((iDynTree::SpatialForceVector const &)*arg1);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialForceVector(static_cast< const iDynTree::SpatialForceVector& >(result))), SWIGTYPE_p_iDynTree__SpatialForceVector, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialForceVectorBase_dot(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVector< iDynTree::SpatialForceVector > *arg1 = (iDynTree::SpatialVector< iDynTree::SpatialForceVector > *) 0 ;
  iDynTree::SpatialVector< iDynTree::SpatialForceVector >::DualVectorT *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("SpatialForceVectorBase_dot",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialForceVector_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialForceVectorBase_dot" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialForceVector > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialForceVector > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialMotionVector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpatialForceVectorBase_dot" "', argument " "2"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialForceVector >::DualVectorT const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialForceVectorBase_dot" "', argument " "2"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialForceVector >::DualVectorT const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialForceVector >::DualVectorT * >(argp2);
  result = (double)((iDynTree::SpatialVector< iDynTree::SpatialForceVector > const *)arg1)->dot((iDynTree::SpatialVector< iDynTree::SpatialForceVector >::DualVectorT const &)*arg2);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialForceVectorBase_plus(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVector< iDynTree::SpatialForceVector > *arg1 = (iDynTree::SpatialVector< iDynTree::SpatialForceVector > *) 0 ;
  iDynTree::SpatialForceVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialForceVector result;
  
  if (!SWIG_check_num_args("SpatialForceVectorBase_plus",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialForceVector_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialForceVectorBase_plus" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialForceVector > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialForceVector > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialForceVector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpatialForceVectorBase_plus" "', argument " "2"" of type '" "iDynTree::SpatialForceVector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialForceVectorBase_plus" "', argument " "2"" of type '" "iDynTree::SpatialForceVector const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialForceVector * >(argp2);
  result = ((iDynTree::SpatialVector< iDynTree::SpatialForceVector > const *)arg1)->operator +((iDynTree::SpatialForceVector const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialForceVector(static_cast< const iDynTree::SpatialForceVector& >(result))), SWIGTYPE_p_iDynTree__SpatialForceVector, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialForceVectorBase_minus(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVector< iDynTree::SpatialForceVector > *arg1 = (iDynTree::SpatialVector< iDynTree::SpatialForceVector > *) 0 ;
  iDynTree::SpatialForceVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialForceVector result;
  
  if (!SWIG_check_num_args("SpatialForceVectorBase_minus",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialForceVector_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialForceVectorBase_minus" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialForceVector > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialForceVector > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialForceVector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpatialForceVectorBase_minus" "', argument " "2"" of type '" "iDynTree::SpatialForceVector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialForceVectorBase_minus" "', argument " "2"" of type '" "iDynTree::SpatialForceVector const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialForceVector * >(argp2);
  result = ((iDynTree::SpatialVector< iDynTree::SpatialForceVector > const *)arg1)->operator -((iDynTree::SpatialForceVector const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialForceVector(static_cast< const iDynTree::SpatialForceVector& >(result))), SWIGTYPE_p_iDynTree__SpatialForceVector, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialForceVectorBase_uminus(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVector< iDynTree::SpatialForceVector > *arg1 = (iDynTree::SpatialVector< iDynTree::SpatialForceVector > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::SpatialForceVector result;
  
  if (!SWIG_check_num_args("SpatialForceVectorBase_uminus",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialForceVector_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialForceVectorBase_uminus" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialForceVector > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialForceVector > * >(argp1);
  result = ((iDynTree::SpatialVector< iDynTree::SpatialForceVector > const *)arg1)->operator -();
  _out = SWIG_NewPointerObj((new iDynTree::SpatialForceVector(static_cast< const iDynTree::SpatialForceVector& >(result))), SWIGTYPE_p_iDynTree__SpatialForceVector, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialForceVectorBase_Zero(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::SpatialForceVector result;
  
  if (!SWIG_check_num_args("SpatialForceVectorBase_Zero",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = iDynTree::SpatialVector< iDynTree::SpatialForceVector >::SWIGTEMPLATEDISAMBIGUATOR Zero();
  _out = SWIG_NewPointerObj((new iDynTree::SpatialForceVector(static_cast< const iDynTree::SpatialForceVector& >(result))), SWIGTYPE_p_iDynTree__SpatialForceVector, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialForceVectorBase_asVector(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVector< iDynTree::SpatialForceVector > *arg1 = (iDynTree::SpatialVector< iDynTree::SpatialForceVector > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Vector6 result;
  
  if (!SWIG_check_num_args("SpatialForceVectorBase_asVector",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialForceVector_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialForceVectorBase_asVector" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialForceVector > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialForceVector > * >(argp1);
  result = ((iDynTree::SpatialVector< iDynTree::SpatialForceVector > const *)arg1)->asVector();
  _out = SWIG_NewPointerObj((new iDynTree::Vector6(static_cast< const iDynTree::Vector6& >(result))), SWIGTYPE_p_iDynTree__VectorFixSizeT_6_t, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialForceVectorBase_toString(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVector< iDynTree::SpatialForceVector > *arg1 = (iDynTree::SpatialVector< iDynTree::SpatialForceVector > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("SpatialForceVectorBase_toString",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialForceVector_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialForceVectorBase_toString" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialForceVector > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialForceVector > * >(argp1);
  result = ((iDynTree::SpatialVector< iDynTree::SpatialForceVector > const *)arg1)->toString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialForceVectorBase_display(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVector< iDynTree::SpatialForceVector > *arg1 = (iDynTree::SpatialVector< iDynTree::SpatialForceVector > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("SpatialForceVectorBase_display",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialForceVector_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialForceVectorBase_display" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialForceVector > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialForceVector > * >(argp1);
  result = ((iDynTree::SpatialVector< iDynTree::SpatialForceVector > const *)arg1)->reservedToString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialForceVectorBase_toMatlab(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVector< iDynTree::SpatialForceVector > *arg1 = (iDynTree::SpatialVector< iDynTree::SpatialForceVector > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  mxArray *result = 0 ;
  
  if (!SWIG_check_num_args("SpatialForceVectorBase_toMatlab",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialForceVector_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialForceVectorBase_toMatlab" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialForceVector > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialForceVector > * >(argp1);
  result = (mxArray *)iDynTree_SpatialVector_Sl_iDynTree_SpatialForceVector_Sg__toMatlab((iDynTree::SpatialVector< iDynTree::SpatialForceVector > const *)arg1);
  _out = result;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialForceVectorBase_fromMatlab(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVector< iDynTree::SpatialForceVector > *arg1 = (iDynTree::SpatialVector< iDynTree::SpatialForceVector > *) 0 ;
  mxArray *arg2 = (mxArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("SpatialForceVectorBase_fromMatlab",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialForceVector_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialForceVectorBase_fromMatlab" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialForceVector > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialForceVector > * >(argp1);
  arg2 = argv[1];
  iDynTree_SpatialVector_Sl_iDynTree_SpatialForceVector_Sg__fromMatlab(arg1,arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_SpatialForceVectorBase(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVector< iDynTree::SpatialForceVector > *arg1 = (iDynTree::SpatialVector< iDynTree::SpatialForceVector > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_SpatialForceVectorBase",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialForceVector_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SpatialForceVectorBase" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialForceVector > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialForceVector > * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Dummy(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::Dummy *result = 0 ;
  
  if (!SWIG_check_num_args("new_Dummy",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::Dummy *)new iDynTree::Dummy();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Dummy, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_Dummy(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Dummy *arg1 = (iDynTree::Dummy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_Dummy",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Dummy, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Dummy" "', argument " "1"" of type '" "iDynTree::Dummy *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Dummy * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SpatialMotionVector__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::SpatialMotionVector *result = 0 ;
  
  if (!SWIG_check_num_args("new_SpatialMotionVector",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::SpatialMotionVector *)new iDynTree::SpatialMotionVector();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SpatialMotionVector, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SpatialMotionVector__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialMotionVector::LinearVector3T *arg1 = 0 ;
  iDynTree::SpatialMotionVector::AngularVector3T *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialMotionVector *result = 0 ;
  
  if (!SWIG_check_num_args("new_SpatialMotionVector",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__LinearMotionVector3,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SpatialMotionVector" "', argument " "1"" of type '" "iDynTree::SpatialMotionVector::LinearVector3T const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpatialMotionVector" "', argument " "1"" of type '" "iDynTree::SpatialMotionVector::LinearVector3T const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialMotionVector::LinearVector3T * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__AngularMotionVector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_SpatialMotionVector" "', argument " "2"" of type '" "iDynTree::SpatialMotionVector::AngularVector3T const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpatialMotionVector" "', argument " "2"" of type '" "iDynTree::SpatialMotionVector::AngularVector3T const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialMotionVector::AngularVector3T * >(argp2);
  result = (iDynTree::SpatialMotionVector *)new iDynTree::SpatialMotionVector((iDynTree::SpatialMotionVector::LinearVector3T const &)*arg1,(iDynTree::SpatialMotionVector::AngularVector3T const &)*arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SpatialMotionVector, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SpatialMotionVector__SWIG_2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialMotionVector *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::SpatialMotionVector *result = 0 ;
  
  if (!SWIG_check_num_args("new_SpatialMotionVector",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__SpatialMotionVector,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SpatialMotionVector" "', argument " "1"" of type '" "iDynTree::SpatialMotionVector const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpatialMotionVector" "', argument " "1"" of type '" "iDynTree::SpatialMotionVector const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialMotionVector * >(argp1);
  result = (iDynTree::SpatialMotionVector *)new iDynTree::SpatialMotionVector((iDynTree::SpatialMotionVector const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SpatialMotionVector, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SpatialMotionVector__SWIG_3(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::SpatialMotionVector *result = 0 ;
  
  if (!SWIG_check_num_args("new_SpatialMotionVector",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialMotionVector_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SpatialMotionVector" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialMotionVector > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpatialMotionVector" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialMotionVector > const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialMotionVector > * >(argp1);
  result = (iDynTree::SpatialMotionVector *)new iDynTree::SpatialMotionVector((iDynTree::SpatialVector< iDynTree::SpatialMotionVector > const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SpatialMotionVector, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SpatialMotionVector(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_SpatialMotionVector__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SpatialMotionVector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SpatialMotionVector__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialMotionVector_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SpatialMotionVector__SWIG_3(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__LinearMotionVector3, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__AngularMotionVector3, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_SpatialMotionVector__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_SpatialMotionVector'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::SpatialMotionVector::SpatialMotionVector()\n"
    "    iDynTree::SpatialMotionVector::SpatialMotionVector(iDynTree::SpatialMotionVector::LinearVector3T const &,iDynTree::SpatialMotionVector::AngularVector3T const &)\n"
    "    iDynTree::SpatialMotionVector::SpatialMotionVector(iDynTree::SpatialMotionVector const &)\n"
    "    iDynTree::SpatialMotionVector::SpatialMotionVector(iDynTree::SpatialVector< iDynTree::SpatialMotionVector > const &)\n");
  return 1;
}


int _wrap_SpatialMotionVector_mtimes(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialMotionVector *arg1 = (iDynTree::SpatialMotionVector *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialMotionVector result;
  
  if (!SWIG_check_num_args("SpatialMotionVector_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialMotionVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialMotionVector_mtimes" "', argument " "1"" of type '" "iDynTree::SpatialMotionVector const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialMotionVector * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SpatialMotionVector_mtimes" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = ((iDynTree::SpatialMotionVector const *)arg1)->operator *(arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialMotionVector(static_cast< const iDynTree::SpatialMotionVector& >(result))), SWIGTYPE_p_iDynTree__SpatialMotionVector, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialMotionVector_cross__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialMotionVector *arg1 = (iDynTree::SpatialMotionVector *) 0 ;
  iDynTree::SpatialMotionVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialMotionVector result;
  
  if (!SWIG_check_num_args("SpatialMotionVector_cross",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialMotionVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialMotionVector_cross" "', argument " "1"" of type '" "iDynTree::SpatialMotionVector const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialMotionVector * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialMotionVector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpatialMotionVector_cross" "', argument " "2"" of type '" "iDynTree::SpatialMotionVector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialMotionVector_cross" "', argument " "2"" of type '" "iDynTree::SpatialMotionVector const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialMotionVector * >(argp2);
  result = ((iDynTree::SpatialMotionVector const *)arg1)->cross((iDynTree::SpatialMotionVector const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialMotionVector(static_cast< const iDynTree::SpatialMotionVector& >(result))), SWIGTYPE_p_iDynTree__SpatialMotionVector, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialMotionVector_cross__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialMotionVector *arg1 = (iDynTree::SpatialMotionVector *) 0 ;
  iDynTree::SpatialForceVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialForceVector result;
  
  if (!SWIG_check_num_args("SpatialMotionVector_cross",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialMotionVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialMotionVector_cross" "', argument " "1"" of type '" "iDynTree::SpatialMotionVector const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialMotionVector * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialForceVector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpatialMotionVector_cross" "', argument " "2"" of type '" "iDynTree::SpatialForceVector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialMotionVector_cross" "', argument " "2"" of type '" "iDynTree::SpatialForceVector const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialForceVector * >(argp2);
  result = ((iDynTree::SpatialMotionVector const *)arg1)->cross((iDynTree::SpatialForceVector const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialForceVector(static_cast< const iDynTree::SpatialForceVector& >(result))), SWIGTYPE_p_iDynTree__SpatialForceVector, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialMotionVector_cross(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SpatialMotionVector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__SpatialMotionVector, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SpatialMotionVector_cross__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SpatialMotionVector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__SpatialForceVector, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SpatialMotionVector_cross__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'SpatialMotionVector_cross'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::SpatialMotionVector::cross(iDynTree::SpatialMotionVector const &) const\n"
    "    iDynTree::SpatialMotionVector::cross(iDynTree::SpatialForceVector const &) const\n");
  return 1;
}


int _wrap_SpatialMotionVector_asCrossProductMatrix(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialMotionVector *arg1 = (iDynTree::SpatialMotionVector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Matrix6x6 result;
  
  if (!SWIG_check_num_args("SpatialMotionVector_asCrossProductMatrix",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialMotionVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialMotionVector_asCrossProductMatrix" "', argument " "1"" of type '" "iDynTree::SpatialMotionVector const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialMotionVector * >(argp1);
  result = ((iDynTree::SpatialMotionVector const *)arg1)->asCrossProductMatrix();
  _out = SWIG_NewPointerObj((new iDynTree::Matrix6x6(static_cast< const iDynTree::Matrix6x6& >(result))), SWIGTYPE_p_iDynTree__MatrixFixSizeT_6_6_t, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialMotionVector_asCrossProductMatrixWrench(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialMotionVector *arg1 = (iDynTree::SpatialMotionVector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Matrix6x6 result;
  
  if (!SWIG_check_num_args("SpatialMotionVector_asCrossProductMatrixWrench",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialMotionVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialMotionVector_asCrossProductMatrixWrench" "', argument " "1"" of type '" "iDynTree::SpatialMotionVector const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialMotionVector * >(argp1);
  result = ((iDynTree::SpatialMotionVector const *)arg1)->asCrossProductMatrixWrench();
  _out = SWIG_NewPointerObj((new iDynTree::Matrix6x6(static_cast< const iDynTree::Matrix6x6& >(result))), SWIGTYPE_p_iDynTree__MatrixFixSizeT_6_6_t, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialMotionVector_exp(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialMotionVector *arg1 = (iDynTree::SpatialMotionVector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Transform result;
  
  if (!SWIG_check_num_args("SpatialMotionVector_exp",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialMotionVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialMotionVector_exp" "', argument " "1"" of type '" "iDynTree::SpatialMotionVector const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialMotionVector * >(argp1);
  result = ((iDynTree::SpatialMotionVector const *)arg1)->exp();
  _out = SWIG_NewPointerObj((new iDynTree::Transform(static_cast< const iDynTree::Transform& >(result))), SWIGTYPE_p_iDynTree__Transform, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_SpatialMotionVector(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialMotionVector *arg1 = (iDynTree::SpatialMotionVector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_SpatialMotionVector",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialMotionVector, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SpatialMotionVector" "', argument " "1"" of type '" "iDynTree::SpatialMotionVector *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialMotionVector * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SpatialForceVector__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::SpatialForceVector *result = 0 ;
  
  if (!SWIG_check_num_args("new_SpatialForceVector",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::SpatialForceVector *)new iDynTree::SpatialForceVector();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SpatialForceVector, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SpatialForceVector__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialForceVector::LinearVector3T *arg1 = 0 ;
  iDynTree::SpatialForceVector::AngularVector3T *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialForceVector *result = 0 ;
  
  if (!SWIG_check_num_args("new_SpatialForceVector",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__LinearForceVector3,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SpatialForceVector" "', argument " "1"" of type '" "iDynTree::SpatialForceVector::LinearVector3T const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpatialForceVector" "', argument " "1"" of type '" "iDynTree::SpatialForceVector::LinearVector3T const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialForceVector::LinearVector3T * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__AngularForceVector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_SpatialForceVector" "', argument " "2"" of type '" "iDynTree::SpatialForceVector::AngularVector3T const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpatialForceVector" "', argument " "2"" of type '" "iDynTree::SpatialForceVector::AngularVector3T const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialForceVector::AngularVector3T * >(argp2);
  result = (iDynTree::SpatialForceVector *)new iDynTree::SpatialForceVector((iDynTree::SpatialForceVector::LinearVector3T const &)*arg1,(iDynTree::SpatialForceVector::AngularVector3T const &)*arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SpatialForceVector, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SpatialForceVector__SWIG_2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialForceVector *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::SpatialForceVector *result = 0 ;
  
  if (!SWIG_check_num_args("new_SpatialForceVector",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__SpatialForceVector,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SpatialForceVector" "', argument " "1"" of type '" "iDynTree::SpatialForceVector const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpatialForceVector" "', argument " "1"" of type '" "iDynTree::SpatialForceVector const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialForceVector * >(argp1);
  result = (iDynTree::SpatialForceVector *)new iDynTree::SpatialForceVector((iDynTree::SpatialForceVector const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SpatialForceVector, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SpatialForceVector__SWIG_3(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVector< iDynTree::SpatialForceVector > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::SpatialForceVector *result = 0 ;
  
  if (!SWIG_check_num_args("new_SpatialForceVector",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialForceVector_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SpatialForceVector" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialForceVector > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpatialForceVector" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialForceVector > const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialForceVector > * >(argp1);
  result = (iDynTree::SpatialForceVector *)new iDynTree::SpatialForceVector((iDynTree::SpatialVector< iDynTree::SpatialForceVector > const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SpatialForceVector, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SpatialForceVector(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_SpatialForceVector__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SpatialForceVector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SpatialForceVector__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialForceVector_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SpatialForceVector__SWIG_3(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__LinearForceVector3, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__AngularForceVector3, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_SpatialForceVector__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_SpatialForceVector'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::SpatialForceVector::SpatialForceVector()\n"
    "    iDynTree::SpatialForceVector::SpatialForceVector(iDynTree::SpatialForceVector::LinearVector3T const &,iDynTree::SpatialForceVector::AngularVector3T const &)\n"
    "    iDynTree::SpatialForceVector::SpatialForceVector(iDynTree::SpatialForceVector const &)\n"
    "    iDynTree::SpatialForceVector::SpatialForceVector(iDynTree::SpatialVector< iDynTree::SpatialForceVector > const &)\n");
  return 1;
}


int _wrap_delete_SpatialForceVector(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialForceVector *arg1 = (iDynTree::SpatialForceVector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_SpatialForceVector",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialForceVector, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SpatialForceVector" "', argument " "1"" of type '" "iDynTree::SpatialForceVector *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialForceVector * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialForceVector_mtimes(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialForceVector *arg1 = (iDynTree::SpatialForceVector *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialForceVector result;
  
  if (!SWIG_check_num_args("SpatialForceVector_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialForceVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialForceVector_mtimes" "', argument " "1"" of type '" "iDynTree::SpatialForceVector const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialForceVector * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SpatialForceVector_mtimes" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = ((iDynTree::SpatialForceVector const *)arg1)->operator *(arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialForceVector(static_cast< const iDynTree::SpatialForceVector& >(result))), SWIGTYPE_p_iDynTree__SpatialForceVector, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Twist__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::Twist *result = 0 ;
  
  if (!SWIG_check_num_args("new_Twist",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::Twist *)new iDynTree::Twist();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Twist, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Twist__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinVelocity *arg1 = 0 ;
  iDynTree::AngVelocity *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Twist *result = 0 ;
  
  if (!SWIG_check_num_args("new_Twist",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__LinearMotionVector3,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Twist" "', argument " "1"" of type '" "iDynTree::LinVelocity const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Twist" "', argument " "1"" of type '" "iDynTree::LinVelocity const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinVelocity * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__AngularMotionVector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Twist" "', argument " "2"" of type '" "iDynTree::AngVelocity const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Twist" "', argument " "2"" of type '" "iDynTree::AngVelocity const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::AngVelocity * >(argp2);
  result = (iDynTree::Twist *)new iDynTree::Twist((iDynTree::LinVelocity const &)*arg1,(iDynTree::AngVelocity const &)*arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Twist, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Twist__SWIG_2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialMotionVector *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Twist *result = 0 ;
  
  if (!SWIG_check_num_args("new_Twist",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__SpatialMotionVector,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Twist" "', argument " "1"" of type '" "iDynTree::SpatialMotionVector const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Twist" "', argument " "1"" of type '" "iDynTree::SpatialMotionVector const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialMotionVector * >(argp1);
  result = (iDynTree::Twist *)new iDynTree::Twist((iDynTree::SpatialMotionVector const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Twist, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Twist__SWIG_3(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Twist *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Twist *result = 0 ;
  
  if (!SWIG_check_num_args("new_Twist",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Twist,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Twist" "', argument " "1"" of type '" "iDynTree::Twist const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Twist" "', argument " "1"" of type '" "iDynTree::Twist const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Twist * >(argp1);
  result = (iDynTree::Twist *)new iDynTree::Twist((iDynTree::Twist const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Twist, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Twist(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_Twist__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Twist, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Twist__SWIG_3(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SpatialMotionVector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Twist__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__LinearMotionVector3, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__AngularMotionVector3, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Twist__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_Twist'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::Twist::Twist()\n"
    "    iDynTree::Twist::Twist(iDynTree::LinVelocity const &,iDynTree::AngVelocity const &)\n"
    "    iDynTree::Twist::Twist(iDynTree::SpatialMotionVector const &)\n"
    "    iDynTree::Twist::Twist(iDynTree::Twist const &)\n");
  return 1;
}


int _wrap_Twist_plus(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Twist *arg1 = (iDynTree::Twist *) 0 ;
  iDynTree::Twist *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Twist result;
  
  if (!SWIG_check_num_args("Twist_plus",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Twist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Twist_plus" "', argument " "1"" of type '" "iDynTree::Twist const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Twist * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Twist,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Twist_plus" "', argument " "2"" of type '" "iDynTree::Twist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Twist_plus" "', argument " "2"" of type '" "iDynTree::Twist const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Twist * >(argp2);
  result = ((iDynTree::Twist const *)arg1)->operator +((iDynTree::Twist const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Twist(static_cast< const iDynTree::Twist& >(result))), SWIGTYPE_p_iDynTree__Twist, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Twist_minus(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Twist *arg1 = (iDynTree::Twist *) 0 ;
  iDynTree::Twist *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Twist result;
  
  if (!SWIG_check_num_args("Twist_minus",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Twist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Twist_minus" "', argument " "1"" of type '" "iDynTree::Twist const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Twist * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Twist,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Twist_minus" "', argument " "2"" of type '" "iDynTree::Twist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Twist_minus" "', argument " "2"" of type '" "iDynTree::Twist const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Twist * >(argp2);
  result = ((iDynTree::Twist const *)arg1)->operator -((iDynTree::Twist const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Twist(static_cast< const iDynTree::Twist& >(result))), SWIGTYPE_p_iDynTree__Twist, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Twist_uminus(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Twist *arg1 = (iDynTree::Twist *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Twist result;
  
  if (!SWIG_check_num_args("Twist_uminus",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Twist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Twist_uminus" "', argument " "1"" of type '" "iDynTree::Twist const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Twist * >(argp1);
  result = ((iDynTree::Twist const *)arg1)->operator -();
  _out = SWIG_NewPointerObj((new iDynTree::Twist(static_cast< const iDynTree::Twist& >(result))), SWIGTYPE_p_iDynTree__Twist, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Twist_mtimes__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Twist *arg1 = (iDynTree::Twist *) 0 ;
  iDynTree::Twist *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialAcc result;
  
  if (!SWIG_check_num_args("Twist_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Twist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Twist_mtimes" "', argument " "1"" of type '" "iDynTree::Twist const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Twist * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Twist,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Twist_mtimes" "', argument " "2"" of type '" "iDynTree::Twist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Twist_mtimes" "', argument " "2"" of type '" "iDynTree::Twist const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Twist * >(argp2);
  result = ((iDynTree::Twist const *)arg1)->operator *((iDynTree::Twist const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialAcc(static_cast< const iDynTree::SpatialAcc& >(result))), SWIGTYPE_p_iDynTree__SpatialAcc, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Twist_mtimes__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Twist *arg1 = (iDynTree::Twist *) 0 ;
  iDynTree::SpatialMomentum *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Wrench result;
  
  if (!SWIG_check_num_args("Twist_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Twist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Twist_mtimes" "', argument " "1"" of type '" "iDynTree::Twist const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Twist * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialMomentum,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Twist_mtimes" "', argument " "2"" of type '" "iDynTree::SpatialMomentum const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Twist_mtimes" "', argument " "2"" of type '" "iDynTree::SpatialMomentum const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialMomentum * >(argp2);
  result = ((iDynTree::Twist const *)arg1)->operator *((iDynTree::SpatialMomentum const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Wrench(static_cast< const iDynTree::Wrench& >(result))), SWIGTYPE_p_iDynTree__Wrench, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Twist_mtimes(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Twist, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Twist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Twist_mtimes__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Twist, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__SpatialMomentum, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Twist_mtimes__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Twist_mtimes'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::Twist::operator *(iDynTree::Twist const &) const\n"
    "    iDynTree::Twist::operator *(iDynTree::SpatialMomentum const &) const\n");
  return 1;
}


int _wrap_delete_Twist(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Twist *arg1 = (iDynTree::Twist *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_Twist",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Twist, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Twist" "', argument " "1"" of type '" "iDynTree::Twist *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Twist * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Wrench__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::Wrench *result = 0 ;
  
  if (!SWIG_check_num_args("new_Wrench",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::Wrench *)new iDynTree::Wrench();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Wrench, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Wrench__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Force *arg1 = 0 ;
  iDynTree::Torque *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Wrench *result = 0 ;
  
  if (!SWIG_check_num_args("new_Wrench",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__LinearForceVector3,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Wrench" "', argument " "1"" of type '" "iDynTree::Force const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Wrench" "', argument " "1"" of type '" "iDynTree::Force const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Force * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__AngularForceVector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Wrench" "', argument " "2"" of type '" "iDynTree::Torque const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Wrench" "', argument " "2"" of type '" "iDynTree::Torque const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Torque * >(argp2);
  result = (iDynTree::Wrench *)new iDynTree::Wrench((iDynTree::Force const &)*arg1,(iDynTree::Torque const &)*arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Wrench, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Wrench__SWIG_2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialForceVector *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Wrench *result = 0 ;
  
  if (!SWIG_check_num_args("new_Wrench",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__SpatialForceVector,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Wrench" "', argument " "1"" of type '" "iDynTree::SpatialForceVector const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Wrench" "', argument " "1"" of type '" "iDynTree::SpatialForceVector const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialForceVector * >(argp1);
  result = (iDynTree::Wrench *)new iDynTree::Wrench((iDynTree::SpatialForceVector const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Wrench, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Wrench__SWIG_3(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Wrench *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Wrench *result = 0 ;
  
  if (!SWIG_check_num_args("new_Wrench",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Wrench,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Wrench" "', argument " "1"" of type '" "iDynTree::Wrench const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Wrench" "', argument " "1"" of type '" "iDynTree::Wrench const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Wrench * >(argp1);
  result = (iDynTree::Wrench *)new iDynTree::Wrench((iDynTree::Wrench const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Wrench, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Wrench(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_Wrench__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Wrench, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Wrench__SWIG_3(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SpatialForceVector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Wrench__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__LinearForceVector3, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__AngularForceVector3, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Wrench__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_Wrench'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::Wrench::Wrench()\n"
    "    iDynTree::Wrench::Wrench(iDynTree::Force const &,iDynTree::Torque const &)\n"
    "    iDynTree::Wrench::Wrench(iDynTree::SpatialForceVector const &)\n"
    "    iDynTree::Wrench::Wrench(iDynTree::Wrench const &)\n");
  return 1;
}


int _wrap_Wrench_plus(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Wrench *arg1 = (iDynTree::Wrench *) 0 ;
  iDynTree::Wrench *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Wrench result;
  
  if (!SWIG_check_num_args("Wrench_plus",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Wrench, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Wrench_plus" "', argument " "1"" of type '" "iDynTree::Wrench const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Wrench * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Wrench,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Wrench_plus" "', argument " "2"" of type '" "iDynTree::Wrench const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Wrench_plus" "', argument " "2"" of type '" "iDynTree::Wrench const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Wrench * >(argp2);
  result = ((iDynTree::Wrench const *)arg1)->operator +((iDynTree::Wrench const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Wrench(static_cast< const iDynTree::Wrench& >(result))), SWIGTYPE_p_iDynTree__Wrench, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Wrench_minus(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Wrench *arg1 = (iDynTree::Wrench *) 0 ;
  iDynTree::Wrench *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Wrench result;
  
  if (!SWIG_check_num_args("Wrench_minus",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Wrench, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Wrench_minus" "', argument " "1"" of type '" "iDynTree::Wrench const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Wrench * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Wrench,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Wrench_minus" "', argument " "2"" of type '" "iDynTree::Wrench const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Wrench_minus" "', argument " "2"" of type '" "iDynTree::Wrench const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Wrench * >(argp2);
  result = ((iDynTree::Wrench const *)arg1)->operator -((iDynTree::Wrench const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Wrench(static_cast< const iDynTree::Wrench& >(result))), SWIGTYPE_p_iDynTree__Wrench, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Wrench_uminus(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Wrench *arg1 = (iDynTree::Wrench *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Wrench result;
  
  if (!SWIG_check_num_args("Wrench_uminus",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Wrench, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Wrench_uminus" "', argument " "1"" of type '" "iDynTree::Wrench const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Wrench * >(argp1);
  result = ((iDynTree::Wrench const *)arg1)->operator -();
  _out = SWIG_NewPointerObj((new iDynTree::Wrench(static_cast< const iDynTree::Wrench& >(result))), SWIGTYPE_p_iDynTree__Wrench, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_Wrench(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Wrench *arg1 = (iDynTree::Wrench *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_Wrench",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Wrench, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Wrench" "', argument " "1"" of type '" "iDynTree::Wrench *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Wrench * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SpatialMomentum__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::SpatialMomentum *result = 0 ;
  
  if (!SWIG_check_num_args("new_SpatialMomentum",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::SpatialMomentum *)new iDynTree::SpatialMomentum();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SpatialMomentum, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SpatialMomentum__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinMomentum *arg1 = 0 ;
  iDynTree::AngMomentum *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialMomentum *result = 0 ;
  
  if (!SWIG_check_num_args("new_SpatialMomentum",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__LinearForceVector3,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SpatialMomentum" "', argument " "1"" of type '" "iDynTree::LinMomentum const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpatialMomentum" "', argument " "1"" of type '" "iDynTree::LinMomentum const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinMomentum * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__AngularForceVector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_SpatialMomentum" "', argument " "2"" of type '" "iDynTree::AngMomentum const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpatialMomentum" "', argument " "2"" of type '" "iDynTree::AngMomentum const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::AngMomentum * >(argp2);
  result = (iDynTree::SpatialMomentum *)new iDynTree::SpatialMomentum((iDynTree::LinMomentum const &)*arg1,(iDynTree::AngMomentum const &)*arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SpatialMomentum, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SpatialMomentum__SWIG_2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialForceVector *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::SpatialMomentum *result = 0 ;
  
  if (!SWIG_check_num_args("new_SpatialMomentum",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__SpatialForceVector,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SpatialMomentum" "', argument " "1"" of type '" "iDynTree::SpatialForceVector const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpatialMomentum" "', argument " "1"" of type '" "iDynTree::SpatialForceVector const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialForceVector * >(argp1);
  result = (iDynTree::SpatialMomentum *)new iDynTree::SpatialMomentum((iDynTree::SpatialForceVector const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SpatialMomentum, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SpatialMomentum__SWIG_3(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialMomentum *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::SpatialMomentum *result = 0 ;
  
  if (!SWIG_check_num_args("new_SpatialMomentum",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__SpatialMomentum,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SpatialMomentum" "', argument " "1"" of type '" "iDynTree::SpatialMomentum const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpatialMomentum" "', argument " "1"" of type '" "iDynTree::SpatialMomentum const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialMomentum * >(argp1);
  result = (iDynTree::SpatialMomentum *)new iDynTree::SpatialMomentum((iDynTree::SpatialMomentum const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SpatialMomentum, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SpatialMomentum(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_SpatialMomentum__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SpatialMomentum, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SpatialMomentum__SWIG_3(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SpatialForceVector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SpatialMomentum__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__LinearForceVector3, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__AngularForceVector3, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_SpatialMomentum__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_SpatialMomentum'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::SpatialMomentum::SpatialMomentum()\n"
    "    iDynTree::SpatialMomentum::SpatialMomentum(iDynTree::LinMomentum const &,iDynTree::AngMomentum const &)\n"
    "    iDynTree::SpatialMomentum::SpatialMomentum(iDynTree::SpatialForceVector const &)\n"
    "    iDynTree::SpatialMomentum::SpatialMomentum(iDynTree::SpatialMomentum const &)\n");
  return 1;
}


int _wrap_SpatialMomentum_plus(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialMomentum *arg1 = (iDynTree::SpatialMomentum *) 0 ;
  iDynTree::SpatialMomentum *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialMomentum result;
  
  if (!SWIG_check_num_args("SpatialMomentum_plus",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialMomentum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialMomentum_plus" "', argument " "1"" of type '" "iDynTree::SpatialMomentum const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialMomentum * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialMomentum,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpatialMomentum_plus" "', argument " "2"" of type '" "iDynTree::SpatialMomentum const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialMomentum_plus" "', argument " "2"" of type '" "iDynTree::SpatialMomentum const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialMomentum * >(argp2);
  result = ((iDynTree::SpatialMomentum const *)arg1)->operator +((iDynTree::SpatialMomentum const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialMomentum(static_cast< const iDynTree::SpatialMomentum& >(result))), SWIGTYPE_p_iDynTree__SpatialMomentum, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialMomentum_minus(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialMomentum *arg1 = (iDynTree::SpatialMomentum *) 0 ;
  iDynTree::SpatialMomentum *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialMomentum result;
  
  if (!SWIG_check_num_args("SpatialMomentum_minus",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialMomentum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialMomentum_minus" "', argument " "1"" of type '" "iDynTree::SpatialMomentum const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialMomentum * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialMomentum,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpatialMomentum_minus" "', argument " "2"" of type '" "iDynTree::SpatialMomentum const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialMomentum_minus" "', argument " "2"" of type '" "iDynTree::SpatialMomentum const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialMomentum * >(argp2);
  result = ((iDynTree::SpatialMomentum const *)arg1)->operator -((iDynTree::SpatialMomentum const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialMomentum(static_cast< const iDynTree::SpatialMomentum& >(result))), SWIGTYPE_p_iDynTree__SpatialMomentum, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialMomentum_uminus(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialMomentum *arg1 = (iDynTree::SpatialMomentum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::SpatialMomentum result;
  
  if (!SWIG_check_num_args("SpatialMomentum_uminus",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialMomentum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialMomentum_uminus" "', argument " "1"" of type '" "iDynTree::SpatialMomentum const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialMomentum * >(argp1);
  result = ((iDynTree::SpatialMomentum const *)arg1)->operator -();
  _out = SWIG_NewPointerObj((new iDynTree::SpatialMomentum(static_cast< const iDynTree::SpatialMomentum& >(result))), SWIGTYPE_p_iDynTree__SpatialMomentum, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_SpatialMomentum(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialMomentum *arg1 = (iDynTree::SpatialMomentum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_SpatialMomentum",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialMomentum, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SpatialMomentum" "', argument " "1"" of type '" "iDynTree::SpatialMomentum *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialMomentum * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SpatialAcc__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::SpatialAcc *result = 0 ;
  
  if (!SWIG_check_num_args("new_SpatialAcc",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::SpatialAcc *)new iDynTree::SpatialAcc();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SpatialAcc, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SpatialAcc__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinAcceleration *arg1 = 0 ;
  iDynTree::AngAcceleration *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialAcc *result = 0 ;
  
  if (!SWIG_check_num_args("new_SpatialAcc",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__LinearMotionVector3,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SpatialAcc" "', argument " "1"" of type '" "iDynTree::LinAcceleration const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpatialAcc" "', argument " "1"" of type '" "iDynTree::LinAcceleration const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinAcceleration * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__AngularMotionVector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_SpatialAcc" "', argument " "2"" of type '" "iDynTree::AngAcceleration const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpatialAcc" "', argument " "2"" of type '" "iDynTree::AngAcceleration const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::AngAcceleration * >(argp2);
  result = (iDynTree::SpatialAcc *)new iDynTree::SpatialAcc((iDynTree::LinAcceleration const &)*arg1,(iDynTree::AngAcceleration const &)*arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SpatialAcc, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SpatialAcc__SWIG_2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialMotionVector *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::SpatialAcc *result = 0 ;
  
  if (!SWIG_check_num_args("new_SpatialAcc",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__SpatialMotionVector,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SpatialAcc" "', argument " "1"" of type '" "iDynTree::SpatialMotionVector const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpatialAcc" "', argument " "1"" of type '" "iDynTree::SpatialMotionVector const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialMotionVector * >(argp1);
  result = (iDynTree::SpatialAcc *)new iDynTree::SpatialAcc((iDynTree::SpatialMotionVector const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SpatialAcc, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SpatialAcc__SWIG_3(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialAcc *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::SpatialAcc *result = 0 ;
  
  if (!SWIG_check_num_args("new_SpatialAcc",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__SpatialAcc,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SpatialAcc" "', argument " "1"" of type '" "iDynTree::SpatialAcc const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpatialAcc" "', argument " "1"" of type '" "iDynTree::SpatialAcc const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialAcc * >(argp1);
  result = (iDynTree::SpatialAcc *)new iDynTree::SpatialAcc((iDynTree::SpatialAcc const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SpatialAcc, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SpatialAcc(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_SpatialAcc__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SpatialAcc, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SpatialAcc__SWIG_3(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SpatialMotionVector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SpatialAcc__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__LinearMotionVector3, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__AngularMotionVector3, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_SpatialAcc__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_SpatialAcc'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::SpatialAcc::SpatialAcc()\n"
    "    iDynTree::SpatialAcc::SpatialAcc(iDynTree::LinAcceleration const &,iDynTree::AngAcceleration const &)\n"
    "    iDynTree::SpatialAcc::SpatialAcc(iDynTree::SpatialMotionVector const &)\n"
    "    iDynTree::SpatialAcc::SpatialAcc(iDynTree::SpatialAcc const &)\n");
  return 1;
}


int _wrap_SpatialAcc_plus(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialAcc *arg1 = (iDynTree::SpatialAcc *) 0 ;
  iDynTree::SpatialAcc *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialAcc result;
  
  if (!SWIG_check_num_args("SpatialAcc_plus",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialAcc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialAcc_plus" "', argument " "1"" of type '" "iDynTree::SpatialAcc const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialAcc * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialAcc,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpatialAcc_plus" "', argument " "2"" of type '" "iDynTree::SpatialAcc const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialAcc_plus" "', argument " "2"" of type '" "iDynTree::SpatialAcc const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialAcc * >(argp2);
  result = ((iDynTree::SpatialAcc const *)arg1)->operator +((iDynTree::SpatialAcc const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialAcc(static_cast< const iDynTree::SpatialAcc& >(result))), SWIGTYPE_p_iDynTree__SpatialAcc, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialAcc_minus(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialAcc *arg1 = (iDynTree::SpatialAcc *) 0 ;
  iDynTree::SpatialAcc *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialAcc result;
  
  if (!SWIG_check_num_args("SpatialAcc_minus",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialAcc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialAcc_minus" "', argument " "1"" of type '" "iDynTree::SpatialAcc const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialAcc * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialAcc,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpatialAcc_minus" "', argument " "2"" of type '" "iDynTree::SpatialAcc const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialAcc_minus" "', argument " "2"" of type '" "iDynTree::SpatialAcc const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialAcc * >(argp2);
  result = ((iDynTree::SpatialAcc const *)arg1)->operator -((iDynTree::SpatialAcc const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialAcc(static_cast< const iDynTree::SpatialAcc& >(result))), SWIGTYPE_p_iDynTree__SpatialAcc, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialAcc_uminus(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialAcc *arg1 = (iDynTree::SpatialAcc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::SpatialAcc result;
  
  if (!SWIG_check_num_args("SpatialAcc_uminus",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialAcc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialAcc_uminus" "', argument " "1"" of type '" "iDynTree::SpatialAcc const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialAcc * >(argp1);
  result = ((iDynTree::SpatialAcc const *)arg1)->operator -();
  _out = SWIG_NewPointerObj((new iDynTree::SpatialAcc(static_cast< const iDynTree::SpatialAcc& >(result))), SWIGTYPE_p_iDynTree__SpatialAcc, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_SpatialAcc(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialAcc *arg1 = (iDynTree::SpatialAcc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_SpatialAcc",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialAcc, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SpatialAcc" "', argument " "1"" of type '" "iDynTree::SpatialAcc *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialAcc * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_ClassicalAcc__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::ClassicalAcc *result = 0 ;
  
  if (!SWIG_check_num_args("new_ClassicalAcc",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::ClassicalAcc *)new iDynTree::ClassicalAcc();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__ClassicalAcc, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_ClassicalAcc__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double *arg1 = (double *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::ClassicalAcc *result = 0 ;
  
  if (!SWIG_check_num_args("new_ClassicalAcc",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ClassicalAcc" "', argument " "1"" of type '" "double const *""'"); 
  }
  arg1 = reinterpret_cast< double * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ClassicalAcc" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (iDynTree::ClassicalAcc *)new iDynTree::ClassicalAcc((double const *)arg1,arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__ClassicalAcc, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_ClassicalAcc__SWIG_2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ClassicalAcc *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::ClassicalAcc *result = 0 ;
  
  if (!SWIG_check_num_args("new_ClassicalAcc",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__ClassicalAcc,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ClassicalAcc" "', argument " "1"" of type '" "iDynTree::ClassicalAcc const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ClassicalAcc" "', argument " "1"" of type '" "iDynTree::ClassicalAcc const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ClassicalAcc * >(argp1);
  result = (iDynTree::ClassicalAcc *)new iDynTree::ClassicalAcc((iDynTree::ClassicalAcc const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__ClassicalAcc, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_ClassicalAcc(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_ClassicalAcc__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__ClassicalAcc, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ClassicalAcc__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_double, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_ClassicalAcc__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_ClassicalAcc'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::ClassicalAcc::ClassicalAcc()\n"
    "    iDynTree::ClassicalAcc::ClassicalAcc(double const *,unsigned int const)\n"
    "    iDynTree::ClassicalAcc::ClassicalAcc(iDynTree::ClassicalAcc const &)\n");
  return 1;
}


int _wrap_ClassicalAcc_changeCoordFrame(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ClassicalAcc *arg1 = (iDynTree::ClassicalAcc *) 0 ;
  iDynTree::RotationRaw *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::ClassicalAcc *result = 0 ;
  
  if (!SWIG_check_num_args("ClassicalAcc_changeCoordFrame",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ClassicalAcc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClassicalAcc_changeCoordFrame" "', argument " "1"" of type '" "iDynTree::ClassicalAcc *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ClassicalAcc * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__RotationRaw,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClassicalAcc_changeCoordFrame" "', argument " "2"" of type '" "iDynTree::RotationRaw const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClassicalAcc_changeCoordFrame" "', argument " "2"" of type '" "iDynTree::RotationRaw const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::RotationRaw * >(argp2);
  result = (iDynTree::ClassicalAcc *) &(arg1)->changeCoordFrame((iDynTree::RotationRaw const &)*arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__ClassicalAcc, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ClassicalAcc_Zero(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::ClassicalAcc result;
  
  if (!SWIG_check_num_args("ClassicalAcc_Zero",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = iDynTree::ClassicalAcc::Zero();
  _out = SWIG_NewPointerObj((new iDynTree::ClassicalAcc(static_cast< const iDynTree::ClassicalAcc& >(result))), SWIGTYPE_p_iDynTree__ClassicalAcc, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ClassicalAcc_fromSpatial(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ClassicalAcc *arg1 = (iDynTree::ClassicalAcc *) 0 ;
  iDynTree::SpatialAcc *arg2 = 0 ;
  iDynTree::Twist *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("ClassicalAcc_fromSpatial",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ClassicalAcc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClassicalAcc_fromSpatial" "', argument " "1"" of type '" "iDynTree::ClassicalAcc *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ClassicalAcc * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialAcc,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClassicalAcc_fromSpatial" "', argument " "2"" of type '" "iDynTree::SpatialAcc const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClassicalAcc_fromSpatial" "', argument " "2"" of type '" "iDynTree::SpatialAcc const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialAcc * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__Twist,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ClassicalAcc_fromSpatial" "', argument " "3"" of type '" "iDynTree::Twist const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClassicalAcc_fromSpatial" "', argument " "3"" of type '" "iDynTree::Twist const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::Twist * >(argp3);
  (arg1)->fromSpatial((iDynTree::SpatialAcc const &)*arg2,(iDynTree::Twist const &)*arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ClassicalAcc_toSpatial(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ClassicalAcc *arg1 = (iDynTree::ClassicalAcc *) 0 ;
  iDynTree::SpatialAcc *arg2 = 0 ;
  iDynTree::Twist *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("ClassicalAcc_toSpatial",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ClassicalAcc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClassicalAcc_toSpatial" "', argument " "1"" of type '" "iDynTree::ClassicalAcc const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ClassicalAcc * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialAcc,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClassicalAcc_toSpatial" "', argument " "2"" of type '" "iDynTree::SpatialAcc &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClassicalAcc_toSpatial" "', argument " "2"" of type '" "iDynTree::SpatialAcc &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialAcc * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__Twist,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ClassicalAcc_toSpatial" "', argument " "3"" of type '" "iDynTree::Twist const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClassicalAcc_toSpatial" "', argument " "3"" of type '" "iDynTree::Twist const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::Twist * >(argp3);
  ((iDynTree::ClassicalAcc const *)arg1)->toSpatial(*arg2,(iDynTree::Twist const &)*arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_ClassicalAcc(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ClassicalAcc *arg1 = (iDynTree::ClassicalAcc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_ClassicalAcc",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ClassicalAcc, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ClassicalAcc" "', argument " "1"" of type '" "iDynTree::ClassicalAcc *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ClassicalAcc * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Direction__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::Direction *result = 0 ;
  
  if (!SWIG_check_num_args("new_Direction",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::Direction *)new iDynTree::Direction();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Direction, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Direction__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  iDynTree::Direction *result = 0 ;
  
  if (!SWIG_check_num_args("new_Direction",argc,3,3,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Direction" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Direction" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Direction" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (iDynTree::Direction *)new iDynTree::Direction(arg1,arg2,arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Direction, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Direction__SWIG_2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Direction *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Direction *result = 0 ;
  
  if (!SWIG_check_num_args("new_Direction",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Direction,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Direction" "', argument " "1"" of type '" "iDynTree::Direction const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Direction" "', argument " "1"" of type '" "iDynTree::Direction const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Direction * >(argp1);
  result = (iDynTree::Direction *)new iDynTree::Direction((iDynTree::Direction const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Direction, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Direction__SWIG_3(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double *arg1 = (double *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::Direction *result = 0 ;
  
  if (!SWIG_check_num_args("new_Direction",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Direction" "', argument " "1"" of type '" "double const *""'"); 
  }
  arg1 = reinterpret_cast< double * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Direction" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (iDynTree::Direction *)new iDynTree::Direction((double const *)arg1,arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Direction, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Direction(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_Direction__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Direction, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Direction__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_double, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Direction__SWIG_3(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_Direction__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_Direction'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::Direction::Direction()\n"
    "    iDynTree::Direction::Direction(double,double,double)\n"
    "    iDynTree::Direction::Direction(iDynTree::Direction const &)\n"
    "    iDynTree::Direction::Direction(double const *,unsigned int const)\n");
  return 1;
}


int _wrap_Direction_Normalize__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Direction *arg1 = (iDynTree::Direction *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Direction_Normalize",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Direction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Direction_Normalize" "', argument " "1"" of type '" "iDynTree::Direction *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Direction * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Direction_Normalize" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->Normalize(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Direction_Normalize__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Direction *arg1 = (iDynTree::Direction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Direction_Normalize",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Direction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Direction_Normalize" "', argument " "1"" of type '" "iDynTree::Direction *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Direction * >(argp1);
  (arg1)->Normalize();
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Direction_Normalize(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Direction, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Direction_Normalize__SWIG_1(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Direction, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Direction_Normalize__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Direction_Normalize'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::Direction::Normalize(double)\n"
    "    iDynTree::Direction::Normalize()\n");
  return 1;
}


int _wrap_Direction_isParallel(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Direction *arg1 = (iDynTree::Direction *) 0 ;
  iDynTree::Direction *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("Direction_isParallel",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Direction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Direction_isParallel" "', argument " "1"" of type '" "iDynTree::Direction const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Direction * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Direction,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Direction_isParallel" "', argument " "2"" of type '" "iDynTree::Direction const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Direction_isParallel" "', argument " "2"" of type '" "iDynTree::Direction const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Direction * >(argp2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Direction_isParallel" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (bool)((iDynTree::Direction const *)arg1)->isParallel((iDynTree::Direction const &)*arg2,arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Direction_isPerpendicular(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Direction *arg1 = (iDynTree::Direction *) 0 ;
  iDynTree::Direction *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("Direction_isPerpendicular",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Direction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Direction_isPerpendicular" "', argument " "1"" of type '" "iDynTree::Direction const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Direction * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Direction,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Direction_isPerpendicular" "', argument " "2"" of type '" "iDynTree::Direction const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Direction_isPerpendicular" "', argument " "2"" of type '" "iDynTree::Direction const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Direction * >(argp2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Direction_isPerpendicular" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (bool)((iDynTree::Direction const *)arg1)->isPerpendicular((iDynTree::Direction const &)*arg2,arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Direction_reverse(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Direction *arg1 = (iDynTree::Direction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Direction result;
  
  if (!SWIG_check_num_args("Direction_reverse",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Direction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Direction_reverse" "', argument " "1"" of type '" "iDynTree::Direction const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Direction * >(argp1);
  result = ((iDynTree::Direction const *)arg1)->reverse();
  _out = SWIG_NewPointerObj((new iDynTree::Direction(static_cast< const iDynTree::Direction& >(result))), SWIGTYPE_p_iDynTree__Direction, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Direction_toString(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Direction *arg1 = (iDynTree::Direction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("Direction_toString",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Direction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Direction_toString" "', argument " "1"" of type '" "iDynTree::Direction const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Direction * >(argp1);
  result = ((iDynTree::Direction const *)arg1)->toString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Direction_display(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Direction *arg1 = (iDynTree::Direction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("Direction_display",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Direction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Direction_display" "', argument " "1"" of type '" "iDynTree::Direction const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Direction * >(argp1);
  result = ((iDynTree::Direction const *)arg1)->reservedToString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Direction_Default(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::Direction result;
  
  if (!SWIG_check_num_args("Direction_Default",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = iDynTree::Direction::Default();
  _out = SWIG_NewPointerObj((new iDynTree::Direction(static_cast< const iDynTree::Direction& >(result))), SWIGTYPE_p_iDynTree__Direction, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_Direction(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Direction *arg1 = (iDynTree::Direction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_Direction",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Direction, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Direction" "', argument " "1"" of type '" "iDynTree::Direction *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Direction * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Axis__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::Axis *result = 0 ;
  
  if (!SWIG_check_num_args("new_Axis",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::Axis *)new iDynTree::Axis();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Axis, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Axis__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Direction *arg1 = 0 ;
  iDynTree::Position *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Axis *result = 0 ;
  
  if (!SWIG_check_num_args("new_Axis",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Direction,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Axis" "', argument " "1"" of type '" "iDynTree::Direction const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Axis" "', argument " "1"" of type '" "iDynTree::Direction const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Direction * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Position,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Axis" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Axis" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Position * >(argp2);
  result = (iDynTree::Axis *)new iDynTree::Axis((iDynTree::Direction const &)*arg1,(iDynTree::Position const &)*arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Axis, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Axis__SWIG_2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Axis *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Axis *result = 0 ;
  
  if (!SWIG_check_num_args("new_Axis",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Axis,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Axis" "', argument " "1"" of type '" "iDynTree::Axis const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Axis" "', argument " "1"" of type '" "iDynTree::Axis const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Axis * >(argp1);
  result = (iDynTree::Axis *)new iDynTree::Axis((iDynTree::Axis const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Axis, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Axis(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_Axis__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Axis, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Axis__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Direction, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Position, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Axis__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_Axis'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::Axis::Axis()\n"
    "    iDynTree::Axis::Axis(iDynTree::Direction const &,iDynTree::Position const &)\n"
    "    iDynTree::Axis::Axis(iDynTree::Axis const &)\n");
  return 1;
}


int _wrap_Axis_getDirection(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Axis *arg1 = (iDynTree::Axis *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Direction *result = 0 ;
  
  if (!SWIG_check_num_args("Axis_getDirection",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Axis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Axis_getDirection" "', argument " "1"" of type '" "iDynTree::Axis const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Axis * >(argp1);
  result = (iDynTree::Direction *) &((iDynTree::Axis const *)arg1)->getDirection();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Direction, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Axis_getOrigin(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Axis *arg1 = (iDynTree::Axis *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Position *result = 0 ;
  
  if (!SWIG_check_num_args("Axis_getOrigin",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Axis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Axis_getOrigin" "', argument " "1"" of type '" "iDynTree::Axis const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Axis * >(argp1);
  result = (iDynTree::Position *) &((iDynTree::Axis const *)arg1)->getOrigin();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Position, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Axis_setDirection(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Axis *arg1 = (iDynTree::Axis *) 0 ;
  iDynTree::Direction *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Axis_setDirection",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Axis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Axis_setDirection" "', argument " "1"" of type '" "iDynTree::Axis *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Axis * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Direction,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Axis_setDirection" "', argument " "2"" of type '" "iDynTree::Direction const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Axis_setDirection" "', argument " "2"" of type '" "iDynTree::Direction const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Direction * >(argp2);
  (arg1)->setDirection((iDynTree::Direction const &)*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Axis_setOrigin(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Axis *arg1 = (iDynTree::Axis *) 0 ;
  iDynTree::Position *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Axis_setOrigin",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Axis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Axis_setOrigin" "', argument " "1"" of type '" "iDynTree::Axis *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Axis * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Position,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Axis_setOrigin" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Axis_setOrigin" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Position * >(argp2);
  (arg1)->setOrigin((iDynTree::Position const &)*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Axis_getRotationTransform(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Axis *arg1 = (iDynTree::Axis *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::Transform result;
  
  if (!SWIG_check_num_args("Axis_getRotationTransform",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Axis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Axis_getRotationTransform" "', argument " "1"" of type '" "iDynTree::Axis const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Axis * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Axis_getRotationTransform" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = ((iDynTree::Axis const *)arg1)->getRotationTransform(arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Transform(static_cast< const iDynTree::Transform& >(result))), SWIGTYPE_p_iDynTree__Transform, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Axis_getRotationTransformDerivative(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Axis *arg1 = (iDynTree::Axis *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::TransformDerivative result;
  
  if (!SWIG_check_num_args("Axis_getRotationTransformDerivative",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Axis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Axis_getRotationTransformDerivative" "', argument " "1"" of type '" "iDynTree::Axis const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Axis * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Axis_getRotationTransformDerivative" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = ((iDynTree::Axis const *)arg1)->getRotationTransformDerivative(arg2);
  _out = SWIG_NewPointerObj((new iDynTree::TransformDerivative(static_cast< const iDynTree::TransformDerivative& >(result))), SWIGTYPE_p_iDynTree__TransformDerivative, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Axis_getRotationTwist(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Axis *arg1 = (iDynTree::Axis *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::Twist result;
  
  if (!SWIG_check_num_args("Axis_getRotationTwist",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Axis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Axis_getRotationTwist" "', argument " "1"" of type '" "iDynTree::Axis const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Axis * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Axis_getRotationTwist" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = ((iDynTree::Axis const *)arg1)->getRotationTwist(arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Twist(static_cast< const iDynTree::Twist& >(result))), SWIGTYPE_p_iDynTree__Twist, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Axis_getRotationSpatialAcc(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Axis *arg1 = (iDynTree::Axis *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialAcc result;
  
  if (!SWIG_check_num_args("Axis_getRotationSpatialAcc",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Axis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Axis_getRotationSpatialAcc" "', argument " "1"" of type '" "iDynTree::Axis const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Axis * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Axis_getRotationSpatialAcc" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = ((iDynTree::Axis const *)arg1)->getRotationSpatialAcc(arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialAcc(static_cast< const iDynTree::SpatialAcc& >(result))), SWIGTYPE_p_iDynTree__SpatialAcc, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Axis_getTranslationTransform(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Axis *arg1 = (iDynTree::Axis *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::Transform result;
  
  if (!SWIG_check_num_args("Axis_getTranslationTransform",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Axis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Axis_getTranslationTransform" "', argument " "1"" of type '" "iDynTree::Axis const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Axis * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Axis_getTranslationTransform" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = ((iDynTree::Axis const *)arg1)->getTranslationTransform(arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Transform(static_cast< const iDynTree::Transform& >(result))), SWIGTYPE_p_iDynTree__Transform, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Axis_getTranslationTransformDerivative(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Axis *arg1 = (iDynTree::Axis *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::TransformDerivative result;
  
  if (!SWIG_check_num_args("Axis_getTranslationTransformDerivative",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Axis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Axis_getTranslationTransformDerivative" "', argument " "1"" of type '" "iDynTree::Axis const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Axis * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Axis_getTranslationTransformDerivative" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = ((iDynTree::Axis const *)arg1)->getTranslationTransformDerivative(arg2);
  _out = SWIG_NewPointerObj((new iDynTree::TransformDerivative(static_cast< const iDynTree::TransformDerivative& >(result))), SWIGTYPE_p_iDynTree__TransformDerivative, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Axis_getTranslationTwist(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Axis *arg1 = (iDynTree::Axis *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::Twist result;
  
  if (!SWIG_check_num_args("Axis_getTranslationTwist",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Axis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Axis_getTranslationTwist" "', argument " "1"" of type '" "iDynTree::Axis const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Axis * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Axis_getTranslationTwist" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = ((iDynTree::Axis const *)arg1)->getTranslationTwist(arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Twist(static_cast< const iDynTree::Twist& >(result))), SWIGTYPE_p_iDynTree__Twist, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Axis_getTranslationSpatialAcc(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Axis *arg1 = (iDynTree::Axis *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialAcc result;
  
  if (!SWIG_check_num_args("Axis_getTranslationSpatialAcc",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Axis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Axis_getTranslationSpatialAcc" "', argument " "1"" of type '" "iDynTree::Axis const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Axis * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Axis_getTranslationSpatialAcc" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = ((iDynTree::Axis const *)arg1)->getTranslationSpatialAcc(arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialAcc(static_cast< const iDynTree::SpatialAcc& >(result))), SWIGTYPE_p_iDynTree__SpatialAcc, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Axis_isParallel(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Axis *arg1 = (iDynTree::Axis *) 0 ;
  iDynTree::Axis *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("Axis_isParallel",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Axis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Axis_isParallel" "', argument " "1"" of type '" "iDynTree::Axis const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Axis * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Axis,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Axis_isParallel" "', argument " "2"" of type '" "iDynTree::Axis const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Axis_isParallel" "', argument " "2"" of type '" "iDynTree::Axis const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Axis * >(argp2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Axis_isParallel" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (bool)((iDynTree::Axis const *)arg1)->isParallel((iDynTree::Axis const &)*arg2,arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Axis_reverse(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Axis *arg1 = (iDynTree::Axis *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Axis result;
  
  if (!SWIG_check_num_args("Axis_reverse",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Axis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Axis_reverse" "', argument " "1"" of type '" "iDynTree::Axis const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Axis * >(argp1);
  result = ((iDynTree::Axis const *)arg1)->reverse();
  _out = SWIG_NewPointerObj((new iDynTree::Axis(static_cast< const iDynTree::Axis& >(result))), SWIGTYPE_p_iDynTree__Axis, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Axis_toString(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Axis *arg1 = (iDynTree::Axis *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("Axis_toString",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Axis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Axis_toString" "', argument " "1"" of type '" "iDynTree::Axis const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Axis * >(argp1);
  result = ((iDynTree::Axis const *)arg1)->toString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Axis_display(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Axis *arg1 = (iDynTree::Axis *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("Axis_display",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Axis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Axis_display" "', argument " "1"" of type '" "iDynTree::Axis const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Axis * >(argp1);
  result = ((iDynTree::Axis const *)arg1)->reservedToString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_Axis(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Axis *arg1 = (iDynTree::Axis *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_Axis",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Axis, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Axis" "', argument " "1"" of type '" "iDynTree::Axis *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Axis * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_RotationalInertiaRaw__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::RotationalInertiaRaw *result = 0 ;
  
  if (!SWIG_check_num_args("new_RotationalInertiaRaw",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::RotationalInertiaRaw *)new iDynTree::RotationalInertiaRaw();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__RotationalInertiaRaw, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_RotationalInertiaRaw__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double *arg1 = (double *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  iDynTree::RotationalInertiaRaw *result = 0 ;
  
  if (!SWIG_check_num_args("new_RotationalInertiaRaw",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RotationalInertiaRaw" "', argument " "1"" of type '" "double const *""'"); 
  }
  arg1 = reinterpret_cast< double * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_RotationalInertiaRaw" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_RotationalInertiaRaw" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  result = (iDynTree::RotationalInertiaRaw *)new iDynTree::RotationalInertiaRaw((double const *)arg1,arg2,arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__RotationalInertiaRaw, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_RotationalInertiaRaw__SWIG_2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationalInertiaRaw *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::RotationalInertiaRaw *result = 0 ;
  
  if (!SWIG_check_num_args("new_RotationalInertiaRaw",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__RotationalInertiaRaw,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RotationalInertiaRaw" "', argument " "1"" of type '" "iDynTree::RotationalInertiaRaw const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RotationalInertiaRaw" "', argument " "1"" of type '" "iDynTree::RotationalInertiaRaw const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationalInertiaRaw * >(argp1);
  result = (iDynTree::RotationalInertiaRaw *)new iDynTree::RotationalInertiaRaw((iDynTree::RotationalInertiaRaw const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__RotationalInertiaRaw, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_RotationalInertiaRaw(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_RotationalInertiaRaw__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__RotationalInertiaRaw, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_RotationalInertiaRaw__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_double, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_RotationalInertiaRaw__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_RotationalInertiaRaw'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::RotationalInertiaRaw::RotationalInertiaRaw()\n"
    "    iDynTree::RotationalInertiaRaw::RotationalInertiaRaw(double const *,unsigned int const,unsigned int const)\n"
    "    iDynTree::RotationalInertiaRaw::RotationalInertiaRaw(iDynTree::RotationalInertiaRaw const &)\n");
  return 1;
}


int _wrap_RotationalInertiaRaw_Zero(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::RotationalInertiaRaw result;
  
  if (!SWIG_check_num_args("RotationalInertiaRaw_Zero",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = iDynTree::RotationalInertiaRaw::Zero();
  _out = SWIG_NewPointerObj((new iDynTree::RotationalInertiaRaw(static_cast< const iDynTree::RotationalInertiaRaw& >(result))), SWIGTYPE_p_iDynTree__RotationalInertiaRaw, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_RotationalInertiaRaw(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationalInertiaRaw *arg1 = (iDynTree::RotationalInertiaRaw *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_RotationalInertiaRaw",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RotationalInertiaRaw, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RotationalInertiaRaw" "', argument " "1"" of type '" "iDynTree::RotationalInertiaRaw *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationalInertiaRaw * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SpatialInertiaRaw__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::SpatialInertiaRaw *result = 0 ;
  
  if (!SWIG_check_num_args("new_SpatialInertiaRaw",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::SpatialInertiaRaw *)new iDynTree::SpatialInertiaRaw();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SpatialInertiaRaw, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SpatialInertiaRaw__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double arg1 ;
  iDynTree::PositionRaw *arg2 = 0 ;
  iDynTree::RotationalInertiaRaw *arg3 = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  mxArray * _out;
  iDynTree::SpatialInertiaRaw *result = 0 ;
  
  if (!SWIG_check_num_args("new_SpatialInertiaRaw",argc,3,3,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SpatialInertiaRaw" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__PositionRaw,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_SpatialInertiaRaw" "', argument " "2"" of type '" "iDynTree::PositionRaw const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpatialInertiaRaw" "', argument " "2"" of type '" "iDynTree::PositionRaw const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::PositionRaw * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__RotationalInertiaRaw,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_SpatialInertiaRaw" "', argument " "3"" of type '" "iDynTree::RotationalInertiaRaw const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpatialInertiaRaw" "', argument " "3"" of type '" "iDynTree::RotationalInertiaRaw const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::RotationalInertiaRaw * >(argp3);
  result = (iDynTree::SpatialInertiaRaw *)new iDynTree::SpatialInertiaRaw(arg1,(iDynTree::PositionRaw const &)*arg2,(iDynTree::RotationalInertiaRaw const &)*arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SpatialInertiaRaw, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SpatialInertiaRaw__SWIG_2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialInertiaRaw *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::SpatialInertiaRaw *result = 0 ;
  
  if (!SWIG_check_num_args("new_SpatialInertiaRaw",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__SpatialInertiaRaw,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SpatialInertiaRaw" "', argument " "1"" of type '" "iDynTree::SpatialInertiaRaw const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpatialInertiaRaw" "', argument " "1"" of type '" "iDynTree::SpatialInertiaRaw const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialInertiaRaw * >(argp1);
  result = (iDynTree::SpatialInertiaRaw *)new iDynTree::SpatialInertiaRaw((iDynTree::SpatialInertiaRaw const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SpatialInertiaRaw, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SpatialInertiaRaw(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_SpatialInertiaRaw__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SpatialInertiaRaw, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SpatialInertiaRaw__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__PositionRaw, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_iDynTree__RotationalInertiaRaw, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_SpatialInertiaRaw__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_SpatialInertiaRaw'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::SpatialInertiaRaw::SpatialInertiaRaw()\n"
    "    iDynTree::SpatialInertiaRaw::SpatialInertiaRaw(double const,iDynTree::PositionRaw const &,iDynTree::RotationalInertiaRaw const &)\n"
    "    iDynTree::SpatialInertiaRaw::SpatialInertiaRaw(iDynTree::SpatialInertiaRaw const &)\n");
  return 1;
}


int _wrap_SpatialInertiaRaw_fromRotationalInertiaWrtCenterOfMass(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialInertiaRaw *arg1 = (iDynTree::SpatialInertiaRaw *) 0 ;
  double arg2 ;
  iDynTree::PositionRaw *arg3 = 0 ;
  iDynTree::RotationalInertiaRaw *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("SpatialInertiaRaw_fromRotationalInertiaWrtCenterOfMass",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialInertiaRaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialInertiaRaw_fromRotationalInertiaWrtCenterOfMass" "', argument " "1"" of type '" "iDynTree::SpatialInertiaRaw *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialInertiaRaw * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SpatialInertiaRaw_fromRotationalInertiaWrtCenterOfMass" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__PositionRaw,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SpatialInertiaRaw_fromRotationalInertiaWrtCenterOfMass" "', argument " "3"" of type '" "iDynTree::PositionRaw const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialInertiaRaw_fromRotationalInertiaWrtCenterOfMass" "', argument " "3"" of type '" "iDynTree::PositionRaw const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::PositionRaw * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__RotationalInertiaRaw,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "SpatialInertiaRaw_fromRotationalInertiaWrtCenterOfMass" "', argument " "4"" of type '" "iDynTree::RotationalInertiaRaw const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialInertiaRaw_fromRotationalInertiaWrtCenterOfMass" "', argument " "4"" of type '" "iDynTree::RotationalInertiaRaw const &""'"); 
  }
  arg4 = reinterpret_cast< iDynTree::RotationalInertiaRaw * >(argp4);
  (arg1)->fromRotationalInertiaWrtCenterOfMass(arg2,(iDynTree::PositionRaw const &)*arg3,(iDynTree::RotationalInertiaRaw const &)*arg4);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialInertiaRaw_getMass(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialInertiaRaw *arg1 = (iDynTree::SpatialInertiaRaw *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("SpatialInertiaRaw_getMass",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialInertiaRaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialInertiaRaw_getMass" "', argument " "1"" of type '" "iDynTree::SpatialInertiaRaw const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialInertiaRaw * >(argp1);
  result = (double)((iDynTree::SpatialInertiaRaw const *)arg1)->getMass();
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialInertiaRaw_getCenterOfMass(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialInertiaRaw *arg1 = (iDynTree::SpatialInertiaRaw *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::PositionRaw result;
  
  if (!SWIG_check_num_args("SpatialInertiaRaw_getCenterOfMass",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialInertiaRaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialInertiaRaw_getCenterOfMass" "', argument " "1"" of type '" "iDynTree::SpatialInertiaRaw const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialInertiaRaw * >(argp1);
  result = ((iDynTree::SpatialInertiaRaw const *)arg1)->getCenterOfMass();
  _out = SWIG_NewPointerObj((new iDynTree::PositionRaw(static_cast< const iDynTree::PositionRaw& >(result))), SWIGTYPE_p_iDynTree__PositionRaw, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialInertiaRaw_getRotationalInertiaWrtFrameOrigin(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialInertiaRaw *arg1 = (iDynTree::SpatialInertiaRaw *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::RotationalInertiaRaw *result = 0 ;
  
  if (!SWIG_check_num_args("SpatialInertiaRaw_getRotationalInertiaWrtFrameOrigin",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialInertiaRaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialInertiaRaw_getRotationalInertiaWrtFrameOrigin" "', argument " "1"" of type '" "iDynTree::SpatialInertiaRaw const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialInertiaRaw * >(argp1);
  result = (iDynTree::RotationalInertiaRaw *) &((iDynTree::SpatialInertiaRaw const *)arg1)->getRotationalInertiaWrtFrameOrigin();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__RotationalInertiaRaw, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialInertiaRaw_getRotationalInertiaWrtCenterOfMass(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialInertiaRaw *arg1 = (iDynTree::SpatialInertiaRaw *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::RotationalInertiaRaw result;
  
  if (!SWIG_check_num_args("SpatialInertiaRaw_getRotationalInertiaWrtCenterOfMass",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialInertiaRaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialInertiaRaw_getRotationalInertiaWrtCenterOfMass" "', argument " "1"" of type '" "iDynTree::SpatialInertiaRaw const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialInertiaRaw * >(argp1);
  result = ((iDynTree::SpatialInertiaRaw const *)arg1)->getRotationalInertiaWrtCenterOfMass();
  _out = SWIG_NewPointerObj((new iDynTree::RotationalInertiaRaw(static_cast< const iDynTree::RotationalInertiaRaw& >(result))), SWIGTYPE_p_iDynTree__RotationalInertiaRaw, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialInertiaRaw_combine(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialInertiaRaw *arg1 = 0 ;
  iDynTree::SpatialInertiaRaw *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialInertiaRaw result;
  
  if (!SWIG_check_num_args("SpatialInertiaRaw_combine",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__SpatialInertiaRaw,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialInertiaRaw_combine" "', argument " "1"" of type '" "iDynTree::SpatialInertiaRaw const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialInertiaRaw_combine" "', argument " "1"" of type '" "iDynTree::SpatialInertiaRaw const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialInertiaRaw * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialInertiaRaw,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpatialInertiaRaw_combine" "', argument " "2"" of type '" "iDynTree::SpatialInertiaRaw const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialInertiaRaw_combine" "', argument " "2"" of type '" "iDynTree::SpatialInertiaRaw const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialInertiaRaw * >(argp2);
  result = iDynTree::SpatialInertiaRaw::combine((iDynTree::SpatialInertiaRaw const &)*arg1,(iDynTree::SpatialInertiaRaw const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialInertiaRaw(static_cast< const iDynTree::SpatialInertiaRaw& >(result))), SWIGTYPE_p_iDynTree__SpatialInertiaRaw, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialInertiaRaw_multiply(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialInertiaRaw *arg1 = (iDynTree::SpatialInertiaRaw *) 0 ;
  iDynTree::SpatialMotionVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialForceVector result;
  
  if (!SWIG_check_num_args("SpatialInertiaRaw_multiply",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialInertiaRaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialInertiaRaw_multiply" "', argument " "1"" of type '" "iDynTree::SpatialInertiaRaw const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialInertiaRaw * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialMotionVector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpatialInertiaRaw_multiply" "', argument " "2"" of type '" "iDynTree::SpatialMotionVector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialInertiaRaw_multiply" "', argument " "2"" of type '" "iDynTree::SpatialMotionVector const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialMotionVector * >(argp2);
  result = ((iDynTree::SpatialInertiaRaw const *)arg1)->multiply((iDynTree::SpatialMotionVector const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialForceVector(static_cast< const iDynTree::SpatialForceVector& >(result))), SWIGTYPE_p_iDynTree__SpatialForceVector, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialInertiaRaw_zero(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialInertiaRaw *arg1 = (iDynTree::SpatialInertiaRaw *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("SpatialInertiaRaw_zero",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialInertiaRaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialInertiaRaw_zero" "', argument " "1"" of type '" "iDynTree::SpatialInertiaRaw *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialInertiaRaw * >(argp1);
  (arg1)->zero();
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_SpatialInertiaRaw(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialInertiaRaw *arg1 = (iDynTree::SpatialInertiaRaw *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_SpatialInertiaRaw",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialInertiaRaw, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SpatialInertiaRaw" "', argument " "1"" of type '" "iDynTree::SpatialInertiaRaw *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialInertiaRaw * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SpatialInertia__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::SpatialInertia *result = 0 ;
  
  if (!SWIG_check_num_args("new_SpatialInertia",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::SpatialInertia *)new iDynTree::SpatialInertia();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SpatialInertia, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SpatialInertia__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double arg1 ;
  iDynTree::PositionRaw *arg2 = 0 ;
  iDynTree::RotationalInertiaRaw *arg3 = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  mxArray * _out;
  iDynTree::SpatialInertia *result = 0 ;
  
  if (!SWIG_check_num_args("new_SpatialInertia",argc,3,3,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SpatialInertia" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__PositionRaw,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_SpatialInertia" "', argument " "2"" of type '" "iDynTree::PositionRaw const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpatialInertia" "', argument " "2"" of type '" "iDynTree::PositionRaw const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::PositionRaw * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__RotationalInertiaRaw,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_SpatialInertia" "', argument " "3"" of type '" "iDynTree::RotationalInertiaRaw const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpatialInertia" "', argument " "3"" of type '" "iDynTree::RotationalInertiaRaw const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::RotationalInertiaRaw * >(argp3);
  result = (iDynTree::SpatialInertia *)new iDynTree::SpatialInertia(arg1,(iDynTree::PositionRaw const &)*arg2,(iDynTree::RotationalInertiaRaw const &)*arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SpatialInertia, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SpatialInertia__SWIG_2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialInertiaRaw *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::SpatialInertia *result = 0 ;
  
  if (!SWIG_check_num_args("new_SpatialInertia",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__SpatialInertiaRaw,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SpatialInertia" "', argument " "1"" of type '" "iDynTree::SpatialInertiaRaw const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpatialInertia" "', argument " "1"" of type '" "iDynTree::SpatialInertiaRaw const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialInertiaRaw * >(argp1);
  result = (iDynTree::SpatialInertia *)new iDynTree::SpatialInertia((iDynTree::SpatialInertiaRaw const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SpatialInertia, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SpatialInertia__SWIG_3(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialInertia *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::SpatialInertia *result = 0 ;
  
  if (!SWIG_check_num_args("new_SpatialInertia",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__SpatialInertia,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SpatialInertia" "', argument " "1"" of type '" "iDynTree::SpatialInertia const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpatialInertia" "', argument " "1"" of type '" "iDynTree::SpatialInertia const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialInertia * >(argp1);
  result = (iDynTree::SpatialInertia *)new iDynTree::SpatialInertia((iDynTree::SpatialInertia const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SpatialInertia, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SpatialInertia(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_SpatialInertia__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SpatialInertia, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SpatialInertia__SWIG_3(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SpatialInertiaRaw, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SpatialInertia__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__PositionRaw, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_iDynTree__RotationalInertiaRaw, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_SpatialInertia__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_SpatialInertia'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::SpatialInertia::SpatialInertia()\n"
    "    iDynTree::SpatialInertia::SpatialInertia(double const,iDynTree::PositionRaw const &,iDynTree::RotationalInertiaRaw const &)\n"
    "    iDynTree::SpatialInertia::SpatialInertia(iDynTree::SpatialInertiaRaw const &)\n"
    "    iDynTree::SpatialInertia::SpatialInertia(iDynTree::SpatialInertia const &)\n");
  return 1;
}


int _wrap_SpatialInertia_combine(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialInertia *arg1 = 0 ;
  iDynTree::SpatialInertia *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialInertia result;
  
  if (!SWIG_check_num_args("SpatialInertia_combine",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__SpatialInertia,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialInertia_combine" "', argument " "1"" of type '" "iDynTree::SpatialInertia const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialInertia_combine" "', argument " "1"" of type '" "iDynTree::SpatialInertia const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialInertia * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialInertia,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpatialInertia_combine" "', argument " "2"" of type '" "iDynTree::SpatialInertia const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialInertia_combine" "', argument " "2"" of type '" "iDynTree::SpatialInertia const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialInertia * >(argp2);
  result = iDynTree::SpatialInertia::combine((iDynTree::SpatialInertia const &)*arg1,(iDynTree::SpatialInertia const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialInertia(static_cast< const iDynTree::SpatialInertia& >(result))), SWIGTYPE_p_iDynTree__SpatialInertia, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialInertia_asMatrix(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialInertia *arg1 = (iDynTree::SpatialInertia *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Matrix6x6 result;
  
  if (!SWIG_check_num_args("SpatialInertia_asMatrix",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialInertia, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialInertia_asMatrix" "', argument " "1"" of type '" "iDynTree::SpatialInertia const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialInertia * >(argp1);
  result = ((iDynTree::SpatialInertia const *)arg1)->asMatrix();
  _out = SWIG_NewPointerObj((new iDynTree::Matrix6x6(static_cast< const iDynTree::Matrix6x6& >(result))), SWIGTYPE_p_iDynTree__MatrixFixSizeT_6_6_t, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialInertia_applyInverse(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialInertia *arg1 = (iDynTree::SpatialInertia *) 0 ;
  iDynTree::SpatialMomentum *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Twist result;
  
  if (!SWIG_check_num_args("SpatialInertia_applyInverse",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialInertia, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialInertia_applyInverse" "', argument " "1"" of type '" "iDynTree::SpatialInertia const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialInertia * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialMomentum,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpatialInertia_applyInverse" "', argument " "2"" of type '" "iDynTree::SpatialMomentum const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialInertia_applyInverse" "', argument " "2"" of type '" "iDynTree::SpatialMomentum const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialMomentum * >(argp2);
  result = ((iDynTree::SpatialInertia const *)arg1)->applyInverse((iDynTree::SpatialMomentum const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Twist(static_cast< const iDynTree::Twist& >(result))), SWIGTYPE_p_iDynTree__Twist, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialInertia_getInverse(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialInertia *arg1 = (iDynTree::SpatialInertia *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Matrix6x6 result;
  
  if (!SWIG_check_num_args("SpatialInertia_getInverse",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialInertia, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialInertia_getInverse" "', argument " "1"" of type '" "iDynTree::SpatialInertia const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialInertia * >(argp1);
  result = ((iDynTree::SpatialInertia const *)arg1)->getInverse();
  _out = SWIG_NewPointerObj((new iDynTree::Matrix6x6(static_cast< const iDynTree::Matrix6x6& >(result))), SWIGTYPE_p_iDynTree__MatrixFixSizeT_6_6_t, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialInertia_plus(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialInertia *arg1 = (iDynTree::SpatialInertia *) 0 ;
  iDynTree::SpatialInertia *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialInertia result;
  
  if (!SWIG_check_num_args("SpatialInertia_plus",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialInertia, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialInertia_plus" "', argument " "1"" of type '" "iDynTree::SpatialInertia const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialInertia * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialInertia,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpatialInertia_plus" "', argument " "2"" of type '" "iDynTree::SpatialInertia const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialInertia_plus" "', argument " "2"" of type '" "iDynTree::SpatialInertia const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialInertia * >(argp2);
  result = ((iDynTree::SpatialInertia const *)arg1)->operator +((iDynTree::SpatialInertia const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialInertia(static_cast< const iDynTree::SpatialInertia& >(result))), SWIGTYPE_p_iDynTree__SpatialInertia, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialInertia_mtimes__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialInertia *arg1 = (iDynTree::SpatialInertia *) 0 ;
  iDynTree::SpatialMotionVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialForceVector result;
  
  if (!SWIG_check_num_args("SpatialInertia_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialInertia, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialInertia_mtimes" "', argument " "1"" of type '" "iDynTree::SpatialInertia const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialInertia * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialMotionVector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpatialInertia_mtimes" "', argument " "2"" of type '" "iDynTree::SpatialMotionVector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialInertia_mtimes" "', argument " "2"" of type '" "iDynTree::SpatialMotionVector const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialMotionVector * >(argp2);
  result = ((iDynTree::SpatialInertia const *)arg1)->operator *((iDynTree::SpatialMotionVector const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialForceVector(static_cast< const iDynTree::SpatialForceVector& >(result))), SWIGTYPE_p_iDynTree__SpatialForceVector, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialInertia_mtimes__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialInertia *arg1 = (iDynTree::SpatialInertia *) 0 ;
  iDynTree::Twist *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialMomentum result;
  
  if (!SWIG_check_num_args("SpatialInertia_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialInertia, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialInertia_mtimes" "', argument " "1"" of type '" "iDynTree::SpatialInertia const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialInertia * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Twist,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpatialInertia_mtimes" "', argument " "2"" of type '" "iDynTree::Twist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialInertia_mtimes" "', argument " "2"" of type '" "iDynTree::Twist const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Twist * >(argp2);
  result = ((iDynTree::SpatialInertia const *)arg1)->operator *((iDynTree::Twist const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialMomentum(static_cast< const iDynTree::SpatialMomentum& >(result))), SWIGTYPE_p_iDynTree__SpatialMomentum, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialInertia_mtimes__SWIG_2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialInertia *arg1 = (iDynTree::SpatialInertia *) 0 ;
  iDynTree::SpatialAcc *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Wrench result;
  
  if (!SWIG_check_num_args("SpatialInertia_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialInertia, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialInertia_mtimes" "', argument " "1"" of type '" "iDynTree::SpatialInertia const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialInertia * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialAcc,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpatialInertia_mtimes" "', argument " "2"" of type '" "iDynTree::SpatialAcc const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialInertia_mtimes" "', argument " "2"" of type '" "iDynTree::SpatialAcc const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialAcc * >(argp2);
  result = ((iDynTree::SpatialInertia const *)arg1)->operator *((iDynTree::SpatialAcc const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Wrench(static_cast< const iDynTree::Wrench& >(result))), SWIGTYPE_p_iDynTree__Wrench, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialInertia_mtimes(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SpatialInertia, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Twist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SpatialInertia_mtimes__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SpatialInertia, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__SpatialAcc, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SpatialInertia_mtimes__SWIG_2(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SpatialInertia, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__SpatialMotionVector, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SpatialInertia_mtimes__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'SpatialInertia_mtimes'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::SpatialInertia::operator *(iDynTree::SpatialMotionVector const &) const\n"
    "    iDynTree::SpatialInertia::operator *(iDynTree::Twist const &) const\n"
    "    iDynTree::SpatialInertia::operator *(iDynTree::SpatialAcc const &) const\n");
  return 1;
}


int _wrap_SpatialInertia_biasWrench(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialInertia *arg1 = (iDynTree::SpatialInertia *) 0 ;
  iDynTree::Twist *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Wrench result;
  
  if (!SWIG_check_num_args("SpatialInertia_biasWrench",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialInertia, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialInertia_biasWrench" "', argument " "1"" of type '" "iDynTree::SpatialInertia const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialInertia * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Twist,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpatialInertia_biasWrench" "', argument " "2"" of type '" "iDynTree::Twist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialInertia_biasWrench" "', argument " "2"" of type '" "iDynTree::Twist const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Twist * >(argp2);
  result = ((iDynTree::SpatialInertia const *)arg1)->biasWrench((iDynTree::Twist const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Wrench(static_cast< const iDynTree::Wrench& >(result))), SWIGTYPE_p_iDynTree__Wrench, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialInertia_biasWrenchDerivative(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialInertia *arg1 = (iDynTree::SpatialInertia *) 0 ;
  iDynTree::Twist *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Matrix6x6 result;
  
  if (!SWIG_check_num_args("SpatialInertia_biasWrenchDerivative",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialInertia, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialInertia_biasWrenchDerivative" "', argument " "1"" of type '" "iDynTree::SpatialInertia const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialInertia * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Twist,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpatialInertia_biasWrenchDerivative" "', argument " "2"" of type '" "iDynTree::Twist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialInertia_biasWrenchDerivative" "', argument " "2"" of type '" "iDynTree::Twist const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Twist * >(argp2);
  result = ((iDynTree::SpatialInertia const *)arg1)->biasWrenchDerivative((iDynTree::Twist const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Matrix6x6(static_cast< const iDynTree::Matrix6x6& >(result))), SWIGTYPE_p_iDynTree__MatrixFixSizeT_6_6_t, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialInertia_Zero(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::SpatialInertia result;
  
  if (!SWIG_check_num_args("SpatialInertia_Zero",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = iDynTree::SpatialInertia::Zero();
  _out = SWIG_NewPointerObj((new iDynTree::SpatialInertia(static_cast< const iDynTree::SpatialInertia& >(result))), SWIGTYPE_p_iDynTree__SpatialInertia, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialInertia_asVector(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialInertia *arg1 = (iDynTree::SpatialInertia *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Vector10 result;
  
  if (!SWIG_check_num_args("SpatialInertia_asVector",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialInertia, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialInertia_asVector" "', argument " "1"" of type '" "iDynTree::SpatialInertia const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialInertia * >(argp1);
  result = ((iDynTree::SpatialInertia const *)arg1)->asVector();
  _out = SWIG_NewPointerObj((new iDynTree::Vector10(static_cast< const iDynTree::Vector10& >(result))), SWIGTYPE_p_iDynTree__VectorFixSizeT_10_t, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialInertia_fromVector(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialInertia *arg1 = (iDynTree::SpatialInertia *) 0 ;
  iDynTree::Vector10 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("SpatialInertia_fromVector",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialInertia, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialInertia_fromVector" "', argument " "1"" of type '" "iDynTree::SpatialInertia *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialInertia * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__VectorFixSizeT_10_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpatialInertia_fromVector" "', argument " "2"" of type '" "iDynTree::Vector10 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialInertia_fromVector" "', argument " "2"" of type '" "iDynTree::Vector10 const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Vector10 * >(argp2);
  (arg1)->fromVector((iDynTree::Vector10 const &)*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialInertia_isPhysicallyConsistent(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialInertia *arg1 = (iDynTree::SpatialInertia *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("SpatialInertia_isPhysicallyConsistent",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialInertia, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialInertia_isPhysicallyConsistent" "', argument " "1"" of type '" "iDynTree::SpatialInertia const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialInertia * >(argp1);
  result = (bool)((iDynTree::SpatialInertia const *)arg1)->isPhysicallyConsistent();
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialInertia_momentumRegressor(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Twist *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Matrix6x10 result;
  
  if (!SWIG_check_num_args("SpatialInertia_momentumRegressor",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Twist,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialInertia_momentumRegressor" "', argument " "1"" of type '" "iDynTree::Twist const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialInertia_momentumRegressor" "', argument " "1"" of type '" "iDynTree::Twist const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Twist * >(argp1);
  result = iDynTree::SpatialInertia::momentumRegressor((iDynTree::Twist const &)*arg1);
  _out = SWIG_NewPointerObj((new iDynTree::Matrix6x10(static_cast< const iDynTree::Matrix6x10& >(result))), SWIGTYPE_p_iDynTree__MatrixFixSizeT_6_10_t, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialInertia_momentumDerivativeRegressor(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Twist *arg1 = 0 ;
  iDynTree::SpatialAcc *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Matrix6x10 result;
  
  if (!SWIG_check_num_args("SpatialInertia_momentumDerivativeRegressor",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Twist,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialInertia_momentumDerivativeRegressor" "', argument " "1"" of type '" "iDynTree::Twist const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialInertia_momentumDerivativeRegressor" "', argument " "1"" of type '" "iDynTree::Twist const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Twist * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialAcc,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpatialInertia_momentumDerivativeRegressor" "', argument " "2"" of type '" "iDynTree::SpatialAcc const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialInertia_momentumDerivativeRegressor" "', argument " "2"" of type '" "iDynTree::SpatialAcc const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialAcc * >(argp2);
  result = iDynTree::SpatialInertia::momentumDerivativeRegressor((iDynTree::Twist const &)*arg1,(iDynTree::SpatialAcc const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Matrix6x10(static_cast< const iDynTree::Matrix6x10& >(result))), SWIGTYPE_p_iDynTree__MatrixFixSizeT_6_10_t, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialInertia_momentumDerivativeSlotineLiRegressor(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Twist *arg1 = 0 ;
  iDynTree::Twist *arg2 = 0 ;
  iDynTree::SpatialAcc *arg3 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  mxArray * _out;
  iDynTree::Matrix6x10 result;
  
  if (!SWIG_check_num_args("SpatialInertia_momentumDerivativeSlotineLiRegressor",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Twist,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialInertia_momentumDerivativeSlotineLiRegressor" "', argument " "1"" of type '" "iDynTree::Twist const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialInertia_momentumDerivativeSlotineLiRegressor" "', argument " "1"" of type '" "iDynTree::Twist const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Twist * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Twist,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpatialInertia_momentumDerivativeSlotineLiRegressor" "', argument " "2"" of type '" "iDynTree::Twist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialInertia_momentumDerivativeSlotineLiRegressor" "', argument " "2"" of type '" "iDynTree::Twist const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Twist * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__SpatialAcc,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SpatialInertia_momentumDerivativeSlotineLiRegressor" "', argument " "3"" of type '" "iDynTree::SpatialAcc const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialInertia_momentumDerivativeSlotineLiRegressor" "', argument " "3"" of type '" "iDynTree::SpatialAcc const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::SpatialAcc * >(argp3);
  result = iDynTree::SpatialInertia::momentumDerivativeSlotineLiRegressor((iDynTree::Twist const &)*arg1,(iDynTree::Twist const &)*arg2,(iDynTree::SpatialAcc const &)*arg3);
  _out = SWIG_NewPointerObj((new iDynTree::Matrix6x10(static_cast< const iDynTree::Matrix6x10& >(result))), SWIGTYPE_p_iDynTree__MatrixFixSizeT_6_10_t, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_SpatialInertia(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialInertia *arg1 = (iDynTree::SpatialInertia *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_SpatialInertia",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialInertia, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SpatialInertia" "', argument " "1"" of type '" "iDynTree::SpatialInertia *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialInertia * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_ArticulatedBodyInertia__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::ArticulatedBodyInertia *result = 0 ;
  
  if (!SWIG_check_num_args("new_ArticulatedBodyInertia",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::ArticulatedBodyInertia *)new iDynTree::ArticulatedBodyInertia();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__ArticulatedBodyInertia, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_ArticulatedBodyInertia__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double *arg1 = (double *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  iDynTree::ArticulatedBodyInertia *result = 0 ;
  
  if (!SWIG_check_num_args("new_ArticulatedBodyInertia",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ArticulatedBodyInertia" "', argument " "1"" of type '" "double const *""'"); 
  }
  arg1 = reinterpret_cast< double * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ArticulatedBodyInertia" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ArticulatedBodyInertia" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  result = (iDynTree::ArticulatedBodyInertia *)new iDynTree::ArticulatedBodyInertia((double const *)arg1,arg2,arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__ArticulatedBodyInertia, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_ArticulatedBodyInertia__SWIG_2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialInertia *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::ArticulatedBodyInertia *result = 0 ;
  
  if (!SWIG_check_num_args("new_ArticulatedBodyInertia",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__SpatialInertia,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ArticulatedBodyInertia" "', argument " "1"" of type '" "iDynTree::SpatialInertia const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ArticulatedBodyInertia" "', argument " "1"" of type '" "iDynTree::SpatialInertia const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialInertia * >(argp1);
  result = (iDynTree::ArticulatedBodyInertia *)new iDynTree::ArticulatedBodyInertia((iDynTree::SpatialInertia const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__ArticulatedBodyInertia, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_ArticulatedBodyInertia__SWIG_3(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ArticulatedBodyInertia *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::ArticulatedBodyInertia *result = 0 ;
  
  if (!SWIG_check_num_args("new_ArticulatedBodyInertia",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__ArticulatedBodyInertia,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ArticulatedBodyInertia" "', argument " "1"" of type '" "iDynTree::ArticulatedBodyInertia const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ArticulatedBodyInertia" "', argument " "1"" of type '" "iDynTree::ArticulatedBodyInertia const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ArticulatedBodyInertia * >(argp1);
  result = (iDynTree::ArticulatedBodyInertia *)new iDynTree::ArticulatedBodyInertia((iDynTree::ArticulatedBodyInertia const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__ArticulatedBodyInertia, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_ArticulatedBodyInertia(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_ArticulatedBodyInertia__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SpatialInertia, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ArticulatedBodyInertia__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__ArticulatedBodyInertia, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ArticulatedBodyInertia__SWIG_3(resc,resv,argc,argv);
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_double, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_ArticulatedBodyInertia__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_ArticulatedBodyInertia'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::ArticulatedBodyInertia::ArticulatedBodyInertia()\n"
    "    iDynTree::ArticulatedBodyInertia::ArticulatedBodyInertia(double const *,unsigned int const,unsigned int const)\n"
    "    iDynTree::ArticulatedBodyInertia::ArticulatedBodyInertia(iDynTree::SpatialInertia const &)\n"
    "    iDynTree::ArticulatedBodyInertia::ArticulatedBodyInertia(iDynTree::ArticulatedBodyInertia const &)\n");
  return 1;
}


int _wrap_ArticulatedBodyInertia_getLinearLinearSubmatrix__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ArticulatedBodyInertia *arg1 = (iDynTree::ArticulatedBodyInertia *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Matrix3x3 *result = 0 ;
  
  if (!SWIG_check_num_args("ArticulatedBodyInertia_getLinearLinearSubmatrix",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ArticulatedBodyInertia, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArticulatedBodyInertia_getLinearLinearSubmatrix" "', argument " "1"" of type '" "iDynTree::ArticulatedBodyInertia *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ArticulatedBodyInertia * >(argp1);
  result = (iDynTree::Matrix3x3 *) &(arg1)->getLinearLinearSubmatrix();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__MatrixFixSizeT_3_3_t, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ArticulatedBodyInertia_getLinearAngularSubmatrix__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ArticulatedBodyInertia *arg1 = (iDynTree::ArticulatedBodyInertia *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Matrix3x3 *result = 0 ;
  
  if (!SWIG_check_num_args("ArticulatedBodyInertia_getLinearAngularSubmatrix",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ArticulatedBodyInertia, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArticulatedBodyInertia_getLinearAngularSubmatrix" "', argument " "1"" of type '" "iDynTree::ArticulatedBodyInertia *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ArticulatedBodyInertia * >(argp1);
  result = (iDynTree::Matrix3x3 *) &(arg1)->getLinearAngularSubmatrix();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__MatrixFixSizeT_3_3_t, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ArticulatedBodyInertia_getAngularAngularSubmatrix__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ArticulatedBodyInertia *arg1 = (iDynTree::ArticulatedBodyInertia *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Matrix3x3 *result = 0 ;
  
  if (!SWIG_check_num_args("ArticulatedBodyInertia_getAngularAngularSubmatrix",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ArticulatedBodyInertia, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArticulatedBodyInertia_getAngularAngularSubmatrix" "', argument " "1"" of type '" "iDynTree::ArticulatedBodyInertia *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ArticulatedBodyInertia * >(argp1);
  result = (iDynTree::Matrix3x3 *) &(arg1)->getAngularAngularSubmatrix();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__MatrixFixSizeT_3_3_t, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ArticulatedBodyInertia_getLinearLinearSubmatrix__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ArticulatedBodyInertia *arg1 = (iDynTree::ArticulatedBodyInertia *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Matrix3x3 *result = 0 ;
  
  if (!SWIG_check_num_args("ArticulatedBodyInertia_getLinearLinearSubmatrix",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ArticulatedBodyInertia, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArticulatedBodyInertia_getLinearLinearSubmatrix" "', argument " "1"" of type '" "iDynTree::ArticulatedBodyInertia const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ArticulatedBodyInertia * >(argp1);
  result = (iDynTree::Matrix3x3 *) &((iDynTree::ArticulatedBodyInertia const *)arg1)->getLinearLinearSubmatrix();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__MatrixFixSizeT_3_3_t, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ArticulatedBodyInertia_getLinearLinearSubmatrix(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__ArticulatedBodyInertia, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ArticulatedBodyInertia_getLinearLinearSubmatrix__SWIG_0(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__ArticulatedBodyInertia, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ArticulatedBodyInertia_getLinearLinearSubmatrix__SWIG_1(resc,resv,argc,argv);
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'ArticulatedBodyInertia_getLinearLinearSubmatrix'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::ArticulatedBodyInertia::getLinearLinearSubmatrix()\n"
    "    iDynTree::ArticulatedBodyInertia::getLinearLinearSubmatrix() const\n");
  return 1;
}


int _wrap_ArticulatedBodyInertia_getLinearAngularSubmatrix__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ArticulatedBodyInertia *arg1 = (iDynTree::ArticulatedBodyInertia *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Matrix3x3 *result = 0 ;
  
  if (!SWIG_check_num_args("ArticulatedBodyInertia_getLinearAngularSubmatrix",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ArticulatedBodyInertia, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArticulatedBodyInertia_getLinearAngularSubmatrix" "', argument " "1"" of type '" "iDynTree::ArticulatedBodyInertia const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ArticulatedBodyInertia * >(argp1);
  result = (iDynTree::Matrix3x3 *) &((iDynTree::ArticulatedBodyInertia const *)arg1)->getLinearAngularSubmatrix();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__MatrixFixSizeT_3_3_t, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ArticulatedBodyInertia_getLinearAngularSubmatrix(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__ArticulatedBodyInertia, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ArticulatedBodyInertia_getLinearAngularSubmatrix__SWIG_0(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__ArticulatedBodyInertia, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ArticulatedBodyInertia_getLinearAngularSubmatrix__SWIG_1(resc,resv,argc,argv);
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'ArticulatedBodyInertia_getLinearAngularSubmatrix'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::ArticulatedBodyInertia::getLinearAngularSubmatrix()\n"
    "    iDynTree::ArticulatedBodyInertia::getLinearAngularSubmatrix() const\n");
  return 1;
}


int _wrap_ArticulatedBodyInertia_getAngularAngularSubmatrix__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ArticulatedBodyInertia *arg1 = (iDynTree::ArticulatedBodyInertia *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Matrix3x3 *result = 0 ;
  
  if (!SWIG_check_num_args("ArticulatedBodyInertia_getAngularAngularSubmatrix",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ArticulatedBodyInertia, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArticulatedBodyInertia_getAngularAngularSubmatrix" "', argument " "1"" of type '" "iDynTree::ArticulatedBodyInertia const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ArticulatedBodyInertia * >(argp1);
  result = (iDynTree::Matrix3x3 *) &((iDynTree::ArticulatedBodyInertia const *)arg1)->getAngularAngularSubmatrix();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__MatrixFixSizeT_3_3_t, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ArticulatedBodyInertia_getAngularAngularSubmatrix(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__ArticulatedBodyInertia, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ArticulatedBodyInertia_getAngularAngularSubmatrix__SWIG_0(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__ArticulatedBodyInertia, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ArticulatedBodyInertia_getAngularAngularSubmatrix__SWIG_1(resc,resv,argc,argv);
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'ArticulatedBodyInertia_getAngularAngularSubmatrix'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::ArticulatedBodyInertia::getAngularAngularSubmatrix()\n"
    "    iDynTree::ArticulatedBodyInertia::getAngularAngularSubmatrix() const\n");
  return 1;
}


int _wrap_ArticulatedBodyInertia_combine(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ArticulatedBodyInertia *arg1 = 0 ;
  iDynTree::ArticulatedBodyInertia *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::ArticulatedBodyInertia result;
  
  if (!SWIG_check_num_args("ArticulatedBodyInertia_combine",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__ArticulatedBodyInertia,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArticulatedBodyInertia_combine" "', argument " "1"" of type '" "iDynTree::ArticulatedBodyInertia const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ArticulatedBodyInertia_combine" "', argument " "1"" of type '" "iDynTree::ArticulatedBodyInertia const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ArticulatedBodyInertia * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__ArticulatedBodyInertia,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ArticulatedBodyInertia_combine" "', argument " "2"" of type '" "iDynTree::ArticulatedBodyInertia const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ArticulatedBodyInertia_combine" "', argument " "2"" of type '" "iDynTree::ArticulatedBodyInertia const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::ArticulatedBodyInertia * >(argp2);
  result = iDynTree::ArticulatedBodyInertia::combine((iDynTree::ArticulatedBodyInertia const &)*arg1,(iDynTree::ArticulatedBodyInertia const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::ArticulatedBodyInertia(static_cast< const iDynTree::ArticulatedBodyInertia& >(result))), SWIGTYPE_p_iDynTree__ArticulatedBodyInertia, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ArticulatedBodyInertia_applyInverse(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ArticulatedBodyInertia *arg1 = (iDynTree::ArticulatedBodyInertia *) 0 ;
  iDynTree::Wrench *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialAcc result;
  
  if (!SWIG_check_num_args("ArticulatedBodyInertia_applyInverse",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ArticulatedBodyInertia, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArticulatedBodyInertia_applyInverse" "', argument " "1"" of type '" "iDynTree::ArticulatedBodyInertia const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ArticulatedBodyInertia * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Wrench,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ArticulatedBodyInertia_applyInverse" "', argument " "2"" of type '" "iDynTree::Wrench const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ArticulatedBodyInertia_applyInverse" "', argument " "2"" of type '" "iDynTree::Wrench const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Wrench * >(argp2);
  result = ((iDynTree::ArticulatedBodyInertia const *)arg1)->applyInverse((iDynTree::Wrench const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialAcc(static_cast< const iDynTree::SpatialAcc& >(result))), SWIGTYPE_p_iDynTree__SpatialAcc, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ArticulatedBodyInertia_asMatrix(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ArticulatedBodyInertia *arg1 = (iDynTree::ArticulatedBodyInertia *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Matrix6x6 result;
  
  if (!SWIG_check_num_args("ArticulatedBodyInertia_asMatrix",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ArticulatedBodyInertia, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArticulatedBodyInertia_asMatrix" "', argument " "1"" of type '" "iDynTree::ArticulatedBodyInertia const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ArticulatedBodyInertia * >(argp1);
  result = ((iDynTree::ArticulatedBodyInertia const *)arg1)->asMatrix();
  _out = SWIG_NewPointerObj((new iDynTree::Matrix6x6(static_cast< const iDynTree::Matrix6x6& >(result))), SWIGTYPE_p_iDynTree__MatrixFixSizeT_6_6_t, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ArticulatedBodyInertia_getInverse(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ArticulatedBodyInertia *arg1 = (iDynTree::ArticulatedBodyInertia *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Matrix6x6 result;
  
  if (!SWIG_check_num_args("ArticulatedBodyInertia_getInverse",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ArticulatedBodyInertia, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArticulatedBodyInertia_getInverse" "', argument " "1"" of type '" "iDynTree::ArticulatedBodyInertia const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ArticulatedBodyInertia * >(argp1);
  result = ((iDynTree::ArticulatedBodyInertia const *)arg1)->getInverse();
  _out = SWIG_NewPointerObj((new iDynTree::Matrix6x6(static_cast< const iDynTree::Matrix6x6& >(result))), SWIGTYPE_p_iDynTree__MatrixFixSizeT_6_6_t, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ArticulatedBodyInertia_plus(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ArticulatedBodyInertia *arg1 = (iDynTree::ArticulatedBodyInertia *) 0 ;
  iDynTree::ArticulatedBodyInertia *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::ArticulatedBodyInertia result;
  
  if (!SWIG_check_num_args("ArticulatedBodyInertia_plus",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ArticulatedBodyInertia, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArticulatedBodyInertia_plus" "', argument " "1"" of type '" "iDynTree::ArticulatedBodyInertia const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ArticulatedBodyInertia * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__ArticulatedBodyInertia,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ArticulatedBodyInertia_plus" "', argument " "2"" of type '" "iDynTree::ArticulatedBodyInertia const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ArticulatedBodyInertia_plus" "', argument " "2"" of type '" "iDynTree::ArticulatedBodyInertia const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::ArticulatedBodyInertia * >(argp2);
  result = ((iDynTree::ArticulatedBodyInertia const *)arg1)->operator +((iDynTree::ArticulatedBodyInertia const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::ArticulatedBodyInertia(static_cast< const iDynTree::ArticulatedBodyInertia& >(result))), SWIGTYPE_p_iDynTree__ArticulatedBodyInertia, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ArticulatedBodyInertia_minus(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ArticulatedBodyInertia *arg1 = (iDynTree::ArticulatedBodyInertia *) 0 ;
  iDynTree::ArticulatedBodyInertia *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::ArticulatedBodyInertia result;
  
  if (!SWIG_check_num_args("ArticulatedBodyInertia_minus",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ArticulatedBodyInertia, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArticulatedBodyInertia_minus" "', argument " "1"" of type '" "iDynTree::ArticulatedBodyInertia const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ArticulatedBodyInertia * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__ArticulatedBodyInertia,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ArticulatedBodyInertia_minus" "', argument " "2"" of type '" "iDynTree::ArticulatedBodyInertia const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ArticulatedBodyInertia_minus" "', argument " "2"" of type '" "iDynTree::ArticulatedBodyInertia const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::ArticulatedBodyInertia * >(argp2);
  result = ((iDynTree::ArticulatedBodyInertia const *)arg1)->operator -((iDynTree::ArticulatedBodyInertia const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::ArticulatedBodyInertia(static_cast< const iDynTree::ArticulatedBodyInertia& >(result))), SWIGTYPE_p_iDynTree__ArticulatedBodyInertia, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ArticulatedBodyInertia_mtimes__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ArticulatedBodyInertia *arg1 = (iDynTree::ArticulatedBodyInertia *) 0 ;
  iDynTree::SpatialMotionVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialForceVector result;
  
  if (!SWIG_check_num_args("ArticulatedBodyInertia_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ArticulatedBodyInertia, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArticulatedBodyInertia_mtimes" "', argument " "1"" of type '" "iDynTree::ArticulatedBodyInertia const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ArticulatedBodyInertia * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialMotionVector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ArticulatedBodyInertia_mtimes" "', argument " "2"" of type '" "iDynTree::SpatialMotionVector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ArticulatedBodyInertia_mtimes" "', argument " "2"" of type '" "iDynTree::SpatialMotionVector const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialMotionVector * >(argp2);
  result = ((iDynTree::ArticulatedBodyInertia const *)arg1)->operator *((iDynTree::SpatialMotionVector const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialForceVector(static_cast< const iDynTree::SpatialForceVector& >(result))), SWIGTYPE_p_iDynTree__SpatialForceVector, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ArticulatedBodyInertia_mtimes__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ArticulatedBodyInertia *arg1 = (iDynTree::ArticulatedBodyInertia *) 0 ;
  iDynTree::SpatialAcc *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Wrench result;
  
  if (!SWIG_check_num_args("ArticulatedBodyInertia_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ArticulatedBodyInertia, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArticulatedBodyInertia_mtimes" "', argument " "1"" of type '" "iDynTree::ArticulatedBodyInertia const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ArticulatedBodyInertia * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialAcc,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ArticulatedBodyInertia_mtimes" "', argument " "2"" of type '" "iDynTree::SpatialAcc const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ArticulatedBodyInertia_mtimes" "', argument " "2"" of type '" "iDynTree::SpatialAcc const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialAcc * >(argp2);
  result = ((iDynTree::ArticulatedBodyInertia const *)arg1)->operator *((iDynTree::SpatialAcc const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Wrench(static_cast< const iDynTree::Wrench& >(result))), SWIGTYPE_p_iDynTree__Wrench, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ArticulatedBodyInertia_mtimes(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__ArticulatedBodyInertia, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__SpatialAcc, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ArticulatedBodyInertia_mtimes__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__ArticulatedBodyInertia, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__SpatialMotionVector, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ArticulatedBodyInertia_mtimes__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'ArticulatedBodyInertia_mtimes'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::ArticulatedBodyInertia::operator *(iDynTree::SpatialMotionVector const &) const\n"
    "    iDynTree::ArticulatedBodyInertia::operator *(iDynTree::SpatialAcc const &) const\n");
  return 1;
}


int _wrap_ArticulatedBodyInertia_zero(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ArticulatedBodyInertia *arg1 = (iDynTree::ArticulatedBodyInertia *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("ArticulatedBodyInertia_zero",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ArticulatedBodyInertia, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArticulatedBodyInertia_zero" "', argument " "1"" of type '" "iDynTree::ArticulatedBodyInertia *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ArticulatedBodyInertia * >(argp1);
  (arg1)->zero();
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ArticulatedBodyInertia_ABADyadHelper(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialForceVector *arg1 = 0 ;
  double arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::ArticulatedBodyInertia result;
  
  if (!SWIG_check_num_args("ArticulatedBodyInertia_ABADyadHelper",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__SpatialForceVector,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArticulatedBodyInertia_ABADyadHelper" "', argument " "1"" of type '" "iDynTree::SpatialForceVector const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ArticulatedBodyInertia_ABADyadHelper" "', argument " "1"" of type '" "iDynTree::SpatialForceVector const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialForceVector * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ArticulatedBodyInertia_ABADyadHelper" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = iDynTree::ArticulatedBodyInertia::ABADyadHelper((iDynTree::SpatialForceVector const &)*arg1,arg2);
  _out = SWIG_NewPointerObj((new iDynTree::ArticulatedBodyInertia(static_cast< const iDynTree::ArticulatedBodyInertia& >(result))), SWIGTYPE_p_iDynTree__ArticulatedBodyInertia, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ArticulatedBodyInertia_ABADyadHelperLin(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialForceVector *arg1 = 0 ;
  double arg2 ;
  iDynTree::SpatialForceVector *arg3 = 0 ;
  double arg4 ;
  void *argp1 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  mxArray * _out;
  iDynTree::ArticulatedBodyInertia result;
  
  if (!SWIG_check_num_args("ArticulatedBodyInertia_ABADyadHelperLin",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__SpatialForceVector,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArticulatedBodyInertia_ABADyadHelperLin" "', argument " "1"" of type '" "iDynTree::SpatialForceVector const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ArticulatedBodyInertia_ABADyadHelperLin" "', argument " "1"" of type '" "iDynTree::SpatialForceVector const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialForceVector * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ArticulatedBodyInertia_ABADyadHelperLin" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__SpatialForceVector,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ArticulatedBodyInertia_ABADyadHelperLin" "', argument " "3"" of type '" "iDynTree::SpatialForceVector const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ArticulatedBodyInertia_ABADyadHelperLin" "', argument " "3"" of type '" "iDynTree::SpatialForceVector const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::SpatialForceVector * >(argp3);
  ecode4 = SWIG_AsVal_double(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ArticulatedBodyInertia_ABADyadHelperLin" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  result = iDynTree::ArticulatedBodyInertia::ABADyadHelperLin((iDynTree::SpatialForceVector const &)*arg1,arg2,(iDynTree::SpatialForceVector const &)*arg3,arg4);
  _out = SWIG_NewPointerObj((new iDynTree::ArticulatedBodyInertia(static_cast< const iDynTree::ArticulatedBodyInertia& >(result))), SWIGTYPE_p_iDynTree__ArticulatedBodyInertia, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_ArticulatedBodyInertia(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ArticulatedBodyInertia *arg1 = (iDynTree::ArticulatedBodyInertia *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_ArticulatedBodyInertia",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ArticulatedBodyInertia, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ArticulatedBodyInertia" "', argument " "1"" of type '" "iDynTree::ArticulatedBodyInertia *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ArticulatedBodyInertia * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RigidBodyInertiaNonLinearParametrization_mass_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RigidBodyInertiaNonLinearParametrization *arg1 = (iDynTree::RigidBodyInertiaNonLinearParametrization *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("RigidBodyInertiaNonLinearParametrization_mass_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RigidBodyInertiaNonLinearParametrization, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RigidBodyInertiaNonLinearParametrization_mass_set" "', argument " "1"" of type '" "iDynTree::RigidBodyInertiaNonLinearParametrization *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RigidBodyInertiaNonLinearParametrization * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RigidBodyInertiaNonLinearParametrization_mass_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->mass = arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RigidBodyInertiaNonLinearParametrization_mass_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RigidBodyInertiaNonLinearParametrization *arg1 = (iDynTree::RigidBodyInertiaNonLinearParametrization *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("RigidBodyInertiaNonLinearParametrization_mass_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RigidBodyInertiaNonLinearParametrization, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RigidBodyInertiaNonLinearParametrization_mass_get" "', argument " "1"" of type '" "iDynTree::RigidBodyInertiaNonLinearParametrization *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RigidBodyInertiaNonLinearParametrization * >(argp1);
  result = (double) ((arg1)->mass);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RigidBodyInertiaNonLinearParametrization_com_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RigidBodyInertiaNonLinearParametrization *arg1 = (iDynTree::RigidBodyInertiaNonLinearParametrization *) 0 ;
  iDynTree::Position *arg2 = (iDynTree::Position *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("RigidBodyInertiaNonLinearParametrization_com_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RigidBodyInertiaNonLinearParametrization, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RigidBodyInertiaNonLinearParametrization_com_set" "', argument " "1"" of type '" "iDynTree::RigidBodyInertiaNonLinearParametrization *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RigidBodyInertiaNonLinearParametrization * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_iDynTree__Position, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RigidBodyInertiaNonLinearParametrization_com_set" "', argument " "2"" of type '" "iDynTree::Position *""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Position * >(argp2);
  if (arg1) (arg1)->com = *arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RigidBodyInertiaNonLinearParametrization_com_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RigidBodyInertiaNonLinearParametrization *arg1 = (iDynTree::RigidBodyInertiaNonLinearParametrization *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Position *result = 0 ;
  
  if (!SWIG_check_num_args("RigidBodyInertiaNonLinearParametrization_com_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RigidBodyInertiaNonLinearParametrization, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RigidBodyInertiaNonLinearParametrization_com_get" "', argument " "1"" of type '" "iDynTree::RigidBodyInertiaNonLinearParametrization *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RigidBodyInertiaNonLinearParametrization * >(argp1);
  result = (iDynTree::Position *)& ((arg1)->com);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Position, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RigidBodyInertiaNonLinearParametrization_link_R_centroidal_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RigidBodyInertiaNonLinearParametrization *arg1 = (iDynTree::RigidBodyInertiaNonLinearParametrization *) 0 ;
  iDynTree::Rotation *arg2 = (iDynTree::Rotation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("RigidBodyInertiaNonLinearParametrization_link_R_centroidal_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RigidBodyInertiaNonLinearParametrization, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RigidBodyInertiaNonLinearParametrization_link_R_centroidal_set" "', argument " "1"" of type '" "iDynTree::RigidBodyInertiaNonLinearParametrization *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RigidBodyInertiaNonLinearParametrization * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_iDynTree__Rotation, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RigidBodyInertiaNonLinearParametrization_link_R_centroidal_set" "', argument " "2"" of type '" "iDynTree::Rotation *""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Rotation * >(argp2);
  if (arg1) (arg1)->link_R_centroidal = *arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RigidBodyInertiaNonLinearParametrization_link_R_centroidal_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RigidBodyInertiaNonLinearParametrization *arg1 = (iDynTree::RigidBodyInertiaNonLinearParametrization *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Rotation *result = 0 ;
  
  if (!SWIG_check_num_args("RigidBodyInertiaNonLinearParametrization_link_R_centroidal_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RigidBodyInertiaNonLinearParametrization, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RigidBodyInertiaNonLinearParametrization_link_R_centroidal_get" "', argument " "1"" of type '" "iDynTree::RigidBodyInertiaNonLinearParametrization *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RigidBodyInertiaNonLinearParametrization * >(argp1);
  result = (iDynTree::Rotation *)& ((arg1)->link_R_centroidal);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Rotation, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RigidBodyInertiaNonLinearParametrization_centralSecondMomentOfMass_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RigidBodyInertiaNonLinearParametrization *arg1 = (iDynTree::RigidBodyInertiaNonLinearParametrization *) 0 ;
  iDynTree::Vector3 *arg2 = (iDynTree::Vector3 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("RigidBodyInertiaNonLinearParametrization_centralSecondMomentOfMass_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RigidBodyInertiaNonLinearParametrization, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RigidBodyInertiaNonLinearParametrization_centralSecondMomentOfMass_set" "', argument " "1"" of type '" "iDynTree::RigidBodyInertiaNonLinearParametrization *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RigidBodyInertiaNonLinearParametrization * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_iDynTree__VectorFixSizeT_3_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RigidBodyInertiaNonLinearParametrization_centralSecondMomentOfMass_set" "', argument " "2"" of type '" "iDynTree::Vector3 *""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Vector3 * >(argp2);
  if (arg1) (arg1)->centralSecondMomentOfMass = *arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RigidBodyInertiaNonLinearParametrization_centralSecondMomentOfMass_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RigidBodyInertiaNonLinearParametrization *arg1 = (iDynTree::RigidBodyInertiaNonLinearParametrization *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Vector3 *result = 0 ;
  
  if (!SWIG_check_num_args("RigidBodyInertiaNonLinearParametrization_centralSecondMomentOfMass_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RigidBodyInertiaNonLinearParametrization, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RigidBodyInertiaNonLinearParametrization_centralSecondMomentOfMass_get" "', argument " "1"" of type '" "iDynTree::RigidBodyInertiaNonLinearParametrization *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RigidBodyInertiaNonLinearParametrization * >(argp1);
  result = (iDynTree::Vector3 *)& ((arg1)->centralSecondMomentOfMass);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__VectorFixSizeT_3_t, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RigidBodyInertiaNonLinearParametrization_getLinkCentroidalTransform(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RigidBodyInertiaNonLinearParametrization *arg1 = (iDynTree::RigidBodyInertiaNonLinearParametrization *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Transform result;
  
  if (!SWIG_check_num_args("RigidBodyInertiaNonLinearParametrization_getLinkCentroidalTransform",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RigidBodyInertiaNonLinearParametrization, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RigidBodyInertiaNonLinearParametrization_getLinkCentroidalTransform" "', argument " "1"" of type '" "iDynTree::RigidBodyInertiaNonLinearParametrization const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RigidBodyInertiaNonLinearParametrization * >(argp1);
  result = ((iDynTree::RigidBodyInertiaNonLinearParametrization const *)arg1)->getLinkCentroidalTransform();
  _out = SWIG_NewPointerObj((new iDynTree::Transform(static_cast< const iDynTree::Transform& >(result))), SWIGTYPE_p_iDynTree__Transform, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RigidBodyInertiaNonLinearParametrization_fromRigidBodyInertia(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RigidBodyInertiaNonLinearParametrization *arg1 = (iDynTree::RigidBodyInertiaNonLinearParametrization *) 0 ;
  iDynTree::SpatialInertia *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("RigidBodyInertiaNonLinearParametrization_fromRigidBodyInertia",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RigidBodyInertiaNonLinearParametrization, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RigidBodyInertiaNonLinearParametrization_fromRigidBodyInertia" "', argument " "1"" of type '" "iDynTree::RigidBodyInertiaNonLinearParametrization *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RigidBodyInertiaNonLinearParametrization * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialInertia,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RigidBodyInertiaNonLinearParametrization_fromRigidBodyInertia" "', argument " "2"" of type '" "iDynTree::SpatialInertia const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RigidBodyInertiaNonLinearParametrization_fromRigidBodyInertia" "', argument " "2"" of type '" "iDynTree::SpatialInertia const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialInertia * >(argp2);
  (arg1)->fromRigidBodyInertia((iDynTree::SpatialInertia const &)*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RigidBodyInertiaNonLinearParametrization_fromInertialParameters(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RigidBodyInertiaNonLinearParametrization *arg1 = (iDynTree::RigidBodyInertiaNonLinearParametrization *) 0 ;
  iDynTree::Vector10 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("RigidBodyInertiaNonLinearParametrization_fromInertialParameters",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RigidBodyInertiaNonLinearParametrization, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RigidBodyInertiaNonLinearParametrization_fromInertialParameters" "', argument " "1"" of type '" "iDynTree::RigidBodyInertiaNonLinearParametrization *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RigidBodyInertiaNonLinearParametrization * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__VectorFixSizeT_10_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RigidBodyInertiaNonLinearParametrization_fromInertialParameters" "', argument " "2"" of type '" "iDynTree::Vector10 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RigidBodyInertiaNonLinearParametrization_fromInertialParameters" "', argument " "2"" of type '" "iDynTree::Vector10 const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Vector10 * >(argp2);
  (arg1)->fromInertialParameters((iDynTree::Vector10 const &)*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RigidBodyInertiaNonLinearParametrization_toRigidBodyInertia(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RigidBodyInertiaNonLinearParametrization *arg1 = (iDynTree::RigidBodyInertiaNonLinearParametrization *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::SpatialInertia result;
  
  if (!SWIG_check_num_args("RigidBodyInertiaNonLinearParametrization_toRigidBodyInertia",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RigidBodyInertiaNonLinearParametrization, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RigidBodyInertiaNonLinearParametrization_toRigidBodyInertia" "', argument " "1"" of type '" "iDynTree::RigidBodyInertiaNonLinearParametrization const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RigidBodyInertiaNonLinearParametrization * >(argp1);
  result = ((iDynTree::RigidBodyInertiaNonLinearParametrization const *)arg1)->toRigidBodyInertia();
  _out = SWIG_NewPointerObj((new iDynTree::SpatialInertia(static_cast< const iDynTree::SpatialInertia& >(result))), SWIGTYPE_p_iDynTree__SpatialInertia, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RigidBodyInertiaNonLinearParametrization_isPhysicallyConsistent(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RigidBodyInertiaNonLinearParametrization *arg1 = (iDynTree::RigidBodyInertiaNonLinearParametrization *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("RigidBodyInertiaNonLinearParametrization_isPhysicallyConsistent",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RigidBodyInertiaNonLinearParametrization, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RigidBodyInertiaNonLinearParametrization_isPhysicallyConsistent" "', argument " "1"" of type '" "iDynTree::RigidBodyInertiaNonLinearParametrization const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RigidBodyInertiaNonLinearParametrization * >(argp1);
  result = (bool)((iDynTree::RigidBodyInertiaNonLinearParametrization const *)arg1)->isPhysicallyConsistent();
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RigidBodyInertiaNonLinearParametrization_asVectorWithRotationAsVec(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RigidBodyInertiaNonLinearParametrization *arg1 = (iDynTree::RigidBodyInertiaNonLinearParametrization *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Vector16 result;
  
  if (!SWIG_check_num_args("RigidBodyInertiaNonLinearParametrization_asVectorWithRotationAsVec",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RigidBodyInertiaNonLinearParametrization, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RigidBodyInertiaNonLinearParametrization_asVectorWithRotationAsVec" "', argument " "1"" of type '" "iDynTree::RigidBodyInertiaNonLinearParametrization const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RigidBodyInertiaNonLinearParametrization * >(argp1);
  result = ((iDynTree::RigidBodyInertiaNonLinearParametrization const *)arg1)->asVectorWithRotationAsVec();
  _out = SWIG_NewPointerObj((new iDynTree::Vector16(static_cast< const iDynTree::Vector16& >(result))), SWIGTYPE_p_iDynTree__VectorFixSizeT_16_t, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RigidBodyInertiaNonLinearParametrization_fromVectorWithRotationAsVec(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RigidBodyInertiaNonLinearParametrization *arg1 = (iDynTree::RigidBodyInertiaNonLinearParametrization *) 0 ;
  iDynTree::Vector16 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("RigidBodyInertiaNonLinearParametrization_fromVectorWithRotationAsVec",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RigidBodyInertiaNonLinearParametrization, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RigidBodyInertiaNonLinearParametrization_fromVectorWithRotationAsVec" "', argument " "1"" of type '" "iDynTree::RigidBodyInertiaNonLinearParametrization *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RigidBodyInertiaNonLinearParametrization * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__VectorFixSizeT_16_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RigidBodyInertiaNonLinearParametrization_fromVectorWithRotationAsVec" "', argument " "2"" of type '" "iDynTree::Vector16 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RigidBodyInertiaNonLinearParametrization_fromVectorWithRotationAsVec" "', argument " "2"" of type '" "iDynTree::Vector16 const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Vector16 * >(argp2);
  (arg1)->fromVectorWithRotationAsVec((iDynTree::Vector16 const &)*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RigidBodyInertiaNonLinearParametrization_getGradientWithRotationAsVec(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RigidBodyInertiaNonLinearParametrization *arg1 = (iDynTree::RigidBodyInertiaNonLinearParametrization *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Matrix10x16 result;
  
  if (!SWIG_check_num_args("RigidBodyInertiaNonLinearParametrization_getGradientWithRotationAsVec",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RigidBodyInertiaNonLinearParametrization, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RigidBodyInertiaNonLinearParametrization_getGradientWithRotationAsVec" "', argument " "1"" of type '" "iDynTree::RigidBodyInertiaNonLinearParametrization const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RigidBodyInertiaNonLinearParametrization * >(argp1);
  result = ((iDynTree::RigidBodyInertiaNonLinearParametrization const *)arg1)->getGradientWithRotationAsVec();
  _out = SWIG_NewPointerObj((new iDynTree::Matrix10x16(static_cast< const iDynTree::Matrix10x16& >(result))), SWIGTYPE_p_iDynTree__MatrixFixSizeT_10_16_t, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_RigidBodyInertiaNonLinearParametrization(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::RigidBodyInertiaNonLinearParametrization *result = 0 ;
  
  if (!SWIG_check_num_args("new_RigidBodyInertiaNonLinearParametrization",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::RigidBodyInertiaNonLinearParametrization *)new iDynTree::RigidBodyInertiaNonLinearParametrization();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__RigidBodyInertiaNonLinearParametrization, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_RigidBodyInertiaNonLinearParametrization(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RigidBodyInertiaNonLinearParametrization *arg1 = (iDynTree::RigidBodyInertiaNonLinearParametrization *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_RigidBodyInertiaNonLinearParametrization",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RigidBodyInertiaNonLinearParametrization, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RigidBodyInertiaNonLinearParametrization" "', argument " "1"" of type '" "iDynTree::RigidBodyInertiaNonLinearParametrization *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RigidBodyInertiaNonLinearParametrization * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_RotationRaw__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::RotationRaw *result = 0 ;
  
  if (!SWIG_check_num_args("new_RotationRaw",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::RotationRaw *)new iDynTree::RotationRaw();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__RotationRaw, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_RotationRaw__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  double arg9 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  double val9 ;
  int ecode9 = 0 ;
  mxArray * _out;
  iDynTree::RotationRaw *result = 0 ;
  
  if (!SWIG_check_num_args("new_RotationRaw",argc,9,9,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_RotationRaw" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_RotationRaw" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_RotationRaw" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_RotationRaw" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(argv[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_RotationRaw" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(argv[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_RotationRaw" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(argv[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_RotationRaw" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_double(argv[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "new_RotationRaw" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  ecode9 = SWIG_AsVal_double(argv[8], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "new_RotationRaw" "', argument " "9"" of type '" "double""'");
  } 
  arg9 = static_cast< double >(val9);
  result = (iDynTree::RotationRaw *)new iDynTree::RotationRaw(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__RotationRaw, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_RotationRaw__SWIG_2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double *arg1 = (double *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  iDynTree::RotationRaw *result = 0 ;
  
  if (!SWIG_check_num_args("new_RotationRaw",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RotationRaw" "', argument " "1"" of type '" "double const *""'"); 
  }
  arg1 = reinterpret_cast< double * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_RotationRaw" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_RotationRaw" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  result = (iDynTree::RotationRaw *)new iDynTree::RotationRaw((double const *)arg1,arg2,arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__RotationRaw, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_RotationRaw__SWIG_3(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationRaw *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::RotationRaw *result = 0 ;
  
  if (!SWIG_check_num_args("new_RotationRaw",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__RotationRaw,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RotationRaw" "', argument " "1"" of type '" "iDynTree::RotationRaw const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RotationRaw" "', argument " "1"" of type '" "iDynTree::RotationRaw const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationRaw * >(argp1);
  result = (iDynTree::RotationRaw *)new iDynTree::RotationRaw((iDynTree::RotationRaw const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__RotationRaw, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_RotationRaw(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_RotationRaw__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__RotationRaw, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_RotationRaw__SWIG_3(resc,resv,argc,argv);
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_double, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_RotationRaw__SWIG_2(resc,resv,argc,argv);
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_double(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    {
                      int res = SWIG_AsVal_double(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      return _wrap_new_RotationRaw__SWIG_1(resc,resv,argc,argv);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_RotationRaw'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::RotationRaw::RotationRaw()\n"
    "    iDynTree::RotationRaw::RotationRaw(double,double,double,double,double,double,double,double,double)\n"
    "    iDynTree::RotationRaw::RotationRaw(double const *,unsigned int const,unsigned int const)\n"
    "    iDynTree::RotationRaw::RotationRaw(iDynTree::RotationRaw const &)\n");
  return 1;
}


int _wrap_RotationRaw_changeOrientFrame(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationRaw *arg1 = (iDynTree::RotationRaw *) 0 ;
  iDynTree::RotationRaw *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::RotationRaw *result = 0 ;
  
  if (!SWIG_check_num_args("RotationRaw_changeOrientFrame",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RotationRaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RotationRaw_changeOrientFrame" "', argument " "1"" of type '" "iDynTree::RotationRaw *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationRaw * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__RotationRaw,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RotationRaw_changeOrientFrame" "', argument " "2"" of type '" "iDynTree::RotationRaw const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RotationRaw_changeOrientFrame" "', argument " "2"" of type '" "iDynTree::RotationRaw const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::RotationRaw * >(argp2);
  result = (iDynTree::RotationRaw *) &(arg1)->changeOrientFrame((iDynTree::RotationRaw const &)*arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__RotationRaw, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RotationRaw_changeRefOrientFrame(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationRaw *arg1 = (iDynTree::RotationRaw *) 0 ;
  iDynTree::RotationRaw *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::RotationRaw *result = 0 ;
  
  if (!SWIG_check_num_args("RotationRaw_changeRefOrientFrame",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RotationRaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RotationRaw_changeRefOrientFrame" "', argument " "1"" of type '" "iDynTree::RotationRaw *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationRaw * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__RotationRaw,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RotationRaw_changeRefOrientFrame" "', argument " "2"" of type '" "iDynTree::RotationRaw const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RotationRaw_changeRefOrientFrame" "', argument " "2"" of type '" "iDynTree::RotationRaw const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::RotationRaw * >(argp2);
  result = (iDynTree::RotationRaw *) &(arg1)->changeRefOrientFrame((iDynTree::RotationRaw const &)*arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__RotationRaw, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RotationRaw_compose(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationRaw *arg1 = 0 ;
  iDynTree::RotationRaw *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::RotationRaw result;
  
  if (!SWIG_check_num_args("RotationRaw_compose",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__RotationRaw,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RotationRaw_compose" "', argument " "1"" of type '" "iDynTree::RotationRaw const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RotationRaw_compose" "', argument " "1"" of type '" "iDynTree::RotationRaw const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationRaw * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__RotationRaw,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RotationRaw_compose" "', argument " "2"" of type '" "iDynTree::RotationRaw const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RotationRaw_compose" "', argument " "2"" of type '" "iDynTree::RotationRaw const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::RotationRaw * >(argp2);
  result = iDynTree::RotationRaw::compose((iDynTree::RotationRaw const &)*arg1,(iDynTree::RotationRaw const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::RotationRaw(static_cast< const iDynTree::RotationRaw& >(result))), SWIGTYPE_p_iDynTree__RotationRaw, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RotationRaw_inverse2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationRaw *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::RotationRaw result;
  
  if (!SWIG_check_num_args("RotationRaw_inverse2",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__RotationRaw,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RotationRaw_inverse2" "', argument " "1"" of type '" "iDynTree::RotationRaw const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RotationRaw_inverse2" "', argument " "1"" of type '" "iDynTree::RotationRaw const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationRaw * >(argp1);
  result = iDynTree::RotationRaw::inverse2((iDynTree::RotationRaw const &)*arg1);
  _out = SWIG_NewPointerObj((new iDynTree::RotationRaw(static_cast< const iDynTree::RotationRaw& >(result))), SWIGTYPE_p_iDynTree__RotationRaw, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RotationRaw_changeCoordFrameOf__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationRaw *arg1 = (iDynTree::RotationRaw *) 0 ;
  iDynTree::PositionRaw *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::PositionRaw result;
  
  if (!SWIG_check_num_args("RotationRaw_changeCoordFrameOf",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RotationRaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RotationRaw_changeCoordFrameOf" "', argument " "1"" of type '" "iDynTree::RotationRaw const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationRaw * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__PositionRaw,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RotationRaw_changeCoordFrameOf" "', argument " "2"" of type '" "iDynTree::PositionRaw const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RotationRaw_changeCoordFrameOf" "', argument " "2"" of type '" "iDynTree::PositionRaw const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::PositionRaw * >(argp2);
  result = ((iDynTree::RotationRaw const *)arg1)->changeCoordFrameOf((iDynTree::PositionRaw const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::PositionRaw(static_cast< const iDynTree::PositionRaw& >(result))), SWIGTYPE_p_iDynTree__PositionRaw, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RotationRaw_changeCoordFrameOf__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationRaw *arg1 = (iDynTree::RotationRaw *) 0 ;
  iDynTree::ClassicalAcc *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::ClassicalAcc result;
  
  if (!SWIG_check_num_args("RotationRaw_changeCoordFrameOf",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RotationRaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RotationRaw_changeCoordFrameOf" "', argument " "1"" of type '" "iDynTree::RotationRaw const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationRaw * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__ClassicalAcc,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RotationRaw_changeCoordFrameOf" "', argument " "2"" of type '" "iDynTree::ClassicalAcc const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RotationRaw_changeCoordFrameOf" "', argument " "2"" of type '" "iDynTree::ClassicalAcc const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::ClassicalAcc * >(argp2);
  result = ((iDynTree::RotationRaw const *)arg1)->changeCoordFrameOf((iDynTree::ClassicalAcc const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::ClassicalAcc(static_cast< const iDynTree::ClassicalAcc& >(result))), SWIGTYPE_p_iDynTree__ClassicalAcc, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RotationRaw_changeCoordFrameOf__SWIG_2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationRaw *arg1 = (iDynTree::RotationRaw *) 0 ;
  iDynTree::RotationalInertiaRaw *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::RotationalInertiaRaw result;
  
  if (!SWIG_check_num_args("RotationRaw_changeCoordFrameOf",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RotationRaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RotationRaw_changeCoordFrameOf" "', argument " "1"" of type '" "iDynTree::RotationRaw const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationRaw * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__RotationalInertiaRaw,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RotationRaw_changeCoordFrameOf" "', argument " "2"" of type '" "iDynTree::RotationalInertiaRaw const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RotationRaw_changeCoordFrameOf" "', argument " "2"" of type '" "iDynTree::RotationalInertiaRaw const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::RotationalInertiaRaw * >(argp2);
  result = ((iDynTree::RotationRaw const *)arg1)->changeCoordFrameOf((iDynTree::RotationalInertiaRaw const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::RotationalInertiaRaw(static_cast< const iDynTree::RotationalInertiaRaw& >(result))), SWIGTYPE_p_iDynTree__RotationalInertiaRaw, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RotationRaw_changeCoordFrameOf(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__RotationRaw, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__PositionRaw, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_RotationRaw_changeCoordFrameOf__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__RotationRaw, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__ClassicalAcc, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_RotationRaw_changeCoordFrameOf__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__RotationRaw, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__RotationalInertiaRaw, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_RotationRaw_changeCoordFrameOf__SWIG_2(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'RotationRaw_changeCoordFrameOf'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::RotationRaw::changeCoordFrameOf(iDynTree::PositionRaw const &) const\n"
    "    iDynTree::RotationRaw::changeCoordFrameOf(iDynTree::ClassicalAcc const &) const\n"
    "    iDynTree::RotationRaw::changeCoordFrameOf(iDynTree::RotationalInertiaRaw const &) const\n");
  return 1;
}


int _wrap_RotationRaw_RotX(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  mxArray * _out;
  iDynTree::RotationRaw result;
  
  if (!SWIG_check_num_args("RotationRaw_RotX",argc,1,1,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RotationRaw_RotX" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  result = iDynTree::RotationRaw::RotX(arg1);
  _out = SWIG_NewPointerObj((new iDynTree::RotationRaw(static_cast< const iDynTree::RotationRaw& >(result))), SWIGTYPE_p_iDynTree__RotationRaw, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RotationRaw_RotY(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  mxArray * _out;
  iDynTree::RotationRaw result;
  
  if (!SWIG_check_num_args("RotationRaw_RotY",argc,1,1,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RotationRaw_RotY" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  result = iDynTree::RotationRaw::RotY(arg1);
  _out = SWIG_NewPointerObj((new iDynTree::RotationRaw(static_cast< const iDynTree::RotationRaw& >(result))), SWIGTYPE_p_iDynTree__RotationRaw, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RotationRaw_RotZ(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  mxArray * _out;
  iDynTree::RotationRaw result;
  
  if (!SWIG_check_num_args("RotationRaw_RotZ",argc,1,1,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RotationRaw_RotZ" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  result = iDynTree::RotationRaw::RotZ(arg1);
  _out = SWIG_NewPointerObj((new iDynTree::RotationRaw(static_cast< const iDynTree::RotationRaw& >(result))), SWIGTYPE_p_iDynTree__RotationRaw, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RotationRaw_RPY(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  iDynTree::RotationRaw result;
  
  if (!SWIG_check_num_args("RotationRaw_RPY",argc,3,3,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RotationRaw_RPY" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RotationRaw_RPY" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RotationRaw_RPY" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = iDynTree::RotationRaw::RPY(arg1,arg2,arg3);
  _out = SWIG_NewPointerObj((new iDynTree::RotationRaw(static_cast< const iDynTree::RotationRaw& >(result))), SWIGTYPE_p_iDynTree__RotationRaw, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RotationRaw_Identity(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::RotationRaw result;
  
  if (!SWIG_check_num_args("RotationRaw_Identity",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = iDynTree::RotationRaw::Identity();
  _out = SWIG_NewPointerObj((new iDynTree::RotationRaw(static_cast< const iDynTree::RotationRaw& >(result))), SWIGTYPE_p_iDynTree__RotationRaw, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RotationRaw_toString(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationRaw *arg1 = (iDynTree::RotationRaw *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("RotationRaw_toString",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RotationRaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RotationRaw_toString" "', argument " "1"" of type '" "iDynTree::RotationRaw const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationRaw * >(argp1);
  result = ((iDynTree::RotationRaw const *)arg1)->toString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RotationRaw_display(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationRaw *arg1 = (iDynTree::RotationRaw *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("RotationRaw_display",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RotationRaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RotationRaw_display" "', argument " "1"" of type '" "iDynTree::RotationRaw const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationRaw * >(argp1);
  result = ((iDynTree::RotationRaw const *)arg1)->reservedToString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_RotationRaw(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationRaw *arg1 = (iDynTree::RotationRaw *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_RotationRaw",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RotationRaw, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RotationRaw" "', argument " "1"" of type '" "iDynTree::RotationRaw *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationRaw * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_RotationSemantics__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::RotationSemantics *result = 0 ;
  
  if (!SWIG_check_num_args("new_RotationSemantics",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::RotationSemantics *)new iDynTree::RotationSemantics();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__RotationSemantics, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_RotationSemantics__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  mxArray * _out;
  iDynTree::RotationSemantics *result = 0 ;
  
  if (!SWIG_check_num_args("new_RotationSemantics",argc,4,4,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_RotationSemantics" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_RotationSemantics" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_RotationSemantics" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_RotationSemantics" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  result = (iDynTree::RotationSemantics *)new iDynTree::RotationSemantics(arg1,arg2,arg3,arg4);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__RotationSemantics, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_RotationSemantics__SWIG_2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationSemantics *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::RotationSemantics *result = 0 ;
  
  if (!SWIG_check_num_args("new_RotationSemantics",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__RotationSemantics,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RotationSemantics" "', argument " "1"" of type '" "iDynTree::RotationSemantics const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RotationSemantics" "', argument " "1"" of type '" "iDynTree::RotationSemantics const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationSemantics * >(argp1);
  result = (iDynTree::RotationSemantics *)new iDynTree::RotationSemantics((iDynTree::RotationSemantics const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__RotationSemantics, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_RotationSemantics(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_RotationSemantics__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__RotationSemantics, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_RotationSemantics__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_RotationSemantics__SWIG_1(resc,resv,argc,argv);
          }
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_RotationSemantics'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::RotationSemantics::RotationSemantics()\n"
    "    iDynTree::RotationSemantics::RotationSemantics(int,int,int,int)\n"
    "    iDynTree::RotationSemantics::RotationSemantics(iDynTree::RotationSemantics const &)\n");
  return 1;
}


int _wrap_RotationSemantics_setToUnknown(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationSemantics *arg1 = (iDynTree::RotationSemantics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("RotationSemantics_setToUnknown",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RotationSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RotationSemantics_setToUnknown" "', argument " "1"" of type '" "iDynTree::RotationSemantics *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationSemantics * >(argp1);
  (arg1)->setToUnknown();
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RotationSemantics_getOrientationFrame(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationSemantics *arg1 = (iDynTree::RotationSemantics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("RotationSemantics_getOrientationFrame",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RotationSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RotationSemantics_getOrientationFrame" "', argument " "1"" of type '" "iDynTree::RotationSemantics const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationSemantics * >(argp1);
  result = (int)((iDynTree::RotationSemantics const *)arg1)->getOrientationFrame();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RotationSemantics_getBody(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationSemantics *arg1 = (iDynTree::RotationSemantics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("RotationSemantics_getBody",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RotationSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RotationSemantics_getBody" "', argument " "1"" of type '" "iDynTree::RotationSemantics const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationSemantics * >(argp1);
  result = (int)((iDynTree::RotationSemantics const *)arg1)->getBody();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RotationSemantics_getReferenceOrientationFrame(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationSemantics *arg1 = (iDynTree::RotationSemantics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("RotationSemantics_getReferenceOrientationFrame",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RotationSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RotationSemantics_getReferenceOrientationFrame" "', argument " "1"" of type '" "iDynTree::RotationSemantics const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationSemantics * >(argp1);
  result = (int)((iDynTree::RotationSemantics const *)arg1)->getReferenceOrientationFrame();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RotationSemantics_getRefBody(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationSemantics *arg1 = (iDynTree::RotationSemantics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("RotationSemantics_getRefBody",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RotationSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RotationSemantics_getRefBody" "', argument " "1"" of type '" "iDynTree::RotationSemantics const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationSemantics * >(argp1);
  result = (int)((iDynTree::RotationSemantics const *)arg1)->getRefBody();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RotationSemantics_getCoordinateFrame(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationSemantics *arg1 = (iDynTree::RotationSemantics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("RotationSemantics_getCoordinateFrame",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RotationSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RotationSemantics_getCoordinateFrame" "', argument " "1"" of type '" "iDynTree::RotationSemantics const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationSemantics * >(argp1);
  result = (int)((iDynTree::RotationSemantics const *)arg1)->getCoordinateFrame();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RotationSemantics_setOrientationFrame(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationSemantics *arg1 = (iDynTree::RotationSemantics *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("RotationSemantics_setOrientationFrame",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RotationSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RotationSemantics_setOrientationFrame" "', argument " "1"" of type '" "iDynTree::RotationSemantics *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationSemantics * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RotationSemantics_setOrientationFrame" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->setOrientationFrame(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RotationSemantics_setBody(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationSemantics *arg1 = (iDynTree::RotationSemantics *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("RotationSemantics_setBody",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RotationSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RotationSemantics_setBody" "', argument " "1"" of type '" "iDynTree::RotationSemantics *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationSemantics * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RotationSemantics_setBody" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->setBody(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RotationSemantics_setReferenceOrientationFrame(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationSemantics *arg1 = (iDynTree::RotationSemantics *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("RotationSemantics_setReferenceOrientationFrame",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RotationSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RotationSemantics_setReferenceOrientationFrame" "', argument " "1"" of type '" "iDynTree::RotationSemantics *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationSemantics * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RotationSemantics_setReferenceOrientationFrame" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->setReferenceOrientationFrame(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RotationSemantics_setRefBody(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationSemantics *arg1 = (iDynTree::RotationSemantics *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("RotationSemantics_setRefBody",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RotationSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RotationSemantics_setRefBody" "', argument " "1"" of type '" "iDynTree::RotationSemantics *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationSemantics * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RotationSemantics_setRefBody" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->setRefBody(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RotationSemantics_setCoordinateFrame(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationSemantics *arg1 = (iDynTree::RotationSemantics *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("RotationSemantics_setCoordinateFrame",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RotationSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RotationSemantics_setCoordinateFrame" "', argument " "1"" of type '" "iDynTree::RotationSemantics *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationSemantics * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RotationSemantics_setCoordinateFrame" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->setCoordinateFrame(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RotationSemantics_changeOrientFrame(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationSemantics *arg1 = (iDynTree::RotationSemantics *) 0 ;
  iDynTree::RotationSemantics *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("RotationSemantics_changeOrientFrame",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RotationSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RotationSemantics_changeOrientFrame" "', argument " "1"" of type '" "iDynTree::RotationSemantics *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationSemantics * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__RotationSemantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RotationSemantics_changeOrientFrame" "', argument " "2"" of type '" "iDynTree::RotationSemantics const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RotationSemantics_changeOrientFrame" "', argument " "2"" of type '" "iDynTree::RotationSemantics const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::RotationSemantics * >(argp2);
  result = (bool)(arg1)->changeOrientFrame((iDynTree::RotationSemantics const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RotationSemantics_changeRefOrientFrame(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationSemantics *arg1 = (iDynTree::RotationSemantics *) 0 ;
  iDynTree::RotationSemantics *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("RotationSemantics_changeRefOrientFrame",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RotationSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RotationSemantics_changeRefOrientFrame" "', argument " "1"" of type '" "iDynTree::RotationSemantics *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationSemantics * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__RotationSemantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RotationSemantics_changeRefOrientFrame" "', argument " "2"" of type '" "iDynTree::RotationSemantics const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RotationSemantics_changeRefOrientFrame" "', argument " "2"" of type '" "iDynTree::RotationSemantics const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::RotationSemantics * >(argp2);
  result = (bool)(arg1)->changeRefOrientFrame((iDynTree::RotationSemantics const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RotationSemantics_changeCoordFrameOf(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationSemantics *arg1 = (iDynTree::RotationSemantics *) 0 ;
  iDynTree::PositionSemantics *arg2 = 0 ;
  iDynTree::PositionSemantics *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("RotationSemantics_changeCoordFrameOf",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RotationSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RotationSemantics_changeCoordFrameOf" "', argument " "1"" of type '" "iDynTree::RotationSemantics const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationSemantics * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__PositionSemantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RotationSemantics_changeCoordFrameOf" "', argument " "2"" of type '" "iDynTree::PositionSemantics const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RotationSemantics_changeCoordFrameOf" "', argument " "2"" of type '" "iDynTree::PositionSemantics const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::PositionSemantics * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__PositionSemantics,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RotationSemantics_changeCoordFrameOf" "', argument " "3"" of type '" "iDynTree::PositionSemantics &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RotationSemantics_changeCoordFrameOf" "', argument " "3"" of type '" "iDynTree::PositionSemantics &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::PositionSemantics * >(argp3);
  result = (bool)((iDynTree::RotationSemantics const *)arg1)->changeCoordFrameOf((iDynTree::PositionSemantics const &)*arg2,*arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RotationSemantics_compose(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationSemantics *arg1 = 0 ;
  iDynTree::RotationSemantics *arg2 = 0 ;
  iDynTree::RotationSemantics *arg3 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("RotationSemantics_compose",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__RotationSemantics,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RotationSemantics_compose" "', argument " "1"" of type '" "iDynTree::RotationSemantics const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RotationSemantics_compose" "', argument " "1"" of type '" "iDynTree::RotationSemantics const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationSemantics * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__RotationSemantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RotationSemantics_compose" "', argument " "2"" of type '" "iDynTree::RotationSemantics const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RotationSemantics_compose" "', argument " "2"" of type '" "iDynTree::RotationSemantics const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::RotationSemantics * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__RotationSemantics,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RotationSemantics_compose" "', argument " "3"" of type '" "iDynTree::RotationSemantics &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RotationSemantics_compose" "', argument " "3"" of type '" "iDynTree::RotationSemantics &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::RotationSemantics * >(argp3);
  result = (bool)iDynTree::RotationSemantics::compose((iDynTree::RotationSemantics const &)*arg1,(iDynTree::RotationSemantics const &)*arg2,*arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RotationSemantics_inverse2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationSemantics *arg1 = 0 ;
  iDynTree::RotationSemantics *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("RotationSemantics_inverse2",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__RotationSemantics,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RotationSemantics_inverse2" "', argument " "1"" of type '" "iDynTree::RotationSemantics const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RotationSemantics_inverse2" "', argument " "1"" of type '" "iDynTree::RotationSemantics const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationSemantics * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__RotationSemantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RotationSemantics_inverse2" "', argument " "2"" of type '" "iDynTree::RotationSemantics &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RotationSemantics_inverse2" "', argument " "2"" of type '" "iDynTree::RotationSemantics &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::RotationSemantics * >(argp2);
  result = (bool)iDynTree::RotationSemantics::inverse2((iDynTree::RotationSemantics const &)*arg1,*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RotationSemantics_toString(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationSemantics *arg1 = (iDynTree::RotationSemantics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("RotationSemantics_toString",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RotationSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RotationSemantics_toString" "', argument " "1"" of type '" "iDynTree::RotationSemantics const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationSemantics * >(argp1);
  result = ((iDynTree::RotationSemantics const *)arg1)->toString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RotationSemantics_display(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationSemantics *arg1 = (iDynTree::RotationSemantics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("RotationSemantics_display",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RotationSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RotationSemantics_display" "', argument " "1"" of type '" "iDynTree::RotationSemantics const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationSemantics * >(argp1);
  result = ((iDynTree::RotationSemantics const *)arg1)->reservedToString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_RotationSemantics(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationSemantics *arg1 = (iDynTree::RotationSemantics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_RotationSemantics",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RotationSemantics, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RotationSemantics" "', argument " "1"" of type '" "iDynTree::RotationSemantics *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationSemantics * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Rotation__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::Rotation *result = 0 ;
  
  if (!SWIG_check_num_args("new_Rotation",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::Rotation *)new iDynTree::Rotation();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Rotation, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Rotation__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  double arg9 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  double val9 ;
  int ecode9 = 0 ;
  mxArray * _out;
  iDynTree::Rotation *result = 0 ;
  
  if (!SWIG_check_num_args("new_Rotation",argc,9,9,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Rotation" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Rotation" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Rotation" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_Rotation" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(argv[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_Rotation" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(argv[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_Rotation" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(argv[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_Rotation" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_double(argv[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "new_Rotation" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  ecode9 = SWIG_AsVal_double(argv[8], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "new_Rotation" "', argument " "9"" of type '" "double""'");
  } 
  arg9 = static_cast< double >(val9);
  result = (iDynTree::Rotation *)new iDynTree::Rotation(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Rotation, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Rotation__SWIG_2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationRaw *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Rotation *result = 0 ;
  
  if (!SWIG_check_num_args("new_Rotation",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__RotationRaw,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Rotation" "', argument " "1"" of type '" "iDynTree::RotationRaw const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Rotation" "', argument " "1"" of type '" "iDynTree::RotationRaw const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationRaw * >(argp1);
  result = (iDynTree::Rotation *)new iDynTree::Rotation((iDynTree::RotationRaw const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Rotation, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Rotation__SWIG_3(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Rotation *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Rotation *result = 0 ;
  
  if (!SWIG_check_num_args("new_Rotation",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Rotation,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Rotation" "', argument " "1"" of type '" "iDynTree::Rotation const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Rotation" "', argument " "1"" of type '" "iDynTree::Rotation const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Rotation * >(argp1);
  result = (iDynTree::Rotation *)new iDynTree::Rotation((iDynTree::Rotation const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Rotation, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Rotation(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_Rotation__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Rotation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Rotation__SWIG_3(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__RotationRaw, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Rotation__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 9) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_double(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    {
                      int res = SWIG_AsVal_double(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      return _wrap_new_Rotation__SWIG_1(resc,resv,argc,argv);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_Rotation'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::Rotation::Rotation()\n"
    "    iDynTree::Rotation::Rotation(double,double,double,double,double,double,double,double,double)\n"
    "    iDynTree::Rotation::Rotation(iDynTree::RotationRaw const &)\n"
    "    iDynTree::Rotation::Rotation(iDynTree::Rotation const &)\n");
  return 1;
}


int _wrap_Rotation_getSemantics(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Rotation *arg1 = (iDynTree::Rotation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::RotationSemantics *result = 0 ;
  
  if (!SWIG_check_num_args("Rotation_getSemantics",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Rotation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_getSemantics" "', argument " "1"" of type '" "iDynTree::Rotation *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Rotation * >(argp1);
  result = (iDynTree::RotationSemantics *) &(arg1)->getSemantics();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__RotationSemantics, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Rotation_changeOrientFrame(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Rotation *arg1 = (iDynTree::Rotation *) 0 ;
  iDynTree::Rotation *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Rotation *result = 0 ;
  
  if (!SWIG_check_num_args("Rotation_changeOrientFrame",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Rotation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_changeOrientFrame" "', argument " "1"" of type '" "iDynTree::Rotation *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Rotation * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Rotation,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rotation_changeOrientFrame" "', argument " "2"" of type '" "iDynTree::Rotation const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation_changeOrientFrame" "', argument " "2"" of type '" "iDynTree::Rotation const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Rotation * >(argp2);
  result = (iDynTree::Rotation *) &(arg1)->changeOrientFrame((iDynTree::Rotation const &)*arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Rotation, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Rotation_changeRefOrientFrame(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Rotation *arg1 = (iDynTree::Rotation *) 0 ;
  iDynTree::Rotation *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Rotation *result = 0 ;
  
  if (!SWIG_check_num_args("Rotation_changeRefOrientFrame",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Rotation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_changeRefOrientFrame" "', argument " "1"" of type '" "iDynTree::Rotation *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Rotation * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Rotation,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rotation_changeRefOrientFrame" "', argument " "2"" of type '" "iDynTree::Rotation const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation_changeRefOrientFrame" "', argument " "2"" of type '" "iDynTree::Rotation const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Rotation * >(argp2);
  result = (iDynTree::Rotation *) &(arg1)->changeRefOrientFrame((iDynTree::Rotation const &)*arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Rotation, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Rotation_changeCoordinateFrame(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Rotation *arg1 = (iDynTree::Rotation *) 0 ;
  iDynTree::Rotation *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Rotation *result = 0 ;
  
  if (!SWIG_check_num_args("Rotation_changeCoordinateFrame",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Rotation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_changeCoordinateFrame" "', argument " "1"" of type '" "iDynTree::Rotation *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Rotation * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Rotation,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rotation_changeCoordinateFrame" "', argument " "2"" of type '" "iDynTree::Rotation const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation_changeCoordinateFrame" "', argument " "2"" of type '" "iDynTree::Rotation const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Rotation * >(argp2);
  result = (iDynTree::Rotation *) &(arg1)->changeCoordinateFrame((iDynTree::Rotation const &)*arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Rotation, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Rotation_compose(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Rotation *arg1 = 0 ;
  iDynTree::Rotation *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Rotation result;
  
  if (!SWIG_check_num_args("Rotation_compose",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Rotation,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_compose" "', argument " "1"" of type '" "iDynTree::Rotation const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation_compose" "', argument " "1"" of type '" "iDynTree::Rotation const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Rotation * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Rotation,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rotation_compose" "', argument " "2"" of type '" "iDynTree::Rotation const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation_compose" "', argument " "2"" of type '" "iDynTree::Rotation const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Rotation * >(argp2);
  result = iDynTree::Rotation::compose((iDynTree::Rotation const &)*arg1,(iDynTree::Rotation const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Rotation(static_cast< const iDynTree::Rotation& >(result))), SWIGTYPE_p_iDynTree__Rotation, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Rotation_inverse2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Rotation *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Rotation result;
  
  if (!SWIG_check_num_args("Rotation_inverse2",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Rotation,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_inverse2" "', argument " "1"" of type '" "iDynTree::Rotation const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation_inverse2" "', argument " "1"" of type '" "iDynTree::Rotation const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Rotation * >(argp1);
  result = iDynTree::Rotation::inverse2((iDynTree::Rotation const &)*arg1);
  _out = SWIG_NewPointerObj((new iDynTree::Rotation(static_cast< const iDynTree::Rotation& >(result))), SWIGTYPE_p_iDynTree__Rotation, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Rotation_changeCoordFrameOf__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Rotation *arg1 = (iDynTree::Rotation *) 0 ;
  iDynTree::Position *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Position result;
  
  if (!SWIG_check_num_args("Rotation_changeCoordFrameOf",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Rotation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_changeCoordFrameOf" "', argument " "1"" of type '" "iDynTree::Rotation const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Rotation * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Position,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rotation_changeCoordFrameOf" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation_changeCoordFrameOf" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Position * >(argp2);
  result = ((iDynTree::Rotation const *)arg1)->changeCoordFrameOf((iDynTree::Position const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Position(static_cast< const iDynTree::Position& >(result))), SWIGTYPE_p_iDynTree__Position, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Rotation_changeCoordFrameOf__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Rotation *arg1 = (iDynTree::Rotation *) 0 ;
  iDynTree::SpatialMotionVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialMotionVector result;
  
  if (!SWIG_check_num_args("Rotation_changeCoordFrameOf",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Rotation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_changeCoordFrameOf" "', argument " "1"" of type '" "iDynTree::Rotation const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Rotation * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialMotionVector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rotation_changeCoordFrameOf" "', argument " "2"" of type '" "iDynTree::SpatialMotionVector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation_changeCoordFrameOf" "', argument " "2"" of type '" "iDynTree::SpatialMotionVector const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialMotionVector * >(argp2);
  result = ((iDynTree::Rotation const *)arg1)->changeCoordFrameOf((iDynTree::SpatialMotionVector const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialMotionVector(static_cast< const iDynTree::SpatialMotionVector& >(result))), SWIGTYPE_p_iDynTree__SpatialMotionVector, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Rotation_changeCoordFrameOf__SWIG_2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Rotation *arg1 = (iDynTree::Rotation *) 0 ;
  iDynTree::SpatialForceVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialForceVector result;
  
  if (!SWIG_check_num_args("Rotation_changeCoordFrameOf",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Rotation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_changeCoordFrameOf" "', argument " "1"" of type '" "iDynTree::Rotation const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Rotation * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialForceVector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rotation_changeCoordFrameOf" "', argument " "2"" of type '" "iDynTree::SpatialForceVector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation_changeCoordFrameOf" "', argument " "2"" of type '" "iDynTree::SpatialForceVector const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialForceVector * >(argp2);
  result = ((iDynTree::Rotation const *)arg1)->changeCoordFrameOf((iDynTree::SpatialForceVector const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialForceVector(static_cast< const iDynTree::SpatialForceVector& >(result))), SWIGTYPE_p_iDynTree__SpatialForceVector, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Rotation_changeCoordFrameOf__SWIG_3(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Rotation *arg1 = (iDynTree::Rotation *) 0 ;
  iDynTree::Twist *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Twist result;
  
  if (!SWIG_check_num_args("Rotation_changeCoordFrameOf",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Rotation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_changeCoordFrameOf" "', argument " "1"" of type '" "iDynTree::Rotation const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Rotation * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Twist,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rotation_changeCoordFrameOf" "', argument " "2"" of type '" "iDynTree::Twist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation_changeCoordFrameOf" "', argument " "2"" of type '" "iDynTree::Twist const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Twist * >(argp2);
  result = ((iDynTree::Rotation const *)arg1)->changeCoordFrameOf((iDynTree::Twist const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Twist(static_cast< const iDynTree::Twist& >(result))), SWIGTYPE_p_iDynTree__Twist, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Rotation_changeCoordFrameOf__SWIG_4(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Rotation *arg1 = (iDynTree::Rotation *) 0 ;
  iDynTree::SpatialAcc *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialAcc result;
  
  if (!SWIG_check_num_args("Rotation_changeCoordFrameOf",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Rotation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_changeCoordFrameOf" "', argument " "1"" of type '" "iDynTree::Rotation const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Rotation * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialAcc,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rotation_changeCoordFrameOf" "', argument " "2"" of type '" "iDynTree::SpatialAcc const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation_changeCoordFrameOf" "', argument " "2"" of type '" "iDynTree::SpatialAcc const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialAcc * >(argp2);
  result = ((iDynTree::Rotation const *)arg1)->changeCoordFrameOf((iDynTree::SpatialAcc const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialAcc(static_cast< const iDynTree::SpatialAcc& >(result))), SWIGTYPE_p_iDynTree__SpatialAcc, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Rotation_changeCoordFrameOf__SWIG_5(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Rotation *arg1 = (iDynTree::Rotation *) 0 ;
  iDynTree::SpatialMomentum *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialMomentum result;
  
  if (!SWIG_check_num_args("Rotation_changeCoordFrameOf",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Rotation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_changeCoordFrameOf" "', argument " "1"" of type '" "iDynTree::Rotation const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Rotation * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialMomentum,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rotation_changeCoordFrameOf" "', argument " "2"" of type '" "iDynTree::SpatialMomentum const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation_changeCoordFrameOf" "', argument " "2"" of type '" "iDynTree::SpatialMomentum const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialMomentum * >(argp2);
  result = ((iDynTree::Rotation const *)arg1)->changeCoordFrameOf((iDynTree::SpatialMomentum const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialMomentum(static_cast< const iDynTree::SpatialMomentum& >(result))), SWIGTYPE_p_iDynTree__SpatialMomentum, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Rotation_changeCoordFrameOf__SWIG_6(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Rotation *arg1 = (iDynTree::Rotation *) 0 ;
  iDynTree::Wrench *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Wrench result;
  
  if (!SWIG_check_num_args("Rotation_changeCoordFrameOf",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Rotation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_changeCoordFrameOf" "', argument " "1"" of type '" "iDynTree::Rotation const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Rotation * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Wrench,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rotation_changeCoordFrameOf" "', argument " "2"" of type '" "iDynTree::Wrench const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation_changeCoordFrameOf" "', argument " "2"" of type '" "iDynTree::Wrench const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Wrench * >(argp2);
  result = ((iDynTree::Rotation const *)arg1)->changeCoordFrameOf((iDynTree::Wrench const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Wrench(static_cast< const iDynTree::Wrench& >(result))), SWIGTYPE_p_iDynTree__Wrench, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Rotation_changeCoordFrameOf__SWIG_7(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Rotation *arg1 = (iDynTree::Rotation *) 0 ;
  iDynTree::Direction *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Direction result;
  
  if (!SWIG_check_num_args("Rotation_changeCoordFrameOf",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Rotation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_changeCoordFrameOf" "', argument " "1"" of type '" "iDynTree::Rotation const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Rotation * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Direction,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rotation_changeCoordFrameOf" "', argument " "2"" of type '" "iDynTree::Direction const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation_changeCoordFrameOf" "', argument " "2"" of type '" "iDynTree::Direction const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Direction * >(argp2);
  result = ((iDynTree::Rotation const *)arg1)->changeCoordFrameOf((iDynTree::Direction const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Direction(static_cast< const iDynTree::Direction& >(result))), SWIGTYPE_p_iDynTree__Direction, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Rotation_changeCoordFrameOf__SWIG_8(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Rotation *arg1 = (iDynTree::Rotation *) 0 ;
  iDynTree::Axis *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Axis result;
  
  if (!SWIG_check_num_args("Rotation_changeCoordFrameOf",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Rotation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_changeCoordFrameOf" "', argument " "1"" of type '" "iDynTree::Rotation const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Rotation * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Axis,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rotation_changeCoordFrameOf" "', argument " "2"" of type '" "iDynTree::Axis const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation_changeCoordFrameOf" "', argument " "2"" of type '" "iDynTree::Axis const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Axis * >(argp2);
  result = ((iDynTree::Rotation const *)arg1)->changeCoordFrameOf((iDynTree::Axis const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Axis(static_cast< const iDynTree::Axis& >(result))), SWIGTYPE_p_iDynTree__Axis, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Rotation_changeCoordFrameOf__SWIG_9(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Rotation *arg1 = (iDynTree::Rotation *) 0 ;
  iDynTree::ClassicalAcc *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::ClassicalAcc result;
  
  if (!SWIG_check_num_args("Rotation_changeCoordFrameOf",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Rotation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_changeCoordFrameOf" "', argument " "1"" of type '" "iDynTree::Rotation const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Rotation * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__ClassicalAcc,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rotation_changeCoordFrameOf" "', argument " "2"" of type '" "iDynTree::ClassicalAcc const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation_changeCoordFrameOf" "', argument " "2"" of type '" "iDynTree::ClassicalAcc const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::ClassicalAcc * >(argp2);
  result = ((iDynTree::Rotation const *)arg1)->changeCoordFrameOf((iDynTree::ClassicalAcc const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::ClassicalAcc(static_cast< const iDynTree::ClassicalAcc& >(result))), SWIGTYPE_p_iDynTree__ClassicalAcc, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Rotation_changeCoordFrameOf__SWIG_10(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Rotation *arg1 = (iDynTree::Rotation *) 0 ;
  iDynTree::RotationalInertiaRaw *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::RotationalInertiaRaw result;
  
  if (!SWIG_check_num_args("Rotation_changeCoordFrameOf",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Rotation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_changeCoordFrameOf" "', argument " "1"" of type '" "iDynTree::Rotation const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Rotation * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__RotationalInertiaRaw,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rotation_changeCoordFrameOf" "', argument " "2"" of type '" "iDynTree::RotationalInertiaRaw const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation_changeCoordFrameOf" "', argument " "2"" of type '" "iDynTree::RotationalInertiaRaw const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::RotationalInertiaRaw * >(argp2);
  result = ((iDynTree::Rotation const *)arg1)->changeCoordFrameOf((iDynTree::RotationalInertiaRaw const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::RotationalInertiaRaw(static_cast< const iDynTree::RotationalInertiaRaw& >(result))), SWIGTYPE_p_iDynTree__RotationalInertiaRaw, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Rotation_changeCoordFrameOf(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Rotation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Position, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Rotation_changeCoordFrameOf__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Rotation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Twist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Rotation_changeCoordFrameOf__SWIG_3(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Rotation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__SpatialMomentum, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Rotation_changeCoordFrameOf__SWIG_5(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Rotation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__SpatialAcc, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Rotation_changeCoordFrameOf__SWIG_4(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Rotation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__SpatialMotionVector, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Rotation_changeCoordFrameOf__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Rotation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Wrench, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Rotation_changeCoordFrameOf__SWIG_6(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Rotation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__SpatialForceVector, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Rotation_changeCoordFrameOf__SWIG_2(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Rotation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Direction, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Rotation_changeCoordFrameOf__SWIG_7(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Rotation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Axis, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Rotation_changeCoordFrameOf__SWIG_8(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Rotation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__ClassicalAcc, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Rotation_changeCoordFrameOf__SWIG_9(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Rotation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__RotationalInertiaRaw, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Rotation_changeCoordFrameOf__SWIG_10(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Rotation_changeCoordFrameOf'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::Rotation::changeCoordFrameOf(iDynTree::Position const &) const\n"
    "    iDynTree::Rotation::changeCoordFrameOf(iDynTree::SpatialMotionVector const &) const\n"
    "    iDynTree::Rotation::changeCoordFrameOf(iDynTree::SpatialForceVector const &) const\n"
    "    iDynTree::Rotation::changeCoordFrameOf(iDynTree::Twist const &) const\n"
    "    iDynTree::Rotation::changeCoordFrameOf(iDynTree::SpatialAcc const &) const\n"
    "    iDynTree::Rotation::changeCoordFrameOf(iDynTree::SpatialMomentum const &) const\n"
    "    iDynTree::Rotation::changeCoordFrameOf(iDynTree::Wrench const &) const\n"
    "    iDynTree::Rotation::changeCoordFrameOf(iDynTree::Direction const &) const\n"
    "    iDynTree::Rotation::changeCoordFrameOf(iDynTree::Axis const &) const\n"
    "    iDynTree::Rotation::changeCoordFrameOf(iDynTree::ClassicalAcc const &) const\n"
    "    iDynTree::Rotation::changeCoordFrameOf(iDynTree::RotationalInertiaRaw const &) const\n");
  return 1;
}


int _wrap_Rotation_mtimes__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Rotation *arg1 = (iDynTree::Rotation *) 0 ;
  iDynTree::Rotation *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Rotation result;
  
  if (!SWIG_check_num_args("Rotation_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Rotation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_mtimes" "', argument " "1"" of type '" "iDynTree::Rotation const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Rotation * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Rotation,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rotation_mtimes" "', argument " "2"" of type '" "iDynTree::Rotation const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation_mtimes" "', argument " "2"" of type '" "iDynTree::Rotation const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Rotation * >(argp2);
  result = ((iDynTree::Rotation const *)arg1)->operator *((iDynTree::Rotation const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Rotation(static_cast< const iDynTree::Rotation& >(result))), SWIGTYPE_p_iDynTree__Rotation, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Rotation_inverse(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Rotation *arg1 = (iDynTree::Rotation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Rotation result;
  
  if (!SWIG_check_num_args("Rotation_inverse",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Rotation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_inverse" "', argument " "1"" of type '" "iDynTree::Rotation const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Rotation * >(argp1);
  result = ((iDynTree::Rotation const *)arg1)->inverse();
  _out = SWIG_NewPointerObj((new iDynTree::Rotation(static_cast< const iDynTree::Rotation& >(result))), SWIGTYPE_p_iDynTree__Rotation, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Rotation_mtimes__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Rotation *arg1 = (iDynTree::Rotation *) 0 ;
  iDynTree::Position *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Position result;
  
  if (!SWIG_check_num_args("Rotation_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Rotation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_mtimes" "', argument " "1"" of type '" "iDynTree::Rotation const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Rotation * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Position,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rotation_mtimes" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation_mtimes" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Position * >(argp2);
  result = ((iDynTree::Rotation const *)arg1)->operator *((iDynTree::Position const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Position(static_cast< const iDynTree::Position& >(result))), SWIGTYPE_p_iDynTree__Position, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Rotation_mtimes__SWIG_2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Rotation *arg1 = (iDynTree::Rotation *) 0 ;
  iDynTree::SpatialForceVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialForceVector result;
  
  if (!SWIG_check_num_args("Rotation_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Rotation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_mtimes" "', argument " "1"" of type '" "iDynTree::Rotation const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Rotation * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialForceVector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rotation_mtimes" "', argument " "2"" of type '" "iDynTree::SpatialForceVector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation_mtimes" "', argument " "2"" of type '" "iDynTree::SpatialForceVector const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialForceVector * >(argp2);
  result = ((iDynTree::Rotation const *)arg1)->operator *((iDynTree::SpatialForceVector const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialForceVector(static_cast< const iDynTree::SpatialForceVector& >(result))), SWIGTYPE_p_iDynTree__SpatialForceVector, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Rotation_mtimes__SWIG_3(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Rotation *arg1 = (iDynTree::Rotation *) 0 ;
  iDynTree::Twist *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Twist result;
  
  if (!SWIG_check_num_args("Rotation_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Rotation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_mtimes" "', argument " "1"" of type '" "iDynTree::Rotation const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Rotation * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Twist,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rotation_mtimes" "', argument " "2"" of type '" "iDynTree::Twist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation_mtimes" "', argument " "2"" of type '" "iDynTree::Twist const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Twist * >(argp2);
  result = ((iDynTree::Rotation const *)arg1)->operator *((iDynTree::Twist const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Twist(static_cast< const iDynTree::Twist& >(result))), SWIGTYPE_p_iDynTree__Twist, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Rotation_mtimes__SWIG_4(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Rotation *arg1 = (iDynTree::Rotation *) 0 ;
  iDynTree::Wrench *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Wrench result;
  
  if (!SWIG_check_num_args("Rotation_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Rotation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_mtimes" "', argument " "1"" of type '" "iDynTree::Rotation const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Rotation * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Wrench,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rotation_mtimes" "', argument " "2"" of type '" "iDynTree::Wrench const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation_mtimes" "', argument " "2"" of type '" "iDynTree::Wrench const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Wrench * >(argp2);
  result = ((iDynTree::Rotation const *)arg1)->operator *((iDynTree::Wrench const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Wrench(static_cast< const iDynTree::Wrench& >(result))), SWIGTYPE_p_iDynTree__Wrench, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Rotation_mtimes__SWIG_5(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Rotation *arg1 = (iDynTree::Rotation *) 0 ;
  iDynTree::Direction *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Direction result;
  
  if (!SWIG_check_num_args("Rotation_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Rotation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_mtimes" "', argument " "1"" of type '" "iDynTree::Rotation const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Rotation * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Direction,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rotation_mtimes" "', argument " "2"" of type '" "iDynTree::Direction const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation_mtimes" "', argument " "2"" of type '" "iDynTree::Direction const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Direction * >(argp2);
  result = ((iDynTree::Rotation const *)arg1)->operator *((iDynTree::Direction const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Direction(static_cast< const iDynTree::Direction& >(result))), SWIGTYPE_p_iDynTree__Direction, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Rotation_mtimes__SWIG_6(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Rotation *arg1 = (iDynTree::Rotation *) 0 ;
  iDynTree::Axis *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Axis result;
  
  if (!SWIG_check_num_args("Rotation_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Rotation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_mtimes" "', argument " "1"" of type '" "iDynTree::Rotation const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Rotation * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Axis,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rotation_mtimes" "', argument " "2"" of type '" "iDynTree::Axis const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation_mtimes" "', argument " "2"" of type '" "iDynTree::Axis const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Axis * >(argp2);
  result = ((iDynTree::Rotation const *)arg1)->operator *((iDynTree::Axis const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Axis(static_cast< const iDynTree::Axis& >(result))), SWIGTYPE_p_iDynTree__Axis, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Rotation_mtimes__SWIG_7(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Rotation *arg1 = (iDynTree::Rotation *) 0 ;
  iDynTree::SpatialAcc *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialAcc result;
  
  if (!SWIG_check_num_args("Rotation_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Rotation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_mtimes" "', argument " "1"" of type '" "iDynTree::Rotation const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Rotation * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialAcc,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rotation_mtimes" "', argument " "2"" of type '" "iDynTree::SpatialAcc const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation_mtimes" "', argument " "2"" of type '" "iDynTree::SpatialAcc const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialAcc * >(argp2);
  result = ((iDynTree::Rotation const *)arg1)->operator *((iDynTree::SpatialAcc const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialAcc(static_cast< const iDynTree::SpatialAcc& >(result))), SWIGTYPE_p_iDynTree__SpatialAcc, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Rotation_mtimes__SWIG_8(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Rotation *arg1 = (iDynTree::Rotation *) 0 ;
  iDynTree::SpatialMomentum *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialMomentum result;
  
  if (!SWIG_check_num_args("Rotation_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Rotation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_mtimes" "', argument " "1"" of type '" "iDynTree::Rotation const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Rotation * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialMomentum,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rotation_mtimes" "', argument " "2"" of type '" "iDynTree::SpatialMomentum const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation_mtimes" "', argument " "2"" of type '" "iDynTree::SpatialMomentum const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialMomentum * >(argp2);
  result = ((iDynTree::Rotation const *)arg1)->operator *((iDynTree::SpatialMomentum const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialMomentum(static_cast< const iDynTree::SpatialMomentum& >(result))), SWIGTYPE_p_iDynTree__SpatialMomentum, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Rotation_mtimes__SWIG_9(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Rotation *arg1 = (iDynTree::Rotation *) 0 ;
  iDynTree::ClassicalAcc *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::ClassicalAcc result;
  
  if (!SWIG_check_num_args("Rotation_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Rotation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_mtimes" "', argument " "1"" of type '" "iDynTree::Rotation const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Rotation * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__ClassicalAcc,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rotation_mtimes" "', argument " "2"" of type '" "iDynTree::ClassicalAcc const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation_mtimes" "', argument " "2"" of type '" "iDynTree::ClassicalAcc const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::ClassicalAcc * >(argp2);
  result = ((iDynTree::Rotation const *)arg1)->operator *((iDynTree::ClassicalAcc const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::ClassicalAcc(static_cast< const iDynTree::ClassicalAcc& >(result))), SWIGTYPE_p_iDynTree__ClassicalAcc, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Rotation_mtimes__SWIG_10(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Rotation *arg1 = (iDynTree::Rotation *) 0 ;
  iDynTree::RotationalInertiaRaw *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::RotationalInertiaRaw result;
  
  if (!SWIG_check_num_args("Rotation_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Rotation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_mtimes" "', argument " "1"" of type '" "iDynTree::Rotation const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Rotation * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__RotationalInertiaRaw,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rotation_mtimes" "', argument " "2"" of type '" "iDynTree::RotationalInertiaRaw const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation_mtimes" "', argument " "2"" of type '" "iDynTree::RotationalInertiaRaw const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::RotationalInertiaRaw * >(argp2);
  result = ((iDynTree::Rotation const *)arg1)->operator *((iDynTree::RotationalInertiaRaw const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::RotationalInertiaRaw(static_cast< const iDynTree::RotationalInertiaRaw& >(result))), SWIGTYPE_p_iDynTree__RotationalInertiaRaw, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Rotation_mtimes(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Rotation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Rotation, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Rotation_mtimes__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Rotation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Position, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Rotation_mtimes__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Rotation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Wrench, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Rotation_mtimes__SWIG_4(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Rotation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Twist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Rotation_mtimes__SWIG_3(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Rotation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__SpatialMomentum, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Rotation_mtimes__SWIG_8(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Rotation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Direction, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Rotation_mtimes__SWIG_5(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Rotation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Axis, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Rotation_mtimes__SWIG_6(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Rotation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__SpatialAcc, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Rotation_mtimes__SWIG_7(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Rotation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__SpatialForceVector, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Rotation_mtimes__SWIG_2(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Rotation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__ClassicalAcc, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Rotation_mtimes__SWIG_9(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Rotation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__RotationalInertiaRaw, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Rotation_mtimes__SWIG_10(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Rotation_mtimes'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::Rotation::operator *(iDynTree::Rotation const &) const\n"
    "    iDynTree::Rotation::operator *(iDynTree::Position const &) const\n"
    "    iDynTree::Rotation::operator *(iDynTree::SpatialForceVector const &) const\n"
    "    iDynTree::Rotation::operator *(iDynTree::Twist const &) const\n"
    "    iDynTree::Rotation::operator *(iDynTree::Wrench const &) const\n"
    "    iDynTree::Rotation::operator *(iDynTree::Direction const &) const\n"
    "    iDynTree::Rotation::operator *(iDynTree::Axis const &) const\n"
    "    iDynTree::Rotation::operator *(iDynTree::SpatialAcc const &) const\n"
    "    iDynTree::Rotation::operator *(iDynTree::SpatialMomentum const &) const\n"
    "    iDynTree::Rotation::operator *(iDynTree::ClassicalAcc const &) const\n"
    "    iDynTree::Rotation::operator *(iDynTree::RotationalInertiaRaw const &) const\n");
  return 1;
}


int _wrap_Rotation_log(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Rotation *arg1 = (iDynTree::Rotation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::AngularMotionVector3 result;
  
  if (!SWIG_check_num_args("Rotation_log",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Rotation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_log" "', argument " "1"" of type '" "iDynTree::Rotation const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Rotation * >(argp1);
  result = ((iDynTree::Rotation const *)arg1)->log();
  _out = SWIG_NewPointerObj((new iDynTree::AngularMotionVector3(static_cast< const iDynTree::AngularMotionVector3& >(result))), SWIGTYPE_p_iDynTree__AngularMotionVector3, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Rotation_fromQuaternion(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Rotation *arg1 = (iDynTree::Rotation *) 0 ;
  iDynTree::Vector4 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Rotation_fromQuaternion",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Rotation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_fromQuaternion" "', argument " "1"" of type '" "iDynTree::Rotation *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Rotation * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__VectorFixSizeT_4_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rotation_fromQuaternion" "', argument " "2"" of type '" "iDynTree::Vector4 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation_fromQuaternion" "', argument " "2"" of type '" "iDynTree::Vector4 const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Vector4 * >(argp2);
  (arg1)->fromQuaternion((iDynTree::Vector4 const &)*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Rotation_getRPY(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Rotation *arg1 = (iDynTree::Rotation *) 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Rotation_getRPY",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Rotation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_getRPY" "', argument " "1"" of type '" "iDynTree::Rotation const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Rotation * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rotation_getRPY" "', argument " "2"" of type '" "double &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation_getRPY" "', argument " "2"" of type '" "double &""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Rotation_getRPY" "', argument " "3"" of type '" "double &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation_getRPY" "', argument " "3"" of type '" "double &""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Rotation_getRPY" "', argument " "4"" of type '" "double &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation_getRPY" "', argument " "4"" of type '" "double &""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  ((iDynTree::Rotation const *)arg1)->getRPY(*arg2,*arg3,*arg4);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Rotation_asRPY(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Rotation *arg1 = (iDynTree::Rotation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Vector3 result;
  
  if (!SWIG_check_num_args("Rotation_asRPY",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Rotation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_asRPY" "', argument " "1"" of type '" "iDynTree::Rotation const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Rotation * >(argp1);
  result = ((iDynTree::Rotation const *)arg1)->asRPY();
  _out = SWIG_NewPointerObj((new iDynTree::Vector3(static_cast< const iDynTree::Vector3& >(result))), SWIGTYPE_p_iDynTree__VectorFixSizeT_3_t, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Rotation_getQuaternion__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Rotation *arg1 = (iDynTree::Rotation *) 0 ;
  iDynTree::Vector4 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("Rotation_getQuaternion",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Rotation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_getQuaternion" "', argument " "1"" of type '" "iDynTree::Rotation const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Rotation * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__VectorFixSizeT_4_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rotation_getQuaternion" "', argument " "2"" of type '" "iDynTree::Vector4 &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation_getQuaternion" "', argument " "2"" of type '" "iDynTree::Vector4 &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Vector4 * >(argp2);
  result = (bool)((iDynTree::Rotation const *)arg1)->getQuaternion(*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Rotation_getQuaternion__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Rotation *arg1 = (iDynTree::Rotation *) 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  double *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("Rotation_getQuaternion",argc,5,5,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Rotation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_getQuaternion" "', argument " "1"" of type '" "iDynTree::Rotation const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Rotation * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rotation_getQuaternion" "', argument " "2"" of type '" "double &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation_getQuaternion" "', argument " "2"" of type '" "double &""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Rotation_getQuaternion" "', argument " "3"" of type '" "double &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation_getQuaternion" "', argument " "3"" of type '" "double &""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Rotation_getQuaternion" "', argument " "4"" of type '" "double &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation_getQuaternion" "', argument " "4"" of type '" "double &""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  res5 = SWIG_ConvertPtr(argv[4], &argp5, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Rotation_getQuaternion" "', argument " "5"" of type '" "double &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation_getQuaternion" "', argument " "5"" of type '" "double &""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  result = (bool)((iDynTree::Rotation const *)arg1)->getQuaternion(*arg2,*arg3,*arg4,*arg5);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Rotation_getQuaternion(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Rotation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__VectorFixSizeT_4_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Rotation_getQuaternion__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Rotation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_double, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_double, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_double, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_Rotation_getQuaternion__SWIG_1(resc,resv,argc,argv);
            }
          }
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Rotation_getQuaternion'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::Rotation::getQuaternion(iDynTree::Vector4 &) const\n"
    "    iDynTree::Rotation::getQuaternion(double &,double &,double &,double &) const\n");
  return 1;
}


int _wrap_Rotation_asQuaternion(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Rotation *arg1 = (iDynTree::Rotation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Vector4 result;
  
  if (!SWIG_check_num_args("Rotation_asQuaternion",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Rotation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_asQuaternion" "', argument " "1"" of type '" "iDynTree::Rotation const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Rotation * >(argp1);
  result = ((iDynTree::Rotation const *)arg1)->asQuaternion();
  _out = SWIG_NewPointerObj((new iDynTree::Vector4(static_cast< const iDynTree::Vector4& >(result))), SWIGTYPE_p_iDynTree__VectorFixSizeT_4_t, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Rotation_RotX(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  mxArray * _out;
  iDynTree::Rotation result;
  
  if (!SWIG_check_num_args("Rotation_RotX",argc,1,1,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Rotation_RotX" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  result = iDynTree::Rotation::RotX(arg1);
  _out = SWIG_NewPointerObj((new iDynTree::Rotation(static_cast< const iDynTree::Rotation& >(result))), SWIGTYPE_p_iDynTree__Rotation, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Rotation_RotY(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  mxArray * _out;
  iDynTree::Rotation result;
  
  if (!SWIG_check_num_args("Rotation_RotY",argc,1,1,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Rotation_RotY" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  result = iDynTree::Rotation::RotY(arg1);
  _out = SWIG_NewPointerObj((new iDynTree::Rotation(static_cast< const iDynTree::Rotation& >(result))), SWIGTYPE_p_iDynTree__Rotation, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Rotation_RotZ(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  mxArray * _out;
  iDynTree::Rotation result;
  
  if (!SWIG_check_num_args("Rotation_RotZ",argc,1,1,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Rotation_RotZ" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  result = iDynTree::Rotation::RotZ(arg1);
  _out = SWIG_NewPointerObj((new iDynTree::Rotation(static_cast< const iDynTree::Rotation& >(result))), SWIGTYPE_p_iDynTree__Rotation, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Rotation_RotAxis(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Direction *arg1 = 0 ;
  double arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::Rotation result;
  
  if (!SWIG_check_num_args("Rotation_RotAxis",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Direction,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_RotAxis" "', argument " "1"" of type '" "iDynTree::Direction const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation_RotAxis" "', argument " "1"" of type '" "iDynTree::Direction const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Direction * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Rotation_RotAxis" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = iDynTree::Rotation::RotAxis((iDynTree::Direction const &)*arg1,arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Rotation(static_cast< const iDynTree::Rotation& >(result))), SWIGTYPE_p_iDynTree__Rotation, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Rotation_RotAxisDerivative(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Direction *arg1 = 0 ;
  double arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::Matrix3x3 result;
  
  if (!SWIG_check_num_args("Rotation_RotAxisDerivative",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Direction,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_RotAxisDerivative" "', argument " "1"" of type '" "iDynTree::Direction const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation_RotAxisDerivative" "', argument " "1"" of type '" "iDynTree::Direction const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Direction * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Rotation_RotAxisDerivative" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = iDynTree::Rotation::RotAxisDerivative((iDynTree::Direction const &)*arg1,arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Matrix3x3(static_cast< const iDynTree::Matrix3x3& >(result))), SWIGTYPE_p_iDynTree__MatrixFixSizeT_3_3_t, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Rotation_RPY(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  iDynTree::Rotation result;
  
  if (!SWIG_check_num_args("Rotation_RPY",argc,3,3,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Rotation_RPY" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Rotation_RPY" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Rotation_RPY" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = iDynTree::Rotation::RPY(arg1,arg2,arg3);
  _out = SWIG_NewPointerObj((new iDynTree::Rotation(static_cast< const iDynTree::Rotation& >(result))), SWIGTYPE_p_iDynTree__Rotation, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Rotation_RPYRightTrivializedDerivative(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  iDynTree::Matrix3x3 result;
  
  if (!SWIG_check_num_args("Rotation_RPYRightTrivializedDerivative",argc,3,3,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Rotation_RPYRightTrivializedDerivative" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Rotation_RPYRightTrivializedDerivative" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Rotation_RPYRightTrivializedDerivative" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = iDynTree::Rotation::RPYRightTrivializedDerivative(arg1,arg2,arg3);
  _out = SWIG_NewPointerObj((new iDynTree::Matrix3x3(static_cast< const iDynTree::Matrix3x3& >(result))), SWIGTYPE_p_iDynTree__MatrixFixSizeT_3_3_t, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Rotation_RPYRightTrivializedDerivativeInverse(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  iDynTree::Matrix3x3 result;
  
  if (!SWIG_check_num_args("Rotation_RPYRightTrivializedDerivativeInverse",argc,3,3,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Rotation_RPYRightTrivializedDerivativeInverse" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Rotation_RPYRightTrivializedDerivativeInverse" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Rotation_RPYRightTrivializedDerivativeInverse" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = iDynTree::Rotation::RPYRightTrivializedDerivativeInverse(arg1,arg2,arg3);
  _out = SWIG_NewPointerObj((new iDynTree::Matrix3x3(static_cast< const iDynTree::Matrix3x3& >(result))), SWIGTYPE_p_iDynTree__MatrixFixSizeT_3_3_t, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Rotation_QuaternionRightTrivializedDerivative(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Vector4 arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  SwigValueWrapper< iDynTree::MatrixFixSize< 4,3 > > result;
  
  if (!SWIG_check_num_args("Rotation_QuaternionRightTrivializedDerivative",argc,1,1,0)) {
    SWIG_fail;
  }
  {
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__VectorFixSizeT_4_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_QuaternionRightTrivializedDerivative" "', argument " "1"" of type '" "iDynTree::Vector4""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation_QuaternionRightTrivializedDerivative" "', argument " "1"" of type '" "iDynTree::Vector4""'");
    } else {
      arg1 = *(reinterpret_cast< iDynTree::Vector4 * >(argp1));
    }
  }
  result = iDynTree::Rotation::QuaternionRightTrivializedDerivative(arg1);
  _out = SWIG_NewPointerObj((new iDynTree::MatrixFixSize< 4,3 >(static_cast< const iDynTree::MatrixFixSize< 4,3 >& >(result))), SWIGTYPE_p_iDynTree__MatrixFixSizeT_4_3_t, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Rotation_QuaternionRightTrivializedDerivativeInverse(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Vector4 arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  SwigValueWrapper< iDynTree::MatrixFixSize< 3,4 > > result;
  
  if (!SWIG_check_num_args("Rotation_QuaternionRightTrivializedDerivativeInverse",argc,1,1,0)) {
    SWIG_fail;
  }
  {
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__VectorFixSizeT_4_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_QuaternionRightTrivializedDerivativeInverse" "', argument " "1"" of type '" "iDynTree::Vector4""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation_QuaternionRightTrivializedDerivativeInverse" "', argument " "1"" of type '" "iDynTree::Vector4""'");
    } else {
      arg1 = *(reinterpret_cast< iDynTree::Vector4 * >(argp1));
    }
  }
  result = iDynTree::Rotation::QuaternionRightTrivializedDerivativeInverse(arg1);
  _out = SWIG_NewPointerObj((new iDynTree::MatrixFixSize< 3,4 >(static_cast< const iDynTree::MatrixFixSize< 3,4 >& >(result))), SWIGTYPE_p_iDynTree__MatrixFixSizeT_3_4_t, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Rotation_Identity(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::Rotation result;
  
  if (!SWIG_check_num_args("Rotation_Identity",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = iDynTree::Rotation::Identity();
  _out = SWIG_NewPointerObj((new iDynTree::Rotation(static_cast< const iDynTree::Rotation& >(result))), SWIGTYPE_p_iDynTree__Rotation, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Rotation_RotationFromQuaternion(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Vector4 *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Rotation result;
  
  if (!SWIG_check_num_args("Rotation_RotationFromQuaternion",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__VectorFixSizeT_4_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_RotationFromQuaternion" "', argument " "1"" of type '" "iDynTree::Vector4 const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation_RotationFromQuaternion" "', argument " "1"" of type '" "iDynTree::Vector4 const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Vector4 * >(argp1);
  result = iDynTree::Rotation::RotationFromQuaternion((iDynTree::VectorFixSize< 4 > const &)*arg1);
  _out = SWIG_NewPointerObj((new iDynTree::Rotation(static_cast< const iDynTree::Rotation& >(result))), SWIGTYPE_p_iDynTree__Rotation, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Rotation_toString(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Rotation *arg1 = (iDynTree::Rotation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("Rotation_toString",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Rotation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_toString" "', argument " "1"" of type '" "iDynTree::Rotation const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Rotation * >(argp1);
  result = ((iDynTree::Rotation const *)arg1)->toString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Rotation_display(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Rotation *arg1 = (iDynTree::Rotation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("Rotation_display",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Rotation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_display" "', argument " "1"" of type '" "iDynTree::Rotation const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Rotation * >(argp1);
  result = ((iDynTree::Rotation const *)arg1)->reservedToString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_Rotation(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Rotation *arg1 = (iDynTree::Rotation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_Rotation",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Rotation, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Rotation" "', argument " "1"" of type '" "iDynTree::Rotation *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Rotation * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_TransformSemantics(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::PositionSemantics *arg1 = 0 ;
  iDynTree::RotationSemantics *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::TransformSemantics *result = 0 ;
  
  if (!SWIG_check_num_args("new_TransformSemantics",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__PositionSemantics,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TransformSemantics" "', argument " "1"" of type '" "iDynTree::PositionSemantics &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TransformSemantics" "', argument " "1"" of type '" "iDynTree::PositionSemantics &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::PositionSemantics * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__RotationSemantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_TransformSemantics" "', argument " "2"" of type '" "iDynTree::RotationSemantics &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TransformSemantics" "', argument " "2"" of type '" "iDynTree::RotationSemantics &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::RotationSemantics * >(argp2);
  result = (iDynTree::TransformSemantics *)new iDynTree::TransformSemantics(*arg1,*arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__TransformSemantics, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_TransformSemantics_getRotationSemantics(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::TransformSemantics *arg1 = (iDynTree::TransformSemantics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::RotationSemantics *result = 0 ;
  
  if (!SWIG_check_num_args("TransformSemantics_getRotationSemantics",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__TransformSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransformSemantics_getRotationSemantics" "', argument " "1"" of type '" "iDynTree::TransformSemantics const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::TransformSemantics * >(argp1);
  result = (iDynTree::RotationSemantics *) &((iDynTree::TransformSemantics const *)arg1)->getRotationSemantics();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__RotationSemantics, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_TransformSemantics_getPositionSemantics(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::TransformSemantics *arg1 = (iDynTree::TransformSemantics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::PositionSemantics *result = 0 ;
  
  if (!SWIG_check_num_args("TransformSemantics_getPositionSemantics",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__TransformSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransformSemantics_getPositionSemantics" "', argument " "1"" of type '" "iDynTree::TransformSemantics const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::TransformSemantics * >(argp1);
  result = (iDynTree::PositionSemantics *) &((iDynTree::TransformSemantics const *)arg1)->getPositionSemantics();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__PositionSemantics, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_TransformSemantics_setRotationSemantics(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::TransformSemantics *arg1 = (iDynTree::TransformSemantics *) 0 ;
  iDynTree::RotationSemantics *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("TransformSemantics_setRotationSemantics",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__TransformSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransformSemantics_setRotationSemantics" "', argument " "1"" of type '" "iDynTree::TransformSemantics *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::TransformSemantics * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__RotationSemantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TransformSemantics_setRotationSemantics" "', argument " "2"" of type '" "iDynTree::RotationSemantics const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TransformSemantics_setRotationSemantics" "', argument " "2"" of type '" "iDynTree::RotationSemantics const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::RotationSemantics * >(argp2);
  result = (bool)(arg1)->setRotationSemantics((iDynTree::RotationSemantics const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_TransformSemantics_setPositionSemantics(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::TransformSemantics *arg1 = (iDynTree::TransformSemantics *) 0 ;
  iDynTree::PositionSemantics *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("TransformSemantics_setPositionSemantics",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__TransformSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransformSemantics_setPositionSemantics" "', argument " "1"" of type '" "iDynTree::TransformSemantics *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::TransformSemantics * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__PositionSemantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TransformSemantics_setPositionSemantics" "', argument " "2"" of type '" "iDynTree::PositionSemantics const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TransformSemantics_setPositionSemantics" "', argument " "2"" of type '" "iDynTree::PositionSemantics const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::PositionSemantics * >(argp2);
  result = (bool)(arg1)->setPositionSemantics((iDynTree::PositionSemantics const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_TransformSemantics_toString(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::TransformSemantics *arg1 = (iDynTree::TransformSemantics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("TransformSemantics_toString",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__TransformSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransformSemantics_toString" "', argument " "1"" of type '" "iDynTree::TransformSemantics const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::TransformSemantics * >(argp1);
  result = ((iDynTree::TransformSemantics const *)arg1)->toString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_TransformSemantics_display(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::TransformSemantics *arg1 = (iDynTree::TransformSemantics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("TransformSemantics_display",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__TransformSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransformSemantics_display" "', argument " "1"" of type '" "iDynTree::TransformSemantics const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::TransformSemantics * >(argp1);
  result = ((iDynTree::TransformSemantics const *)arg1)->reservedToString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_TransformSemantics(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::TransformSemantics *arg1 = (iDynTree::TransformSemantics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_TransformSemantics",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__TransformSemantics, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TransformSemantics" "', argument " "1"" of type '" "iDynTree::TransformSemantics *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::TransformSemantics * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Transform__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::Transform *result = 0 ;
  
  if (!SWIG_check_num_args("new_Transform",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::Transform *)new iDynTree::Transform();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Transform, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Transform__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Rotation *arg1 = 0 ;
  iDynTree::Position *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Transform *result = 0 ;
  
  if (!SWIG_check_num_args("new_Transform",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Rotation,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Transform" "', argument " "1"" of type '" "iDynTree::Rotation const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Transform" "', argument " "1"" of type '" "iDynTree::Rotation const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Rotation * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Position,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Transform" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Transform" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Position * >(argp2);
  result = (iDynTree::Transform *)new iDynTree::Transform((iDynTree::Rotation const &)*arg1,(iDynTree::Position const &)*arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Transform, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Transform__SWIG_2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Transform *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Transform *result = 0 ;
  
  if (!SWIG_check_num_args("new_Transform",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Transform,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Transform" "', argument " "1"" of type '" "iDynTree::Transform const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Transform" "', argument " "1"" of type '" "iDynTree::Transform const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Transform * >(argp1);
  result = (iDynTree::Transform *)new iDynTree::Transform((iDynTree::Transform const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Transform, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Transform(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_Transform__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Transform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Transform__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Rotation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Position, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Transform__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_Transform'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::Transform::Transform()\n"
    "    iDynTree::Transform::Transform(iDynTree::Rotation const &,iDynTree::Position const &)\n"
    "    iDynTree::Transform::Transform(iDynTree::Transform const &)\n");
  return 1;
}


int _wrap_Transform_getSemantics(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Transform *arg1 = (iDynTree::Transform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::TransformSemantics *result = 0 ;
  
  if (!SWIG_check_num_args("Transform_getSemantics",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Transform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_getSemantics" "', argument " "1"" of type '" "iDynTree::Transform *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Transform * >(argp1);
  result = (iDynTree::TransformSemantics *) &(arg1)->getSemantics();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__TransformSemantics, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Transform_getRotation(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Transform *arg1 = (iDynTree::Transform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Rotation *result = 0 ;
  
  if (!SWIG_check_num_args("Transform_getRotation",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Transform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_getRotation" "', argument " "1"" of type '" "iDynTree::Transform const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Transform * >(argp1);
  result = (iDynTree::Rotation *) &((iDynTree::Transform const *)arg1)->getRotation();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Rotation, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Transform_getPosition(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Transform *arg1 = (iDynTree::Transform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Position *result = 0 ;
  
  if (!SWIG_check_num_args("Transform_getPosition",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Transform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_getPosition" "', argument " "1"" of type '" "iDynTree::Transform const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Transform * >(argp1);
  result = (iDynTree::Position *) &((iDynTree::Transform const *)arg1)->getPosition();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Position, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Transform_setRotation(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Transform *arg1 = (iDynTree::Transform *) 0 ;
  iDynTree::Rotation *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Transform_setRotation",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Transform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_setRotation" "', argument " "1"" of type '" "iDynTree::Transform *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Transform * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Rotation,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Transform_setRotation" "', argument " "2"" of type '" "iDynTree::Rotation const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transform_setRotation" "', argument " "2"" of type '" "iDynTree::Rotation const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Rotation * >(argp2);
  (arg1)->setRotation((iDynTree::Rotation const &)*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Transform_setPosition(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Transform *arg1 = (iDynTree::Transform *) 0 ;
  iDynTree::Position *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Transform_setPosition",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Transform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_setPosition" "', argument " "1"" of type '" "iDynTree::Transform *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Transform * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Position,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Transform_setPosition" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transform_setPosition" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Position * >(argp2);
  (arg1)->setPosition((iDynTree::Position const &)*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Transform_compose(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Transform *arg1 = 0 ;
  iDynTree::Transform *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Transform result;
  
  if (!SWIG_check_num_args("Transform_compose",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Transform,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_compose" "', argument " "1"" of type '" "iDynTree::Transform const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transform_compose" "', argument " "1"" of type '" "iDynTree::Transform const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Transform * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Transform,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Transform_compose" "', argument " "2"" of type '" "iDynTree::Transform const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transform_compose" "', argument " "2"" of type '" "iDynTree::Transform const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Transform * >(argp2);
  result = iDynTree::Transform::compose((iDynTree::Transform const &)*arg1,(iDynTree::Transform const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Transform(static_cast< const iDynTree::Transform& >(result))), SWIGTYPE_p_iDynTree__Transform, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Transform_inverse2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Transform *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Transform result;
  
  if (!SWIG_check_num_args("Transform_inverse2",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Transform,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_inverse2" "', argument " "1"" of type '" "iDynTree::Transform const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transform_inverse2" "', argument " "1"" of type '" "iDynTree::Transform const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Transform * >(argp1);
  result = iDynTree::Transform::inverse2((iDynTree::Transform const &)*arg1);
  _out = SWIG_NewPointerObj((new iDynTree::Transform(static_cast< const iDynTree::Transform& >(result))), SWIGTYPE_p_iDynTree__Transform, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Transform_mtimes__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Transform *arg1 = (iDynTree::Transform *) 0 ;
  iDynTree::Transform *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Transform result;
  
  if (!SWIG_check_num_args("Transform_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Transform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_mtimes" "', argument " "1"" of type '" "iDynTree::Transform const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Transform * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Transform,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Transform_mtimes" "', argument " "2"" of type '" "iDynTree::Transform const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transform_mtimes" "', argument " "2"" of type '" "iDynTree::Transform const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Transform * >(argp2);
  result = ((iDynTree::Transform const *)arg1)->operator *((iDynTree::Transform const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Transform(static_cast< const iDynTree::Transform& >(result))), SWIGTYPE_p_iDynTree__Transform, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Transform_inverse(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Transform *arg1 = (iDynTree::Transform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Transform result;
  
  if (!SWIG_check_num_args("Transform_inverse",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Transform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_inverse" "', argument " "1"" of type '" "iDynTree::Transform const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Transform * >(argp1);
  result = ((iDynTree::Transform const *)arg1)->inverse();
  _out = SWIG_NewPointerObj((new iDynTree::Transform(static_cast< const iDynTree::Transform& >(result))), SWIGTYPE_p_iDynTree__Transform, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Transform_mtimes__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Transform *arg1 = (iDynTree::Transform *) 0 ;
  iDynTree::Position *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Position result;
  
  if (!SWIG_check_num_args("Transform_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Transform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_mtimes" "', argument " "1"" of type '" "iDynTree::Transform const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Transform * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Position,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Transform_mtimes" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transform_mtimes" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Position * >(argp2);
  result = ((iDynTree::Transform const *)arg1)->operator *((iDynTree::Position const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Position(static_cast< const iDynTree::Position& >(result))), SWIGTYPE_p_iDynTree__Position, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Transform_mtimes__SWIG_2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Transform *arg1 = (iDynTree::Transform *) 0 ;
  iDynTree::Wrench *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Wrench result;
  
  if (!SWIG_check_num_args("Transform_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Transform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_mtimes" "', argument " "1"" of type '" "iDynTree::Transform const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Transform * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Wrench,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Transform_mtimes" "', argument " "2"" of type '" "iDynTree::Wrench const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transform_mtimes" "', argument " "2"" of type '" "iDynTree::Wrench const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Wrench * >(argp2);
  result = ((iDynTree::Transform const *)arg1)->operator *((iDynTree::Wrench const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Wrench(static_cast< const iDynTree::Wrench& >(result))), SWIGTYPE_p_iDynTree__Wrench, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Transform_mtimes__SWIG_3(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Transform *arg1 = (iDynTree::Transform *) 0 ;
  iDynTree::Twist *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Twist result;
  
  if (!SWIG_check_num_args("Transform_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Transform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_mtimes" "', argument " "1"" of type '" "iDynTree::Transform const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Transform * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Twist,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Transform_mtimes" "', argument " "2"" of type '" "iDynTree::Twist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transform_mtimes" "', argument " "2"" of type '" "iDynTree::Twist const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Twist * >(argp2);
  result = ((iDynTree::Transform const *)arg1)->operator *((iDynTree::Twist const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Twist(static_cast< const iDynTree::Twist& >(result))), SWIGTYPE_p_iDynTree__Twist, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Transform_mtimes__SWIG_4(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Transform *arg1 = (iDynTree::Transform *) 0 ;
  iDynTree::SpatialMomentum *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialMomentum result;
  
  if (!SWIG_check_num_args("Transform_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Transform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_mtimes" "', argument " "1"" of type '" "iDynTree::Transform const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Transform * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialMomentum,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Transform_mtimes" "', argument " "2"" of type '" "iDynTree::SpatialMomentum const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transform_mtimes" "', argument " "2"" of type '" "iDynTree::SpatialMomentum const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialMomentum * >(argp2);
  result = ((iDynTree::Transform const *)arg1)->operator *((iDynTree::SpatialMomentum const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialMomentum(static_cast< const iDynTree::SpatialMomentum& >(result))), SWIGTYPE_p_iDynTree__SpatialMomentum, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Transform_mtimes__SWIG_5(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Transform *arg1 = (iDynTree::Transform *) 0 ;
  iDynTree::SpatialAcc *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialAcc result;
  
  if (!SWIG_check_num_args("Transform_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Transform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_mtimes" "', argument " "1"" of type '" "iDynTree::Transform const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Transform * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialAcc,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Transform_mtimes" "', argument " "2"" of type '" "iDynTree::SpatialAcc const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transform_mtimes" "', argument " "2"" of type '" "iDynTree::SpatialAcc const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialAcc * >(argp2);
  result = ((iDynTree::Transform const *)arg1)->operator *((iDynTree::SpatialAcc const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialAcc(static_cast< const iDynTree::SpatialAcc& >(result))), SWIGTYPE_p_iDynTree__SpatialAcc, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Transform_mtimes__SWIG_6(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Transform *arg1 = (iDynTree::Transform *) 0 ;
  iDynTree::SpatialMotionVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialMotionVector result;
  
  if (!SWIG_check_num_args("Transform_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Transform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_mtimes" "', argument " "1"" of type '" "iDynTree::Transform const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Transform * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialMotionVector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Transform_mtimes" "', argument " "2"" of type '" "iDynTree::SpatialMotionVector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transform_mtimes" "', argument " "2"" of type '" "iDynTree::SpatialMotionVector const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialMotionVector * >(argp2);
  result = ((iDynTree::Transform const *)arg1)->operator *((iDynTree::SpatialMotionVector const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialMotionVector(static_cast< const iDynTree::SpatialMotionVector& >(result))), SWIGTYPE_p_iDynTree__SpatialMotionVector, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Transform_mtimes__SWIG_7(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Transform *arg1 = (iDynTree::Transform *) 0 ;
  iDynTree::SpatialForceVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialForceVector result;
  
  if (!SWIG_check_num_args("Transform_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Transform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_mtimes" "', argument " "1"" of type '" "iDynTree::Transform const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Transform * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialForceVector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Transform_mtimes" "', argument " "2"" of type '" "iDynTree::SpatialForceVector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transform_mtimes" "', argument " "2"" of type '" "iDynTree::SpatialForceVector const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialForceVector * >(argp2);
  result = ((iDynTree::Transform const *)arg1)->operator *((iDynTree::SpatialForceVector const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialForceVector(static_cast< const iDynTree::SpatialForceVector& >(result))), SWIGTYPE_p_iDynTree__SpatialForceVector, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Transform_mtimes__SWIG_8(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Transform *arg1 = (iDynTree::Transform *) 0 ;
  iDynTree::SpatialInertia *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialInertia result;
  
  if (!SWIG_check_num_args("Transform_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Transform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_mtimes" "', argument " "1"" of type '" "iDynTree::Transform const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Transform * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialInertia,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Transform_mtimes" "', argument " "2"" of type '" "iDynTree::SpatialInertia const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transform_mtimes" "', argument " "2"" of type '" "iDynTree::SpatialInertia const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialInertia * >(argp2);
  result = ((iDynTree::Transform const *)arg1)->operator *((iDynTree::SpatialInertia const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialInertia(static_cast< const iDynTree::SpatialInertia& >(result))), SWIGTYPE_p_iDynTree__SpatialInertia, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Transform_mtimes__SWIG_9(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Transform *arg1 = (iDynTree::Transform *) 0 ;
  iDynTree::ArticulatedBodyInertia *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::ArticulatedBodyInertia result;
  
  if (!SWIG_check_num_args("Transform_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Transform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_mtimes" "', argument " "1"" of type '" "iDynTree::Transform const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Transform * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__ArticulatedBodyInertia,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Transform_mtimes" "', argument " "2"" of type '" "iDynTree::ArticulatedBodyInertia const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transform_mtimes" "', argument " "2"" of type '" "iDynTree::ArticulatedBodyInertia const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::ArticulatedBodyInertia * >(argp2);
  result = ((iDynTree::Transform const *)arg1)->operator *((iDynTree::ArticulatedBodyInertia const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::ArticulatedBodyInertia(static_cast< const iDynTree::ArticulatedBodyInertia& >(result))), SWIGTYPE_p_iDynTree__ArticulatedBodyInertia, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Transform_mtimes__SWIG_10(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Transform *arg1 = (iDynTree::Transform *) 0 ;
  iDynTree::Direction *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Direction result;
  
  if (!SWIG_check_num_args("Transform_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Transform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_mtimes" "', argument " "1"" of type '" "iDynTree::Transform const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Transform * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Direction,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Transform_mtimes" "', argument " "2"" of type '" "iDynTree::Direction const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transform_mtimes" "', argument " "2"" of type '" "iDynTree::Direction const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Direction * >(argp2);
  result = ((iDynTree::Transform const *)arg1)->operator *((iDynTree::Direction const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Direction(static_cast< const iDynTree::Direction& >(result))), SWIGTYPE_p_iDynTree__Direction, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Transform_mtimes__SWIG_11(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Transform *arg1 = (iDynTree::Transform *) 0 ;
  iDynTree::Axis *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Axis result;
  
  if (!SWIG_check_num_args("Transform_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Transform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_mtimes" "', argument " "1"" of type '" "iDynTree::Transform const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Transform * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Axis,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Transform_mtimes" "', argument " "2"" of type '" "iDynTree::Axis const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transform_mtimes" "', argument " "2"" of type '" "iDynTree::Axis const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Axis * >(argp2);
  result = ((iDynTree::Transform const *)arg1)->operator *((iDynTree::Axis const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Axis(static_cast< const iDynTree::Axis& >(result))), SWIGTYPE_p_iDynTree__Axis, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Transform_mtimes(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Transform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Transform, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Transform_mtimes__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Transform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Position, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Transform_mtimes__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Transform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Wrench, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Transform_mtimes__SWIG_2(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Transform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Twist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Transform_mtimes__SWIG_3(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Transform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__SpatialMomentum, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Transform_mtimes__SWIG_4(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Transform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__SpatialAcc, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Transform_mtimes__SWIG_5(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Transform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__SpatialMotionVector, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Transform_mtimes__SWIG_6(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Transform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__SpatialForceVector, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Transform_mtimes__SWIG_7(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Transform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__SpatialInertia, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Transform_mtimes__SWIG_8(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Transform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__ArticulatedBodyInertia, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Transform_mtimes__SWIG_9(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Transform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Direction, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Transform_mtimes__SWIG_10(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Transform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Axis, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Transform_mtimes__SWIG_11(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Transform_mtimes'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::Transform::operator *(iDynTree::Transform const &) const\n"
    "    iDynTree::Transform::operator *(iDynTree::Position const &) const\n"
    "    iDynTree::Transform::operator *(iDynTree::Wrench const &) const\n"
    "    iDynTree::Transform::operator *(iDynTree::Twist const &) const\n"
    "    iDynTree::Transform::operator *(iDynTree::SpatialMomentum const &) const\n"
    "    iDynTree::Transform::operator *(iDynTree::SpatialAcc const &) const\n"
    "    iDynTree::Transform::operator *(iDynTree::SpatialMotionVector const &) const\n"
    "    iDynTree::Transform::operator *(iDynTree::SpatialForceVector const &) const\n"
    "    iDynTree::Transform::operator *(iDynTree::SpatialInertia const &) const\n"
    "    iDynTree::Transform::operator *(iDynTree::ArticulatedBodyInertia const &) const\n"
    "    iDynTree::Transform::operator *(iDynTree::Direction const &) const\n"
    "    iDynTree::Transform::operator *(iDynTree::Axis const &) const\n");
  return 1;
}


int _wrap_Transform_Identity(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::Transform result;
  
  if (!SWIG_check_num_args("Transform_Identity",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = iDynTree::Transform::Identity();
  _out = SWIG_NewPointerObj((new iDynTree::Transform(static_cast< const iDynTree::Transform& >(result))), SWIGTYPE_p_iDynTree__Transform, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Transform_asHomogeneousTransform(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Transform *arg1 = (iDynTree::Transform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Matrix4x4 result;
  
  if (!SWIG_check_num_args("Transform_asHomogeneousTransform",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Transform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_asHomogeneousTransform" "', argument " "1"" of type '" "iDynTree::Transform const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Transform * >(argp1);
  result = ((iDynTree::Transform const *)arg1)->asHomogeneousTransform();
  _out = SWIG_NewPointerObj((new iDynTree::Matrix4x4(static_cast< const iDynTree::Matrix4x4& >(result))), SWIGTYPE_p_iDynTree__MatrixFixSizeT_4_4_t, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Transform_asAdjointTransform(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Transform *arg1 = (iDynTree::Transform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Matrix6x6 result;
  
  if (!SWIG_check_num_args("Transform_asAdjointTransform",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Transform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_asAdjointTransform" "', argument " "1"" of type '" "iDynTree::Transform const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Transform * >(argp1);
  result = ((iDynTree::Transform const *)arg1)->asAdjointTransform();
  _out = SWIG_NewPointerObj((new iDynTree::Matrix6x6(static_cast< const iDynTree::Matrix6x6& >(result))), SWIGTYPE_p_iDynTree__MatrixFixSizeT_6_6_t, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Transform_asAdjointTransformWrench(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Transform *arg1 = (iDynTree::Transform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Matrix6x6 result;
  
  if (!SWIG_check_num_args("Transform_asAdjointTransformWrench",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Transform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_asAdjointTransformWrench" "', argument " "1"" of type '" "iDynTree::Transform const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Transform * >(argp1);
  result = ((iDynTree::Transform const *)arg1)->asAdjointTransformWrench();
  _out = SWIG_NewPointerObj((new iDynTree::Matrix6x6(static_cast< const iDynTree::Matrix6x6& >(result))), SWIGTYPE_p_iDynTree__MatrixFixSizeT_6_6_t, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Transform_log(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Transform *arg1 = (iDynTree::Transform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::SpatialMotionVector result;
  
  if (!SWIG_check_num_args("Transform_log",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Transform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_log" "', argument " "1"" of type '" "iDynTree::Transform const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Transform * >(argp1);
  result = ((iDynTree::Transform const *)arg1)->log();
  _out = SWIG_NewPointerObj((new iDynTree::SpatialMotionVector(static_cast< const iDynTree::SpatialMotionVector& >(result))), SWIGTYPE_p_iDynTree__SpatialMotionVector, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Transform_toString(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Transform *arg1 = (iDynTree::Transform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("Transform_toString",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Transform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_toString" "', argument " "1"" of type '" "iDynTree::Transform const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Transform * >(argp1);
  result = ((iDynTree::Transform const *)arg1)->toString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Transform_display(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Transform *arg1 = (iDynTree::Transform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("Transform_display",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Transform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_display" "', argument " "1"" of type '" "iDynTree::Transform const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Transform * >(argp1);
  result = ((iDynTree::Transform const *)arg1)->reservedToString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_Transform(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Transform *arg1 = (iDynTree::Transform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_Transform",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Transform, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Transform" "', argument " "1"" of type '" "iDynTree::Transform *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Transform * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_TransformDerivative__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::TransformDerivative *result = 0 ;
  
  if (!SWIG_check_num_args("new_TransformDerivative",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::TransformDerivative *)new iDynTree::TransformDerivative();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__TransformDerivative, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_TransformDerivative__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Matrix3x3 *arg1 = 0 ;
  iDynTree::Vector3 *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::TransformDerivative *result = 0 ;
  
  if (!SWIG_check_num_args("new_TransformDerivative",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__MatrixFixSizeT_3_3_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TransformDerivative" "', argument " "1"" of type '" "iDynTree::Matrix3x3 const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TransformDerivative" "', argument " "1"" of type '" "iDynTree::Matrix3x3 const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Matrix3x3 * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__VectorFixSizeT_3_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_TransformDerivative" "', argument " "2"" of type '" "iDynTree::Vector3 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TransformDerivative" "', argument " "2"" of type '" "iDynTree::Vector3 const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Vector3 * >(argp2);
  result = (iDynTree::TransformDerivative *)new iDynTree::TransformDerivative((iDynTree::Matrix3x3 const &)*arg1,(iDynTree::Vector3 const &)*arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__TransformDerivative, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_TransformDerivative__SWIG_2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::TransformDerivative *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::TransformDerivative *result = 0 ;
  
  if (!SWIG_check_num_args("new_TransformDerivative",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__TransformDerivative,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TransformDerivative" "', argument " "1"" of type '" "iDynTree::TransformDerivative const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TransformDerivative" "', argument " "1"" of type '" "iDynTree::TransformDerivative const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::TransformDerivative * >(argp1);
  result = (iDynTree::TransformDerivative *)new iDynTree::TransformDerivative((iDynTree::TransformDerivative const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__TransformDerivative, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_TransformDerivative(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_TransformDerivative__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__TransformDerivative, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_TransformDerivative__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__MatrixFixSizeT_3_3_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__VectorFixSizeT_3_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_TransformDerivative__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_TransformDerivative'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::TransformDerivative::TransformDerivative()\n"
    "    iDynTree::TransformDerivative::TransformDerivative(iDynTree::Matrix3x3 const &,iDynTree::Vector3 const &)\n"
    "    iDynTree::TransformDerivative::TransformDerivative(iDynTree::TransformDerivative const &)\n");
  return 1;
}


int _wrap_delete_TransformDerivative(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::TransformDerivative *arg1 = (iDynTree::TransformDerivative *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_TransformDerivative",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__TransformDerivative, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TransformDerivative" "', argument " "1"" of type '" "iDynTree::TransformDerivative *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::TransformDerivative * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_TransformDerivative_getRotationDerivative(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::TransformDerivative *arg1 = (iDynTree::TransformDerivative *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Matrix3x3 *result = 0 ;
  
  if (!SWIG_check_num_args("TransformDerivative_getRotationDerivative",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__TransformDerivative, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransformDerivative_getRotationDerivative" "', argument " "1"" of type '" "iDynTree::TransformDerivative const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::TransformDerivative * >(argp1);
  result = (iDynTree::Matrix3x3 *) &((iDynTree::TransformDerivative const *)arg1)->getRotationDerivative();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__MatrixFixSizeT_3_3_t, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_TransformDerivative_getPositionDerivative(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::TransformDerivative *arg1 = (iDynTree::TransformDerivative *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Vector3 *result = 0 ;
  
  if (!SWIG_check_num_args("TransformDerivative_getPositionDerivative",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__TransformDerivative, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransformDerivative_getPositionDerivative" "', argument " "1"" of type '" "iDynTree::TransformDerivative const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::TransformDerivative * >(argp1);
  result = (iDynTree::Vector3 *) &((iDynTree::TransformDerivative const *)arg1)->getPositionDerivative();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__VectorFixSizeT_3_t, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_TransformDerivative_setRotationDerivative(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::TransformDerivative *arg1 = (iDynTree::TransformDerivative *) 0 ;
  iDynTree::Matrix3x3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("TransformDerivative_setRotationDerivative",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__TransformDerivative, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransformDerivative_setRotationDerivative" "', argument " "1"" of type '" "iDynTree::TransformDerivative *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::TransformDerivative * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__MatrixFixSizeT_3_3_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TransformDerivative_setRotationDerivative" "', argument " "2"" of type '" "iDynTree::Matrix3x3 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TransformDerivative_setRotationDerivative" "', argument " "2"" of type '" "iDynTree::Matrix3x3 const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Matrix3x3 * >(argp2);
  (arg1)->setRotationDerivative((iDynTree::Matrix3x3 const &)*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_TransformDerivative_setPositionDerivative(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::TransformDerivative *arg1 = (iDynTree::TransformDerivative *) 0 ;
  iDynTree::Vector3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("TransformDerivative_setPositionDerivative",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__TransformDerivative, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransformDerivative_setPositionDerivative" "', argument " "1"" of type '" "iDynTree::TransformDerivative *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::TransformDerivative * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__VectorFixSizeT_3_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TransformDerivative_setPositionDerivative" "', argument " "2"" of type '" "iDynTree::Vector3 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TransformDerivative_setPositionDerivative" "', argument " "2"" of type '" "iDynTree::Vector3 const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Vector3 * >(argp2);
  (arg1)->setPositionDerivative((iDynTree::Vector3 const &)*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_TransformDerivative_Zero(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::TransformDerivative result;
  
  if (!SWIG_check_num_args("TransformDerivative_Zero",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = iDynTree::TransformDerivative::Zero();
  _out = SWIG_NewPointerObj((new iDynTree::TransformDerivative(static_cast< const iDynTree::TransformDerivative& >(result))), SWIGTYPE_p_iDynTree__TransformDerivative, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_TransformDerivative_asHomogeneousTransformDerivative(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::TransformDerivative *arg1 = (iDynTree::TransformDerivative *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Matrix4x4 result;
  
  if (!SWIG_check_num_args("TransformDerivative_asHomogeneousTransformDerivative",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__TransformDerivative, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransformDerivative_asHomogeneousTransformDerivative" "', argument " "1"" of type '" "iDynTree::TransformDerivative const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::TransformDerivative * >(argp1);
  result = ((iDynTree::TransformDerivative const *)arg1)->asHomogeneousTransformDerivative();
  _out = SWIG_NewPointerObj((new iDynTree::Matrix4x4(static_cast< const iDynTree::Matrix4x4& >(result))), SWIGTYPE_p_iDynTree__MatrixFixSizeT_4_4_t, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_TransformDerivative_asAdjointTransformDerivative(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::TransformDerivative *arg1 = (iDynTree::TransformDerivative *) 0 ;
  iDynTree::Transform *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Matrix6x6 result;
  
  if (!SWIG_check_num_args("TransformDerivative_asAdjointTransformDerivative",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__TransformDerivative, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransformDerivative_asAdjointTransformDerivative" "', argument " "1"" of type '" "iDynTree::TransformDerivative const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::TransformDerivative * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Transform,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TransformDerivative_asAdjointTransformDerivative" "', argument " "2"" of type '" "iDynTree::Transform const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TransformDerivative_asAdjointTransformDerivative" "', argument " "2"" of type '" "iDynTree::Transform const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Transform * >(argp2);
  result = ((iDynTree::TransformDerivative const *)arg1)->asAdjointTransformDerivative((iDynTree::Transform const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Matrix6x6(static_cast< const iDynTree::Matrix6x6& >(result))), SWIGTYPE_p_iDynTree__MatrixFixSizeT_6_6_t, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_TransformDerivative_asAdjointTransformWrenchDerivative(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::TransformDerivative *arg1 = (iDynTree::TransformDerivative *) 0 ;
  iDynTree::Transform *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Matrix6x6 result;
  
  if (!SWIG_check_num_args("TransformDerivative_asAdjointTransformWrenchDerivative",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__TransformDerivative, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransformDerivative_asAdjointTransformWrenchDerivative" "', argument " "1"" of type '" "iDynTree::TransformDerivative const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::TransformDerivative * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Transform,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TransformDerivative_asAdjointTransformWrenchDerivative" "', argument " "2"" of type '" "iDynTree::Transform const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TransformDerivative_asAdjointTransformWrenchDerivative" "', argument " "2"" of type '" "iDynTree::Transform const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Transform * >(argp2);
  result = ((iDynTree::TransformDerivative const *)arg1)->asAdjointTransformWrenchDerivative((iDynTree::Transform const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Matrix6x6(static_cast< const iDynTree::Matrix6x6& >(result))), SWIGTYPE_p_iDynTree__MatrixFixSizeT_6_6_t, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_TransformDerivative_mtimes(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::TransformDerivative *arg1 = (iDynTree::TransformDerivative *) 0 ;
  iDynTree::Transform *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::TransformDerivative result;
  
  if (!SWIG_check_num_args("TransformDerivative_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__TransformDerivative, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransformDerivative_mtimes" "', argument " "1"" of type '" "iDynTree::TransformDerivative const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::TransformDerivative * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Transform,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TransformDerivative_mtimes" "', argument " "2"" of type '" "iDynTree::Transform const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TransformDerivative_mtimes" "', argument " "2"" of type '" "iDynTree::Transform const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Transform * >(argp2);
  result = ((iDynTree::TransformDerivative const *)arg1)->operator *((iDynTree::Transform const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::TransformDerivative(static_cast< const iDynTree::TransformDerivative& >(result))), SWIGTYPE_p_iDynTree__TransformDerivative, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_TransformDerivative_derivativeOfInverse(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::TransformDerivative *arg1 = (iDynTree::TransformDerivative *) 0 ;
  iDynTree::Transform *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::TransformDerivative result;
  
  if (!SWIG_check_num_args("TransformDerivative_derivativeOfInverse",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__TransformDerivative, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransformDerivative_derivativeOfInverse" "', argument " "1"" of type '" "iDynTree::TransformDerivative const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::TransformDerivative * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Transform,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TransformDerivative_derivativeOfInverse" "', argument " "2"" of type '" "iDynTree::Transform const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TransformDerivative_derivativeOfInverse" "', argument " "2"" of type '" "iDynTree::Transform const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Transform * >(argp2);
  result = ((iDynTree::TransformDerivative const *)arg1)->derivativeOfInverse((iDynTree::Transform const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::TransformDerivative(static_cast< const iDynTree::TransformDerivative& >(result))), SWIGTYPE_p_iDynTree__TransformDerivative, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_TransformDerivative_transform__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::TransformDerivative *arg1 = (iDynTree::TransformDerivative *) 0 ;
  iDynTree::Transform *arg2 = 0 ;
  iDynTree::ArticulatedBodyInertia *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  mxArray * _out;
  iDynTree::ArticulatedBodyInertia result;
  
  if (!SWIG_check_num_args("TransformDerivative_transform",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__TransformDerivative, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransformDerivative_transform" "', argument " "1"" of type '" "iDynTree::TransformDerivative *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::TransformDerivative * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Transform,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TransformDerivative_transform" "', argument " "2"" of type '" "iDynTree::Transform const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TransformDerivative_transform" "', argument " "2"" of type '" "iDynTree::Transform const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Transform * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__ArticulatedBodyInertia,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TransformDerivative_transform" "', argument " "3"" of type '" "iDynTree::ArticulatedBodyInertia &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TransformDerivative_transform" "', argument " "3"" of type '" "iDynTree::ArticulatedBodyInertia &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::ArticulatedBodyInertia * >(argp3);
  result = (arg1)->transform((iDynTree::Transform const &)*arg2,*arg3);
  _out = SWIG_NewPointerObj((new iDynTree::ArticulatedBodyInertia(static_cast< const iDynTree::ArticulatedBodyInertia& >(result))), SWIGTYPE_p_iDynTree__ArticulatedBodyInertia, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_TransformDerivative_transform__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::TransformDerivative *arg1 = (iDynTree::TransformDerivative *) 0 ;
  iDynTree::Transform *arg2 = 0 ;
  iDynTree::SpatialForceVector *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  mxArray * _out;
  iDynTree::SpatialForceVector result;
  
  if (!SWIG_check_num_args("TransformDerivative_transform",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__TransformDerivative, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransformDerivative_transform" "', argument " "1"" of type '" "iDynTree::TransformDerivative *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::TransformDerivative * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Transform,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TransformDerivative_transform" "', argument " "2"" of type '" "iDynTree::Transform const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TransformDerivative_transform" "', argument " "2"" of type '" "iDynTree::Transform const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Transform * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__SpatialForceVector,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TransformDerivative_transform" "', argument " "3"" of type '" "iDynTree::SpatialForceVector &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TransformDerivative_transform" "', argument " "3"" of type '" "iDynTree::SpatialForceVector &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::SpatialForceVector * >(argp3);
  result = (arg1)->transform((iDynTree::Transform const &)*arg2,*arg3);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialForceVector(static_cast< const iDynTree::SpatialForceVector& >(result))), SWIGTYPE_p_iDynTree__SpatialForceVector, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_TransformDerivative_transform__SWIG_2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::TransformDerivative *arg1 = (iDynTree::TransformDerivative *) 0 ;
  iDynTree::Transform *arg2 = 0 ;
  iDynTree::SpatialMotionVector *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  mxArray * _out;
  iDynTree::SpatialMotionVector result;
  
  if (!SWIG_check_num_args("TransformDerivative_transform",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__TransformDerivative, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransformDerivative_transform" "', argument " "1"" of type '" "iDynTree::TransformDerivative *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::TransformDerivative * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Transform,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TransformDerivative_transform" "', argument " "2"" of type '" "iDynTree::Transform const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TransformDerivative_transform" "', argument " "2"" of type '" "iDynTree::Transform const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Transform * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__SpatialMotionVector,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TransformDerivative_transform" "', argument " "3"" of type '" "iDynTree::SpatialMotionVector &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TransformDerivative_transform" "', argument " "3"" of type '" "iDynTree::SpatialMotionVector &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::SpatialMotionVector * >(argp3);
  result = (arg1)->transform((iDynTree::Transform const &)*arg2,*arg3);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialMotionVector(static_cast< const iDynTree::SpatialMotionVector& >(result))), SWIGTYPE_p_iDynTree__SpatialMotionVector, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_TransformDerivative_transform(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__TransformDerivative, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Transform, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_iDynTree__ArticulatedBodyInertia, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_TransformDerivative_transform__SWIG_0(resc,resv,argc,argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__TransformDerivative, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Transform, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_iDynTree__SpatialForceVector, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_TransformDerivative_transform__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__TransformDerivative, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Transform, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_iDynTree__SpatialMotionVector, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_TransformDerivative_transform__SWIG_2(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'TransformDerivative_transform'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::TransformDerivative::transform(iDynTree::Transform const &,iDynTree::ArticulatedBodyInertia &)\n"
    "    iDynTree::TransformDerivative::transform(iDynTree::Transform const &,iDynTree::SpatialForceVector &)\n"
    "    iDynTree::TransformDerivative::transform(iDynTree::Transform const &,iDynTree::SpatialMotionVector &)\n");
  return 1;
}


SWIGINTERN int _wrap_LINK_INVALID_INDEX_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  resv[0] = SWIG_From_int(static_cast< int >(iDynTree::LINK_INVALID_INDEX));
  return 0;
}


SWIGINTERN int _wrap_LINK_INVALID_INDEX_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  {
    int val;
    int res = SWIG_AsVal_int(argv[0], &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""iDynTree::LINK_INVALID_INDEX""' of type '""iDynTree::LinkIndex""'");
    }
    iDynTree::LINK_INVALID_INDEX = static_cast< iDynTree::LinkIndex >(val);
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN int _wrap_LINK_INVALID_NAME_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  resv[0] = SWIG_From_std_string(static_cast< std::string >(iDynTree::LINK_INVALID_NAME));
  return 0;
}


SWIGINTERN int _wrap_LINK_INVALID_NAME_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in variable '""iDynTree::LINK_INVALID_NAME""' of type '""std::string""'"); 
    }
    iDynTree::LINK_INVALID_NAME = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN int _wrap_JOINT_INVALID_INDEX_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  resv[0] = SWIG_From_int(static_cast< int >(iDynTree::JOINT_INVALID_INDEX));
  return 0;
}


SWIGINTERN int _wrap_JOINT_INVALID_INDEX_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  {
    int val;
    int res = SWIG_AsVal_int(argv[0], &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""iDynTree::JOINT_INVALID_INDEX""' of type '""int""'");
    }
    iDynTree::JOINT_INVALID_INDEX = static_cast< int >(val);
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN int _wrap_JOINT_INVALID_NAME_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  resv[0] = SWIG_From_std_string(static_cast< std::string >(iDynTree::JOINT_INVALID_NAME));
  return 0;
}


SWIGINTERN int _wrap_JOINT_INVALID_NAME_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in variable '""iDynTree::JOINT_INVALID_NAME""' of type '""std::string""'"); 
    }
    iDynTree::JOINT_INVALID_NAME = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN int _wrap_DOF_INVALID_INDEX_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  resv[0] = SWIG_From_int(static_cast< int >(iDynTree::DOF_INVALID_INDEX));
  return 0;
}


SWIGINTERN int _wrap_DOF_INVALID_INDEX_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  {
    int val;
    int res = SWIG_AsVal_int(argv[0], &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""iDynTree::DOF_INVALID_INDEX""' of type '""int""'");
    }
    iDynTree::DOF_INVALID_INDEX = static_cast< int >(val);
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN int _wrap_DOF_INVALID_NAME_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  resv[0] = SWIG_From_std_string(static_cast< std::string >(iDynTree::DOF_INVALID_NAME));
  return 0;
}


SWIGINTERN int _wrap_DOF_INVALID_NAME_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in variable '""iDynTree::DOF_INVALID_NAME""' of type '""std::string""'"); 
    }
    iDynTree::DOF_INVALID_NAME = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN int _wrap_FRAME_INVALID_INDEX_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  resv[0] = SWIG_From_int(static_cast< int >(iDynTree::FRAME_INVALID_INDEX));
  return 0;
}


SWIGINTERN int _wrap_FRAME_INVALID_INDEX_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  {
    int val;
    int res = SWIG_AsVal_int(argv[0], &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""iDynTree::FRAME_INVALID_INDEX""' of type '""int""'");
    }
    iDynTree::FRAME_INVALID_INDEX = static_cast< int >(val);
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN int _wrap_FRAME_INVALID_NAME_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  resv[0] = SWIG_From_std_string(static_cast< std::string >(iDynTree::FRAME_INVALID_NAME));
  return 0;
}


SWIGINTERN int _wrap_FRAME_INVALID_NAME_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in variable '""iDynTree::FRAME_INVALID_NAME""' of type '""std::string""'"); 
    }
    iDynTree::FRAME_INVALID_NAME = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN int _wrap_TRAVERSAL_INVALID_INDEX_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  resv[0] = SWIG_From_int(static_cast< int >(iDynTree::TRAVERSAL_INVALID_INDEX));
  return 0;
}


SWIGINTERN int _wrap_TRAVERSAL_INVALID_INDEX_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  {
    int val;
    int res = SWIG_AsVal_int(argv[0], &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""iDynTree::TRAVERSAL_INVALID_INDEX""' of type '""iDynTree::TraversalIndex""'");
    }
    iDynTree::TRAVERSAL_INVALID_INDEX = static_cast< iDynTree::TraversalIndex >(val);
  }
  return 0;
fail:
  return 1;
}


int _wrap_new_LinkPositions__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  mxArray * _out;
  iDynTree::LinkPositions *result = 0 ;
  
  if (!SWIG_check_num_args("new_LinkPositions",argc,1,1,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_unsigned_SS_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_LinkPositions" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  result = (iDynTree::LinkPositions *)new iDynTree::LinkPositions(arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__LinkPositions, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_LinkPositions__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::LinkPositions *result = 0 ;
  
  if (!SWIG_check_num_args("new_LinkPositions",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::LinkPositions *)new iDynTree::LinkPositions();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__LinkPositions, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_LinkPositions__SWIG_2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::LinkPositions *result = 0 ;
  
  if (!SWIG_check_num_args("new_LinkPositions",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LinkPositions" "', argument " "1"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LinkPositions" "', argument " "1"" of type '" "iDynTree::Model const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  result = (iDynTree::LinkPositions *)new iDynTree::LinkPositions((iDynTree::Model const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__LinkPositions, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_LinkPositions(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_LinkPositions__SWIG_1(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Model, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_LinkPositions__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_LinkPositions__SWIG_0(resc,resv,argc,argv);
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_LinkPositions'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::LinkPositions::LinkPositions(unsigned int)\n"
    "    iDynTree::LinkPositions::LinkPositions()\n"
    "    iDynTree::LinkPositions::LinkPositions(iDynTree::Model const &)\n");
  return 1;
}


int _wrap_LinkPositions_resize__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkPositions *arg1 = (iDynTree::LinkPositions *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("LinkPositions_resize",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkPositions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinkPositions_resize" "', argument " "1"" of type '" "iDynTree::LinkPositions *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkPositions * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LinkPositions_resize" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  (arg1)->resize(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_LinkPositions_resize__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkPositions *arg1 = (iDynTree::LinkPositions *) 0 ;
  iDynTree::Model *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("LinkPositions_resize",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkPositions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinkPositions_resize" "', argument " "1"" of type '" "iDynTree::LinkPositions *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkPositions * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LinkPositions_resize" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinkPositions_resize" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Model * >(argp2);
  (arg1)->resize((iDynTree::Model const &)*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_LinkPositions_resize(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__LinkPositions, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Model, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_LinkPositions_resize__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__LinkPositions, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_LinkPositions_resize__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'LinkPositions_resize'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::LinkPositions::resize(unsigned int)\n"
    "    iDynTree::LinkPositions::resize(iDynTree::Model const &)\n");
  return 1;
}


int _wrap_LinkPositions_isConsistent(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkPositions *arg1 = (iDynTree::LinkPositions *) 0 ;
  iDynTree::Model *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("LinkPositions_isConsistent",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkPositions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinkPositions_isConsistent" "', argument " "1"" of type '" "iDynTree::LinkPositions const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkPositions * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LinkPositions_isConsistent" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinkPositions_isConsistent" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Model * >(argp2);
  result = (bool)((iDynTree::LinkPositions const *)arg1)->isConsistent((iDynTree::Model const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_LinkPositions_getNrOfLinks(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkPositions *arg1 = (iDynTree::LinkPositions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  size_t result;
  
  if (!SWIG_check_num_args("LinkPositions_getNrOfLinks",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkPositions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinkPositions_getNrOfLinks" "', argument " "1"" of type '" "iDynTree::LinkPositions const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkPositions * >(argp1);
  result = ((iDynTree::LinkPositions const *)arg1)->getNrOfLinks();
  _out = SWIG_From_size_t(static_cast< size_t >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_LinkPositions_paren__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkPositions *arg1 = (iDynTree::LinkPositions *) 0 ;
  iDynTree::LinkIndex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::Transform *result = 0 ;
  
  if (!SWIG_check_num_args("LinkPositions_paren",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkPositions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinkPositions_paren" "', argument " "1"" of type '" "iDynTree::LinkPositions *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkPositions * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LinkPositions_paren" "', argument " "2"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg2 = static_cast< iDynTree::LinkIndex >(val2);
  result = (iDynTree::Transform *) &(arg1)->operator ()(arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Transform, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_LinkPositions_paren__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkPositions *arg1 = (iDynTree::LinkPositions *) 0 ;
  iDynTree::LinkIndex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::Transform *result = 0 ;
  
  if (!SWIG_check_num_args("LinkPositions_paren",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkPositions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinkPositions_paren" "', argument " "1"" of type '" "iDynTree::LinkPositions const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkPositions * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LinkPositions_paren" "', argument " "2"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg2 = static_cast< iDynTree::LinkIndex >(val2);
  result = (iDynTree::Transform *) &((iDynTree::LinkPositions const *)arg1)->operator ()(arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Transform, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_LinkPositions_paren(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__LinkPositions, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_LinkPositions_paren__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__LinkPositions, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_LinkPositions_paren__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'LinkPositions_paren'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::LinkPositions::operator ()(iDynTree::LinkIndex const)\n"
    "    iDynTree::LinkPositions::operator ()(iDynTree::LinkIndex const) const\n");
  return 1;
}


int _wrap_LinkPositions_toString(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkPositions *arg1 = (iDynTree::LinkPositions *) 0 ;
  iDynTree::Model *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("LinkPositions_toString",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkPositions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinkPositions_toString" "', argument " "1"" of type '" "iDynTree::LinkPositions const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkPositions * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LinkPositions_toString" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinkPositions_toString" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Model * >(argp2);
  result = ((iDynTree::LinkPositions const *)arg1)->toString((iDynTree::Model const &)*arg2);
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_LinkPositions(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkPositions *arg1 = (iDynTree::LinkPositions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_LinkPositions",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkPositions, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LinkPositions" "', argument " "1"" of type '" "iDynTree::LinkPositions *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkPositions * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_LinkWrenches__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  mxArray * _out;
  iDynTree::LinkWrenches *result = 0 ;
  
  if (!SWIG_check_num_args("new_LinkWrenches",argc,1,1,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_unsigned_SS_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_LinkWrenches" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  result = (iDynTree::LinkWrenches *)new iDynTree::LinkWrenches(arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__LinkWrenches, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_LinkWrenches__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::LinkWrenches *result = 0 ;
  
  if (!SWIG_check_num_args("new_LinkWrenches",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::LinkWrenches *)new iDynTree::LinkWrenches();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__LinkWrenches, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_LinkWrenches__SWIG_2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::LinkWrenches *result = 0 ;
  
  if (!SWIG_check_num_args("new_LinkWrenches",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LinkWrenches" "', argument " "1"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LinkWrenches" "', argument " "1"" of type '" "iDynTree::Model const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  result = (iDynTree::LinkWrenches *)new iDynTree::LinkWrenches((iDynTree::Model const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__LinkWrenches, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_LinkWrenches(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_LinkWrenches__SWIG_1(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Model, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_LinkWrenches__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_LinkWrenches__SWIG_0(resc,resv,argc,argv);
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_LinkWrenches'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::LinkWrenches::LinkWrenches(unsigned int)\n"
    "    iDynTree::LinkWrenches::LinkWrenches()\n"
    "    iDynTree::LinkWrenches::LinkWrenches(iDynTree::Model const &)\n");
  return 1;
}


int _wrap_LinkWrenches_resize__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkWrenches *arg1 = (iDynTree::LinkWrenches *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("LinkWrenches_resize",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkWrenches, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinkWrenches_resize" "', argument " "1"" of type '" "iDynTree::LinkWrenches *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkWrenches * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LinkWrenches_resize" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  (arg1)->resize(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_LinkWrenches_resize__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkWrenches *arg1 = (iDynTree::LinkWrenches *) 0 ;
  iDynTree::Model *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("LinkWrenches_resize",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkWrenches, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinkWrenches_resize" "', argument " "1"" of type '" "iDynTree::LinkWrenches *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkWrenches * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LinkWrenches_resize" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinkWrenches_resize" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Model * >(argp2);
  (arg1)->resize((iDynTree::Model const &)*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_LinkWrenches_resize(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__LinkWrenches, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Model, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_LinkWrenches_resize__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__LinkWrenches, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_LinkWrenches_resize__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'LinkWrenches_resize'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::LinkWrenches::resize(unsigned int)\n"
    "    iDynTree::LinkWrenches::resize(iDynTree::Model const &)\n");
  return 1;
}


int _wrap_LinkWrenches_isConsistent(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkWrenches *arg1 = (iDynTree::LinkWrenches *) 0 ;
  iDynTree::Model *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("LinkWrenches_isConsistent",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkWrenches, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinkWrenches_isConsistent" "', argument " "1"" of type '" "iDynTree::LinkWrenches const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkWrenches * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LinkWrenches_isConsistent" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinkWrenches_isConsistent" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Model * >(argp2);
  result = (bool)((iDynTree::LinkWrenches const *)arg1)->isConsistent((iDynTree::Model const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_LinkWrenches_getNrOfLinks(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkWrenches *arg1 = (iDynTree::LinkWrenches *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  size_t result;
  
  if (!SWIG_check_num_args("LinkWrenches_getNrOfLinks",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkWrenches, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinkWrenches_getNrOfLinks" "', argument " "1"" of type '" "iDynTree::LinkWrenches const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkWrenches * >(argp1);
  result = ((iDynTree::LinkWrenches const *)arg1)->getNrOfLinks();
  _out = SWIG_From_size_t(static_cast< size_t >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_LinkWrenches_paren__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkWrenches *arg1 = (iDynTree::LinkWrenches *) 0 ;
  iDynTree::LinkIndex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::Wrench *result = 0 ;
  
  if (!SWIG_check_num_args("LinkWrenches_paren",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkWrenches, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinkWrenches_paren" "', argument " "1"" of type '" "iDynTree::LinkWrenches *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkWrenches * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LinkWrenches_paren" "', argument " "2"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg2 = static_cast< iDynTree::LinkIndex >(val2);
  result = (iDynTree::Wrench *) &(arg1)->operator ()(arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Wrench, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_LinkWrenches_paren__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkWrenches *arg1 = (iDynTree::LinkWrenches *) 0 ;
  iDynTree::LinkIndex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::Wrench *result = 0 ;
  
  if (!SWIG_check_num_args("LinkWrenches_paren",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkWrenches, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinkWrenches_paren" "', argument " "1"" of type '" "iDynTree::LinkWrenches const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkWrenches * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LinkWrenches_paren" "', argument " "2"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg2 = static_cast< iDynTree::LinkIndex >(val2);
  result = (iDynTree::Wrench *) &((iDynTree::LinkWrenches const *)arg1)->operator ()(arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Wrench, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_LinkWrenches_paren(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__LinkWrenches, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_LinkWrenches_paren__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__LinkWrenches, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_LinkWrenches_paren__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'LinkWrenches_paren'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::LinkWrenches::operator ()(iDynTree::LinkIndex const)\n"
    "    iDynTree::LinkWrenches::operator ()(iDynTree::LinkIndex const) const\n");
  return 1;
}


int _wrap_LinkWrenches_toString(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkWrenches *arg1 = (iDynTree::LinkWrenches *) 0 ;
  iDynTree::Model *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("LinkWrenches_toString",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkWrenches, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinkWrenches_toString" "', argument " "1"" of type '" "iDynTree::LinkWrenches const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkWrenches * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LinkWrenches_toString" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinkWrenches_toString" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Model * >(argp2);
  result = ((iDynTree::LinkWrenches const *)arg1)->toString((iDynTree::Model const &)*arg2);
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_LinkWrenches_zero(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkWrenches *arg1 = (iDynTree::LinkWrenches *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("LinkWrenches_zero",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkWrenches, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinkWrenches_zero" "', argument " "1"" of type '" "iDynTree::LinkWrenches *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkWrenches * >(argp1);
  (arg1)->zero();
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_LinkWrenches(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkWrenches *arg1 = (iDynTree::LinkWrenches *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_LinkWrenches",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkWrenches, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LinkWrenches" "', argument " "1"" of type '" "iDynTree::LinkWrenches *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkWrenches * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_LinkInertias__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  mxArray * _out;
  iDynTree::LinkInertias *result = 0 ;
  
  if (!SWIG_check_num_args("new_LinkInertias",argc,1,1,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_unsigned_SS_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_LinkInertias" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  result = (iDynTree::LinkInertias *)new iDynTree::LinkInertias(arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__LinkInertias, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_LinkInertias__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::LinkInertias *result = 0 ;
  
  if (!SWIG_check_num_args("new_LinkInertias",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::LinkInertias *)new iDynTree::LinkInertias();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__LinkInertias, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_LinkInertias__SWIG_2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::LinkInertias *result = 0 ;
  
  if (!SWIG_check_num_args("new_LinkInertias",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LinkInertias" "', argument " "1"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LinkInertias" "', argument " "1"" of type '" "iDynTree::Model const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  result = (iDynTree::LinkInertias *)new iDynTree::LinkInertias((iDynTree::Model const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__LinkInertias, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_LinkInertias(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_LinkInertias__SWIG_1(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Model, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_LinkInertias__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_LinkInertias__SWIG_0(resc,resv,argc,argv);
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_LinkInertias'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::LinkInertias::LinkInertias(unsigned int)\n"
    "    iDynTree::LinkInertias::LinkInertias()\n"
    "    iDynTree::LinkInertias::LinkInertias(iDynTree::Model const &)\n");
  return 1;
}


int _wrap_LinkInertias_resize__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkInertias *arg1 = (iDynTree::LinkInertias *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("LinkInertias_resize",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkInertias, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinkInertias_resize" "', argument " "1"" of type '" "iDynTree::LinkInertias *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkInertias * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LinkInertias_resize" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  (arg1)->resize(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_LinkInertias_resize__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkInertias *arg1 = (iDynTree::LinkInertias *) 0 ;
  iDynTree::Model *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("LinkInertias_resize",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkInertias, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinkInertias_resize" "', argument " "1"" of type '" "iDynTree::LinkInertias *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkInertias * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LinkInertias_resize" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinkInertias_resize" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Model * >(argp2);
  (arg1)->resize((iDynTree::Model const &)*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_LinkInertias_resize(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__LinkInertias, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Model, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_LinkInertias_resize__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__LinkInertias, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_LinkInertias_resize__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'LinkInertias_resize'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::LinkInertias::resize(unsigned int)\n"
    "    iDynTree::LinkInertias::resize(iDynTree::Model const &)\n");
  return 1;
}


int _wrap_LinkInertias_isConsistent(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkInertias *arg1 = (iDynTree::LinkInertias *) 0 ;
  iDynTree::Model *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("LinkInertias_isConsistent",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkInertias, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinkInertias_isConsistent" "', argument " "1"" of type '" "iDynTree::LinkInertias const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkInertias * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LinkInertias_isConsistent" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinkInertias_isConsistent" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Model * >(argp2);
  result = (bool)((iDynTree::LinkInertias const *)arg1)->isConsistent((iDynTree::Model const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_LinkInertias_paren__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkInertias *arg1 = (iDynTree::LinkInertias *) 0 ;
  iDynTree::LinkIndex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialInertia *result = 0 ;
  
  if (!SWIG_check_num_args("LinkInertias_paren",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkInertias, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinkInertias_paren" "', argument " "1"" of type '" "iDynTree::LinkInertias *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkInertias * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LinkInertias_paren" "', argument " "2"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg2 = static_cast< iDynTree::LinkIndex >(val2);
  result = (iDynTree::SpatialInertia *) &(arg1)->operator ()(arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SpatialInertia, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_LinkInertias_paren__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkInertias *arg1 = (iDynTree::LinkInertias *) 0 ;
  iDynTree::LinkIndex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialInertia *result = 0 ;
  
  if (!SWIG_check_num_args("LinkInertias_paren",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkInertias, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinkInertias_paren" "', argument " "1"" of type '" "iDynTree::LinkInertias const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkInertias * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LinkInertias_paren" "', argument " "2"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg2 = static_cast< iDynTree::LinkIndex >(val2);
  result = (iDynTree::SpatialInertia *) &((iDynTree::LinkInertias const *)arg1)->operator ()(arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SpatialInertia, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_LinkInertias_paren(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__LinkInertias, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_LinkInertias_paren__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__LinkInertias, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_LinkInertias_paren__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'LinkInertias_paren'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::LinkInertias::operator ()(iDynTree::LinkIndex const)\n"
    "    iDynTree::LinkInertias::operator ()(iDynTree::LinkIndex const) const\n");
  return 1;
}


int _wrap_delete_LinkInertias(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkInertias *arg1 = (iDynTree::LinkInertias *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_LinkInertias",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkInertias, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LinkInertias" "', argument " "1"" of type '" "iDynTree::LinkInertias *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkInertias * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_LinkArticulatedBodyInertias__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  mxArray * _out;
  iDynTree::LinkArticulatedBodyInertias *result = 0 ;
  
  if (!SWIG_check_num_args("new_LinkArticulatedBodyInertias",argc,1,1,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_unsigned_SS_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_LinkArticulatedBodyInertias" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  result = (iDynTree::LinkArticulatedBodyInertias *)new iDynTree::LinkArticulatedBodyInertias(arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__LinkArticulatedBodyInertias, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_LinkArticulatedBodyInertias__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::LinkArticulatedBodyInertias *result = 0 ;
  
  if (!SWIG_check_num_args("new_LinkArticulatedBodyInertias",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::LinkArticulatedBodyInertias *)new iDynTree::LinkArticulatedBodyInertias();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__LinkArticulatedBodyInertias, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_LinkArticulatedBodyInertias__SWIG_2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::LinkArticulatedBodyInertias *result = 0 ;
  
  if (!SWIG_check_num_args("new_LinkArticulatedBodyInertias",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LinkArticulatedBodyInertias" "', argument " "1"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LinkArticulatedBodyInertias" "', argument " "1"" of type '" "iDynTree::Model const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  result = (iDynTree::LinkArticulatedBodyInertias *)new iDynTree::LinkArticulatedBodyInertias((iDynTree::Model const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__LinkArticulatedBodyInertias, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_LinkArticulatedBodyInertias(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_LinkArticulatedBodyInertias__SWIG_1(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Model, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_LinkArticulatedBodyInertias__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_LinkArticulatedBodyInertias__SWIG_0(resc,resv,argc,argv);
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_LinkArticulatedBodyInertias'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::LinkArticulatedBodyInertias::LinkArticulatedBodyInertias(unsigned int)\n"
    "    iDynTree::LinkArticulatedBodyInertias::LinkArticulatedBodyInertias()\n"
    "    iDynTree::LinkArticulatedBodyInertias::LinkArticulatedBodyInertias(iDynTree::Model const &)\n");
  return 1;
}


int _wrap_LinkArticulatedBodyInertias_resize__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkArticulatedBodyInertias *arg1 = (iDynTree::LinkArticulatedBodyInertias *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("LinkArticulatedBodyInertias_resize",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkArticulatedBodyInertias, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinkArticulatedBodyInertias_resize" "', argument " "1"" of type '" "iDynTree::LinkArticulatedBodyInertias *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkArticulatedBodyInertias * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LinkArticulatedBodyInertias_resize" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  (arg1)->resize(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_LinkArticulatedBodyInertias_resize__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkArticulatedBodyInertias *arg1 = (iDynTree::LinkArticulatedBodyInertias *) 0 ;
  iDynTree::Model *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("LinkArticulatedBodyInertias_resize",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkArticulatedBodyInertias, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinkArticulatedBodyInertias_resize" "', argument " "1"" of type '" "iDynTree::LinkArticulatedBodyInertias *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkArticulatedBodyInertias * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LinkArticulatedBodyInertias_resize" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinkArticulatedBodyInertias_resize" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Model * >(argp2);
  (arg1)->resize((iDynTree::Model const &)*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_LinkArticulatedBodyInertias_resize(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__LinkArticulatedBodyInertias, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Model, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_LinkArticulatedBodyInertias_resize__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__LinkArticulatedBodyInertias, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_LinkArticulatedBodyInertias_resize__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'LinkArticulatedBodyInertias_resize'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::LinkArticulatedBodyInertias::resize(unsigned int)\n"
    "    iDynTree::LinkArticulatedBodyInertias::resize(iDynTree::Model const &)\n");
  return 1;
}


int _wrap_LinkArticulatedBodyInertias_isConsistent(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkArticulatedBodyInertias *arg1 = (iDynTree::LinkArticulatedBodyInertias *) 0 ;
  iDynTree::Model *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("LinkArticulatedBodyInertias_isConsistent",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkArticulatedBodyInertias, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinkArticulatedBodyInertias_isConsistent" "', argument " "1"" of type '" "iDynTree::LinkArticulatedBodyInertias const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkArticulatedBodyInertias * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LinkArticulatedBodyInertias_isConsistent" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinkArticulatedBodyInertias_isConsistent" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Model * >(argp2);
  result = (bool)((iDynTree::LinkArticulatedBodyInertias const *)arg1)->isConsistent((iDynTree::Model const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_LinkArticulatedBodyInertias_paren__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkArticulatedBodyInertias *arg1 = (iDynTree::LinkArticulatedBodyInertias *) 0 ;
  iDynTree::LinkIndex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::ArticulatedBodyInertia *result = 0 ;
  
  if (!SWIG_check_num_args("LinkArticulatedBodyInertias_paren",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkArticulatedBodyInertias, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinkArticulatedBodyInertias_paren" "', argument " "1"" of type '" "iDynTree::LinkArticulatedBodyInertias *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkArticulatedBodyInertias * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LinkArticulatedBodyInertias_paren" "', argument " "2"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg2 = static_cast< iDynTree::LinkIndex >(val2);
  result = (iDynTree::ArticulatedBodyInertia *) &(arg1)->operator ()(arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__ArticulatedBodyInertia, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_LinkArticulatedBodyInertias_paren__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkArticulatedBodyInertias *arg1 = (iDynTree::LinkArticulatedBodyInertias *) 0 ;
  iDynTree::LinkIndex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::ArticulatedBodyInertia *result = 0 ;
  
  if (!SWIG_check_num_args("LinkArticulatedBodyInertias_paren",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkArticulatedBodyInertias, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinkArticulatedBodyInertias_paren" "', argument " "1"" of type '" "iDynTree::LinkArticulatedBodyInertias const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkArticulatedBodyInertias * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LinkArticulatedBodyInertias_paren" "', argument " "2"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg2 = static_cast< iDynTree::LinkIndex >(val2);
  result = (iDynTree::ArticulatedBodyInertia *) &((iDynTree::LinkArticulatedBodyInertias const *)arg1)->operator ()(arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__ArticulatedBodyInertia, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_LinkArticulatedBodyInertias_paren(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__LinkArticulatedBodyInertias, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_LinkArticulatedBodyInertias_paren__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__LinkArticulatedBodyInertias, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_LinkArticulatedBodyInertias_paren__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'LinkArticulatedBodyInertias_paren'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::LinkArticulatedBodyInertias::operator ()(iDynTree::LinkIndex const)\n"
    "    iDynTree::LinkArticulatedBodyInertias::operator ()(iDynTree::LinkIndex const) const\n");
  return 1;
}


int _wrap_delete_LinkArticulatedBodyInertias(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkArticulatedBodyInertias *arg1 = (iDynTree::LinkArticulatedBodyInertias *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_LinkArticulatedBodyInertias",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkArticulatedBodyInertias, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LinkArticulatedBodyInertias" "', argument " "1"" of type '" "iDynTree::LinkArticulatedBodyInertias *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkArticulatedBodyInertias * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_LinkVelArray__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  mxArray * _out;
  iDynTree::LinkVelArray *result = 0 ;
  
  if (!SWIG_check_num_args("new_LinkVelArray",argc,1,1,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_unsigned_SS_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_LinkVelArray" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  result = (iDynTree::LinkVelArray *)new iDynTree::LinkVelArray(arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__LinkVelArray, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_LinkVelArray__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::LinkVelArray *result = 0 ;
  
  if (!SWIG_check_num_args("new_LinkVelArray",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::LinkVelArray *)new iDynTree::LinkVelArray();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__LinkVelArray, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_LinkVelArray__SWIG_2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::LinkVelArray *result = 0 ;
  
  if (!SWIG_check_num_args("new_LinkVelArray",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LinkVelArray" "', argument " "1"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LinkVelArray" "', argument " "1"" of type '" "iDynTree::Model const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  result = (iDynTree::LinkVelArray *)new iDynTree::LinkVelArray((iDynTree::Model const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__LinkVelArray, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_LinkVelArray(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_LinkVelArray__SWIG_1(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Model, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_LinkVelArray__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_LinkVelArray__SWIG_0(resc,resv,argc,argv);
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_LinkVelArray'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::LinkVelArray::LinkVelArray(unsigned int)\n"
    "    iDynTree::LinkVelArray::LinkVelArray()\n"
    "    iDynTree::LinkVelArray::LinkVelArray(iDynTree::Model const &)\n");
  return 1;
}


int _wrap_LinkVelArray_resize__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkVelArray *arg1 = (iDynTree::LinkVelArray *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("LinkVelArray_resize",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkVelArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinkVelArray_resize" "', argument " "1"" of type '" "iDynTree::LinkVelArray *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkVelArray * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LinkVelArray_resize" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  (arg1)->resize(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_LinkVelArray_resize__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkVelArray *arg1 = (iDynTree::LinkVelArray *) 0 ;
  iDynTree::Model *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("LinkVelArray_resize",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkVelArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinkVelArray_resize" "', argument " "1"" of type '" "iDynTree::LinkVelArray *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkVelArray * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LinkVelArray_resize" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinkVelArray_resize" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Model * >(argp2);
  (arg1)->resize((iDynTree::Model const &)*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_LinkVelArray_resize(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__LinkVelArray, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Model, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_LinkVelArray_resize__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__LinkVelArray, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_LinkVelArray_resize__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'LinkVelArray_resize'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::LinkVelArray::resize(unsigned int)\n"
    "    iDynTree::LinkVelArray::resize(iDynTree::Model const &)\n");
  return 1;
}


int _wrap_LinkVelArray_isConsistent(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkVelArray *arg1 = (iDynTree::LinkVelArray *) 0 ;
  iDynTree::Model *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("LinkVelArray_isConsistent",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkVelArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinkVelArray_isConsistent" "', argument " "1"" of type '" "iDynTree::LinkVelArray const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkVelArray * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LinkVelArray_isConsistent" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinkVelArray_isConsistent" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Model * >(argp2);
  result = (bool)((iDynTree::LinkVelArray const *)arg1)->isConsistent((iDynTree::Model const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_LinkVelArray_getNrOfLinks(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkVelArray *arg1 = (iDynTree::LinkVelArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  size_t result;
  
  if (!SWIG_check_num_args("LinkVelArray_getNrOfLinks",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkVelArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinkVelArray_getNrOfLinks" "', argument " "1"" of type '" "iDynTree::LinkVelArray const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkVelArray * >(argp1);
  result = ((iDynTree::LinkVelArray const *)arg1)->getNrOfLinks();
  _out = SWIG_From_size_t(static_cast< size_t >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_LinkVelArray_paren__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkVelArray *arg1 = (iDynTree::LinkVelArray *) 0 ;
  iDynTree::LinkIndex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::Twist *result = 0 ;
  
  if (!SWIG_check_num_args("LinkVelArray_paren",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkVelArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinkVelArray_paren" "', argument " "1"" of type '" "iDynTree::LinkVelArray *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkVelArray * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LinkVelArray_paren" "', argument " "2"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg2 = static_cast< iDynTree::LinkIndex >(val2);
  result = (iDynTree::Twist *) &(arg1)->operator ()(arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Twist, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_LinkVelArray_paren__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkVelArray *arg1 = (iDynTree::LinkVelArray *) 0 ;
  iDynTree::LinkIndex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::Twist *result = 0 ;
  
  if (!SWIG_check_num_args("LinkVelArray_paren",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkVelArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinkVelArray_paren" "', argument " "1"" of type '" "iDynTree::LinkVelArray const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkVelArray * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LinkVelArray_paren" "', argument " "2"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg2 = static_cast< iDynTree::LinkIndex >(val2);
  result = (iDynTree::Twist *) &((iDynTree::LinkVelArray const *)arg1)->operator ()(arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Twist, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_LinkVelArray_paren(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__LinkVelArray, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_LinkVelArray_paren__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__LinkVelArray, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_LinkVelArray_paren__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'LinkVelArray_paren'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::LinkVelArray::operator ()(iDynTree::LinkIndex const)\n"
    "    iDynTree::LinkVelArray::operator ()(iDynTree::LinkIndex const) const\n");
  return 1;
}


int _wrap_LinkVelArray_toString(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkVelArray *arg1 = (iDynTree::LinkVelArray *) 0 ;
  iDynTree::Model *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("LinkVelArray_toString",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkVelArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinkVelArray_toString" "', argument " "1"" of type '" "iDynTree::LinkVelArray const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkVelArray * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LinkVelArray_toString" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinkVelArray_toString" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Model * >(argp2);
  result = ((iDynTree::LinkVelArray const *)arg1)->toString((iDynTree::Model const &)*arg2);
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_LinkVelArray(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkVelArray *arg1 = (iDynTree::LinkVelArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_LinkVelArray",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkVelArray, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LinkVelArray" "', argument " "1"" of type '" "iDynTree::LinkVelArray *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkVelArray * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_LinkAccArray__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  mxArray * _out;
  iDynTree::LinkAccArray *result = 0 ;
  
  if (!SWIG_check_num_args("new_LinkAccArray",argc,1,1,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_unsigned_SS_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_LinkAccArray" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  result = (iDynTree::LinkAccArray *)new iDynTree::LinkAccArray(arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__LinkAccArray, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_LinkAccArray__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::LinkAccArray *result = 0 ;
  
  if (!SWIG_check_num_args("new_LinkAccArray",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::LinkAccArray *)new iDynTree::LinkAccArray();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__LinkAccArray, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_LinkAccArray__SWIG_2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::LinkAccArray *result = 0 ;
  
  if (!SWIG_check_num_args("new_LinkAccArray",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LinkAccArray" "', argument " "1"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LinkAccArray" "', argument " "1"" of type '" "iDynTree::Model const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  result = (iDynTree::LinkAccArray *)new iDynTree::LinkAccArray((iDynTree::Model const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__LinkAccArray, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_LinkAccArray(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_LinkAccArray__SWIG_1(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Model, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_LinkAccArray__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_LinkAccArray__SWIG_0(resc,resv,argc,argv);
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_LinkAccArray'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::LinkAccArray::LinkAccArray(unsigned int)\n"
    "    iDynTree::LinkAccArray::LinkAccArray()\n"
    "    iDynTree::LinkAccArray::LinkAccArray(iDynTree::Model const &)\n");
  return 1;
}


int _wrap_LinkAccArray_resize__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkAccArray *arg1 = (iDynTree::LinkAccArray *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("LinkAccArray_resize",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkAccArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinkAccArray_resize" "', argument " "1"" of type '" "iDynTree::LinkAccArray *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkAccArray * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LinkAccArray_resize" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  (arg1)->resize(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_LinkAccArray_resize__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkAccArray *arg1 = (iDynTree::LinkAccArray *) 0 ;
  iDynTree::Model *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("LinkAccArray_resize",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkAccArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinkAccArray_resize" "', argument " "1"" of type '" "iDynTree::LinkAccArray *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkAccArray * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LinkAccArray_resize" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinkAccArray_resize" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Model * >(argp2);
  (arg1)->resize((iDynTree::Model const &)*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_LinkAccArray_resize(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__LinkAccArray, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Model, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_LinkAccArray_resize__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__LinkAccArray, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_LinkAccArray_resize__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'LinkAccArray_resize'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::LinkAccArray::resize(unsigned int)\n"
    "    iDynTree::LinkAccArray::resize(iDynTree::Model const &)\n");
  return 1;
}


int _wrap_LinkAccArray_isConsistent(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkAccArray *arg1 = (iDynTree::LinkAccArray *) 0 ;
  iDynTree::Model *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("LinkAccArray_isConsistent",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkAccArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinkAccArray_isConsistent" "', argument " "1"" of type '" "iDynTree::LinkAccArray const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkAccArray * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LinkAccArray_isConsistent" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinkAccArray_isConsistent" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Model * >(argp2);
  result = (bool)((iDynTree::LinkAccArray const *)arg1)->isConsistent((iDynTree::Model const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_LinkAccArray_paren__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkAccArray *arg1 = (iDynTree::LinkAccArray *) 0 ;
  iDynTree::LinkIndex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialAcc *result = 0 ;
  
  if (!SWIG_check_num_args("LinkAccArray_paren",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkAccArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinkAccArray_paren" "', argument " "1"" of type '" "iDynTree::LinkAccArray *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkAccArray * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LinkAccArray_paren" "', argument " "2"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg2 = static_cast< iDynTree::LinkIndex >(val2);
  result = (iDynTree::SpatialAcc *) &(arg1)->operator ()(arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SpatialAcc, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_LinkAccArray_paren__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkAccArray *arg1 = (iDynTree::LinkAccArray *) 0 ;
  iDynTree::LinkIndex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialAcc *result = 0 ;
  
  if (!SWIG_check_num_args("LinkAccArray_paren",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkAccArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinkAccArray_paren" "', argument " "1"" of type '" "iDynTree::LinkAccArray const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkAccArray * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LinkAccArray_paren" "', argument " "2"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg2 = static_cast< iDynTree::LinkIndex >(val2);
  result = (iDynTree::SpatialAcc *) &((iDynTree::LinkAccArray const *)arg1)->operator ()(arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SpatialAcc, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_LinkAccArray_paren(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__LinkAccArray, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_LinkAccArray_paren__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__LinkAccArray, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_LinkAccArray_paren__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'LinkAccArray_paren'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::LinkAccArray::operator ()(iDynTree::LinkIndex const)\n"
    "    iDynTree::LinkAccArray::operator ()(iDynTree::LinkIndex const) const\n");
  return 1;
}


int _wrap_LinkAccArray_getNrOfLinks(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkAccArray *arg1 = (iDynTree::LinkAccArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("LinkAccArray_getNrOfLinks",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkAccArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinkAccArray_getNrOfLinks" "', argument " "1"" of type '" "iDynTree::LinkAccArray const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkAccArray * >(argp1);
  result = (unsigned int)((iDynTree::LinkAccArray const *)arg1)->getNrOfLinks();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_LinkAccArray_toString(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkAccArray *arg1 = (iDynTree::LinkAccArray *) 0 ;
  iDynTree::Model *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("LinkAccArray_toString",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkAccArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinkAccArray_toString" "', argument " "1"" of type '" "iDynTree::LinkAccArray const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkAccArray * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LinkAccArray_toString" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinkAccArray_toString" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Model * >(argp2);
  result = ((iDynTree::LinkAccArray const *)arg1)->toString((iDynTree::Model const &)*arg2);
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_LinkAccArray(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkAccArray *arg1 = (iDynTree::LinkAccArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_LinkAccArray",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkAccArray, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LinkAccArray" "', argument " "1"" of type '" "iDynTree::LinkAccArray *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkAccArray * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Link(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::Link *result = 0 ;
  
  if (!SWIG_check_num_args("new_Link",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::Link *)new iDynTree::Link();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Link, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Link_inertia__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Link *arg1 = (iDynTree::Link *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::SpatialInertia *result = 0 ;
  
  if (!SWIG_check_num_args("Link_inertia",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Link, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Link_inertia" "', argument " "1"" of type '" "iDynTree::Link *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Link * >(argp1);
  result = (iDynTree::SpatialInertia *) &(arg1)->inertia();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SpatialInertia, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Link_inertia__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Link *arg1 = (iDynTree::Link *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::SpatialInertia *result = 0 ;
  
  if (!SWIG_check_num_args("Link_inertia",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Link, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Link_inertia" "', argument " "1"" of type '" "iDynTree::Link const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Link * >(argp1);
  result = (iDynTree::SpatialInertia *) &((iDynTree::Link const *)arg1)->inertia();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SpatialInertia, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Link_inertia(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Link, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Link_inertia__SWIG_0(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Link, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Link_inertia__SWIG_1(resc,resv,argc,argv);
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Link_inertia'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::Link::inertia()\n"
    "    iDynTree::Link::inertia() const\n");
  return 1;
}


int _wrap_Link_setInertia(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Link *arg1 = (iDynTree::Link *) 0 ;
  iDynTree::SpatialInertia *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Link_setInertia",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Link, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Link_setInertia" "', argument " "1"" of type '" "iDynTree::Link *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Link * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialInertia,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Link_setInertia" "', argument " "2"" of type '" "iDynTree::SpatialInertia &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Link_setInertia" "', argument " "2"" of type '" "iDynTree::SpatialInertia &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialInertia * >(argp2);
  (arg1)->setInertia(*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Link_getInertia(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Link *arg1 = (iDynTree::Link *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::SpatialInertia *result = 0 ;
  
  if (!SWIG_check_num_args("Link_getInertia",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Link, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Link_getInertia" "', argument " "1"" of type '" "iDynTree::Link const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Link * >(argp1);
  result = (iDynTree::SpatialInertia *) &((iDynTree::Link const *)arg1)->getInertia();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SpatialInertia, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Link_setIndex(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Link *arg1 = (iDynTree::Link *) 0 ;
  iDynTree::LinkIndex *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Link_setIndex",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Link, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Link_setIndex" "', argument " "1"" of type '" "iDynTree::Link *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Link * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_int,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Link_setIndex" "', argument " "2"" of type '" "iDynTree::LinkIndex &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Link_setIndex" "', argument " "2"" of type '" "iDynTree::LinkIndex &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::LinkIndex * >(argp2);
  (arg1)->setIndex(*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Link_getIndex(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Link *arg1 = (iDynTree::Link *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::LinkIndex result;
  
  if (!SWIG_check_num_args("Link_getIndex",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Link, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Link_getIndex" "', argument " "1"" of type '" "iDynTree::Link const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Link * >(argp1);
  result = (iDynTree::LinkIndex)((iDynTree::Link const *)arg1)->getIndex();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_Link(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Link *arg1 = (iDynTree::Link *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_Link",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Link, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Link" "', argument " "1"" of type '" "iDynTree::Link *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Link * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_IJoint(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IJoint *arg1 = (iDynTree::IJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_IJoint",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IJoint, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IJoint" "', argument " "1"" of type '" "iDynTree::IJoint *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IJoint * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_IJoint_clone(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IJoint *arg1 = (iDynTree::IJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::IJoint *result = 0 ;
  
  if (!SWIG_check_num_args("IJoint_clone",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IJoint_clone" "', argument " "1"" of type '" "iDynTree::IJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IJoint * >(argp1);
  result = (iDynTree::IJoint *)((iDynTree::IJoint const *)arg1)->clone();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__IJoint, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_IJoint_getNrOfPosCoords(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IJoint *arg1 = (iDynTree::IJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("IJoint_getNrOfPosCoords",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IJoint_getNrOfPosCoords" "', argument " "1"" of type '" "iDynTree::IJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IJoint * >(argp1);
  result = (unsigned int)((iDynTree::IJoint const *)arg1)->getNrOfPosCoords();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_IJoint_getNrOfDOFs(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IJoint *arg1 = (iDynTree::IJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("IJoint_getNrOfDOFs",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IJoint_getNrOfDOFs" "', argument " "1"" of type '" "iDynTree::IJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IJoint * >(argp1);
  result = (unsigned int)((iDynTree::IJoint const *)arg1)->getNrOfDOFs();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_IJoint_setAttachedLinks(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IJoint *arg1 = (iDynTree::IJoint *) 0 ;
  iDynTree::LinkIndex arg2 ;
  iDynTree::LinkIndex arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("IJoint_setAttachedLinks",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IJoint_setAttachedLinks" "', argument " "1"" of type '" "iDynTree::IJoint *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IJoint * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IJoint_setAttachedLinks" "', argument " "2"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg2 = static_cast< iDynTree::LinkIndex >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IJoint_setAttachedLinks" "', argument " "3"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg3 = static_cast< iDynTree::LinkIndex >(val3);
  (arg1)->setAttachedLinks(arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_IJoint_setRestTransform(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IJoint *arg1 = (iDynTree::IJoint *) 0 ;
  iDynTree::Transform *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("IJoint_setRestTransform",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IJoint_setRestTransform" "', argument " "1"" of type '" "iDynTree::IJoint *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IJoint * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Transform,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IJoint_setRestTransform" "', argument " "2"" of type '" "iDynTree::Transform const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IJoint_setRestTransform" "', argument " "2"" of type '" "iDynTree::Transform const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Transform * >(argp2);
  (arg1)->setRestTransform((iDynTree::Transform const &)*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_IJoint_getFirstAttachedLink(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IJoint *arg1 = (iDynTree::IJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::LinkIndex result;
  
  if (!SWIG_check_num_args("IJoint_getFirstAttachedLink",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IJoint_getFirstAttachedLink" "', argument " "1"" of type '" "iDynTree::IJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IJoint * >(argp1);
  result = (iDynTree::LinkIndex)((iDynTree::IJoint const *)arg1)->getFirstAttachedLink();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_IJoint_getSecondAttachedLink(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IJoint *arg1 = (iDynTree::IJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::LinkIndex result;
  
  if (!SWIG_check_num_args("IJoint_getSecondAttachedLink",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IJoint_getSecondAttachedLink" "', argument " "1"" of type '" "iDynTree::IJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IJoint * >(argp1);
  result = (iDynTree::LinkIndex)((iDynTree::IJoint const *)arg1)->getSecondAttachedLink();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_IJoint_getRestTransform(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IJoint *arg1 = (iDynTree::IJoint *) 0 ;
  iDynTree::LinkIndex arg2 ;
  iDynTree::LinkIndex arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  iDynTree::Transform result;
  
  if (!SWIG_check_num_args("IJoint_getRestTransform",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IJoint_getRestTransform" "', argument " "1"" of type '" "iDynTree::IJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IJoint * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IJoint_getRestTransform" "', argument " "2"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg2 = static_cast< iDynTree::LinkIndex >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IJoint_getRestTransform" "', argument " "3"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg3 = static_cast< iDynTree::LinkIndex >(val3);
  result = ((iDynTree::IJoint const *)arg1)->getRestTransform(arg2,arg3);
  _out = SWIG_NewPointerObj((new iDynTree::Transform(static_cast< const iDynTree::Transform& >(result))), SWIGTYPE_p_iDynTree__Transform, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_IJoint_getTransform(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IJoint *arg1 = (iDynTree::IJoint *) 0 ;
  iDynTree::VectorDynSize *arg2 = 0 ;
  iDynTree::LinkIndex arg3 ;
  iDynTree::LinkIndex arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  mxArray * _out;
  iDynTree::Transform *result = 0 ;
  
  if (!SWIG_check_num_args("IJoint_getTransform",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IJoint_getTransform" "', argument " "1"" of type '" "iDynTree::IJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IJoint * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IJoint_getTransform" "', argument " "2"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IJoint_getTransform" "', argument " "2"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::VectorDynSize * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IJoint_getTransform" "', argument " "3"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg3 = static_cast< iDynTree::LinkIndex >(val3);
  ecode4 = SWIG_AsVal_int(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IJoint_getTransform" "', argument " "4"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg4 = static_cast< iDynTree::LinkIndex >(val4);
  result = (iDynTree::Transform *) &((iDynTree::IJoint const *)arg1)->getTransform((iDynTree::VectorDynSize const &)*arg2,arg3,arg4);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Transform, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_IJoint_getTransformDerivative(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IJoint *arg1 = (iDynTree::IJoint *) 0 ;
  iDynTree::VectorDynSize *arg2 = 0 ;
  iDynTree::LinkIndex arg3 ;
  iDynTree::LinkIndex arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  mxArray * _out;
  iDynTree::TransformDerivative result;
  
  if (!SWIG_check_num_args("IJoint_getTransformDerivative",argc,5,5,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IJoint_getTransformDerivative" "', argument " "1"" of type '" "iDynTree::IJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IJoint * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IJoint_getTransformDerivative" "', argument " "2"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IJoint_getTransformDerivative" "', argument " "2"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::VectorDynSize * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IJoint_getTransformDerivative" "', argument " "3"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg3 = static_cast< iDynTree::LinkIndex >(val3);
  ecode4 = SWIG_AsVal_int(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IJoint_getTransformDerivative" "', argument " "4"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg4 = static_cast< iDynTree::LinkIndex >(val4);
  ecode5 = SWIG_AsVal_int(argv[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "IJoint_getTransformDerivative" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  result = ((iDynTree::IJoint const *)arg1)->getTransformDerivative((iDynTree::VectorDynSize const &)*arg2,arg3,arg4,arg5);
  _out = SWIG_NewPointerObj((new iDynTree::TransformDerivative(static_cast< const iDynTree::TransformDerivative& >(result))), SWIGTYPE_p_iDynTree__TransformDerivative, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_IJoint_getMotionSubspaceVector(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IJoint *arg1 = (iDynTree::IJoint *) 0 ;
  int arg2 ;
  iDynTree::LinkIndex arg3 ;
  iDynTree::LinkIndex arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  mxArray * _out;
  iDynTree::SpatialMotionVector result;
  
  if (!SWIG_check_num_args("IJoint_getMotionSubspaceVector",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IJoint_getMotionSubspaceVector" "', argument " "1"" of type '" "iDynTree::IJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IJoint * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IJoint_getMotionSubspaceVector" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IJoint_getMotionSubspaceVector" "', argument " "3"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg3 = static_cast< iDynTree::LinkIndex >(val3);
  ecode4 = SWIG_AsVal_int(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IJoint_getMotionSubspaceVector" "', argument " "4"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg4 = static_cast< iDynTree::LinkIndex >(val4);
  result = ((iDynTree::IJoint const *)arg1)->getMotionSubspaceVector(arg2,arg3,arg4);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialMotionVector(static_cast< const iDynTree::SpatialMotionVector& >(result))), SWIGTYPE_p_iDynTree__SpatialMotionVector, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_IJoint_computeChildPosVelAcc(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IJoint *arg1 = (iDynTree::IJoint *) 0 ;
  iDynTree::VectorDynSize *arg2 = 0 ;
  iDynTree::VectorDynSize *arg3 = 0 ;
  iDynTree::VectorDynSize *arg4 = 0 ;
  iDynTree::LinkPositions *arg5 = 0 ;
  iDynTree::LinkVelArray *arg6 = 0 ;
  iDynTree::LinkAccArray *arg7 = 0 ;
  iDynTree::LinkIndex arg8 ;
  iDynTree::LinkIndex arg9 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  int val9 ;
  int ecode9 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("IJoint_computeChildPosVelAcc",argc,9,9,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IJoint_computeChildPosVelAcc" "', argument " "1"" of type '" "iDynTree::IJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IJoint * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IJoint_computeChildPosVelAcc" "', argument " "2"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IJoint_computeChildPosVelAcc" "', argument " "2"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::VectorDynSize * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IJoint_computeChildPosVelAcc" "', argument " "3"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IJoint_computeChildPosVelAcc" "', argument " "3"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::VectorDynSize * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IJoint_computeChildPosVelAcc" "', argument " "4"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IJoint_computeChildPosVelAcc" "', argument " "4"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  arg4 = reinterpret_cast< iDynTree::VectorDynSize * >(argp4);
  res5 = SWIG_ConvertPtr(argv[4], &argp5, SWIGTYPE_p_iDynTree__LinkPositions,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "IJoint_computeChildPosVelAcc" "', argument " "5"" of type '" "iDynTree::LinkPositions &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IJoint_computeChildPosVelAcc" "', argument " "5"" of type '" "iDynTree::LinkPositions &""'"); 
  }
  arg5 = reinterpret_cast< iDynTree::LinkPositions * >(argp5);
  res6 = SWIG_ConvertPtr(argv[5], &argp6, SWIGTYPE_p_iDynTree__LinkVelArray,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "IJoint_computeChildPosVelAcc" "', argument " "6"" of type '" "iDynTree::LinkVelArray &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IJoint_computeChildPosVelAcc" "', argument " "6"" of type '" "iDynTree::LinkVelArray &""'"); 
  }
  arg6 = reinterpret_cast< iDynTree::LinkVelArray * >(argp6);
  res7 = SWIG_ConvertPtr(argv[6], &argp7, SWIGTYPE_p_iDynTree__LinkAccArray,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "IJoint_computeChildPosVelAcc" "', argument " "7"" of type '" "iDynTree::LinkAccArray &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IJoint_computeChildPosVelAcc" "', argument " "7"" of type '" "iDynTree::LinkAccArray &""'"); 
  }
  arg7 = reinterpret_cast< iDynTree::LinkAccArray * >(argp7);
  ecode8 = SWIG_AsVal_int(argv[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "IJoint_computeChildPosVelAcc" "', argument " "8"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg8 = static_cast< iDynTree::LinkIndex >(val8);
  ecode9 = SWIG_AsVal_int(argv[8], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "IJoint_computeChildPosVelAcc" "', argument " "9"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg9 = static_cast< iDynTree::LinkIndex >(val9);
  ((iDynTree::IJoint const *)arg1)->computeChildPosVelAcc((iDynTree::VectorDynSize const &)*arg2,(iDynTree::VectorDynSize const &)*arg3,(iDynTree::VectorDynSize const &)*arg4,*arg5,*arg6,*arg7,arg8,arg9);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_IJoint_computeChildVelAcc(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IJoint *arg1 = (iDynTree::IJoint *) 0 ;
  iDynTree::VectorDynSize *arg2 = 0 ;
  iDynTree::VectorDynSize *arg3 = 0 ;
  iDynTree::VectorDynSize *arg4 = 0 ;
  iDynTree::LinkVelArray *arg5 = 0 ;
  iDynTree::LinkAccArray *arg6 = 0 ;
  iDynTree::LinkIndex arg7 ;
  iDynTree::LinkIndex arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("IJoint_computeChildVelAcc",argc,8,8,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IJoint_computeChildVelAcc" "', argument " "1"" of type '" "iDynTree::IJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IJoint * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IJoint_computeChildVelAcc" "', argument " "2"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IJoint_computeChildVelAcc" "', argument " "2"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::VectorDynSize * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IJoint_computeChildVelAcc" "', argument " "3"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IJoint_computeChildVelAcc" "', argument " "3"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::VectorDynSize * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IJoint_computeChildVelAcc" "', argument " "4"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IJoint_computeChildVelAcc" "', argument " "4"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  arg4 = reinterpret_cast< iDynTree::VectorDynSize * >(argp4);
  res5 = SWIG_ConvertPtr(argv[4], &argp5, SWIGTYPE_p_iDynTree__LinkVelArray,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "IJoint_computeChildVelAcc" "', argument " "5"" of type '" "iDynTree::LinkVelArray &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IJoint_computeChildVelAcc" "', argument " "5"" of type '" "iDynTree::LinkVelArray &""'"); 
  }
  arg5 = reinterpret_cast< iDynTree::LinkVelArray * >(argp5);
  res6 = SWIG_ConvertPtr(argv[5], &argp6, SWIGTYPE_p_iDynTree__LinkAccArray,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "IJoint_computeChildVelAcc" "', argument " "6"" of type '" "iDynTree::LinkAccArray &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IJoint_computeChildVelAcc" "', argument " "6"" of type '" "iDynTree::LinkAccArray &""'"); 
  }
  arg6 = reinterpret_cast< iDynTree::LinkAccArray * >(argp6);
  ecode7 = SWIG_AsVal_int(argv[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "IJoint_computeChildVelAcc" "', argument " "7"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg7 = static_cast< iDynTree::LinkIndex >(val7);
  ecode8 = SWIG_AsVal_int(argv[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "IJoint_computeChildVelAcc" "', argument " "8"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg8 = static_cast< iDynTree::LinkIndex >(val8);
  ((iDynTree::IJoint const *)arg1)->computeChildVelAcc((iDynTree::VectorDynSize const &)*arg2,(iDynTree::VectorDynSize const &)*arg3,(iDynTree::VectorDynSize const &)*arg4,*arg5,*arg6,arg7,arg8);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_IJoint_computeChildVel(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IJoint *arg1 = (iDynTree::IJoint *) 0 ;
  iDynTree::VectorDynSize *arg2 = 0 ;
  iDynTree::VectorDynSize *arg3 = 0 ;
  iDynTree::LinkVelArray *arg4 = 0 ;
  iDynTree::LinkIndex arg5 ;
  iDynTree::LinkIndex arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("IJoint_computeChildVel",argc,6,6,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IJoint_computeChildVel" "', argument " "1"" of type '" "iDynTree::IJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IJoint * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IJoint_computeChildVel" "', argument " "2"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IJoint_computeChildVel" "', argument " "2"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::VectorDynSize * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IJoint_computeChildVel" "', argument " "3"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IJoint_computeChildVel" "', argument " "3"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::VectorDynSize * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__LinkVelArray,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IJoint_computeChildVel" "', argument " "4"" of type '" "iDynTree::LinkVelArray &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IJoint_computeChildVel" "', argument " "4"" of type '" "iDynTree::LinkVelArray &""'"); 
  }
  arg4 = reinterpret_cast< iDynTree::LinkVelArray * >(argp4);
  ecode5 = SWIG_AsVal_int(argv[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "IJoint_computeChildVel" "', argument " "5"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg5 = static_cast< iDynTree::LinkIndex >(val5);
  ecode6 = SWIG_AsVal_int(argv[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "IJoint_computeChildVel" "', argument " "6"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg6 = static_cast< iDynTree::LinkIndex >(val6);
  ((iDynTree::IJoint const *)arg1)->computeChildVel((iDynTree::VectorDynSize const &)*arg2,(iDynTree::VectorDynSize const &)*arg3,*arg4,arg5,arg6);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_IJoint_computeChildAcc(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IJoint *arg1 = (iDynTree::IJoint *) 0 ;
  iDynTree::VectorDynSize *arg2 = 0 ;
  iDynTree::VectorDynSize *arg3 = 0 ;
  iDynTree::LinkVelArray *arg4 = 0 ;
  iDynTree::VectorDynSize *arg5 = 0 ;
  iDynTree::LinkAccArray *arg6 = 0 ;
  iDynTree::LinkIndex arg7 ;
  iDynTree::LinkIndex arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("IJoint_computeChildAcc",argc,8,8,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IJoint_computeChildAcc" "', argument " "1"" of type '" "iDynTree::IJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IJoint * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IJoint_computeChildAcc" "', argument " "2"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IJoint_computeChildAcc" "', argument " "2"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::VectorDynSize * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IJoint_computeChildAcc" "', argument " "3"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IJoint_computeChildAcc" "', argument " "3"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::VectorDynSize * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__LinkVelArray,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IJoint_computeChildAcc" "', argument " "4"" of type '" "iDynTree::LinkVelArray const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IJoint_computeChildAcc" "', argument " "4"" of type '" "iDynTree::LinkVelArray const &""'"); 
  }
  arg4 = reinterpret_cast< iDynTree::LinkVelArray * >(argp4);
  res5 = SWIG_ConvertPtr(argv[4], &argp5, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "IJoint_computeChildAcc" "', argument " "5"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IJoint_computeChildAcc" "', argument " "5"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  arg5 = reinterpret_cast< iDynTree::VectorDynSize * >(argp5);
  res6 = SWIG_ConvertPtr(argv[5], &argp6, SWIGTYPE_p_iDynTree__LinkAccArray,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "IJoint_computeChildAcc" "', argument " "6"" of type '" "iDynTree::LinkAccArray &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IJoint_computeChildAcc" "', argument " "6"" of type '" "iDynTree::LinkAccArray &""'"); 
  }
  arg6 = reinterpret_cast< iDynTree::LinkAccArray * >(argp6);
  ecode7 = SWIG_AsVal_int(argv[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "IJoint_computeChildAcc" "', argument " "7"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg7 = static_cast< iDynTree::LinkIndex >(val7);
  ecode8 = SWIG_AsVal_int(argv[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "IJoint_computeChildAcc" "', argument " "8"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg8 = static_cast< iDynTree::LinkIndex >(val8);
  ((iDynTree::IJoint const *)arg1)->computeChildAcc((iDynTree::VectorDynSize const &)*arg2,(iDynTree::VectorDynSize const &)*arg3,(iDynTree::LinkVelArray const &)*arg4,(iDynTree::VectorDynSize const &)*arg5,*arg6,arg7,arg8);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_IJoint_computeChildBiasAcc(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IJoint *arg1 = (iDynTree::IJoint *) 0 ;
  iDynTree::VectorDynSize *arg2 = 0 ;
  iDynTree::VectorDynSize *arg3 = 0 ;
  iDynTree::LinkVelArray *arg4 = 0 ;
  iDynTree::LinkAccArray *arg5 = 0 ;
  iDynTree::LinkIndex arg6 ;
  iDynTree::LinkIndex arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("IJoint_computeChildBiasAcc",argc,7,7,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IJoint_computeChildBiasAcc" "', argument " "1"" of type '" "iDynTree::IJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IJoint * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IJoint_computeChildBiasAcc" "', argument " "2"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IJoint_computeChildBiasAcc" "', argument " "2"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::VectorDynSize * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IJoint_computeChildBiasAcc" "', argument " "3"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IJoint_computeChildBiasAcc" "', argument " "3"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::VectorDynSize * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__LinkVelArray,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IJoint_computeChildBiasAcc" "', argument " "4"" of type '" "iDynTree::LinkVelArray const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IJoint_computeChildBiasAcc" "', argument " "4"" of type '" "iDynTree::LinkVelArray const &""'"); 
  }
  arg4 = reinterpret_cast< iDynTree::LinkVelArray * >(argp4);
  res5 = SWIG_ConvertPtr(argv[4], &argp5, SWIGTYPE_p_iDynTree__LinkAccArray,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "IJoint_computeChildBiasAcc" "', argument " "5"" of type '" "iDynTree::LinkAccArray &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IJoint_computeChildBiasAcc" "', argument " "5"" of type '" "iDynTree::LinkAccArray &""'"); 
  }
  arg5 = reinterpret_cast< iDynTree::LinkAccArray * >(argp5);
  ecode6 = SWIG_AsVal_int(argv[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "IJoint_computeChildBiasAcc" "', argument " "6"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg6 = static_cast< iDynTree::LinkIndex >(val6);
  ecode7 = SWIG_AsVal_int(argv[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "IJoint_computeChildBiasAcc" "', argument " "7"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg7 = static_cast< iDynTree::LinkIndex >(val7);
  ((iDynTree::IJoint const *)arg1)->computeChildBiasAcc((iDynTree::VectorDynSize const &)*arg2,(iDynTree::VectorDynSize const &)*arg3,(iDynTree::LinkVelArray const &)*arg4,*arg5,arg6,arg7);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_IJoint_computeJointTorque(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IJoint *arg1 = (iDynTree::IJoint *) 0 ;
  iDynTree::VectorDynSize *arg2 = 0 ;
  iDynTree::Wrench *arg3 = 0 ;
  iDynTree::LinkIndex arg4 ;
  iDynTree::LinkIndex arg5 ;
  iDynTree::VectorDynSize *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("IJoint_computeJointTorque",argc,6,6,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IJoint_computeJointTorque" "', argument " "1"" of type '" "iDynTree::IJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IJoint * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IJoint_computeJointTorque" "', argument " "2"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IJoint_computeJointTorque" "', argument " "2"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::VectorDynSize * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__Wrench,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IJoint_computeJointTorque" "', argument " "3"" of type '" "iDynTree::Wrench const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IJoint_computeJointTorque" "', argument " "3"" of type '" "iDynTree::Wrench const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::Wrench * >(argp3);
  ecode4 = SWIG_AsVal_int(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IJoint_computeJointTorque" "', argument " "4"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg4 = static_cast< iDynTree::LinkIndex >(val4);
  ecode5 = SWIG_AsVal_int(argv[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "IJoint_computeJointTorque" "', argument " "5"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg5 = static_cast< iDynTree::LinkIndex >(val5);
  res6 = SWIG_ConvertPtr(argv[5], &argp6, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "IJoint_computeJointTorque" "', argument " "6"" of type '" "iDynTree::VectorDynSize &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IJoint_computeJointTorque" "', argument " "6"" of type '" "iDynTree::VectorDynSize &""'"); 
  }
  arg6 = reinterpret_cast< iDynTree::VectorDynSize * >(argp6);
  ((iDynTree::IJoint const *)arg1)->computeJointTorque((iDynTree::VectorDynSize const &)*arg2,(iDynTree::Wrench const &)*arg3,arg4,arg5,*arg6);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_IJoint_setIndex(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IJoint *arg1 = (iDynTree::IJoint *) 0 ;
  iDynTree::JointIndex *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("IJoint_setIndex",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IJoint_setIndex" "', argument " "1"" of type '" "iDynTree::IJoint *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IJoint * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_int,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IJoint_setIndex" "', argument " "2"" of type '" "iDynTree::JointIndex &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IJoint_setIndex" "', argument " "2"" of type '" "iDynTree::JointIndex &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::JointIndex * >(argp2);
  (arg1)->setIndex(*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_IJoint_getIndex(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IJoint *arg1 = (iDynTree::IJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::JointIndex result;
  
  if (!SWIG_check_num_args("IJoint_getIndex",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IJoint_getIndex" "', argument " "1"" of type '" "iDynTree::IJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IJoint * >(argp1);
  result = (iDynTree::JointIndex)((iDynTree::IJoint const *)arg1)->getIndex();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_IJoint_setPosCoordsOffset(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IJoint *arg1 = (iDynTree::IJoint *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("IJoint_setPosCoordsOffset",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IJoint_setPosCoordsOffset" "', argument " "1"" of type '" "iDynTree::IJoint *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IJoint * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IJoint_setPosCoordsOffset" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  (arg1)->setPosCoordsOffset(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_IJoint_getPosCoordsOffset(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IJoint *arg1 = (iDynTree::IJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  size_t result;
  
  if (!SWIG_check_num_args("IJoint_getPosCoordsOffset",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IJoint_getPosCoordsOffset" "', argument " "1"" of type '" "iDynTree::IJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IJoint * >(argp1);
  result = ((iDynTree::IJoint const *)arg1)->getPosCoordsOffset();
  _out = SWIG_From_size_t(static_cast< size_t >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_IJoint_setDOFsOffset(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IJoint *arg1 = (iDynTree::IJoint *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("IJoint_setDOFsOffset",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IJoint_setDOFsOffset" "', argument " "1"" of type '" "iDynTree::IJoint *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IJoint * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IJoint_setDOFsOffset" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  (arg1)->setDOFsOffset(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_IJoint_getDOFsOffset(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IJoint *arg1 = (iDynTree::IJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  size_t result;
  
  if (!SWIG_check_num_args("IJoint_getDOFsOffset",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IJoint_getDOFsOffset" "', argument " "1"" of type '" "iDynTree::IJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IJoint * >(argp1);
  result = ((iDynTree::IJoint const *)arg1)->getDOFsOffset();
  _out = SWIG_From_size_t(static_cast< size_t >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_IJoint_hasPosLimits(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IJoint *arg1 = (iDynTree::IJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("IJoint_hasPosLimits",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IJoint_hasPosLimits" "', argument " "1"" of type '" "iDynTree::IJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IJoint * >(argp1);
  result = (bool)((iDynTree::IJoint const *)arg1)->hasPosLimits();
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_IJoint_enablePosLimits(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IJoint *arg1 = (iDynTree::IJoint *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("IJoint_enablePosLimits",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IJoint_enablePosLimits" "', argument " "1"" of type '" "iDynTree::IJoint *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IJoint * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IJoint_enablePosLimits" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = (bool)(arg1)->enablePosLimits(arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_IJoint_getPosLimits(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IJoint *arg1 = (iDynTree::IJoint *) 0 ;
  size_t arg2 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("IJoint_getPosLimits",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IJoint_getPosLimits" "', argument " "1"" of type '" "iDynTree::IJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IJoint * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IJoint_getPosLimits" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IJoint_getPosLimits" "', argument " "3"" of type '" "double &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IJoint_getPosLimits" "', argument " "3"" of type '" "double &""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IJoint_getPosLimits" "', argument " "4"" of type '" "double &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IJoint_getPosLimits" "', argument " "4"" of type '" "double &""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  result = (bool)((iDynTree::IJoint const *)arg1)->getPosLimits(arg2,*arg3,*arg4);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_IJoint_getMinPosLimit(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IJoint *arg1 = (iDynTree::IJoint *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("IJoint_getMinPosLimit",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IJoint_getMinPosLimit" "', argument " "1"" of type '" "iDynTree::IJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IJoint * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IJoint_getMinPosLimit" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (double)((iDynTree::IJoint const *)arg1)->getMinPosLimit(arg2);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_IJoint_getMaxPosLimit(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IJoint *arg1 = (iDynTree::IJoint *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("IJoint_getMaxPosLimit",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IJoint_getMaxPosLimit" "', argument " "1"" of type '" "iDynTree::IJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IJoint * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IJoint_getMaxPosLimit" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (double)((iDynTree::IJoint const *)arg1)->getMaxPosLimit(arg2);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_IJoint_setPosLimits(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IJoint *arg1 = (iDynTree::IJoint *) 0 ;
  size_t arg2 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("IJoint_setPosLimits",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IJoint_setPosLimits" "', argument " "1"" of type '" "iDynTree::IJoint *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IJoint * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IJoint_setPosLimits" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IJoint_setPosLimits" "', argument " "3"" of type '" "double &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IJoint_setPosLimits" "', argument " "3"" of type '" "double &""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IJoint_setPosLimits" "', argument " "4"" of type '" "double &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IJoint_setPosLimits" "', argument " "4"" of type '" "double &""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  result = (bool)(arg1)->setPosLimits(arg2,*arg3,*arg4);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_IJoint_isRevoluteJoint(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IJoint *arg1 = (iDynTree::IJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("IJoint_isRevoluteJoint",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IJoint_isRevoluteJoint" "', argument " "1"" of type '" "iDynTree::IJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IJoint * >(argp1);
  result = (bool)iDynTree_IJoint_isRevoluteJoint((iDynTree::IJoint const *)arg1);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_IJoint_isFixedJoint(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IJoint *arg1 = (iDynTree::IJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("IJoint_isFixedJoint",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IJoint_isFixedJoint" "', argument " "1"" of type '" "iDynTree::IJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IJoint * >(argp1);
  result = (bool)iDynTree_IJoint_isFixedJoint((iDynTree::IJoint const *)arg1);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_IJoint_asRevoluteJoint(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IJoint *arg1 = (iDynTree::IJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::RevoluteJoint *result = 0 ;
  
  if (!SWIG_check_num_args("IJoint_asRevoluteJoint",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IJoint_asRevoluteJoint" "', argument " "1"" of type '" "iDynTree::IJoint *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IJoint * >(argp1);
  result = (iDynTree::RevoluteJoint *)iDynTree_IJoint_asRevoluteJoint(arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__RevoluteJoint, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_IJoint_asFixedJoint(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IJoint *arg1 = (iDynTree::IJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::FixedJoint *result = 0 ;
  
  if (!SWIG_check_num_args("IJoint_asFixedJoint",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IJoint_asFixedJoint" "', argument " "1"" of type '" "iDynTree::IJoint *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IJoint * >(argp1);
  result = (iDynTree::FixedJoint *)iDynTree_IJoint_asFixedJoint(arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__FixedJoint, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_FixedJoint(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::FixedJoint *arg1 = (iDynTree::FixedJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_FixedJoint",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__FixedJoint, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FixedJoint" "', argument " "1"" of type '" "iDynTree::FixedJoint *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::FixedJoint * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_FixedJoint_clone(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::FixedJoint *arg1 = (iDynTree::FixedJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::IJoint *result = 0 ;
  
  if (!SWIG_check_num_args("FixedJoint_clone",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__FixedJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FixedJoint_clone" "', argument " "1"" of type '" "iDynTree::FixedJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::FixedJoint * >(argp1);
  result = (iDynTree::IJoint *)((iDynTree::FixedJoint const *)arg1)->clone();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__IJoint, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_FixedJoint_getNrOfPosCoords(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::FixedJoint *arg1 = (iDynTree::FixedJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("FixedJoint_getNrOfPosCoords",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__FixedJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FixedJoint_getNrOfPosCoords" "', argument " "1"" of type '" "iDynTree::FixedJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::FixedJoint * >(argp1);
  result = (unsigned int)((iDynTree::FixedJoint const *)arg1)->getNrOfPosCoords();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_FixedJoint_getNrOfDOFs(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::FixedJoint *arg1 = (iDynTree::FixedJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("FixedJoint_getNrOfDOFs",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__FixedJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FixedJoint_getNrOfDOFs" "', argument " "1"" of type '" "iDynTree::FixedJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::FixedJoint * >(argp1);
  result = (unsigned int)((iDynTree::FixedJoint const *)arg1)->getNrOfDOFs();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_FixedJoint_setAttachedLinks(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::FixedJoint *arg1 = (iDynTree::FixedJoint *) 0 ;
  iDynTree::LinkIndex arg2 ;
  iDynTree::LinkIndex arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("FixedJoint_setAttachedLinks",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__FixedJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FixedJoint_setAttachedLinks" "', argument " "1"" of type '" "iDynTree::FixedJoint *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::FixedJoint * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FixedJoint_setAttachedLinks" "', argument " "2"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg2 = static_cast< iDynTree::LinkIndex >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FixedJoint_setAttachedLinks" "', argument " "3"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg3 = static_cast< iDynTree::LinkIndex >(val3);
  (arg1)->setAttachedLinks(arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_FixedJoint_setRestTransform(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::FixedJoint *arg1 = (iDynTree::FixedJoint *) 0 ;
  iDynTree::Transform *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("FixedJoint_setRestTransform",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__FixedJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FixedJoint_setRestTransform" "', argument " "1"" of type '" "iDynTree::FixedJoint *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::FixedJoint * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Transform,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FixedJoint_setRestTransform" "', argument " "2"" of type '" "iDynTree::Transform const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FixedJoint_setRestTransform" "', argument " "2"" of type '" "iDynTree::Transform const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Transform * >(argp2);
  (arg1)->setRestTransform((iDynTree::Transform const &)*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_FixedJoint_getFirstAttachedLink(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::FixedJoint *arg1 = (iDynTree::FixedJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::LinkIndex result;
  
  if (!SWIG_check_num_args("FixedJoint_getFirstAttachedLink",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__FixedJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FixedJoint_getFirstAttachedLink" "', argument " "1"" of type '" "iDynTree::FixedJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::FixedJoint * >(argp1);
  result = (iDynTree::LinkIndex)((iDynTree::FixedJoint const *)arg1)->getFirstAttachedLink();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_FixedJoint_getSecondAttachedLink(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::FixedJoint *arg1 = (iDynTree::FixedJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::LinkIndex result;
  
  if (!SWIG_check_num_args("FixedJoint_getSecondAttachedLink",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__FixedJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FixedJoint_getSecondAttachedLink" "', argument " "1"" of type '" "iDynTree::FixedJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::FixedJoint * >(argp1);
  result = (iDynTree::LinkIndex)((iDynTree::FixedJoint const *)arg1)->getSecondAttachedLink();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_FixedJoint_getRestTransform(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::FixedJoint *arg1 = (iDynTree::FixedJoint *) 0 ;
  iDynTree::LinkIndex arg2 ;
  iDynTree::LinkIndex arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  iDynTree::Transform result;
  
  if (!SWIG_check_num_args("FixedJoint_getRestTransform",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__FixedJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FixedJoint_getRestTransform" "', argument " "1"" of type '" "iDynTree::FixedJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::FixedJoint * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FixedJoint_getRestTransform" "', argument " "2"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg2 = static_cast< iDynTree::LinkIndex >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FixedJoint_getRestTransform" "', argument " "3"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg3 = static_cast< iDynTree::LinkIndex >(val3);
  result = ((iDynTree::FixedJoint const *)arg1)->getRestTransform(arg2,arg3);
  _out = SWIG_NewPointerObj((new iDynTree::Transform(static_cast< const iDynTree::Transform& >(result))), SWIGTYPE_p_iDynTree__Transform, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_FixedJoint_getTransform(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::FixedJoint *arg1 = (iDynTree::FixedJoint *) 0 ;
  iDynTree::VectorDynSize *arg2 = 0 ;
  iDynTree::LinkIndex arg3 ;
  iDynTree::LinkIndex arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  mxArray * _out;
  iDynTree::Transform *result = 0 ;
  
  if (!SWIG_check_num_args("FixedJoint_getTransform",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__FixedJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FixedJoint_getTransform" "', argument " "1"" of type '" "iDynTree::FixedJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::FixedJoint * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FixedJoint_getTransform" "', argument " "2"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FixedJoint_getTransform" "', argument " "2"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::VectorDynSize * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FixedJoint_getTransform" "', argument " "3"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg3 = static_cast< iDynTree::LinkIndex >(val3);
  ecode4 = SWIG_AsVal_int(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "FixedJoint_getTransform" "', argument " "4"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg4 = static_cast< iDynTree::LinkIndex >(val4);
  result = (iDynTree::Transform *) &((iDynTree::FixedJoint const *)arg1)->getTransform((iDynTree::VectorDynSize const &)*arg2,arg3,arg4);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Transform, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_FixedJoint_getTransformDerivative(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::FixedJoint *arg1 = (iDynTree::FixedJoint *) 0 ;
  iDynTree::VectorDynSize *arg2 = 0 ;
  iDynTree::LinkIndex arg3 ;
  iDynTree::LinkIndex arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  mxArray * _out;
  iDynTree::TransformDerivative result;
  
  if (!SWIG_check_num_args("FixedJoint_getTransformDerivative",argc,5,5,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__FixedJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FixedJoint_getTransformDerivative" "', argument " "1"" of type '" "iDynTree::FixedJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::FixedJoint * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FixedJoint_getTransformDerivative" "', argument " "2"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FixedJoint_getTransformDerivative" "', argument " "2"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::VectorDynSize * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FixedJoint_getTransformDerivative" "', argument " "3"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg3 = static_cast< iDynTree::LinkIndex >(val3);
  ecode4 = SWIG_AsVal_int(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "FixedJoint_getTransformDerivative" "', argument " "4"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg4 = static_cast< iDynTree::LinkIndex >(val4);
  ecode5 = SWIG_AsVal_int(argv[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "FixedJoint_getTransformDerivative" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  result = ((iDynTree::FixedJoint const *)arg1)->getTransformDerivative((iDynTree::VectorDynSize const &)*arg2,arg3,arg4,arg5);
  _out = SWIG_NewPointerObj((new iDynTree::TransformDerivative(static_cast< const iDynTree::TransformDerivative& >(result))), SWIGTYPE_p_iDynTree__TransformDerivative, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_FixedJoint_getMotionSubspaceVector(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::FixedJoint *arg1 = (iDynTree::FixedJoint *) 0 ;
  int arg2 ;
  iDynTree::LinkIndex arg3 ;
  iDynTree::LinkIndex arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  mxArray * _out;
  iDynTree::SpatialMotionVector result;
  
  if (!SWIG_check_num_args("FixedJoint_getMotionSubspaceVector",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__FixedJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FixedJoint_getMotionSubspaceVector" "', argument " "1"" of type '" "iDynTree::FixedJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::FixedJoint * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FixedJoint_getMotionSubspaceVector" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FixedJoint_getMotionSubspaceVector" "', argument " "3"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg3 = static_cast< iDynTree::LinkIndex >(val3);
  ecode4 = SWIG_AsVal_int(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "FixedJoint_getMotionSubspaceVector" "', argument " "4"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg4 = static_cast< iDynTree::LinkIndex >(val4);
  result = ((iDynTree::FixedJoint const *)arg1)->getMotionSubspaceVector(arg2,arg3,arg4);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialMotionVector(static_cast< const iDynTree::SpatialMotionVector& >(result))), SWIGTYPE_p_iDynTree__SpatialMotionVector, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_FixedJoint_computeChildPosVelAcc(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::FixedJoint *arg1 = (iDynTree::FixedJoint *) 0 ;
  iDynTree::VectorDynSize *arg2 = 0 ;
  iDynTree::VectorDynSize *arg3 = 0 ;
  iDynTree::VectorDynSize *arg4 = 0 ;
  iDynTree::LinkPositions *arg5 = 0 ;
  iDynTree::LinkVelArray *arg6 = 0 ;
  iDynTree::LinkAccArray *arg7 = 0 ;
  iDynTree::LinkIndex arg8 ;
  iDynTree::LinkIndex arg9 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  int val9 ;
  int ecode9 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("FixedJoint_computeChildPosVelAcc",argc,9,9,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__FixedJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FixedJoint_computeChildPosVelAcc" "', argument " "1"" of type '" "iDynTree::FixedJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::FixedJoint * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FixedJoint_computeChildPosVelAcc" "', argument " "2"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FixedJoint_computeChildPosVelAcc" "', argument " "2"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::VectorDynSize * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FixedJoint_computeChildPosVelAcc" "', argument " "3"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FixedJoint_computeChildPosVelAcc" "', argument " "3"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::VectorDynSize * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "FixedJoint_computeChildPosVelAcc" "', argument " "4"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FixedJoint_computeChildPosVelAcc" "', argument " "4"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  arg4 = reinterpret_cast< iDynTree::VectorDynSize * >(argp4);
  res5 = SWIG_ConvertPtr(argv[4], &argp5, SWIGTYPE_p_iDynTree__LinkPositions,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "FixedJoint_computeChildPosVelAcc" "', argument " "5"" of type '" "iDynTree::LinkPositions &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FixedJoint_computeChildPosVelAcc" "', argument " "5"" of type '" "iDynTree::LinkPositions &""'"); 
  }
  arg5 = reinterpret_cast< iDynTree::LinkPositions * >(argp5);
  res6 = SWIG_ConvertPtr(argv[5], &argp6, SWIGTYPE_p_iDynTree__LinkVelArray,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "FixedJoint_computeChildPosVelAcc" "', argument " "6"" of type '" "iDynTree::LinkVelArray &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FixedJoint_computeChildPosVelAcc" "', argument " "6"" of type '" "iDynTree::LinkVelArray &""'"); 
  }
  arg6 = reinterpret_cast< iDynTree::LinkVelArray * >(argp6);
  res7 = SWIG_ConvertPtr(argv[6], &argp7, SWIGTYPE_p_iDynTree__LinkAccArray,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "FixedJoint_computeChildPosVelAcc" "', argument " "7"" of type '" "iDynTree::LinkAccArray &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FixedJoint_computeChildPosVelAcc" "', argument " "7"" of type '" "iDynTree::LinkAccArray &""'"); 
  }
  arg7 = reinterpret_cast< iDynTree::LinkAccArray * >(argp7);
  ecode8 = SWIG_AsVal_int(argv[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "FixedJoint_computeChildPosVelAcc" "', argument " "8"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg8 = static_cast< iDynTree::LinkIndex >(val8);
  ecode9 = SWIG_AsVal_int(argv[8], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "FixedJoint_computeChildPosVelAcc" "', argument " "9"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg9 = static_cast< iDynTree::LinkIndex >(val9);
  ((iDynTree::FixedJoint const *)arg1)->computeChildPosVelAcc((iDynTree::VectorDynSize const &)*arg2,(iDynTree::VectorDynSize const &)*arg3,(iDynTree::VectorDynSize const &)*arg4,*arg5,*arg6,*arg7,arg8,arg9);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_FixedJoint_computeChildVelAcc(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::FixedJoint *arg1 = (iDynTree::FixedJoint *) 0 ;
  iDynTree::VectorDynSize *arg2 = 0 ;
  iDynTree::VectorDynSize *arg3 = 0 ;
  iDynTree::VectorDynSize *arg4 = 0 ;
  iDynTree::LinkVelArray *arg5 = 0 ;
  iDynTree::LinkAccArray *arg6 = 0 ;
  iDynTree::LinkIndex arg7 ;
  iDynTree::LinkIndex arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("FixedJoint_computeChildVelAcc",argc,8,8,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__FixedJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FixedJoint_computeChildVelAcc" "', argument " "1"" of type '" "iDynTree::FixedJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::FixedJoint * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FixedJoint_computeChildVelAcc" "', argument " "2"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FixedJoint_computeChildVelAcc" "', argument " "2"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::VectorDynSize * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FixedJoint_computeChildVelAcc" "', argument " "3"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FixedJoint_computeChildVelAcc" "', argument " "3"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::VectorDynSize * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "FixedJoint_computeChildVelAcc" "', argument " "4"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FixedJoint_computeChildVelAcc" "', argument " "4"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  arg4 = reinterpret_cast< iDynTree::VectorDynSize * >(argp4);
  res5 = SWIG_ConvertPtr(argv[4], &argp5, SWIGTYPE_p_iDynTree__LinkVelArray,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "FixedJoint_computeChildVelAcc" "', argument " "5"" of type '" "iDynTree::LinkVelArray &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FixedJoint_computeChildVelAcc" "', argument " "5"" of type '" "iDynTree::LinkVelArray &""'"); 
  }
  arg5 = reinterpret_cast< iDynTree::LinkVelArray * >(argp5);
  res6 = SWIG_ConvertPtr(argv[5], &argp6, SWIGTYPE_p_iDynTree__LinkAccArray,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "FixedJoint_computeChildVelAcc" "', argument " "6"" of type '" "iDynTree::LinkAccArray &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FixedJoint_computeChildVelAcc" "', argument " "6"" of type '" "iDynTree::LinkAccArray &""'"); 
  }
  arg6 = reinterpret_cast< iDynTree::LinkAccArray * >(argp6);
  ecode7 = SWIG_AsVal_int(argv[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "FixedJoint_computeChildVelAcc" "', argument " "7"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg7 = static_cast< iDynTree::LinkIndex >(val7);
  ecode8 = SWIG_AsVal_int(argv[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "FixedJoint_computeChildVelAcc" "', argument " "8"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg8 = static_cast< iDynTree::LinkIndex >(val8);
  ((iDynTree::FixedJoint const *)arg1)->computeChildVelAcc((iDynTree::VectorDynSize const &)*arg2,(iDynTree::VectorDynSize const &)*arg3,(iDynTree::VectorDynSize const &)*arg4,*arg5,*arg6,arg7,arg8);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_FixedJoint_computeChildVel(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::FixedJoint *arg1 = (iDynTree::FixedJoint *) 0 ;
  iDynTree::VectorDynSize *arg2 = 0 ;
  iDynTree::VectorDynSize *arg3 = 0 ;
  iDynTree::LinkVelArray *arg4 = 0 ;
  iDynTree::LinkIndex arg5 ;
  iDynTree::LinkIndex arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("FixedJoint_computeChildVel",argc,6,6,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__FixedJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FixedJoint_computeChildVel" "', argument " "1"" of type '" "iDynTree::FixedJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::FixedJoint * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FixedJoint_computeChildVel" "', argument " "2"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FixedJoint_computeChildVel" "', argument " "2"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::VectorDynSize * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FixedJoint_computeChildVel" "', argument " "3"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FixedJoint_computeChildVel" "', argument " "3"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::VectorDynSize * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__LinkVelArray,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "FixedJoint_computeChildVel" "', argument " "4"" of type '" "iDynTree::LinkVelArray &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FixedJoint_computeChildVel" "', argument " "4"" of type '" "iDynTree::LinkVelArray &""'"); 
  }
  arg4 = reinterpret_cast< iDynTree::LinkVelArray * >(argp4);
  ecode5 = SWIG_AsVal_int(argv[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "FixedJoint_computeChildVel" "', argument " "5"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg5 = static_cast< iDynTree::LinkIndex >(val5);
  ecode6 = SWIG_AsVal_int(argv[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "FixedJoint_computeChildVel" "', argument " "6"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg6 = static_cast< iDynTree::LinkIndex >(val6);
  ((iDynTree::FixedJoint const *)arg1)->computeChildVel((iDynTree::VectorDynSize const &)*arg2,(iDynTree::VectorDynSize const &)*arg3,*arg4,arg5,arg6);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_FixedJoint_computeChildAcc(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::FixedJoint *arg1 = (iDynTree::FixedJoint *) 0 ;
  iDynTree::VectorDynSize *arg2 = 0 ;
  iDynTree::VectorDynSize *arg3 = 0 ;
  iDynTree::LinkVelArray *arg4 = 0 ;
  iDynTree::VectorDynSize *arg5 = 0 ;
  iDynTree::LinkAccArray *arg6 = 0 ;
  iDynTree::LinkIndex arg7 ;
  iDynTree::LinkIndex arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("FixedJoint_computeChildAcc",argc,8,8,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__FixedJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FixedJoint_computeChildAcc" "', argument " "1"" of type '" "iDynTree::FixedJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::FixedJoint * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FixedJoint_computeChildAcc" "', argument " "2"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FixedJoint_computeChildAcc" "', argument " "2"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::VectorDynSize * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FixedJoint_computeChildAcc" "', argument " "3"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FixedJoint_computeChildAcc" "', argument " "3"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::VectorDynSize * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__LinkVelArray,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "FixedJoint_computeChildAcc" "', argument " "4"" of type '" "iDynTree::LinkVelArray const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FixedJoint_computeChildAcc" "', argument " "4"" of type '" "iDynTree::LinkVelArray const &""'"); 
  }
  arg4 = reinterpret_cast< iDynTree::LinkVelArray * >(argp4);
  res5 = SWIG_ConvertPtr(argv[4], &argp5, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "FixedJoint_computeChildAcc" "', argument " "5"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FixedJoint_computeChildAcc" "', argument " "5"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  arg5 = reinterpret_cast< iDynTree::VectorDynSize * >(argp5);
  res6 = SWIG_ConvertPtr(argv[5], &argp6, SWIGTYPE_p_iDynTree__LinkAccArray,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "FixedJoint_computeChildAcc" "', argument " "6"" of type '" "iDynTree::LinkAccArray &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FixedJoint_computeChildAcc" "', argument " "6"" of type '" "iDynTree::LinkAccArray &""'"); 
  }
  arg6 = reinterpret_cast< iDynTree::LinkAccArray * >(argp6);
  ecode7 = SWIG_AsVal_int(argv[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "FixedJoint_computeChildAcc" "', argument " "7"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg7 = static_cast< iDynTree::LinkIndex >(val7);
  ecode8 = SWIG_AsVal_int(argv[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "FixedJoint_computeChildAcc" "', argument " "8"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg8 = static_cast< iDynTree::LinkIndex >(val8);
  ((iDynTree::FixedJoint const *)arg1)->computeChildAcc((iDynTree::VectorDynSize const &)*arg2,(iDynTree::VectorDynSize const &)*arg3,(iDynTree::LinkVelArray const &)*arg4,(iDynTree::VectorDynSize const &)*arg5,*arg6,arg7,arg8);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_FixedJoint_computeChildBiasAcc(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::FixedJoint *arg1 = (iDynTree::FixedJoint *) 0 ;
  iDynTree::VectorDynSize *arg2 = 0 ;
  iDynTree::VectorDynSize *arg3 = 0 ;
  iDynTree::LinkVelArray *arg4 = 0 ;
  iDynTree::LinkAccArray *arg5 = 0 ;
  iDynTree::LinkIndex arg6 ;
  iDynTree::LinkIndex arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("FixedJoint_computeChildBiasAcc",argc,7,7,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__FixedJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FixedJoint_computeChildBiasAcc" "', argument " "1"" of type '" "iDynTree::FixedJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::FixedJoint * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FixedJoint_computeChildBiasAcc" "', argument " "2"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FixedJoint_computeChildBiasAcc" "', argument " "2"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::VectorDynSize * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FixedJoint_computeChildBiasAcc" "', argument " "3"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FixedJoint_computeChildBiasAcc" "', argument " "3"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::VectorDynSize * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__LinkVelArray,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "FixedJoint_computeChildBiasAcc" "', argument " "4"" of type '" "iDynTree::LinkVelArray const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FixedJoint_computeChildBiasAcc" "', argument " "4"" of type '" "iDynTree::LinkVelArray const &""'"); 
  }
  arg4 = reinterpret_cast< iDynTree::LinkVelArray * >(argp4);
  res5 = SWIG_ConvertPtr(argv[4], &argp5, SWIGTYPE_p_iDynTree__LinkAccArray,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "FixedJoint_computeChildBiasAcc" "', argument " "5"" of type '" "iDynTree::LinkAccArray &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FixedJoint_computeChildBiasAcc" "', argument " "5"" of type '" "iDynTree::LinkAccArray &""'"); 
  }
  arg5 = reinterpret_cast< iDynTree::LinkAccArray * >(argp5);
  ecode6 = SWIG_AsVal_int(argv[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "FixedJoint_computeChildBiasAcc" "', argument " "6"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg6 = static_cast< iDynTree::LinkIndex >(val6);
  ecode7 = SWIG_AsVal_int(argv[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "FixedJoint_computeChildBiasAcc" "', argument " "7"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg7 = static_cast< iDynTree::LinkIndex >(val7);
  ((iDynTree::FixedJoint const *)arg1)->computeChildBiasAcc((iDynTree::VectorDynSize const &)*arg2,(iDynTree::VectorDynSize const &)*arg3,(iDynTree::LinkVelArray const &)*arg4,*arg5,arg6,arg7);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_FixedJoint_computeJointTorque(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::FixedJoint *arg1 = (iDynTree::FixedJoint *) 0 ;
  iDynTree::VectorDynSize *arg2 = 0 ;
  iDynTree::Wrench *arg3 = 0 ;
  iDynTree::LinkIndex arg4 ;
  iDynTree::LinkIndex arg5 ;
  iDynTree::VectorDynSize *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("FixedJoint_computeJointTorque",argc,6,6,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__FixedJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FixedJoint_computeJointTorque" "', argument " "1"" of type '" "iDynTree::FixedJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::FixedJoint * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FixedJoint_computeJointTorque" "', argument " "2"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FixedJoint_computeJointTorque" "', argument " "2"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::VectorDynSize * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__Wrench,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FixedJoint_computeJointTorque" "', argument " "3"" of type '" "iDynTree::Wrench const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FixedJoint_computeJointTorque" "', argument " "3"" of type '" "iDynTree::Wrench const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::Wrench * >(argp3);
  ecode4 = SWIG_AsVal_int(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "FixedJoint_computeJointTorque" "', argument " "4"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg4 = static_cast< iDynTree::LinkIndex >(val4);
  ecode5 = SWIG_AsVal_int(argv[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "FixedJoint_computeJointTorque" "', argument " "5"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg5 = static_cast< iDynTree::LinkIndex >(val5);
  res6 = SWIG_ConvertPtr(argv[5], &argp6, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "FixedJoint_computeJointTorque" "', argument " "6"" of type '" "iDynTree::VectorDynSize &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FixedJoint_computeJointTorque" "', argument " "6"" of type '" "iDynTree::VectorDynSize &""'"); 
  }
  arg6 = reinterpret_cast< iDynTree::VectorDynSize * >(argp6);
  ((iDynTree::FixedJoint const *)arg1)->computeJointTorque((iDynTree::VectorDynSize const &)*arg2,(iDynTree::Wrench const &)*arg3,arg4,arg5,*arg6);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_FixedJoint_setIndex(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::FixedJoint *arg1 = (iDynTree::FixedJoint *) 0 ;
  iDynTree::JointIndex *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("FixedJoint_setIndex",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__FixedJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FixedJoint_setIndex" "', argument " "1"" of type '" "iDynTree::FixedJoint *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::FixedJoint * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_int,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FixedJoint_setIndex" "', argument " "2"" of type '" "iDynTree::JointIndex &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FixedJoint_setIndex" "', argument " "2"" of type '" "iDynTree::JointIndex &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::JointIndex * >(argp2);
  (arg1)->setIndex(*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_FixedJoint_getIndex(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::FixedJoint *arg1 = (iDynTree::FixedJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::JointIndex result;
  
  if (!SWIG_check_num_args("FixedJoint_getIndex",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__FixedJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FixedJoint_getIndex" "', argument " "1"" of type '" "iDynTree::FixedJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::FixedJoint * >(argp1);
  result = (iDynTree::JointIndex)((iDynTree::FixedJoint const *)arg1)->getIndex();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_FixedJoint_setPosCoordsOffset(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::FixedJoint *arg1 = (iDynTree::FixedJoint *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("FixedJoint_setPosCoordsOffset",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__FixedJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FixedJoint_setPosCoordsOffset" "', argument " "1"" of type '" "iDynTree::FixedJoint *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::FixedJoint * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FixedJoint_setPosCoordsOffset" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  (arg1)->setPosCoordsOffset(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_FixedJoint_getPosCoordsOffset(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::FixedJoint *arg1 = (iDynTree::FixedJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  size_t result;
  
  if (!SWIG_check_num_args("FixedJoint_getPosCoordsOffset",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__FixedJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FixedJoint_getPosCoordsOffset" "', argument " "1"" of type '" "iDynTree::FixedJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::FixedJoint * >(argp1);
  result = ((iDynTree::FixedJoint const *)arg1)->getPosCoordsOffset();
  _out = SWIG_From_size_t(static_cast< size_t >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_FixedJoint_setDOFsOffset(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::FixedJoint *arg1 = (iDynTree::FixedJoint *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("FixedJoint_setDOFsOffset",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__FixedJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FixedJoint_setDOFsOffset" "', argument " "1"" of type '" "iDynTree::FixedJoint *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::FixedJoint * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FixedJoint_setDOFsOffset" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  (arg1)->setDOFsOffset(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_FixedJoint_getDOFsOffset(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::FixedJoint *arg1 = (iDynTree::FixedJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  size_t result;
  
  if (!SWIG_check_num_args("FixedJoint_getDOFsOffset",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__FixedJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FixedJoint_getDOFsOffset" "', argument " "1"" of type '" "iDynTree::FixedJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::FixedJoint * >(argp1);
  result = ((iDynTree::FixedJoint const *)arg1)->getDOFsOffset();
  _out = SWIG_From_size_t(static_cast< size_t >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_FixedJoint_hasPosLimits(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::FixedJoint *arg1 = (iDynTree::FixedJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("FixedJoint_hasPosLimits",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__FixedJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FixedJoint_hasPosLimits" "', argument " "1"" of type '" "iDynTree::FixedJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::FixedJoint * >(argp1);
  result = (bool)((iDynTree::FixedJoint const *)arg1)->hasPosLimits();
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_FixedJoint_enablePosLimits(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::FixedJoint *arg1 = (iDynTree::FixedJoint *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("FixedJoint_enablePosLimits",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__FixedJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FixedJoint_enablePosLimits" "', argument " "1"" of type '" "iDynTree::FixedJoint *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::FixedJoint * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FixedJoint_enablePosLimits" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = (bool)(arg1)->enablePosLimits(arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_FixedJoint_getPosLimits(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::FixedJoint *arg1 = (iDynTree::FixedJoint *) 0 ;
  size_t arg2 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("FixedJoint_getPosLimits",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__FixedJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FixedJoint_getPosLimits" "', argument " "1"" of type '" "iDynTree::FixedJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::FixedJoint * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FixedJoint_getPosLimits" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FixedJoint_getPosLimits" "', argument " "3"" of type '" "double &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FixedJoint_getPosLimits" "', argument " "3"" of type '" "double &""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "FixedJoint_getPosLimits" "', argument " "4"" of type '" "double &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FixedJoint_getPosLimits" "', argument " "4"" of type '" "double &""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  result = (bool)((iDynTree::FixedJoint const *)arg1)->getPosLimits(arg2,*arg3,*arg4);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_FixedJoint_getMinPosLimit(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::FixedJoint *arg1 = (iDynTree::FixedJoint *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("FixedJoint_getMinPosLimit",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__FixedJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FixedJoint_getMinPosLimit" "', argument " "1"" of type '" "iDynTree::FixedJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::FixedJoint * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FixedJoint_getMinPosLimit" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (double)((iDynTree::FixedJoint const *)arg1)->getMinPosLimit(arg2);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_FixedJoint_getMaxPosLimit(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::FixedJoint *arg1 = (iDynTree::FixedJoint *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("FixedJoint_getMaxPosLimit",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__FixedJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FixedJoint_getMaxPosLimit" "', argument " "1"" of type '" "iDynTree::FixedJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::FixedJoint * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FixedJoint_getMaxPosLimit" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (double)((iDynTree::FixedJoint const *)arg1)->getMaxPosLimit(arg2);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_FixedJoint_setPosLimits(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::FixedJoint *arg1 = (iDynTree::FixedJoint *) 0 ;
  size_t arg2 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("FixedJoint_setPosLimits",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__FixedJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FixedJoint_setPosLimits" "', argument " "1"" of type '" "iDynTree::FixedJoint *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::FixedJoint * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FixedJoint_setPosLimits" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FixedJoint_setPosLimits" "', argument " "3"" of type '" "double &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FixedJoint_setPosLimits" "', argument " "3"" of type '" "double &""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "FixedJoint_setPosLimits" "', argument " "4"" of type '" "double &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FixedJoint_setPosLimits" "', argument " "4"" of type '" "double &""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  result = (bool)(arg1)->setPosLimits(arg2,*arg3,*arg4);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_MovableJointImpl1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 1,1 > *arg1 = (iDynTree::MovableJointImpl< 1,1 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_MovableJointImpl1",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_1_1_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MovableJointImpl1" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 1,1 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 1,1 > * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MovableJointImpl1_getNrOfPosCoords(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 1,1 > *arg1 = (iDynTree::MovableJointImpl< 1,1 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("MovableJointImpl1_getNrOfPosCoords",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_1_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MovableJointImpl1_getNrOfPosCoords" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 1,1 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 1,1 > * >(argp1);
  result = (unsigned int)((iDynTree::MovableJointImpl< 1,1 > const *)arg1)->getNrOfPosCoords();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MovableJointImpl1_getNrOfDOFs(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 1,1 > *arg1 = (iDynTree::MovableJointImpl< 1,1 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("MovableJointImpl1_getNrOfDOFs",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_1_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MovableJointImpl1_getNrOfDOFs" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 1,1 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 1,1 > * >(argp1);
  result = (unsigned int)((iDynTree::MovableJointImpl< 1,1 > const *)arg1)->getNrOfDOFs();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MovableJointImpl1_setIndex(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 1,1 > *arg1 = (iDynTree::MovableJointImpl< 1,1 > *) 0 ;
  iDynTree::JointIndex *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("MovableJointImpl1_setIndex",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_1_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MovableJointImpl1_setIndex" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 1,1 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 1,1 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_int,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MovableJointImpl1_setIndex" "', argument " "2"" of type '" "iDynTree::JointIndex &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MovableJointImpl1_setIndex" "', argument " "2"" of type '" "iDynTree::JointIndex &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::JointIndex * >(argp2);
  (arg1)->setIndex(*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MovableJointImpl1_getIndex(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 1,1 > *arg1 = (iDynTree::MovableJointImpl< 1,1 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::JointIndex result;
  
  if (!SWIG_check_num_args("MovableJointImpl1_getIndex",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_1_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MovableJointImpl1_getIndex" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 1,1 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 1,1 > * >(argp1);
  result = (iDynTree::JointIndex)((iDynTree::MovableJointImpl< 1,1 > const *)arg1)->getIndex();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MovableJointImpl1_setPosCoordsOffset(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 1,1 > *arg1 = (iDynTree::MovableJointImpl< 1,1 > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("MovableJointImpl1_setPosCoordsOffset",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_1_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MovableJointImpl1_setPosCoordsOffset" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 1,1 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 1,1 > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MovableJointImpl1_setPosCoordsOffset" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  (arg1)->setPosCoordsOffset(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MovableJointImpl1_getPosCoordsOffset(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 1,1 > *arg1 = (iDynTree::MovableJointImpl< 1,1 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  size_t result;
  
  if (!SWIG_check_num_args("MovableJointImpl1_getPosCoordsOffset",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_1_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MovableJointImpl1_getPosCoordsOffset" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 1,1 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 1,1 > * >(argp1);
  result = ((iDynTree::MovableJointImpl< 1,1 > const *)arg1)->getPosCoordsOffset();
  _out = SWIG_From_size_t(static_cast< size_t >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MovableJointImpl1_setDOFsOffset(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 1,1 > *arg1 = (iDynTree::MovableJointImpl< 1,1 > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("MovableJointImpl1_setDOFsOffset",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_1_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MovableJointImpl1_setDOFsOffset" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 1,1 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 1,1 > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MovableJointImpl1_setDOFsOffset" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  (arg1)->setDOFsOffset(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MovableJointImpl1_getDOFsOffset(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 1,1 > *arg1 = (iDynTree::MovableJointImpl< 1,1 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  size_t result;
  
  if (!SWIG_check_num_args("MovableJointImpl1_getDOFsOffset",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_1_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MovableJointImpl1_getDOFsOffset" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 1,1 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 1,1 > * >(argp1);
  result = ((iDynTree::MovableJointImpl< 1,1 > const *)arg1)->getDOFsOffset();
  _out = SWIG_From_size_t(static_cast< size_t >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_MovableJointImpl2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 2,2 > *arg1 = (iDynTree::MovableJointImpl< 2,2 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_MovableJointImpl2",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_2_2_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MovableJointImpl2" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 2,2 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 2,2 > * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MovableJointImpl2_getNrOfPosCoords(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 2,2 > *arg1 = (iDynTree::MovableJointImpl< 2,2 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("MovableJointImpl2_getNrOfPosCoords",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_2_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MovableJointImpl2_getNrOfPosCoords" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 2,2 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 2,2 > * >(argp1);
  result = (unsigned int)((iDynTree::MovableJointImpl< 2,2 > const *)arg1)->getNrOfPosCoords();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MovableJointImpl2_getNrOfDOFs(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 2,2 > *arg1 = (iDynTree::MovableJointImpl< 2,2 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("MovableJointImpl2_getNrOfDOFs",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_2_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MovableJointImpl2_getNrOfDOFs" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 2,2 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 2,2 > * >(argp1);
  result = (unsigned int)((iDynTree::MovableJointImpl< 2,2 > const *)arg1)->getNrOfDOFs();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MovableJointImpl2_setIndex(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 2,2 > *arg1 = (iDynTree::MovableJointImpl< 2,2 > *) 0 ;
  iDynTree::JointIndex *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("MovableJointImpl2_setIndex",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_2_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MovableJointImpl2_setIndex" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 2,2 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 2,2 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_int,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MovableJointImpl2_setIndex" "', argument " "2"" of type '" "iDynTree::JointIndex &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MovableJointImpl2_setIndex" "', argument " "2"" of type '" "iDynTree::JointIndex &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::JointIndex * >(argp2);
  (arg1)->setIndex(*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MovableJointImpl2_getIndex(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 2,2 > *arg1 = (iDynTree::MovableJointImpl< 2,2 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::JointIndex result;
  
  if (!SWIG_check_num_args("MovableJointImpl2_getIndex",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_2_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MovableJointImpl2_getIndex" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 2,2 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 2,2 > * >(argp1);
  result = (iDynTree::JointIndex)((iDynTree::MovableJointImpl< 2,2 > const *)arg1)->getIndex();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MovableJointImpl2_setPosCoordsOffset(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 2,2 > *arg1 = (iDynTree::MovableJointImpl< 2,2 > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("MovableJointImpl2_setPosCoordsOffset",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_2_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MovableJointImpl2_setPosCoordsOffset" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 2,2 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 2,2 > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MovableJointImpl2_setPosCoordsOffset" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  (arg1)->setPosCoordsOffset(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MovableJointImpl2_getPosCoordsOffset(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 2,2 > *arg1 = (iDynTree::MovableJointImpl< 2,2 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  size_t result;
  
  if (!SWIG_check_num_args("MovableJointImpl2_getPosCoordsOffset",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_2_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MovableJointImpl2_getPosCoordsOffset" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 2,2 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 2,2 > * >(argp1);
  result = ((iDynTree::MovableJointImpl< 2,2 > const *)arg1)->getPosCoordsOffset();
  _out = SWIG_From_size_t(static_cast< size_t >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MovableJointImpl2_setDOFsOffset(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 2,2 > *arg1 = (iDynTree::MovableJointImpl< 2,2 > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("MovableJointImpl2_setDOFsOffset",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_2_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MovableJointImpl2_setDOFsOffset" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 2,2 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 2,2 > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MovableJointImpl2_setDOFsOffset" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  (arg1)->setDOFsOffset(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MovableJointImpl2_getDOFsOffset(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 2,2 > *arg1 = (iDynTree::MovableJointImpl< 2,2 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  size_t result;
  
  if (!SWIG_check_num_args("MovableJointImpl2_getDOFsOffset",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_2_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MovableJointImpl2_getDOFsOffset" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 2,2 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 2,2 > * >(argp1);
  result = ((iDynTree::MovableJointImpl< 2,2 > const *)arg1)->getDOFsOffset();
  _out = SWIG_From_size_t(static_cast< size_t >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_MovableJointImpl3(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 3,3 > *arg1 = (iDynTree::MovableJointImpl< 3,3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_MovableJointImpl3",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_3_3_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MovableJointImpl3" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 3,3 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 3,3 > * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MovableJointImpl3_getNrOfPosCoords(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 3,3 > *arg1 = (iDynTree::MovableJointImpl< 3,3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("MovableJointImpl3_getNrOfPosCoords",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_3_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MovableJointImpl3_getNrOfPosCoords" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 3,3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 3,3 > * >(argp1);
  result = (unsigned int)((iDynTree::MovableJointImpl< 3,3 > const *)arg1)->getNrOfPosCoords();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MovableJointImpl3_getNrOfDOFs(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 3,3 > *arg1 = (iDynTree::MovableJointImpl< 3,3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("MovableJointImpl3_getNrOfDOFs",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_3_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MovableJointImpl3_getNrOfDOFs" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 3,3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 3,3 > * >(argp1);
  result = (unsigned int)((iDynTree::MovableJointImpl< 3,3 > const *)arg1)->getNrOfDOFs();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MovableJointImpl3_setIndex(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 3,3 > *arg1 = (iDynTree::MovableJointImpl< 3,3 > *) 0 ;
  iDynTree::JointIndex *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("MovableJointImpl3_setIndex",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_3_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MovableJointImpl3_setIndex" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 3,3 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 3,3 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_int,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MovableJointImpl3_setIndex" "', argument " "2"" of type '" "iDynTree::JointIndex &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MovableJointImpl3_setIndex" "', argument " "2"" of type '" "iDynTree::JointIndex &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::JointIndex * >(argp2);
  (arg1)->setIndex(*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MovableJointImpl3_getIndex(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 3,3 > *arg1 = (iDynTree::MovableJointImpl< 3,3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::JointIndex result;
  
  if (!SWIG_check_num_args("MovableJointImpl3_getIndex",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_3_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MovableJointImpl3_getIndex" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 3,3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 3,3 > * >(argp1);
  result = (iDynTree::JointIndex)((iDynTree::MovableJointImpl< 3,3 > const *)arg1)->getIndex();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MovableJointImpl3_setPosCoordsOffset(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 3,3 > *arg1 = (iDynTree::MovableJointImpl< 3,3 > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("MovableJointImpl3_setPosCoordsOffset",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_3_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MovableJointImpl3_setPosCoordsOffset" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 3,3 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 3,3 > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MovableJointImpl3_setPosCoordsOffset" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  (arg1)->setPosCoordsOffset(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MovableJointImpl3_getPosCoordsOffset(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 3,3 > *arg1 = (iDynTree::MovableJointImpl< 3,3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  size_t result;
  
  if (!SWIG_check_num_args("MovableJointImpl3_getPosCoordsOffset",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_3_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MovableJointImpl3_getPosCoordsOffset" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 3,3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 3,3 > * >(argp1);
  result = ((iDynTree::MovableJointImpl< 3,3 > const *)arg1)->getPosCoordsOffset();
  _out = SWIG_From_size_t(static_cast< size_t >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MovableJointImpl3_setDOFsOffset(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 3,3 > *arg1 = (iDynTree::MovableJointImpl< 3,3 > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("MovableJointImpl3_setDOFsOffset",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_3_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MovableJointImpl3_setDOFsOffset" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 3,3 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 3,3 > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MovableJointImpl3_setDOFsOffset" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  (arg1)->setDOFsOffset(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MovableJointImpl3_getDOFsOffset(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 3,3 > *arg1 = (iDynTree::MovableJointImpl< 3,3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  size_t result;
  
  if (!SWIG_check_num_args("MovableJointImpl3_getDOFsOffset",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_3_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MovableJointImpl3_getDOFsOffset" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 3,3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 3,3 > * >(argp1);
  result = ((iDynTree::MovableJointImpl< 3,3 > const *)arg1)->getDOFsOffset();
  _out = SWIG_From_size_t(static_cast< size_t >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_MovableJointImpl4(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 4,4 > *arg1 = (iDynTree::MovableJointImpl< 4,4 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_MovableJointImpl4",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_4_4_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MovableJointImpl4" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 4,4 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 4,4 > * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MovableJointImpl4_getNrOfPosCoords(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 4,4 > *arg1 = (iDynTree::MovableJointImpl< 4,4 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("MovableJointImpl4_getNrOfPosCoords",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_4_4_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MovableJointImpl4_getNrOfPosCoords" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 4,4 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 4,4 > * >(argp1);
  result = (unsigned int)((iDynTree::MovableJointImpl< 4,4 > const *)arg1)->getNrOfPosCoords();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MovableJointImpl4_getNrOfDOFs(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 4,4 > *arg1 = (iDynTree::MovableJointImpl< 4,4 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("MovableJointImpl4_getNrOfDOFs",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_4_4_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MovableJointImpl4_getNrOfDOFs" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 4,4 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 4,4 > * >(argp1);
  result = (unsigned int)((iDynTree::MovableJointImpl< 4,4 > const *)arg1)->getNrOfDOFs();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MovableJointImpl4_setIndex(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 4,4 > *arg1 = (iDynTree::MovableJointImpl< 4,4 > *) 0 ;
  iDynTree::JointIndex *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("MovableJointImpl4_setIndex",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_4_4_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MovableJointImpl4_setIndex" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 4,4 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 4,4 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_int,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MovableJointImpl4_setIndex" "', argument " "2"" of type '" "iDynTree::JointIndex &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MovableJointImpl4_setIndex" "', argument " "2"" of type '" "iDynTree::JointIndex &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::JointIndex * >(argp2);
  (arg1)->setIndex(*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MovableJointImpl4_getIndex(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 4,4 > *arg1 = (iDynTree::MovableJointImpl< 4,4 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::JointIndex result;
  
  if (!SWIG_check_num_args("MovableJointImpl4_getIndex",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_4_4_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MovableJointImpl4_getIndex" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 4,4 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 4,4 > * >(argp1);
  result = (iDynTree::JointIndex)((iDynTree::MovableJointImpl< 4,4 > const *)arg1)->getIndex();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MovableJointImpl4_setPosCoordsOffset(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 4,4 > *arg1 = (iDynTree::MovableJointImpl< 4,4 > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("MovableJointImpl4_setPosCoordsOffset",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_4_4_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MovableJointImpl4_setPosCoordsOffset" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 4,4 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 4,4 > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MovableJointImpl4_setPosCoordsOffset" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  (arg1)->setPosCoordsOffset(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MovableJointImpl4_getPosCoordsOffset(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 4,4 > *arg1 = (iDynTree::MovableJointImpl< 4,4 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  size_t result;
  
  if (!SWIG_check_num_args("MovableJointImpl4_getPosCoordsOffset",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_4_4_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MovableJointImpl4_getPosCoordsOffset" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 4,4 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 4,4 > * >(argp1);
  result = ((iDynTree::MovableJointImpl< 4,4 > const *)arg1)->getPosCoordsOffset();
  _out = SWIG_From_size_t(static_cast< size_t >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MovableJointImpl4_setDOFsOffset(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 4,4 > *arg1 = (iDynTree::MovableJointImpl< 4,4 > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("MovableJointImpl4_setDOFsOffset",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_4_4_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MovableJointImpl4_setDOFsOffset" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 4,4 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 4,4 > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MovableJointImpl4_setDOFsOffset" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  (arg1)->setDOFsOffset(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MovableJointImpl4_getDOFsOffset(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 4,4 > *arg1 = (iDynTree::MovableJointImpl< 4,4 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  size_t result;
  
  if (!SWIG_check_num_args("MovableJointImpl4_getDOFsOffset",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_4_4_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MovableJointImpl4_getDOFsOffset" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 4,4 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 4,4 > * >(argp1);
  result = ((iDynTree::MovableJointImpl< 4,4 > const *)arg1)->getDOFsOffset();
  _out = SWIG_From_size_t(static_cast< size_t >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_MovableJointImpl5(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 5,5 > *arg1 = (iDynTree::MovableJointImpl< 5,5 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_MovableJointImpl5",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_5_5_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MovableJointImpl5" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 5,5 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 5,5 > * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MovableJointImpl5_getNrOfPosCoords(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 5,5 > *arg1 = (iDynTree::MovableJointImpl< 5,5 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("MovableJointImpl5_getNrOfPosCoords",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_5_5_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MovableJointImpl5_getNrOfPosCoords" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 5,5 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 5,5 > * >(argp1);
  result = (unsigned int)((iDynTree::MovableJointImpl< 5,5 > const *)arg1)->getNrOfPosCoords();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MovableJointImpl5_getNrOfDOFs(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 5,5 > *arg1 = (iDynTree::MovableJointImpl< 5,5 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("MovableJointImpl5_getNrOfDOFs",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_5_5_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MovableJointImpl5_getNrOfDOFs" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 5,5 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 5,5 > * >(argp1);
  result = (unsigned int)((iDynTree::MovableJointImpl< 5,5 > const *)arg1)->getNrOfDOFs();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MovableJointImpl5_setIndex(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 5,5 > *arg1 = (iDynTree::MovableJointImpl< 5,5 > *) 0 ;
  iDynTree::JointIndex *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("MovableJointImpl5_setIndex",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_5_5_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MovableJointImpl5_setIndex" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 5,5 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 5,5 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_int,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MovableJointImpl5_setIndex" "', argument " "2"" of type '" "iDynTree::JointIndex &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MovableJointImpl5_setIndex" "', argument " "2"" of type '" "iDynTree::JointIndex &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::JointIndex * >(argp2);
  (arg1)->setIndex(*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MovableJointImpl5_getIndex(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 5,5 > *arg1 = (iDynTree::MovableJointImpl< 5,5 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::JointIndex result;
  
  if (!SWIG_check_num_args("MovableJointImpl5_getIndex",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_5_5_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MovableJointImpl5_getIndex" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 5,5 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 5,5 > * >(argp1);
  result = (iDynTree::JointIndex)((iDynTree::MovableJointImpl< 5,5 > const *)arg1)->getIndex();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MovableJointImpl5_setPosCoordsOffset(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 5,5 > *arg1 = (iDynTree::MovableJointImpl< 5,5 > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("MovableJointImpl5_setPosCoordsOffset",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_5_5_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MovableJointImpl5_setPosCoordsOffset" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 5,5 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 5,5 > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MovableJointImpl5_setPosCoordsOffset" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  (arg1)->setPosCoordsOffset(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MovableJointImpl5_getPosCoordsOffset(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 5,5 > *arg1 = (iDynTree::MovableJointImpl< 5,5 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  size_t result;
  
  if (!SWIG_check_num_args("MovableJointImpl5_getPosCoordsOffset",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_5_5_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MovableJointImpl5_getPosCoordsOffset" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 5,5 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 5,5 > * >(argp1);
  result = ((iDynTree::MovableJointImpl< 5,5 > const *)arg1)->getPosCoordsOffset();
  _out = SWIG_From_size_t(static_cast< size_t >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MovableJointImpl5_setDOFsOffset(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 5,5 > *arg1 = (iDynTree::MovableJointImpl< 5,5 > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("MovableJointImpl5_setDOFsOffset",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_5_5_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MovableJointImpl5_setDOFsOffset" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 5,5 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 5,5 > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MovableJointImpl5_setDOFsOffset" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  (arg1)->setDOFsOffset(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MovableJointImpl5_getDOFsOffset(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 5,5 > *arg1 = (iDynTree::MovableJointImpl< 5,5 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  size_t result;
  
  if (!SWIG_check_num_args("MovableJointImpl5_getDOFsOffset",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_5_5_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MovableJointImpl5_getDOFsOffset" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 5,5 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 5,5 > * >(argp1);
  result = ((iDynTree::MovableJointImpl< 5,5 > const *)arg1)->getDOFsOffset();
  _out = SWIG_From_size_t(static_cast< size_t >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_MovableJointImpl6(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 6,6 > *arg1 = (iDynTree::MovableJointImpl< 6,6 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_MovableJointImpl6",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_6_6_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MovableJointImpl6" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 6,6 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 6,6 > * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MovableJointImpl6_getNrOfPosCoords(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 6,6 > *arg1 = (iDynTree::MovableJointImpl< 6,6 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("MovableJointImpl6_getNrOfPosCoords",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_6_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MovableJointImpl6_getNrOfPosCoords" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 6,6 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 6,6 > * >(argp1);
  result = (unsigned int)((iDynTree::MovableJointImpl< 6,6 > const *)arg1)->getNrOfPosCoords();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MovableJointImpl6_getNrOfDOFs(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 6,6 > *arg1 = (iDynTree::MovableJointImpl< 6,6 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("MovableJointImpl6_getNrOfDOFs",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_6_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MovableJointImpl6_getNrOfDOFs" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 6,6 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 6,6 > * >(argp1);
  result = (unsigned int)((iDynTree::MovableJointImpl< 6,6 > const *)arg1)->getNrOfDOFs();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MovableJointImpl6_setIndex(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 6,6 > *arg1 = (iDynTree::MovableJointImpl< 6,6 > *) 0 ;
  iDynTree::JointIndex *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("MovableJointImpl6_setIndex",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_6_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MovableJointImpl6_setIndex" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 6,6 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 6,6 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_int,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MovableJointImpl6_setIndex" "', argument " "2"" of type '" "iDynTree::JointIndex &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MovableJointImpl6_setIndex" "', argument " "2"" of type '" "iDynTree::JointIndex &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::JointIndex * >(argp2);
  (arg1)->setIndex(*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MovableJointImpl6_getIndex(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 6,6 > *arg1 = (iDynTree::MovableJointImpl< 6,6 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::JointIndex result;
  
  if (!SWIG_check_num_args("MovableJointImpl6_getIndex",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_6_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MovableJointImpl6_getIndex" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 6,6 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 6,6 > * >(argp1);
  result = (iDynTree::JointIndex)((iDynTree::MovableJointImpl< 6,6 > const *)arg1)->getIndex();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MovableJointImpl6_setPosCoordsOffset(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 6,6 > *arg1 = (iDynTree::MovableJointImpl< 6,6 > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("MovableJointImpl6_setPosCoordsOffset",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_6_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MovableJointImpl6_setPosCoordsOffset" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 6,6 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 6,6 > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MovableJointImpl6_setPosCoordsOffset" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  (arg1)->setPosCoordsOffset(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MovableJointImpl6_getPosCoordsOffset(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 6,6 > *arg1 = (iDynTree::MovableJointImpl< 6,6 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  size_t result;
  
  if (!SWIG_check_num_args("MovableJointImpl6_getPosCoordsOffset",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_6_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MovableJointImpl6_getPosCoordsOffset" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 6,6 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 6,6 > * >(argp1);
  result = ((iDynTree::MovableJointImpl< 6,6 > const *)arg1)->getPosCoordsOffset();
  _out = SWIG_From_size_t(static_cast< size_t >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MovableJointImpl6_setDOFsOffset(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 6,6 > *arg1 = (iDynTree::MovableJointImpl< 6,6 > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("MovableJointImpl6_setDOFsOffset",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_6_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MovableJointImpl6_setDOFsOffset" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 6,6 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 6,6 > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MovableJointImpl6_setDOFsOffset" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  (arg1)->setDOFsOffset(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MovableJointImpl6_getDOFsOffset(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 6,6 > *arg1 = (iDynTree::MovableJointImpl< 6,6 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  size_t result;
  
  if (!SWIG_check_num_args("MovableJointImpl6_getDOFsOffset",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_6_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MovableJointImpl6_getDOFsOffset" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 6,6 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 6,6 > * >(argp1);
  result = ((iDynTree::MovableJointImpl< 6,6 > const *)arg1)->getDOFsOffset();
  _out = SWIG_From_size_t(static_cast< size_t >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_RevoluteJoint(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RevoluteJoint *arg1 = (iDynTree::RevoluteJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_RevoluteJoint",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RevoluteJoint, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RevoluteJoint" "', argument " "1"" of type '" "iDynTree::RevoluteJoint *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RevoluteJoint * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RevoluteJoint_clone(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RevoluteJoint *arg1 = (iDynTree::RevoluteJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::IJoint *result = 0 ;
  
  if (!SWIG_check_num_args("RevoluteJoint_clone",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RevoluteJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RevoluteJoint_clone" "', argument " "1"" of type '" "iDynTree::RevoluteJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RevoluteJoint * >(argp1);
  result = (iDynTree::IJoint *)((iDynTree::RevoluteJoint const *)arg1)->clone();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__IJoint, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RevoluteJoint_setAttachedLinks(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RevoluteJoint *arg1 = (iDynTree::RevoluteJoint *) 0 ;
  iDynTree::LinkIndex arg2 ;
  iDynTree::LinkIndex arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("RevoluteJoint_setAttachedLinks",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RevoluteJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RevoluteJoint_setAttachedLinks" "', argument " "1"" of type '" "iDynTree::RevoluteJoint *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RevoluteJoint * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RevoluteJoint_setAttachedLinks" "', argument " "2"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg2 = static_cast< iDynTree::LinkIndex >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RevoluteJoint_setAttachedLinks" "', argument " "3"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg3 = static_cast< iDynTree::LinkIndex >(val3);
  (arg1)->setAttachedLinks(arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RevoluteJoint_setRestTransform(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RevoluteJoint *arg1 = (iDynTree::RevoluteJoint *) 0 ;
  iDynTree::Transform *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("RevoluteJoint_setRestTransform",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RevoluteJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RevoluteJoint_setRestTransform" "', argument " "1"" of type '" "iDynTree::RevoluteJoint *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RevoluteJoint * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Transform,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RevoluteJoint_setRestTransform" "', argument " "2"" of type '" "iDynTree::Transform const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RevoluteJoint_setRestTransform" "', argument " "2"" of type '" "iDynTree::Transform const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Transform * >(argp2);
  (arg1)->setRestTransform((iDynTree::Transform const &)*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RevoluteJoint_setAxis__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RevoluteJoint *arg1 = (iDynTree::RevoluteJoint *) 0 ;
  iDynTree::Axis *arg2 = 0 ;
  iDynTree::LinkIndex arg3 ;
  iDynTree::LinkIndex arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("RevoluteJoint_setAxis",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RevoluteJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RevoluteJoint_setAxis" "', argument " "1"" of type '" "iDynTree::RevoluteJoint *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RevoluteJoint * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Axis,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RevoluteJoint_setAxis" "', argument " "2"" of type '" "iDynTree::Axis const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RevoluteJoint_setAxis" "', argument " "2"" of type '" "iDynTree::Axis const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Axis * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RevoluteJoint_setAxis" "', argument " "3"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg3 = static_cast< iDynTree::LinkIndex >(val3);
  ecode4 = SWIG_AsVal_int(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RevoluteJoint_setAxis" "', argument " "4"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg4 = static_cast< iDynTree::LinkIndex >(val4);
  (arg1)->setAxis((iDynTree::Axis const &)*arg2,arg3,arg4);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RevoluteJoint_setAxis__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RevoluteJoint *arg1 = (iDynTree::RevoluteJoint *) 0 ;
  iDynTree::Axis *arg2 = 0 ;
  iDynTree::LinkIndex arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("RevoluteJoint_setAxis",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RevoluteJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RevoluteJoint_setAxis" "', argument " "1"" of type '" "iDynTree::RevoluteJoint *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RevoluteJoint * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Axis,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RevoluteJoint_setAxis" "', argument " "2"" of type '" "iDynTree::Axis const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RevoluteJoint_setAxis" "', argument " "2"" of type '" "iDynTree::Axis const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Axis * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RevoluteJoint_setAxis" "', argument " "3"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg3 = static_cast< iDynTree::LinkIndex >(val3);
  (arg1)->setAxis((iDynTree::Axis const &)*arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RevoluteJoint_setAxis__SWIG_2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RevoluteJoint *arg1 = (iDynTree::RevoluteJoint *) 0 ;
  iDynTree::Axis *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("RevoluteJoint_setAxis",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RevoluteJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RevoluteJoint_setAxis" "', argument " "1"" of type '" "iDynTree::RevoluteJoint *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RevoluteJoint * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Axis,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RevoluteJoint_setAxis" "', argument " "2"" of type '" "iDynTree::Axis const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RevoluteJoint_setAxis" "', argument " "2"" of type '" "iDynTree::Axis const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Axis * >(argp2);
  (arg1)->setAxis((iDynTree::Axis const &)*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RevoluteJoint_setAxis(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__RevoluteJoint, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Axis, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_RevoluteJoint_setAxis__SWIG_2(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__RevoluteJoint, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Axis, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_RevoluteJoint_setAxis__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__RevoluteJoint, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Axis, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_RevoluteJoint_setAxis__SWIG_0(resc,resv,argc,argv);
          }
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'RevoluteJoint_setAxis'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::RevoluteJoint::setAxis(iDynTree::Axis const &,iDynTree::LinkIndex const,iDynTree::LinkIndex const)\n"
    "    iDynTree::RevoluteJoint::setAxis(iDynTree::Axis const &,iDynTree::LinkIndex const)\n"
    "    iDynTree::RevoluteJoint::setAxis(iDynTree::Axis const &)\n");
  return 1;
}


int _wrap_RevoluteJoint_getFirstAttachedLink(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RevoluteJoint *arg1 = (iDynTree::RevoluteJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::LinkIndex result;
  
  if (!SWIG_check_num_args("RevoluteJoint_getFirstAttachedLink",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RevoluteJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RevoluteJoint_getFirstAttachedLink" "', argument " "1"" of type '" "iDynTree::RevoluteJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RevoluteJoint * >(argp1);
  result = (iDynTree::LinkIndex)((iDynTree::RevoluteJoint const *)arg1)->getFirstAttachedLink();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RevoluteJoint_getSecondAttachedLink(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RevoluteJoint *arg1 = (iDynTree::RevoluteJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::LinkIndex result;
  
  if (!SWIG_check_num_args("RevoluteJoint_getSecondAttachedLink",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RevoluteJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RevoluteJoint_getSecondAttachedLink" "', argument " "1"" of type '" "iDynTree::RevoluteJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RevoluteJoint * >(argp1);
  result = (iDynTree::LinkIndex)((iDynTree::RevoluteJoint const *)arg1)->getSecondAttachedLink();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RevoluteJoint_getAxis__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RevoluteJoint *arg1 = (iDynTree::RevoluteJoint *) 0 ;
  iDynTree::LinkIndex arg2 ;
  iDynTree::LinkIndex arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  iDynTree::Axis result;
  
  if (!SWIG_check_num_args("RevoluteJoint_getAxis",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RevoluteJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RevoluteJoint_getAxis" "', argument " "1"" of type '" "iDynTree::RevoluteJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RevoluteJoint * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RevoluteJoint_getAxis" "', argument " "2"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg2 = static_cast< iDynTree::LinkIndex >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RevoluteJoint_getAxis" "', argument " "3"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg3 = static_cast< iDynTree::LinkIndex >(val3);
  result = ((iDynTree::RevoluteJoint const *)arg1)->getAxis(arg2,arg3);
  _out = SWIG_NewPointerObj((new iDynTree::Axis(static_cast< const iDynTree::Axis& >(result))), SWIGTYPE_p_iDynTree__Axis, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RevoluteJoint_getAxis__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RevoluteJoint *arg1 = (iDynTree::RevoluteJoint *) 0 ;
  iDynTree::LinkIndex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::Axis result;
  
  if (!SWIG_check_num_args("RevoluteJoint_getAxis",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RevoluteJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RevoluteJoint_getAxis" "', argument " "1"" of type '" "iDynTree::RevoluteJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RevoluteJoint * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RevoluteJoint_getAxis" "', argument " "2"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg2 = static_cast< iDynTree::LinkIndex >(val2);
  result = ((iDynTree::RevoluteJoint const *)arg1)->getAxis(arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Axis(static_cast< const iDynTree::Axis& >(result))), SWIGTYPE_p_iDynTree__Axis, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RevoluteJoint_getAxis(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__RevoluteJoint, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_RevoluteJoint_getAxis__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__RevoluteJoint, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_RevoluteJoint_getAxis__SWIG_0(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'RevoluteJoint_getAxis'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::RevoluteJoint::getAxis(iDynTree::LinkIndex const,iDynTree::LinkIndex const) const\n"
    "    iDynTree::RevoluteJoint::getAxis(iDynTree::LinkIndex const) const\n");
  return 1;
}


int _wrap_RevoluteJoint_getRestTransform(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RevoluteJoint *arg1 = (iDynTree::RevoluteJoint *) 0 ;
  iDynTree::LinkIndex arg2 ;
  iDynTree::LinkIndex arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  iDynTree::Transform result;
  
  if (!SWIG_check_num_args("RevoluteJoint_getRestTransform",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RevoluteJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RevoluteJoint_getRestTransform" "', argument " "1"" of type '" "iDynTree::RevoluteJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RevoluteJoint * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RevoluteJoint_getRestTransform" "', argument " "2"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg2 = static_cast< iDynTree::LinkIndex >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RevoluteJoint_getRestTransform" "', argument " "3"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg3 = static_cast< iDynTree::LinkIndex >(val3);
  result = ((iDynTree::RevoluteJoint const *)arg1)->getRestTransform(arg2,arg3);
  _out = SWIG_NewPointerObj((new iDynTree::Transform(static_cast< const iDynTree::Transform& >(result))), SWIGTYPE_p_iDynTree__Transform, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RevoluteJoint_getTransform(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RevoluteJoint *arg1 = (iDynTree::RevoluteJoint *) 0 ;
  iDynTree::VectorDynSize *arg2 = 0 ;
  iDynTree::LinkIndex arg3 ;
  iDynTree::LinkIndex arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  mxArray * _out;
  iDynTree::Transform *result = 0 ;
  
  if (!SWIG_check_num_args("RevoluteJoint_getTransform",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RevoluteJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RevoluteJoint_getTransform" "', argument " "1"" of type '" "iDynTree::RevoluteJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RevoluteJoint * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RevoluteJoint_getTransform" "', argument " "2"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RevoluteJoint_getTransform" "', argument " "2"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::VectorDynSize * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RevoluteJoint_getTransform" "', argument " "3"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg3 = static_cast< iDynTree::LinkIndex >(val3);
  ecode4 = SWIG_AsVal_int(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RevoluteJoint_getTransform" "', argument " "4"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg4 = static_cast< iDynTree::LinkIndex >(val4);
  result = (iDynTree::Transform *) &((iDynTree::RevoluteJoint const *)arg1)->getTransform((iDynTree::VectorDynSize const &)*arg2,arg3,arg4);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Transform, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RevoluteJoint_getTransformDerivative(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RevoluteJoint *arg1 = (iDynTree::RevoluteJoint *) 0 ;
  iDynTree::VectorDynSize *arg2 = 0 ;
  iDynTree::LinkIndex arg3 ;
  iDynTree::LinkIndex arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  mxArray * _out;
  iDynTree::TransformDerivative result;
  
  if (!SWIG_check_num_args("RevoluteJoint_getTransformDerivative",argc,5,5,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RevoluteJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RevoluteJoint_getTransformDerivative" "', argument " "1"" of type '" "iDynTree::RevoluteJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RevoluteJoint * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RevoluteJoint_getTransformDerivative" "', argument " "2"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RevoluteJoint_getTransformDerivative" "', argument " "2"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::VectorDynSize * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RevoluteJoint_getTransformDerivative" "', argument " "3"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg3 = static_cast< iDynTree::LinkIndex >(val3);
  ecode4 = SWIG_AsVal_int(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RevoluteJoint_getTransformDerivative" "', argument " "4"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg4 = static_cast< iDynTree::LinkIndex >(val4);
  ecode5 = SWIG_AsVal_int(argv[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "RevoluteJoint_getTransformDerivative" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  result = ((iDynTree::RevoluteJoint const *)arg1)->getTransformDerivative((iDynTree::VectorDynSize const &)*arg2,arg3,arg4,arg5);
  _out = SWIG_NewPointerObj((new iDynTree::TransformDerivative(static_cast< const iDynTree::TransformDerivative& >(result))), SWIGTYPE_p_iDynTree__TransformDerivative, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RevoluteJoint_getMotionSubspaceVector__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RevoluteJoint *arg1 = (iDynTree::RevoluteJoint *) 0 ;
  int arg2 ;
  iDynTree::LinkIndex arg3 ;
  iDynTree::LinkIndex arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  mxArray * _out;
  iDynTree::SpatialMotionVector result;
  
  if (!SWIG_check_num_args("RevoluteJoint_getMotionSubspaceVector",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RevoluteJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RevoluteJoint_getMotionSubspaceVector" "', argument " "1"" of type '" "iDynTree::RevoluteJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RevoluteJoint * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RevoluteJoint_getMotionSubspaceVector" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RevoluteJoint_getMotionSubspaceVector" "', argument " "3"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg3 = static_cast< iDynTree::LinkIndex >(val3);
  ecode4 = SWIG_AsVal_int(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RevoluteJoint_getMotionSubspaceVector" "', argument " "4"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg4 = static_cast< iDynTree::LinkIndex >(val4);
  result = ((iDynTree::RevoluteJoint const *)arg1)->getMotionSubspaceVector(arg2,arg3,arg4);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialMotionVector(static_cast< const iDynTree::SpatialMotionVector& >(result))), SWIGTYPE_p_iDynTree__SpatialMotionVector, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RevoluteJoint_getMotionSubspaceVector__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RevoluteJoint *arg1 = (iDynTree::RevoluteJoint *) 0 ;
  int arg2 ;
  iDynTree::LinkIndex arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  iDynTree::SpatialMotionVector result;
  
  if (!SWIG_check_num_args("RevoluteJoint_getMotionSubspaceVector",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RevoluteJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RevoluteJoint_getMotionSubspaceVector" "', argument " "1"" of type '" "iDynTree::RevoluteJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RevoluteJoint * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RevoluteJoint_getMotionSubspaceVector" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RevoluteJoint_getMotionSubspaceVector" "', argument " "3"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg3 = static_cast< iDynTree::LinkIndex >(val3);
  result = ((iDynTree::RevoluteJoint const *)arg1)->getMotionSubspaceVector(arg2,arg3);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialMotionVector(static_cast< const iDynTree::SpatialMotionVector& >(result))), SWIGTYPE_p_iDynTree__SpatialMotionVector, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RevoluteJoint_getMotionSubspaceVector(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__RevoluteJoint, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_RevoluteJoint_getMotionSubspaceVector__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__RevoluteJoint, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_RevoluteJoint_getMotionSubspaceVector__SWIG_0(resc,resv,argc,argv);
          }
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'RevoluteJoint_getMotionSubspaceVector'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::RevoluteJoint::getMotionSubspaceVector(int,iDynTree::LinkIndex const,iDynTree::LinkIndex const) const\n"
    "    iDynTree::RevoluteJoint::getMotionSubspaceVector(int,iDynTree::LinkIndex const) const\n");
  return 1;
}


int _wrap_RevoluteJoint_computeChildPosVelAcc(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RevoluteJoint *arg1 = (iDynTree::RevoluteJoint *) 0 ;
  iDynTree::VectorDynSize *arg2 = 0 ;
  iDynTree::VectorDynSize *arg3 = 0 ;
  iDynTree::VectorDynSize *arg4 = 0 ;
  iDynTree::LinkPositions *arg5 = 0 ;
  iDynTree::LinkVelArray *arg6 = 0 ;
  iDynTree::LinkAccArray *arg7 = 0 ;
  iDynTree::LinkIndex arg8 ;
  iDynTree::LinkIndex arg9 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  int val9 ;
  int ecode9 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("RevoluteJoint_computeChildPosVelAcc",argc,9,9,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RevoluteJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RevoluteJoint_computeChildPosVelAcc" "', argument " "1"" of type '" "iDynTree::RevoluteJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RevoluteJoint * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RevoluteJoint_computeChildPosVelAcc" "', argument " "2"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RevoluteJoint_computeChildPosVelAcc" "', argument " "2"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::VectorDynSize * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RevoluteJoint_computeChildPosVelAcc" "', argument " "3"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RevoluteJoint_computeChildPosVelAcc" "', argument " "3"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::VectorDynSize * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "RevoluteJoint_computeChildPosVelAcc" "', argument " "4"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RevoluteJoint_computeChildPosVelAcc" "', argument " "4"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  arg4 = reinterpret_cast< iDynTree::VectorDynSize * >(argp4);
  res5 = SWIG_ConvertPtr(argv[4], &argp5, SWIGTYPE_p_iDynTree__LinkPositions,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "RevoluteJoint_computeChildPosVelAcc" "', argument " "5"" of type '" "iDynTree::LinkPositions &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RevoluteJoint_computeChildPosVelAcc" "', argument " "5"" of type '" "iDynTree::LinkPositions &""'"); 
  }
  arg5 = reinterpret_cast< iDynTree::LinkPositions * >(argp5);
  res6 = SWIG_ConvertPtr(argv[5], &argp6, SWIGTYPE_p_iDynTree__LinkVelArray,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "RevoluteJoint_computeChildPosVelAcc" "', argument " "6"" of type '" "iDynTree::LinkVelArray &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RevoluteJoint_computeChildPosVelAcc" "', argument " "6"" of type '" "iDynTree::LinkVelArray &""'"); 
  }
  arg6 = reinterpret_cast< iDynTree::LinkVelArray * >(argp6);
  res7 = SWIG_ConvertPtr(argv[6], &argp7, SWIGTYPE_p_iDynTree__LinkAccArray,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "RevoluteJoint_computeChildPosVelAcc" "', argument " "7"" of type '" "iDynTree::LinkAccArray &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RevoluteJoint_computeChildPosVelAcc" "', argument " "7"" of type '" "iDynTree::LinkAccArray &""'"); 
  }
  arg7 = reinterpret_cast< iDynTree::LinkAccArray * >(argp7);
  ecode8 = SWIG_AsVal_int(argv[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "RevoluteJoint_computeChildPosVelAcc" "', argument " "8"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg8 = static_cast< iDynTree::LinkIndex >(val8);
  ecode9 = SWIG_AsVal_int(argv[8], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "RevoluteJoint_computeChildPosVelAcc" "', argument " "9"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg9 = static_cast< iDynTree::LinkIndex >(val9);
  ((iDynTree::RevoluteJoint const *)arg1)->computeChildPosVelAcc((iDynTree::VectorDynSize const &)*arg2,(iDynTree::VectorDynSize const &)*arg3,(iDynTree::VectorDynSize const &)*arg4,*arg5,*arg6,*arg7,arg8,arg9);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RevoluteJoint_computeChildVel(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RevoluteJoint *arg1 = (iDynTree::RevoluteJoint *) 0 ;
  iDynTree::VectorDynSize *arg2 = 0 ;
  iDynTree::VectorDynSize *arg3 = 0 ;
  iDynTree::LinkVelArray *arg4 = 0 ;
  iDynTree::LinkIndex arg5 ;
  iDynTree::LinkIndex arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("RevoluteJoint_computeChildVel",argc,6,6,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RevoluteJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RevoluteJoint_computeChildVel" "', argument " "1"" of type '" "iDynTree::RevoluteJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RevoluteJoint * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RevoluteJoint_computeChildVel" "', argument " "2"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RevoluteJoint_computeChildVel" "', argument " "2"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::VectorDynSize * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RevoluteJoint_computeChildVel" "', argument " "3"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RevoluteJoint_computeChildVel" "', argument " "3"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::VectorDynSize * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__LinkVelArray,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "RevoluteJoint_computeChildVel" "', argument " "4"" of type '" "iDynTree::LinkVelArray &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RevoluteJoint_computeChildVel" "', argument " "4"" of type '" "iDynTree::LinkVelArray &""'"); 
  }
  arg4 = reinterpret_cast< iDynTree::LinkVelArray * >(argp4);
  ecode5 = SWIG_AsVal_int(argv[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "RevoluteJoint_computeChildVel" "', argument " "5"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg5 = static_cast< iDynTree::LinkIndex >(val5);
  ecode6 = SWIG_AsVal_int(argv[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "RevoluteJoint_computeChildVel" "', argument " "6"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg6 = static_cast< iDynTree::LinkIndex >(val6);
  ((iDynTree::RevoluteJoint const *)arg1)->computeChildVel((iDynTree::VectorDynSize const &)*arg2,(iDynTree::VectorDynSize const &)*arg3,*arg4,arg5,arg6);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RevoluteJoint_computeChildVelAcc(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RevoluteJoint *arg1 = (iDynTree::RevoluteJoint *) 0 ;
  iDynTree::VectorDynSize *arg2 = 0 ;
  iDynTree::VectorDynSize *arg3 = 0 ;
  iDynTree::VectorDynSize *arg4 = 0 ;
  iDynTree::LinkVelArray *arg5 = 0 ;
  iDynTree::LinkAccArray *arg6 = 0 ;
  iDynTree::LinkIndex arg7 ;
  iDynTree::LinkIndex arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("RevoluteJoint_computeChildVelAcc",argc,8,8,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RevoluteJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RevoluteJoint_computeChildVelAcc" "', argument " "1"" of type '" "iDynTree::RevoluteJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RevoluteJoint * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RevoluteJoint_computeChildVelAcc" "', argument " "2"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RevoluteJoint_computeChildVelAcc" "', argument " "2"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::VectorDynSize * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RevoluteJoint_computeChildVelAcc" "', argument " "3"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RevoluteJoint_computeChildVelAcc" "', argument " "3"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::VectorDynSize * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "RevoluteJoint_computeChildVelAcc" "', argument " "4"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RevoluteJoint_computeChildVelAcc" "', argument " "4"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  arg4 = reinterpret_cast< iDynTree::VectorDynSize * >(argp4);
  res5 = SWIG_ConvertPtr(argv[4], &argp5, SWIGTYPE_p_iDynTree__LinkVelArray,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "RevoluteJoint_computeChildVelAcc" "', argument " "5"" of type '" "iDynTree::LinkVelArray &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RevoluteJoint_computeChildVelAcc" "', argument " "5"" of type '" "iDynTree::LinkVelArray &""'"); 
  }
  arg5 = reinterpret_cast< iDynTree::LinkVelArray * >(argp5);
  res6 = SWIG_ConvertPtr(argv[5], &argp6, SWIGTYPE_p_iDynTree__LinkAccArray,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "RevoluteJoint_computeChildVelAcc" "', argument " "6"" of type '" "iDynTree::LinkAccArray &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RevoluteJoint_computeChildVelAcc" "', argument " "6"" of type '" "iDynTree::LinkAccArray &""'"); 
  }
  arg6 = reinterpret_cast< iDynTree::LinkAccArray * >(argp6);
  ecode7 = SWIG_AsVal_int(argv[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "RevoluteJoint_computeChildVelAcc" "', argument " "7"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg7 = static_cast< iDynTree::LinkIndex >(val7);
  ecode8 = SWIG_AsVal_int(argv[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "RevoluteJoint_computeChildVelAcc" "', argument " "8"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg8 = static_cast< iDynTree::LinkIndex >(val8);
  ((iDynTree::RevoluteJoint const *)arg1)->computeChildVelAcc((iDynTree::VectorDynSize const &)*arg2,(iDynTree::VectorDynSize const &)*arg3,(iDynTree::VectorDynSize const &)*arg4,*arg5,*arg6,arg7,arg8);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RevoluteJoint_computeChildAcc(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RevoluteJoint *arg1 = (iDynTree::RevoluteJoint *) 0 ;
  iDynTree::VectorDynSize *arg2 = 0 ;
  iDynTree::VectorDynSize *arg3 = 0 ;
  iDynTree::LinkVelArray *arg4 = 0 ;
  iDynTree::VectorDynSize *arg5 = 0 ;
  iDynTree::LinkAccArray *arg6 = 0 ;
  iDynTree::LinkIndex arg7 ;
  iDynTree::LinkIndex arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("RevoluteJoint_computeChildAcc",argc,8,8,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RevoluteJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RevoluteJoint_computeChildAcc" "', argument " "1"" of type '" "iDynTree::RevoluteJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RevoluteJoint * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RevoluteJoint_computeChildAcc" "', argument " "2"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RevoluteJoint_computeChildAcc" "', argument " "2"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::VectorDynSize * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RevoluteJoint_computeChildAcc" "', argument " "3"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RevoluteJoint_computeChildAcc" "', argument " "3"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::VectorDynSize * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__LinkVelArray,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "RevoluteJoint_computeChildAcc" "', argument " "4"" of type '" "iDynTree::LinkVelArray const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RevoluteJoint_computeChildAcc" "', argument " "4"" of type '" "iDynTree::LinkVelArray const &""'"); 
  }
  arg4 = reinterpret_cast< iDynTree::LinkVelArray * >(argp4);
  res5 = SWIG_ConvertPtr(argv[4], &argp5, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "RevoluteJoint_computeChildAcc" "', argument " "5"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RevoluteJoint_computeChildAcc" "', argument " "5"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  arg5 = reinterpret_cast< iDynTree::VectorDynSize * >(argp5);
  res6 = SWIG_ConvertPtr(argv[5], &argp6, SWIGTYPE_p_iDynTree__LinkAccArray,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "RevoluteJoint_computeChildAcc" "', argument " "6"" of type '" "iDynTree::LinkAccArray &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RevoluteJoint_computeChildAcc" "', argument " "6"" of type '" "iDynTree::LinkAccArray &""'"); 
  }
  arg6 = reinterpret_cast< iDynTree::LinkAccArray * >(argp6);
  ecode7 = SWIG_AsVal_int(argv[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "RevoluteJoint_computeChildAcc" "', argument " "7"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg7 = static_cast< iDynTree::LinkIndex >(val7);
  ecode8 = SWIG_AsVal_int(argv[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "RevoluteJoint_computeChildAcc" "', argument " "8"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg8 = static_cast< iDynTree::LinkIndex >(val8);
  ((iDynTree::RevoluteJoint const *)arg1)->computeChildAcc((iDynTree::VectorDynSize const &)*arg2,(iDynTree::VectorDynSize const &)*arg3,(iDynTree::LinkVelArray const &)*arg4,(iDynTree::VectorDynSize const &)*arg5,*arg6,arg7,arg8);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RevoluteJoint_computeChildBiasAcc(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RevoluteJoint *arg1 = (iDynTree::RevoluteJoint *) 0 ;
  iDynTree::VectorDynSize *arg2 = 0 ;
  iDynTree::VectorDynSize *arg3 = 0 ;
  iDynTree::LinkVelArray *arg4 = 0 ;
  iDynTree::LinkAccArray *arg5 = 0 ;
  iDynTree::LinkIndex arg6 ;
  iDynTree::LinkIndex arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("RevoluteJoint_computeChildBiasAcc",argc,7,7,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RevoluteJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RevoluteJoint_computeChildBiasAcc" "', argument " "1"" of type '" "iDynTree::RevoluteJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RevoluteJoint * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RevoluteJoint_computeChildBiasAcc" "', argument " "2"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RevoluteJoint_computeChildBiasAcc" "', argument " "2"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::VectorDynSize * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RevoluteJoint_computeChildBiasAcc" "', argument " "3"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RevoluteJoint_computeChildBiasAcc" "', argument " "3"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::VectorDynSize * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__LinkVelArray,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "RevoluteJoint_computeChildBiasAcc" "', argument " "4"" of type '" "iDynTree::LinkVelArray const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RevoluteJoint_computeChildBiasAcc" "', argument " "4"" of type '" "iDynTree::LinkVelArray const &""'"); 
  }
  arg4 = reinterpret_cast< iDynTree::LinkVelArray * >(argp4);
  res5 = SWIG_ConvertPtr(argv[4], &argp5, SWIGTYPE_p_iDynTree__LinkAccArray,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "RevoluteJoint_computeChildBiasAcc" "', argument " "5"" of type '" "iDynTree::LinkAccArray &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RevoluteJoint_computeChildBiasAcc" "', argument " "5"" of type '" "iDynTree::LinkAccArray &""'"); 
  }
  arg5 = reinterpret_cast< iDynTree::LinkAccArray * >(argp5);
  ecode6 = SWIG_AsVal_int(argv[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "RevoluteJoint_computeChildBiasAcc" "', argument " "6"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg6 = static_cast< iDynTree::LinkIndex >(val6);
  ecode7 = SWIG_AsVal_int(argv[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "RevoluteJoint_computeChildBiasAcc" "', argument " "7"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg7 = static_cast< iDynTree::LinkIndex >(val7);
  ((iDynTree::RevoluteJoint const *)arg1)->computeChildBiasAcc((iDynTree::VectorDynSize const &)*arg2,(iDynTree::VectorDynSize const &)*arg3,(iDynTree::LinkVelArray const &)*arg4,*arg5,arg6,arg7);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RevoluteJoint_computeJointTorque(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RevoluteJoint *arg1 = (iDynTree::RevoluteJoint *) 0 ;
  iDynTree::VectorDynSize *arg2 = 0 ;
  iDynTree::Wrench *arg3 = 0 ;
  iDynTree::LinkIndex arg4 ;
  iDynTree::LinkIndex arg5 ;
  iDynTree::VectorDynSize *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("RevoluteJoint_computeJointTorque",argc,6,6,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RevoluteJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RevoluteJoint_computeJointTorque" "', argument " "1"" of type '" "iDynTree::RevoluteJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RevoluteJoint * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RevoluteJoint_computeJointTorque" "', argument " "2"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RevoluteJoint_computeJointTorque" "', argument " "2"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::VectorDynSize * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__Wrench,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RevoluteJoint_computeJointTorque" "', argument " "3"" of type '" "iDynTree::Wrench const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RevoluteJoint_computeJointTorque" "', argument " "3"" of type '" "iDynTree::Wrench const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::Wrench * >(argp3);
  ecode4 = SWIG_AsVal_int(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RevoluteJoint_computeJointTorque" "', argument " "4"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg4 = static_cast< iDynTree::LinkIndex >(val4);
  ecode5 = SWIG_AsVal_int(argv[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "RevoluteJoint_computeJointTorque" "', argument " "5"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg5 = static_cast< iDynTree::LinkIndex >(val5);
  res6 = SWIG_ConvertPtr(argv[5], &argp6, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "RevoluteJoint_computeJointTorque" "', argument " "6"" of type '" "iDynTree::VectorDynSize &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RevoluteJoint_computeJointTorque" "', argument " "6"" of type '" "iDynTree::VectorDynSize &""'"); 
  }
  arg6 = reinterpret_cast< iDynTree::VectorDynSize * >(argp6);
  ((iDynTree::RevoluteJoint const *)arg1)->computeJointTorque((iDynTree::VectorDynSize const &)*arg2,(iDynTree::Wrench const &)*arg3,arg4,arg5,*arg6);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RevoluteJoint_hasPosLimits(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RevoluteJoint *arg1 = (iDynTree::RevoluteJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("RevoluteJoint_hasPosLimits",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RevoluteJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RevoluteJoint_hasPosLimits" "', argument " "1"" of type '" "iDynTree::RevoluteJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RevoluteJoint * >(argp1);
  result = (bool)((iDynTree::RevoluteJoint const *)arg1)->hasPosLimits();
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RevoluteJoint_enablePosLimits(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RevoluteJoint *arg1 = (iDynTree::RevoluteJoint *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("RevoluteJoint_enablePosLimits",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RevoluteJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RevoluteJoint_enablePosLimits" "', argument " "1"" of type '" "iDynTree::RevoluteJoint *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RevoluteJoint * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RevoluteJoint_enablePosLimits" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = (bool)(arg1)->enablePosLimits(arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RevoluteJoint_getPosLimits(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RevoluteJoint *arg1 = (iDynTree::RevoluteJoint *) 0 ;
  size_t arg2 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("RevoluteJoint_getPosLimits",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RevoluteJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RevoluteJoint_getPosLimits" "', argument " "1"" of type '" "iDynTree::RevoluteJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RevoluteJoint * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RevoluteJoint_getPosLimits" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RevoluteJoint_getPosLimits" "', argument " "3"" of type '" "double &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RevoluteJoint_getPosLimits" "', argument " "3"" of type '" "double &""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "RevoluteJoint_getPosLimits" "', argument " "4"" of type '" "double &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RevoluteJoint_getPosLimits" "', argument " "4"" of type '" "double &""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  result = (bool)((iDynTree::RevoluteJoint const *)arg1)->getPosLimits(arg2,*arg3,*arg4);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RevoluteJoint_getMinPosLimit(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RevoluteJoint *arg1 = (iDynTree::RevoluteJoint *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("RevoluteJoint_getMinPosLimit",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RevoluteJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RevoluteJoint_getMinPosLimit" "', argument " "1"" of type '" "iDynTree::RevoluteJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RevoluteJoint * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RevoluteJoint_getMinPosLimit" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (double)((iDynTree::RevoluteJoint const *)arg1)->getMinPosLimit(arg2);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RevoluteJoint_getMaxPosLimit(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RevoluteJoint *arg1 = (iDynTree::RevoluteJoint *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("RevoluteJoint_getMaxPosLimit",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RevoluteJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RevoluteJoint_getMaxPosLimit" "', argument " "1"" of type '" "iDynTree::RevoluteJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RevoluteJoint * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RevoluteJoint_getMaxPosLimit" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (double)((iDynTree::RevoluteJoint const *)arg1)->getMaxPosLimit(arg2);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RevoluteJoint_setPosLimits(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RevoluteJoint *arg1 = (iDynTree::RevoluteJoint *) 0 ;
  size_t arg2 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("RevoluteJoint_setPosLimits",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RevoluteJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RevoluteJoint_setPosLimits" "', argument " "1"" of type '" "iDynTree::RevoluteJoint *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RevoluteJoint * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RevoluteJoint_setPosLimits" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RevoluteJoint_setPosLimits" "', argument " "3"" of type '" "double &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RevoluteJoint_setPosLimits" "', argument " "3"" of type '" "double &""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "RevoluteJoint_setPosLimits" "', argument " "4"" of type '" "double &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RevoluteJoint_setPosLimits" "', argument " "4"" of type '" "double &""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  result = (bool)(arg1)->setPosLimits(arg2,*arg3,*arg4);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Traversal(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::Traversal *result = 0 ;
  
  if (!SWIG_check_num_args("new_Traversal",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::Traversal *)new iDynTree::Traversal();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Traversal, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_Traversal(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Traversal *arg1 = (iDynTree::Traversal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_Traversal",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Traversal, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Traversal" "', argument " "1"" of type '" "iDynTree::Traversal *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Traversal * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Traversal_getNrOfVisitedLinks(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Traversal *arg1 = (iDynTree::Traversal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("Traversal_getNrOfVisitedLinks",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Traversal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Traversal_getNrOfVisitedLinks" "', argument " "1"" of type '" "iDynTree::Traversal const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Traversal * >(argp1);
  result = (unsigned int)((iDynTree::Traversal const *)arg1)->getNrOfVisitedLinks();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Traversal_getLink(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Traversal *arg1 = (iDynTree::Traversal *) 0 ;
  iDynTree::TraversalIndex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::Link *result = 0 ;
  
  if (!SWIG_check_num_args("Traversal_getLink",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Traversal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Traversal_getLink" "', argument " "1"" of type '" "iDynTree::Traversal const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Traversal * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Traversal_getLink" "', argument " "2"" of type '" "iDynTree::TraversalIndex""'");
  } 
  arg2 = static_cast< iDynTree::TraversalIndex >(val2);
  result = (iDynTree::Link *)((iDynTree::Traversal const *)arg1)->getLink(arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Link, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Traversal_getBaseLink(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Traversal *arg1 = (iDynTree::Traversal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Link *result = 0 ;
  
  if (!SWIG_check_num_args("Traversal_getBaseLink",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Traversal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Traversal_getBaseLink" "', argument " "1"" of type '" "iDynTree::Traversal const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Traversal * >(argp1);
  result = (iDynTree::Link *)((iDynTree::Traversal const *)arg1)->getBaseLink();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Link, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Traversal_getParentLink(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Traversal *arg1 = (iDynTree::Traversal *) 0 ;
  iDynTree::TraversalIndex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::Link *result = 0 ;
  
  if (!SWIG_check_num_args("Traversal_getParentLink",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Traversal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Traversal_getParentLink" "', argument " "1"" of type '" "iDynTree::Traversal const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Traversal * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Traversal_getParentLink" "', argument " "2"" of type '" "iDynTree::TraversalIndex""'");
  } 
  arg2 = static_cast< iDynTree::TraversalIndex >(val2);
  result = (iDynTree::Link *)((iDynTree::Traversal const *)arg1)->getParentLink(arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Link, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Traversal_getParentJoint(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Traversal *arg1 = (iDynTree::Traversal *) 0 ;
  iDynTree::TraversalIndex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::IJoint *result = 0 ;
  
  if (!SWIG_check_num_args("Traversal_getParentJoint",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Traversal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Traversal_getParentJoint" "', argument " "1"" of type '" "iDynTree::Traversal const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Traversal * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Traversal_getParentJoint" "', argument " "2"" of type '" "iDynTree::TraversalIndex""'");
  } 
  arg2 = static_cast< iDynTree::TraversalIndex >(val2);
  result = (iDynTree::IJoint *)((iDynTree::Traversal const *)arg1)->getParentJoint(arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__IJoint, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Traversal_getParentLinkFromLinkIndex(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Traversal *arg1 = (iDynTree::Traversal *) 0 ;
  iDynTree::LinkIndex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::Link *result = 0 ;
  
  if (!SWIG_check_num_args("Traversal_getParentLinkFromLinkIndex",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Traversal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Traversal_getParentLinkFromLinkIndex" "', argument " "1"" of type '" "iDynTree::Traversal const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Traversal * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Traversal_getParentLinkFromLinkIndex" "', argument " "2"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg2 = static_cast< iDynTree::LinkIndex >(val2);
  result = (iDynTree::Link *)((iDynTree::Traversal const *)arg1)->getParentLinkFromLinkIndex(arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Link, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Traversal_getParentJointFromLinkIndex(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Traversal *arg1 = (iDynTree::Traversal *) 0 ;
  iDynTree::LinkIndex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::IJoint *result = 0 ;
  
  if (!SWIG_check_num_args("Traversal_getParentJointFromLinkIndex",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Traversal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Traversal_getParentJointFromLinkIndex" "', argument " "1"" of type '" "iDynTree::Traversal const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Traversal * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Traversal_getParentJointFromLinkIndex" "', argument " "2"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg2 = static_cast< iDynTree::LinkIndex >(val2);
  result = (iDynTree::IJoint *)((iDynTree::Traversal const *)arg1)->getParentJointFromLinkIndex(arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__IJoint, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Traversal_getTraversalIndexFromLinkIndex(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Traversal *arg1 = (iDynTree::Traversal *) 0 ;
  iDynTree::LinkIndex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::TraversalIndex result;
  
  if (!SWIG_check_num_args("Traversal_getTraversalIndexFromLinkIndex",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Traversal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Traversal_getTraversalIndexFromLinkIndex" "', argument " "1"" of type '" "iDynTree::Traversal const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Traversal * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Traversal_getTraversalIndexFromLinkIndex" "', argument " "2"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg2 = static_cast< iDynTree::LinkIndex >(val2);
  result = (iDynTree::TraversalIndex)((iDynTree::Traversal const *)arg1)->getTraversalIndexFromLinkIndex(arg2);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Traversal_reset__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Traversal *arg1 = (iDynTree::Traversal *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("Traversal_reset",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Traversal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Traversal_reset" "', argument " "1"" of type '" "iDynTree::Traversal *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Traversal * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Traversal_reset" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (bool)(arg1)->reset(arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Traversal_reset__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Traversal *arg1 = (iDynTree::Traversal *) 0 ;
  iDynTree::Model *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("Traversal_reset",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Traversal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Traversal_reset" "', argument " "1"" of type '" "iDynTree::Traversal *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Traversal * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Traversal_reset" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Traversal_reset" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Model * >(argp2);
  result = (bool)(arg1)->reset((iDynTree::Model const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Traversal_reset(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Traversal, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Model, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Traversal_reset__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Traversal, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Traversal_reset__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Traversal_reset'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::Traversal::reset(unsigned int const)\n"
    "    iDynTree::Traversal::reset(iDynTree::Model const &)\n");
  return 1;
}


int _wrap_Traversal_addTraversalBase(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Traversal *arg1 = (iDynTree::Traversal *) 0 ;
  iDynTree::Link *arg2 = (iDynTree::Link *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("Traversal_addTraversalBase",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Traversal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Traversal_addTraversalBase" "', argument " "1"" of type '" "iDynTree::Traversal *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Traversal * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_iDynTree__Link, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Traversal_addTraversalBase" "', argument " "2"" of type '" "iDynTree::Link const *""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Link * >(argp2);
  result = (bool)(arg1)->addTraversalBase((iDynTree::Link const *)arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Traversal_addTraversalElement(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Traversal *arg1 = (iDynTree::Traversal *) 0 ;
  iDynTree::Link *arg2 = (iDynTree::Link *) 0 ;
  iDynTree::IJoint *arg3 = (iDynTree::IJoint *) 0 ;
  iDynTree::Link *arg4 = (iDynTree::Link *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("Traversal_addTraversalElement",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Traversal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Traversal_addTraversalElement" "', argument " "1"" of type '" "iDynTree::Traversal *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Traversal * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_iDynTree__Link, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Traversal_addTraversalElement" "', argument " "2"" of type '" "iDynTree::Link const *""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Link * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3,SWIGTYPE_p_iDynTree__IJoint, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Traversal_addTraversalElement" "', argument " "3"" of type '" "iDynTree::IJoint const *""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::IJoint * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4,SWIGTYPE_p_iDynTree__Link, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Traversal_addTraversalElement" "', argument " "4"" of type '" "iDynTree::Link const *""'"); 
  }
  arg4 = reinterpret_cast< iDynTree::Link * >(argp4);
  result = (bool)(arg1)->addTraversalElement((iDynTree::Link const *)arg2,(iDynTree::IJoint const *)arg3,(iDynTree::Link const *)arg4);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Traversal_isParentOf(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Traversal *arg1 = (iDynTree::Traversal *) 0 ;
  iDynTree::LinkIndex arg2 ;
  iDynTree::LinkIndex arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("Traversal_isParentOf",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Traversal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Traversal_isParentOf" "', argument " "1"" of type '" "iDynTree::Traversal const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Traversal * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Traversal_isParentOf" "', argument " "2"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg2 = static_cast< iDynTree::LinkIndex >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Traversal_isParentOf" "', argument " "3"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg3 = static_cast< iDynTree::LinkIndex >(val3);
  result = (bool)((iDynTree::Traversal const *)arg1)->isParentOf(arg2,arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Traversal_getChildLinkIndexFromJointIndex(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Traversal *arg1 = (iDynTree::Traversal *) 0 ;
  iDynTree::Model *arg2 = 0 ;
  iDynTree::JointIndex arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  iDynTree::LinkIndex result;
  
  if (!SWIG_check_num_args("Traversal_getChildLinkIndexFromJointIndex",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Traversal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Traversal_getChildLinkIndexFromJointIndex" "', argument " "1"" of type '" "iDynTree::Traversal const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Traversal * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Traversal_getChildLinkIndexFromJointIndex" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Traversal_getChildLinkIndexFromJointIndex" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Model * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Traversal_getChildLinkIndexFromJointIndex" "', argument " "3"" of type '" "iDynTree::JointIndex""'");
  } 
  arg3 = static_cast< iDynTree::JointIndex >(val3);
  result = (iDynTree::LinkIndex)((iDynTree::Traversal const *)arg1)->getChildLinkIndexFromJointIndex((iDynTree::Model const &)*arg2,arg3);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Traversal_toString(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Traversal *arg1 = (iDynTree::Traversal *) 0 ;
  iDynTree::Model *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("Traversal_toString",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Traversal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Traversal_toString" "', argument " "1"" of type '" "iDynTree::Traversal const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Traversal * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Traversal_toString" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Traversal_toString" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Model * >(argp2);
  result = ((iDynTree::Traversal const *)arg1)->toString((iDynTree::Model const &)*arg2);
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_SolidShape(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SolidShape *arg1 = (iDynTree::SolidShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_SolidShape",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SolidShape, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SolidShape" "', argument " "1"" of type '" "iDynTree::SolidShape *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SolidShape * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SolidShape_clone(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SolidShape *arg1 = (iDynTree::SolidShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::SolidShape *result = 0 ;
  
  if (!SWIG_check_num_args("SolidShape_clone",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SolidShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolidShape_clone" "', argument " "1"" of type '" "iDynTree::SolidShape *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SolidShape * >(argp1);
  result = (iDynTree::SolidShape *)(arg1)->clone();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SolidShape, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SolidShape_name_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SolidShape *arg1 = (iDynTree::SolidShape *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("SolidShape_name_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SolidShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolidShape_name_set" "', argument " "1"" of type '" "iDynTree::SolidShape *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SolidShape * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SolidShape_name_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SolidShape_name_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->name = *arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_SolidShape_name_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SolidShape *arg1 = (iDynTree::SolidShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string *result = 0 ;
  
  if (!SWIG_check_num_args("SolidShape_name_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SolidShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolidShape_name_get" "', argument " "1"" of type '" "iDynTree::SolidShape *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SolidShape * >(argp1);
  result = (std::string *) & ((arg1)->name);
  _out = SWIG_From_std_string(static_cast< std::string >(*result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SolidShape_link_H_geometry_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SolidShape *arg1 = (iDynTree::SolidShape *) 0 ;
  iDynTree::Transform *arg2 = (iDynTree::Transform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("SolidShape_link_H_geometry_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SolidShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolidShape_link_H_geometry_set" "', argument " "1"" of type '" "iDynTree::SolidShape *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SolidShape * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_iDynTree__Transform, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SolidShape_link_H_geometry_set" "', argument " "2"" of type '" "iDynTree::Transform *""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Transform * >(argp2);
  if (arg1) (arg1)->link_H_geometry = *arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SolidShape_link_H_geometry_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SolidShape *arg1 = (iDynTree::SolidShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Transform *result = 0 ;
  
  if (!SWIG_check_num_args("SolidShape_link_H_geometry_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SolidShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolidShape_link_H_geometry_get" "', argument " "1"" of type '" "iDynTree::SolidShape *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SolidShape * >(argp1);
  result = (iDynTree::Transform *)& ((arg1)->link_H_geometry);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Transform, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SolidShape_material_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SolidShape *arg1 = (iDynTree::SolidShape *) 0 ;
  iDynTree::Vector4 *arg2 = (iDynTree::Vector4 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("SolidShape_material_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SolidShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolidShape_material_set" "', argument " "1"" of type '" "iDynTree::SolidShape *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SolidShape * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_iDynTree__VectorFixSizeT_4_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SolidShape_material_set" "', argument " "2"" of type '" "iDynTree::Vector4 *""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Vector4 * >(argp2);
  if (arg1) (arg1)->material = *arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SolidShape_material_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SolidShape *arg1 = (iDynTree::SolidShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Vector4 *result = 0 ;
  
  if (!SWIG_check_num_args("SolidShape_material_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SolidShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolidShape_material_get" "', argument " "1"" of type '" "iDynTree::SolidShape *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SolidShape * >(argp1);
  result = (iDynTree::Vector4 *)& ((arg1)->material);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__VectorFixSizeT_4_t, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SolidShape_isSphere(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SolidShape *arg1 = (iDynTree::SolidShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("SolidShape_isSphere",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SolidShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolidShape_isSphere" "', argument " "1"" of type '" "iDynTree::SolidShape const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SolidShape * >(argp1);
  result = (bool)((iDynTree::SolidShape const *)arg1)->isSphere();
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SolidShape_isBox(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SolidShape *arg1 = (iDynTree::SolidShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("SolidShape_isBox",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SolidShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolidShape_isBox" "', argument " "1"" of type '" "iDynTree::SolidShape const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SolidShape * >(argp1);
  result = (bool)((iDynTree::SolidShape const *)arg1)->isBox();
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SolidShape_isCylinder(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SolidShape *arg1 = (iDynTree::SolidShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("SolidShape_isCylinder",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SolidShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolidShape_isCylinder" "', argument " "1"" of type '" "iDynTree::SolidShape const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SolidShape * >(argp1);
  result = (bool)((iDynTree::SolidShape const *)arg1)->isCylinder();
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SolidShape_isExternalMesh(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SolidShape *arg1 = (iDynTree::SolidShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("SolidShape_isExternalMesh",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SolidShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolidShape_isExternalMesh" "', argument " "1"" of type '" "iDynTree::SolidShape const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SolidShape * >(argp1);
  result = (bool)((iDynTree::SolidShape const *)arg1)->isExternalMesh();
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SolidShape_asSphere__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SolidShape *arg1 = (iDynTree::SolidShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Sphere *result = 0 ;
  
  if (!SWIG_check_num_args("SolidShape_asSphere",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SolidShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolidShape_asSphere" "', argument " "1"" of type '" "iDynTree::SolidShape *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SolidShape * >(argp1);
  result = (iDynTree::Sphere *)(arg1)->asSphere();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Sphere, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SolidShape_asBox__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SolidShape *arg1 = (iDynTree::SolidShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Box *result = 0 ;
  
  if (!SWIG_check_num_args("SolidShape_asBox",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SolidShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolidShape_asBox" "', argument " "1"" of type '" "iDynTree::SolidShape *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SolidShape * >(argp1);
  result = (iDynTree::Box *)(arg1)->asBox();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Box, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SolidShape_asCylinder__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SolidShape *arg1 = (iDynTree::SolidShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Cylinder *result = 0 ;
  
  if (!SWIG_check_num_args("SolidShape_asCylinder",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SolidShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolidShape_asCylinder" "', argument " "1"" of type '" "iDynTree::SolidShape *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SolidShape * >(argp1);
  result = (iDynTree::Cylinder *)(arg1)->asCylinder();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Cylinder, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SolidShape_asExternalMesh__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SolidShape *arg1 = (iDynTree::SolidShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::ExternalMesh *result = 0 ;
  
  if (!SWIG_check_num_args("SolidShape_asExternalMesh",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SolidShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolidShape_asExternalMesh" "', argument " "1"" of type '" "iDynTree::SolidShape *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SolidShape * >(argp1);
  result = (iDynTree::ExternalMesh *)(arg1)->asExternalMesh();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__ExternalMesh, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SolidShape_asSphere__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SolidShape *arg1 = (iDynTree::SolidShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Sphere *result = 0 ;
  
  if (!SWIG_check_num_args("SolidShape_asSphere",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SolidShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolidShape_asSphere" "', argument " "1"" of type '" "iDynTree::SolidShape const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SolidShape * >(argp1);
  result = (iDynTree::Sphere *)((iDynTree::SolidShape const *)arg1)->asSphere();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Sphere, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SolidShape_asSphere(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SolidShape, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SolidShape_asSphere__SWIG_0(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SolidShape, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SolidShape_asSphere__SWIG_1(resc,resv,argc,argv);
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'SolidShape_asSphere'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::SolidShape::asSphere()\n"
    "    iDynTree::SolidShape::asSphere() const\n");
  return 1;
}


int _wrap_SolidShape_asBox__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SolidShape *arg1 = (iDynTree::SolidShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Box *result = 0 ;
  
  if (!SWIG_check_num_args("SolidShape_asBox",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SolidShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolidShape_asBox" "', argument " "1"" of type '" "iDynTree::SolidShape const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SolidShape * >(argp1);
  result = (iDynTree::Box *)((iDynTree::SolidShape const *)arg1)->asBox();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Box, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SolidShape_asBox(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SolidShape, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SolidShape_asBox__SWIG_0(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SolidShape, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SolidShape_asBox__SWIG_1(resc,resv,argc,argv);
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'SolidShape_asBox'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::SolidShape::asBox()\n"
    "    iDynTree::SolidShape::asBox() const\n");
  return 1;
}


int _wrap_SolidShape_asCylinder__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SolidShape *arg1 = (iDynTree::SolidShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Cylinder *result = 0 ;
  
  if (!SWIG_check_num_args("SolidShape_asCylinder",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SolidShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolidShape_asCylinder" "', argument " "1"" of type '" "iDynTree::SolidShape const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SolidShape * >(argp1);
  result = (iDynTree::Cylinder *)((iDynTree::SolidShape const *)arg1)->asCylinder();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Cylinder, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SolidShape_asCylinder(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SolidShape, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SolidShape_asCylinder__SWIG_0(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SolidShape, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SolidShape_asCylinder__SWIG_1(resc,resv,argc,argv);
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'SolidShape_asCylinder'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::SolidShape::asCylinder()\n"
    "    iDynTree::SolidShape::asCylinder() const\n");
  return 1;
}


int _wrap_SolidShape_asExternalMesh__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SolidShape *arg1 = (iDynTree::SolidShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::ExternalMesh *result = 0 ;
  
  if (!SWIG_check_num_args("SolidShape_asExternalMesh",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SolidShape, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolidShape_asExternalMesh" "', argument " "1"" of type '" "iDynTree::SolidShape const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SolidShape * >(argp1);
  result = (iDynTree::ExternalMesh *)((iDynTree::SolidShape const *)arg1)->asExternalMesh();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__ExternalMesh, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SolidShape_asExternalMesh(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SolidShape, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SolidShape_asExternalMesh__SWIG_0(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SolidShape, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SolidShape_asExternalMesh__SWIG_1(resc,resv,argc,argv);
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'SolidShape_asExternalMesh'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::SolidShape::asExternalMesh()\n"
    "    iDynTree::SolidShape::asExternalMesh() const\n");
  return 1;
}


int _wrap_delete_Sphere(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Sphere *arg1 = (iDynTree::Sphere *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_Sphere",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Sphere, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Sphere" "', argument " "1"" of type '" "iDynTree::Sphere *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Sphere * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Sphere_clone(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Sphere *arg1 = (iDynTree::Sphere *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::SolidShape *result = 0 ;
  
  if (!SWIG_check_num_args("Sphere_clone",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Sphere, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sphere_clone" "', argument " "1"" of type '" "iDynTree::Sphere *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Sphere * >(argp1);
  result = (iDynTree::SolidShape *)(arg1)->clone();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SolidShape, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Sphere_radius_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Sphere *arg1 = (iDynTree::Sphere *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Sphere_radius_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Sphere, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sphere_radius_set" "', argument " "1"" of type '" "iDynTree::Sphere *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Sphere * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Sphere_radius_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->radius = arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Sphere_radius_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Sphere *arg1 = (iDynTree::Sphere *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("Sphere_radius_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Sphere, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sphere_radius_get" "', argument " "1"" of type '" "iDynTree::Sphere *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Sphere * >(argp1);
  result = (double) ((arg1)->radius);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Sphere(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::Sphere *result = 0 ;
  
  if (!SWIG_check_num_args("new_Sphere",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::Sphere *)new iDynTree::Sphere();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Sphere, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_Box(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Box *arg1 = (iDynTree::Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_Box",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Box, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Box" "', argument " "1"" of type '" "iDynTree::Box *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Box * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Box_clone(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Box *arg1 = (iDynTree::Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::SolidShape *result = 0 ;
  
  if (!SWIG_check_num_args("Box_clone",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Box_clone" "', argument " "1"" of type '" "iDynTree::Box *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Box * >(argp1);
  result = (iDynTree::SolidShape *)(arg1)->clone();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SolidShape, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Box_x_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Box *arg1 = (iDynTree::Box *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Box_x_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Box_x_set" "', argument " "1"" of type '" "iDynTree::Box *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Box * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Box_x_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->x = arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Box_x_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Box *arg1 = (iDynTree::Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("Box_x_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Box_x_get" "', argument " "1"" of type '" "iDynTree::Box *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Box * >(argp1);
  result = (double) ((arg1)->x);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Box_y_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Box *arg1 = (iDynTree::Box *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Box_y_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Box_y_set" "', argument " "1"" of type '" "iDynTree::Box *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Box * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Box_y_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->y = arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Box_y_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Box *arg1 = (iDynTree::Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("Box_y_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Box_y_get" "', argument " "1"" of type '" "iDynTree::Box *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Box * >(argp1);
  result = (double) ((arg1)->y);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Box_z_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Box *arg1 = (iDynTree::Box *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Box_z_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Box_z_set" "', argument " "1"" of type '" "iDynTree::Box *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Box * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Box_z_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->z = arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Box_z_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Box *arg1 = (iDynTree::Box *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("Box_z_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Box, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Box_z_get" "', argument " "1"" of type '" "iDynTree::Box *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Box * >(argp1);
  result = (double) ((arg1)->z);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Box(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::Box *result = 0 ;
  
  if (!SWIG_check_num_args("new_Box",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::Box *)new iDynTree::Box();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Box, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_Cylinder(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Cylinder *arg1 = (iDynTree::Cylinder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_Cylinder",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Cylinder, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Cylinder" "', argument " "1"" of type '" "iDynTree::Cylinder *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Cylinder * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Cylinder_clone(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Cylinder *arg1 = (iDynTree::Cylinder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::SolidShape *result = 0 ;
  
  if (!SWIG_check_num_args("Cylinder_clone",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Cylinder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cylinder_clone" "', argument " "1"" of type '" "iDynTree::Cylinder *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Cylinder * >(argp1);
  result = (iDynTree::SolidShape *)(arg1)->clone();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SolidShape, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Cylinder_length_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Cylinder *arg1 = (iDynTree::Cylinder *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Cylinder_length_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Cylinder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cylinder_length_set" "', argument " "1"" of type '" "iDynTree::Cylinder *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Cylinder * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cylinder_length_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->length = arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Cylinder_length_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Cylinder *arg1 = (iDynTree::Cylinder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("Cylinder_length_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Cylinder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cylinder_length_get" "', argument " "1"" of type '" "iDynTree::Cylinder *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Cylinder * >(argp1);
  result = (double) ((arg1)->length);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Cylinder_radius_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Cylinder *arg1 = (iDynTree::Cylinder *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Cylinder_radius_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Cylinder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cylinder_radius_set" "', argument " "1"" of type '" "iDynTree::Cylinder *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Cylinder * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cylinder_radius_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->radius = arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Cylinder_radius_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Cylinder *arg1 = (iDynTree::Cylinder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("Cylinder_radius_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Cylinder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cylinder_radius_get" "', argument " "1"" of type '" "iDynTree::Cylinder *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Cylinder * >(argp1);
  result = (double) ((arg1)->radius);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Cylinder(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::Cylinder *result = 0 ;
  
  if (!SWIG_check_num_args("new_Cylinder",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::Cylinder *)new iDynTree::Cylinder();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Cylinder, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_ExternalMesh(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ExternalMesh *arg1 = (iDynTree::ExternalMesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_ExternalMesh",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ExternalMesh, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ExternalMesh" "', argument " "1"" of type '" "iDynTree::ExternalMesh *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ExternalMesh * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ExternalMesh_clone(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ExternalMesh *arg1 = (iDynTree::ExternalMesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::SolidShape *result = 0 ;
  
  if (!SWIG_check_num_args("ExternalMesh_clone",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ExternalMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExternalMesh_clone" "', argument " "1"" of type '" "iDynTree::ExternalMesh *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ExternalMesh * >(argp1);
  result = (iDynTree::SolidShape *)(arg1)->clone();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SolidShape, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ExternalMesh_filename_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ExternalMesh *arg1 = (iDynTree::ExternalMesh *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("ExternalMesh_filename_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ExternalMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExternalMesh_filename_set" "', argument " "1"" of type '" "iDynTree::ExternalMesh *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ExternalMesh * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ExternalMesh_filename_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ExternalMesh_filename_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->filename = *arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_ExternalMesh_filename_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ExternalMesh *arg1 = (iDynTree::ExternalMesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string *result = 0 ;
  
  if (!SWIG_check_num_args("ExternalMesh_filename_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ExternalMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExternalMesh_filename_get" "', argument " "1"" of type '" "iDynTree::ExternalMesh *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ExternalMesh * >(argp1);
  result = (std::string *) & ((arg1)->filename);
  _out = SWIG_From_std_string(static_cast< std::string >(*result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ExternalMesh_scale_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ExternalMesh *arg1 = (iDynTree::ExternalMesh *) 0 ;
  iDynTree::Vector3 *arg2 = (iDynTree::Vector3 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("ExternalMesh_scale_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ExternalMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExternalMesh_scale_set" "', argument " "1"" of type '" "iDynTree::ExternalMesh *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ExternalMesh * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_iDynTree__VectorFixSizeT_3_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ExternalMesh_scale_set" "', argument " "2"" of type '" "iDynTree::Vector3 *""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Vector3 * >(argp2);
  if (arg1) (arg1)->scale = *arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ExternalMesh_scale_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ExternalMesh *arg1 = (iDynTree::ExternalMesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Vector3 *result = 0 ;
  
  if (!SWIG_check_num_args("ExternalMesh_scale_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ExternalMesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExternalMesh_scale_get" "', argument " "1"" of type '" "iDynTree::ExternalMesh *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ExternalMesh * >(argp1);
  result = (iDynTree::Vector3 *)& ((arg1)->scale);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__VectorFixSizeT_3_t, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_ExternalMesh(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::ExternalMesh *result = 0 ;
  
  if (!SWIG_check_num_args("new_ExternalMesh",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::ExternalMesh *)new iDynTree::ExternalMesh();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__ExternalMesh, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_ModelSolidShapes__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::ModelSolidShapes *result = 0 ;
  
  if (!SWIG_check_num_args("new_ModelSolidShapes",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::ModelSolidShapes *)new iDynTree::ModelSolidShapes();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__ModelSolidShapes, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_ModelSolidShapes__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ModelSolidShapes *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::ModelSolidShapes *result = 0 ;
  
  if (!SWIG_check_num_args("new_ModelSolidShapes",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__ModelSolidShapes,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ModelSolidShapes" "', argument " "1"" of type '" "iDynTree::ModelSolidShapes const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ModelSolidShapes" "', argument " "1"" of type '" "iDynTree::ModelSolidShapes const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ModelSolidShapes * >(argp1);
  result = (iDynTree::ModelSolidShapes *)new iDynTree::ModelSolidShapes((iDynTree::ModelSolidShapes const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__ModelSolidShapes, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_ModelSolidShapes(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_ModelSolidShapes__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__ModelSolidShapes, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ModelSolidShapes__SWIG_1(resc,resv,argc,argv);
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_ModelSolidShapes'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::ModelSolidShapes::ModelSolidShapes()\n"
    "    iDynTree::ModelSolidShapes::ModelSolidShapes(iDynTree::ModelSolidShapes const &)\n");
  return 1;
}


int _wrap_ModelSolidShapes_clear(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ModelSolidShapes *arg1 = (iDynTree::ModelSolidShapes *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("ModelSolidShapes_clear",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ModelSolidShapes, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ModelSolidShapes_clear" "', argument " "1"" of type '" "iDynTree::ModelSolidShapes *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ModelSolidShapes * >(argp1);
  (arg1)->clear();
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_ModelSolidShapes(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ModelSolidShapes *arg1 = (iDynTree::ModelSolidShapes *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_ModelSolidShapes",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ModelSolidShapes, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ModelSolidShapes" "', argument " "1"" of type '" "iDynTree::ModelSolidShapes *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ModelSolidShapes * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ModelSolidShapes_resize__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ModelSolidShapes *arg1 = (iDynTree::ModelSolidShapes *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("ModelSolidShapes_resize",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ModelSolidShapes, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ModelSolidShapes_resize" "', argument " "1"" of type '" "iDynTree::ModelSolidShapes *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ModelSolidShapes * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ModelSolidShapes_resize" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  (arg1)->resize(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ModelSolidShapes_resize__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ModelSolidShapes *arg1 = (iDynTree::ModelSolidShapes *) 0 ;
  iDynTree::Model *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("ModelSolidShapes_resize",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ModelSolidShapes, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ModelSolidShapes_resize" "', argument " "1"" of type '" "iDynTree::ModelSolidShapes *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ModelSolidShapes * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ModelSolidShapes_resize" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ModelSolidShapes_resize" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Model * >(argp2);
  (arg1)->resize((iDynTree::Model const &)*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ModelSolidShapes_resize(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__ModelSolidShapes, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Model, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ModelSolidShapes_resize__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__ModelSolidShapes, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ModelSolidShapes_resize__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'ModelSolidShapes_resize'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::ModelSolidShapes::resize(size_t)\n"
    "    iDynTree::ModelSolidShapes::resize(iDynTree::Model const &)\n");
  return 1;
}


int _wrap_ModelSolidShapes_isConsistent(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ModelSolidShapes *arg1 = (iDynTree::ModelSolidShapes *) 0 ;
  iDynTree::Model *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("ModelSolidShapes_isConsistent",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ModelSolidShapes, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ModelSolidShapes_isConsistent" "', argument " "1"" of type '" "iDynTree::ModelSolidShapes const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ModelSolidShapes * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ModelSolidShapes_isConsistent" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ModelSolidShapes_isConsistent" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Model * >(argp2);
  result = (bool)((iDynTree::ModelSolidShapes const *)arg1)->isConsistent((iDynTree::Model const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ModelSolidShapes_linkSolidShapes_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ModelSolidShapes *arg1 = (iDynTree::ModelSolidShapes *) 0 ;
  std::vector< std::vector< iDynTree::SolidShape *,std::allocator< iDynTree::SolidShape * > >,std::allocator< std::vector< iDynTree::SolidShape *,std::allocator< iDynTree::SolidShape * > > > > *arg2 = (std::vector< std::vector< iDynTree::SolidShape *,std::allocator< iDynTree::SolidShape * > >,std::allocator< std::vector< iDynTree::SolidShape *,std::allocator< iDynTree::SolidShape * > > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("ModelSolidShapes_linkSolidShapes_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ModelSolidShapes, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ModelSolidShapes_linkSolidShapes_set" "', argument " "1"" of type '" "iDynTree::ModelSolidShapes *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ModelSolidShapes * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_std__vectorT_std__vectorT_iDynTree__SolidShape_p_std__allocatorT_iDynTree__SolidShape_p_t_t_std__allocatorT_std__vectorT_iDynTree__SolidShape_p_std__allocatorT_iDynTree__SolidShape_p_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ModelSolidShapes_linkSolidShapes_set" "', argument " "2"" of type '" "std::vector< std::vector< iDynTree::SolidShape *,std::allocator< iDynTree::SolidShape * > >,std::allocator< std::vector< iDynTree::SolidShape *,std::allocator< iDynTree::SolidShape * > > > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::vector< iDynTree::SolidShape *,std::allocator< iDynTree::SolidShape * > >,std::allocator< std::vector< iDynTree::SolidShape *,std::allocator< iDynTree::SolidShape * > > > > * >(argp2);
  if (arg1) (arg1)->linkSolidShapes = *arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ModelSolidShapes_linkSolidShapes_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ModelSolidShapes *arg1 = (iDynTree::ModelSolidShapes *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< std::vector< iDynTree::SolidShape *,std::allocator< iDynTree::SolidShape * > >,std::allocator< std::vector< iDynTree::SolidShape *,std::allocator< iDynTree::SolidShape * > > > > *result = 0 ;
  
  if (!SWIG_check_num_args("ModelSolidShapes_linkSolidShapes_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ModelSolidShapes, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ModelSolidShapes_linkSolidShapes_get" "', argument " "1"" of type '" "iDynTree::ModelSolidShapes *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ModelSolidShapes * >(argp1);
  result = (std::vector< std::vector< iDynTree::SolidShape *,std::allocator< iDynTree::SolidShape * > >,std::allocator< std::vector< iDynTree::SolidShape *,std::allocator< iDynTree::SolidShape * > > > > *)& ((arg1)->linkSolidShapes);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_iDynTree__SolidShape_p_std__allocatorT_iDynTree__SolidShape_p_t_t_std__allocatorT_std__vectorT_iDynTree__SolidShape_p_std__allocatorT_iDynTree__SolidShape_p_t_t_t_t, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Neighbor_neighborLink_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Neighbor *arg1 = (iDynTree::Neighbor *) 0 ;
  iDynTree::LinkIndex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Neighbor_neighborLink_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Neighbor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Neighbor_neighborLink_set" "', argument " "1"" of type '" "iDynTree::Neighbor *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Neighbor * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Neighbor_neighborLink_set" "', argument " "2"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg2 = static_cast< iDynTree::LinkIndex >(val2);
  if (arg1) (arg1)->neighborLink = arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Neighbor_neighborLink_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Neighbor *arg1 = (iDynTree::Neighbor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::LinkIndex result;
  
  if (!SWIG_check_num_args("Neighbor_neighborLink_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Neighbor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Neighbor_neighborLink_get" "', argument " "1"" of type '" "iDynTree::Neighbor *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Neighbor * >(argp1);
  result = (iDynTree::LinkIndex) ((arg1)->neighborLink);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Neighbor_neighborJoint_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Neighbor *arg1 = (iDynTree::Neighbor *) 0 ;
  iDynTree::JointIndex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Neighbor_neighborJoint_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Neighbor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Neighbor_neighborJoint_set" "', argument " "1"" of type '" "iDynTree::Neighbor *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Neighbor * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Neighbor_neighborJoint_set" "', argument " "2"" of type '" "iDynTree::JointIndex""'");
  } 
  arg2 = static_cast< iDynTree::JointIndex >(val2);
  if (arg1) (arg1)->neighborJoint = arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Neighbor_neighborJoint_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Neighbor *arg1 = (iDynTree::Neighbor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::JointIndex result;
  
  if (!SWIG_check_num_args("Neighbor_neighborJoint_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Neighbor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Neighbor_neighborJoint_get" "', argument " "1"" of type '" "iDynTree::Neighbor *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Neighbor * >(argp1);
  result = (iDynTree::JointIndex) ((arg1)->neighborJoint);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Neighbor(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::Neighbor *result = 0 ;
  
  if (!SWIG_check_num_args("new_Neighbor",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::Neighbor *)new iDynTree::Neighbor();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Neighbor, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_Neighbor(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Neighbor *arg1 = (iDynTree::Neighbor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_Neighbor",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Neighbor, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Neighbor" "', argument " "1"" of type '" "iDynTree::Neighbor *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Neighbor * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Model__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::Model *result = 0 ;
  
  if (!SWIG_check_num_args("new_Model",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::Model *)new iDynTree::Model();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Model, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Model__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Model *result = 0 ;
  
  if (!SWIG_check_num_args("new_Model",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Model" "', argument " "1"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Model" "', argument " "1"" of type '" "iDynTree::Model const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  result = (iDynTree::Model *)new iDynTree::Model((iDynTree::Model const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Model, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Model(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_Model__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Model, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Model__SWIG_1(resc,resv,argc,argv);
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_Model'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::Model::Model()\n"
    "    iDynTree::Model::Model(iDynTree::Model const &)\n");
  return 1;
}


int _wrap_Model_copy(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = (iDynTree::Model *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Model result;
  
  if (!SWIG_check_num_args("Model_copy",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_copy" "', argument " "1"" of type '" "iDynTree::Model const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  result = ((iDynTree::Model const *)arg1)->copy();
  _out = SWIG_NewPointerObj((new iDynTree::Model(static_cast< const iDynTree::Model& >(result))), SWIGTYPE_p_iDynTree__Model, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_Model(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = (iDynTree::Model *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_Model",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Model, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Model" "', argument " "1"" of type '" "iDynTree::Model *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Model_getNrOfLinks(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = (iDynTree::Model *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  size_t result;
  
  if (!SWIG_check_num_args("Model_getNrOfLinks",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_getNrOfLinks" "', argument " "1"" of type '" "iDynTree::Model const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  result = ((iDynTree::Model const *)arg1)->getNrOfLinks();
  _out = SWIG_From_size_t(static_cast< size_t >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Model_getLinkName(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = (iDynTree::Model *) 0 ;
  iDynTree::LinkIndex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("Model_getLinkName",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_getLinkName" "', argument " "1"" of type '" "iDynTree::Model const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Model_getLinkName" "', argument " "2"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg2 = static_cast< iDynTree::LinkIndex >(val2);
  result = ((iDynTree::Model const *)arg1)->getLinkName(arg2);
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Model_getLinkIndex(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = (iDynTree::Model *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  iDynTree::LinkIndex result;
  
  if (!SWIG_check_num_args("Model_getLinkIndex",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_getLinkIndex" "', argument " "1"" of type '" "iDynTree::Model const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Model_getLinkIndex" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Model_getLinkIndex" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (iDynTree::LinkIndex)((iDynTree::Model const *)arg1)->getLinkIndex((std::string const &)*arg2);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_Model_isValidLinkIndex(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = (iDynTree::Model *) 0 ;
  iDynTree::LinkIndex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("Model_isValidLinkIndex",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_isValidLinkIndex" "', argument " "1"" of type '" "iDynTree::Model const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Model_isValidLinkIndex" "', argument " "2"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg2 = static_cast< iDynTree::LinkIndex >(val2);
  result = (bool)((iDynTree::Model const *)arg1)->isValidLinkIndex(arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Model_getLink__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = (iDynTree::Model *) 0 ;
  iDynTree::LinkIndex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::LinkPtr result;
  
  if (!SWIG_check_num_args("Model_getLink",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_getLink" "', argument " "1"" of type '" "iDynTree::Model *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Model_getLink" "', argument " "2"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg2 = static_cast< iDynTree::LinkIndex >(val2);
  result = (iDynTree::LinkPtr)(arg1)->getLink(arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Link, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Model_getLink__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = (iDynTree::Model *) 0 ;
  iDynTree::LinkIndex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::LinkConstPtr result;
  
  if (!SWIG_check_num_args("Model_getLink",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_getLink" "', argument " "1"" of type '" "iDynTree::Model const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Model_getLink" "', argument " "2"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg2 = static_cast< iDynTree::LinkIndex >(val2);
  result = (iDynTree::LinkConstPtr)((iDynTree::Model const *)arg1)->getLink(arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Link, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Model_getLink(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Model, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Model_getLink__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Model, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Model_getLink__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Model_getLink'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::Model::getLink(iDynTree::LinkIndex const)\n"
    "    iDynTree::Model::getLink(iDynTree::LinkIndex const) const\n");
  return 1;
}


int _wrap_Model_addLink(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = (iDynTree::Model *) 0 ;
  std::string *arg2 = 0 ;
  iDynTree::Link *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 ;
  int res3 = 0 ;
  mxArray * _out;
  iDynTree::LinkIndex result;
  
  if (!SWIG_check_num_args("Model_addLink",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_addLink" "', argument " "1"" of type '" "iDynTree::Model *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Model_addLink" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Model_addLink" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__Link,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Model_addLink" "', argument " "3"" of type '" "iDynTree::Link const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Model_addLink" "', argument " "3"" of type '" "iDynTree::Link const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::Link * >(argp3);
  result = (iDynTree::LinkIndex)(arg1)->addLink((std::string const &)*arg2,(iDynTree::Link const &)*arg3);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_Model_getNrOfJoints(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = (iDynTree::Model *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  size_t result;
  
  if (!SWIG_check_num_args("Model_getNrOfJoints",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_getNrOfJoints" "', argument " "1"" of type '" "iDynTree::Model const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  result = ((iDynTree::Model const *)arg1)->getNrOfJoints();
  _out = SWIG_From_size_t(static_cast< size_t >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Model_getJointName(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = (iDynTree::Model *) 0 ;
  iDynTree::JointIndex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("Model_getJointName",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_getJointName" "', argument " "1"" of type '" "iDynTree::Model const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Model_getJointName" "', argument " "2"" of type '" "iDynTree::JointIndex""'");
  } 
  arg2 = static_cast< iDynTree::JointIndex >(val2);
  result = ((iDynTree::Model const *)arg1)->getJointName(arg2);
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Model_getJointIndex(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = (iDynTree::Model *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  iDynTree::JointIndex result;
  
  if (!SWIG_check_num_args("Model_getJointIndex",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_getJointIndex" "', argument " "1"" of type '" "iDynTree::Model const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Model_getJointIndex" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Model_getJointIndex" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (iDynTree::JointIndex)((iDynTree::Model const *)arg1)->getJointIndex((std::string const &)*arg2);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_Model_getJoint__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = (iDynTree::Model *) 0 ;
  iDynTree::JointIndex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::IJointPtr result;
  
  if (!SWIG_check_num_args("Model_getJoint",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_getJoint" "', argument " "1"" of type '" "iDynTree::Model *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Model_getJoint" "', argument " "2"" of type '" "iDynTree::JointIndex""'");
  } 
  arg2 = static_cast< iDynTree::JointIndex >(val2);
  result = (iDynTree::IJointPtr)(arg1)->getJoint(arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__IJoint, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Model_getJoint__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = (iDynTree::Model *) 0 ;
  iDynTree::JointIndex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::IJointConstPtr result;
  
  if (!SWIG_check_num_args("Model_getJoint",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_getJoint" "', argument " "1"" of type '" "iDynTree::Model const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Model_getJoint" "', argument " "2"" of type '" "iDynTree::JointIndex""'");
  } 
  arg2 = static_cast< iDynTree::JointIndex >(val2);
  result = (iDynTree::IJointConstPtr)((iDynTree::Model const *)arg1)->getJoint(arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__IJoint, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Model_getJoint(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Model, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Model_getJoint__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Model, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Model_getJoint__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Model_getJoint'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::Model::getJoint(iDynTree::JointIndex const)\n"
    "    iDynTree::Model::getJoint(iDynTree::JointIndex const) const\n");
  return 1;
}


int _wrap_Model_isValidJointIndex(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = (iDynTree::Model *) 0 ;
  iDynTree::JointIndex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("Model_isValidJointIndex",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_isValidJointIndex" "', argument " "1"" of type '" "iDynTree::Model const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Model_isValidJointIndex" "', argument " "2"" of type '" "iDynTree::JointIndex""'");
  } 
  arg2 = static_cast< iDynTree::JointIndex >(val2);
  result = (bool)((iDynTree::Model const *)arg1)->isValidJointIndex(arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Model_isLinkNameUsed(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = (iDynTree::Model *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("Model_isLinkNameUsed",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_isLinkNameUsed" "', argument " "1"" of type '" "iDynTree::Model const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Model_isLinkNameUsed" "', argument " "2"" of type '" "std::string const""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (bool)((iDynTree::Model const *)arg1)->isLinkNameUsed(arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Model_isJointNameUsed(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = (iDynTree::Model *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("Model_isJointNameUsed",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_isJointNameUsed" "', argument " "1"" of type '" "iDynTree::Model const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Model_isJointNameUsed" "', argument " "2"" of type '" "std::string const""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (bool)((iDynTree::Model const *)arg1)->isJointNameUsed(arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Model_isFrameNameUsed(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = (iDynTree::Model *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("Model_isFrameNameUsed",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_isFrameNameUsed" "', argument " "1"" of type '" "iDynTree::Model const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Model_isFrameNameUsed" "', argument " "2"" of type '" "std::string const""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (bool)((iDynTree::Model const *)arg1)->isFrameNameUsed(arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Model_addJoint(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = (iDynTree::Model *) 0 ;
  std::string *arg2 = 0 ;
  iDynTree::IJointConstPtr arg3 = (iDynTree::IJointConstPtr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  mxArray * _out;
  iDynTree::JointIndex result;
  
  if (!SWIG_check_num_args("Model_addJoint",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_addJoint" "', argument " "1"" of type '" "iDynTree::Model *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Model_addJoint" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Model_addJoint" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(argv[2], &argp3,SWIGTYPE_p_iDynTree__IJoint, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Model_addJoint" "', argument " "3"" of type '" "iDynTree::IJointConstPtr""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::IJointConstPtr >(argp3);
  result = (iDynTree::JointIndex)(arg1)->addJoint((std::string const &)*arg2,arg3);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_Model_getNrOfPosCoords(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = (iDynTree::Model *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  size_t result;
  
  if (!SWIG_check_num_args("Model_getNrOfPosCoords",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_getNrOfPosCoords" "', argument " "1"" of type '" "iDynTree::Model const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  result = ((iDynTree::Model const *)arg1)->getNrOfPosCoords();
  _out = SWIG_From_size_t(static_cast< size_t >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Model_getNrOfDOFs(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = (iDynTree::Model *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  size_t result;
  
  if (!SWIG_check_num_args("Model_getNrOfDOFs",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_getNrOfDOFs" "', argument " "1"" of type '" "iDynTree::Model const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  result = ((iDynTree::Model const *)arg1)->getNrOfDOFs();
  _out = SWIG_From_size_t(static_cast< size_t >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Model_getNrOfFrames(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = (iDynTree::Model *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  size_t result;
  
  if (!SWIG_check_num_args("Model_getNrOfFrames",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_getNrOfFrames" "', argument " "1"" of type '" "iDynTree::Model const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  result = ((iDynTree::Model const *)arg1)->getNrOfFrames();
  _out = SWIG_From_size_t(static_cast< size_t >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Model_addAdditionalFrameToLink(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = (iDynTree::Model *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  iDynTree::Transform arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  void *argp4 ;
  int res4 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("Model_addAdditionalFrameToLink",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_addAdditionalFrameToLink" "', argument " "1"" of type '" "iDynTree::Model *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Model_addAdditionalFrameToLink" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Model_addAdditionalFrameToLink" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Model_addAdditionalFrameToLink" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Model_addAdditionalFrameToLink" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__Transform,  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Model_addAdditionalFrameToLink" "', argument " "4"" of type '" "iDynTree::Transform""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Model_addAdditionalFrameToLink" "', argument " "4"" of type '" "iDynTree::Transform""'");
    } else {
      arg4 = *(reinterpret_cast< iDynTree::Transform * >(argp4));
    }
  }
  result = (bool)(arg1)->addAdditionalFrameToLink((std::string const &)*arg2,(std::string const &)*arg3,arg4);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 1;
}


int _wrap_Model_getFrameName(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = (iDynTree::Model *) 0 ;
  iDynTree::FrameIndex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("Model_getFrameName",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_getFrameName" "', argument " "1"" of type '" "iDynTree::Model const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Model_getFrameName" "', argument " "2"" of type '" "iDynTree::FrameIndex""'");
  } 
  arg2 = static_cast< iDynTree::FrameIndex >(val2);
  result = ((iDynTree::Model const *)arg1)->getFrameName(arg2);
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Model_getFrameIndex(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = (iDynTree::Model *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  iDynTree::FrameIndex result;
  
  if (!SWIG_check_num_args("Model_getFrameIndex",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_getFrameIndex" "', argument " "1"" of type '" "iDynTree::Model const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Model_getFrameIndex" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Model_getFrameIndex" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (iDynTree::FrameIndex)((iDynTree::Model const *)arg1)->getFrameIndex((std::string const &)*arg2);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_Model_isValidFrameIndex(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = (iDynTree::Model *) 0 ;
  iDynTree::FrameIndex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("Model_isValidFrameIndex",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_isValidFrameIndex" "', argument " "1"" of type '" "iDynTree::Model const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Model_isValidFrameIndex" "', argument " "2"" of type '" "iDynTree::FrameIndex""'");
  } 
  arg2 = static_cast< iDynTree::FrameIndex >(val2);
  result = (bool)((iDynTree::Model const *)arg1)->isValidFrameIndex(arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Model_getFrameTransform(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = (iDynTree::Model *) 0 ;
  iDynTree::FrameIndex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::Transform result;
  
  if (!SWIG_check_num_args("Model_getFrameTransform",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_getFrameTransform" "', argument " "1"" of type '" "iDynTree::Model const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Model_getFrameTransform" "', argument " "2"" of type '" "iDynTree::FrameIndex""'");
  } 
  arg2 = static_cast< iDynTree::FrameIndex >(val2);
  result = ((iDynTree::Model const *)arg1)->getFrameTransform(arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Transform(static_cast< const iDynTree::Transform& >(result))), SWIGTYPE_p_iDynTree__Transform, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Model_getFrameLink(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = (iDynTree::Model *) 0 ;
  iDynTree::FrameIndex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::LinkIndex result;
  
  if (!SWIG_check_num_args("Model_getFrameLink",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_getFrameLink" "', argument " "1"" of type '" "iDynTree::Model const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Model_getFrameLink" "', argument " "2"" of type '" "iDynTree::FrameIndex""'");
  } 
  arg2 = static_cast< iDynTree::FrameIndex >(val2);
  result = (iDynTree::LinkIndex)((iDynTree::Model const *)arg1)->getFrameLink(arg2);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Model_getNrOfNeighbors(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = (iDynTree::Model *) 0 ;
  iDynTree::LinkIndex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("Model_getNrOfNeighbors",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_getNrOfNeighbors" "', argument " "1"" of type '" "iDynTree::Model const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Model_getNrOfNeighbors" "', argument " "2"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg2 = static_cast< iDynTree::LinkIndex >(val2);
  result = (unsigned int)((iDynTree::Model const *)arg1)->getNrOfNeighbors(arg2);
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Model_getNeighbor(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = (iDynTree::Model *) 0 ;
  iDynTree::LinkIndex arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  iDynTree::Neighbor result;
  
  if (!SWIG_check_num_args("Model_getNeighbor",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_getNeighbor" "', argument " "1"" of type '" "iDynTree::Model const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Model_getNeighbor" "', argument " "2"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg2 = static_cast< iDynTree::LinkIndex >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Model_getNeighbor" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  result = ((iDynTree::Model const *)arg1)->getNeighbor(arg2,arg3);
  _out = SWIG_NewPointerObj((new iDynTree::Neighbor(static_cast< const iDynTree::Neighbor& >(result))), SWIGTYPE_p_iDynTree__Neighbor, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Model_setDefaultBaseLink(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = (iDynTree::Model *) 0 ;
  iDynTree::LinkIndex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("Model_setDefaultBaseLink",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_setDefaultBaseLink" "', argument " "1"" of type '" "iDynTree::Model *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Model_setDefaultBaseLink" "', argument " "2"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg2 = static_cast< iDynTree::LinkIndex >(val2);
  result = (bool)(arg1)->setDefaultBaseLink(arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Model_getDefaultBaseLink(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = (iDynTree::Model *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::LinkIndex result;
  
  if (!SWIG_check_num_args("Model_getDefaultBaseLink",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_getDefaultBaseLink" "', argument " "1"" of type '" "iDynTree::Model const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  result = (iDynTree::LinkIndex)((iDynTree::Model const *)arg1)->getDefaultBaseLink();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Model_computeFullTreeTraversal__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = (iDynTree::Model *) 0 ;
  iDynTree::Traversal *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("Model_computeFullTreeTraversal",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_computeFullTreeTraversal" "', argument " "1"" of type '" "iDynTree::Model const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Traversal,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Model_computeFullTreeTraversal" "', argument " "2"" of type '" "iDynTree::Traversal &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Model_computeFullTreeTraversal" "', argument " "2"" of type '" "iDynTree::Traversal &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Traversal * >(argp2);
  result = (bool)((iDynTree::Model const *)arg1)->computeFullTreeTraversal(*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Model_computeFullTreeTraversal__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = (iDynTree::Model *) 0 ;
  iDynTree::Traversal *arg2 = 0 ;
  iDynTree::LinkIndex arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("Model_computeFullTreeTraversal",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_computeFullTreeTraversal" "', argument " "1"" of type '" "iDynTree::Model const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Traversal,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Model_computeFullTreeTraversal" "', argument " "2"" of type '" "iDynTree::Traversal &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Model_computeFullTreeTraversal" "', argument " "2"" of type '" "iDynTree::Traversal &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Traversal * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Model_computeFullTreeTraversal" "', argument " "3"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg3 = static_cast< iDynTree::LinkIndex >(val3);
  result = (bool)((iDynTree::Model const *)arg1)->computeFullTreeTraversal(*arg2,arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Model_computeFullTreeTraversal(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Model, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Traversal, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Model_computeFullTreeTraversal__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Model, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Traversal, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Model_computeFullTreeTraversal__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Model_computeFullTreeTraversal'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::Model::computeFullTreeTraversal(iDynTree::Traversal &) const\n"
    "    iDynTree::Model::computeFullTreeTraversal(iDynTree::Traversal &,iDynTree::LinkIndex const) const\n");
  return 1;
}


int _wrap_Model_getInertialParameters(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = (iDynTree::Model *) 0 ;
  iDynTree::VectorDynSize *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("Model_getInertialParameters",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_getInertialParameters" "', argument " "1"" of type '" "iDynTree::Model const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Model_getInertialParameters" "', argument " "2"" of type '" "iDynTree::VectorDynSize &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Model_getInertialParameters" "', argument " "2"" of type '" "iDynTree::VectorDynSize &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::VectorDynSize * >(argp2);
  result = (bool)((iDynTree::Model const *)arg1)->getInertialParameters(*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Model_updateInertialParameters(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = (iDynTree::Model *) 0 ;
  iDynTree::VectorDynSize *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("Model_updateInertialParameters",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_updateInertialParameters" "', argument " "1"" of type '" "iDynTree::Model *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Model_updateInertialParameters" "', argument " "2"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Model_updateInertialParameters" "', argument " "2"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::VectorDynSize * >(argp2);
  result = (bool)(arg1)->updateInertialParameters((iDynTree::VectorDynSize const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Model_visualSolidShapes__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = (iDynTree::Model *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::ModelSolidShapes *result = 0 ;
  
  if (!SWIG_check_num_args("Model_visualSolidShapes",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_visualSolidShapes" "', argument " "1"" of type '" "iDynTree::Model *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  result = (iDynTree::ModelSolidShapes *) &(arg1)->visualSolidShapes();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__ModelSolidShapes, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Model_visualSolidShapes__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = (iDynTree::Model *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::ModelSolidShapes *result = 0 ;
  
  if (!SWIG_check_num_args("Model_visualSolidShapes",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_visualSolidShapes" "', argument " "1"" of type '" "iDynTree::Model const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  result = (iDynTree::ModelSolidShapes *) &((iDynTree::Model const *)arg1)->visualSolidShapes();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__ModelSolidShapes, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Model_visualSolidShapes(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Model, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Model_visualSolidShapes__SWIG_0(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Model, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Model_visualSolidShapes__SWIG_1(resc,resv,argc,argv);
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Model_visualSolidShapes'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::Model::visualSolidShapes()\n"
    "    iDynTree::Model::visualSolidShapes() const\n");
  return 1;
}


int _wrap_Model_collisionSolidShapes__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = (iDynTree::Model *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::ModelSolidShapes *result = 0 ;
  
  if (!SWIG_check_num_args("Model_collisionSolidShapes",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_collisionSolidShapes" "', argument " "1"" of type '" "iDynTree::Model *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  result = (iDynTree::ModelSolidShapes *) &(arg1)->collisionSolidShapes();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__ModelSolidShapes, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Model_collisionSolidShapes__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = (iDynTree::Model *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::ModelSolidShapes *result = 0 ;
  
  if (!SWIG_check_num_args("Model_collisionSolidShapes",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_collisionSolidShapes" "', argument " "1"" of type '" "iDynTree::Model const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  result = (iDynTree::ModelSolidShapes *) &((iDynTree::Model const *)arg1)->collisionSolidShapes();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__ModelSolidShapes, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Model_collisionSolidShapes(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Model, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Model_collisionSolidShapes__SWIG_0(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Model, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Model_collisionSolidShapes__SWIG_1(resc,resv,argc,argv);
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Model_collisionSolidShapes'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::Model::collisionSolidShapes()\n"
    "    iDynTree::Model::collisionSolidShapes() const\n");
  return 1;
}


int _wrap_Model_toString(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = (iDynTree::Model *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("Model_toString",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_toString" "', argument " "1"" of type '" "iDynTree::Model const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  result = ((iDynTree::Model const *)arg1)->toString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_JointPosDoubleArray__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  mxArray * _out;
  iDynTree::JointPosDoubleArray *result = 0 ;
  
  if (!SWIG_check_num_args("new_JointPosDoubleArray",argc,1,1,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_unsigned_SS_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_JointPosDoubleArray" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  result = (iDynTree::JointPosDoubleArray *)new iDynTree::JointPosDoubleArray(arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__JointPosDoubleArray, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_JointPosDoubleArray__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::JointPosDoubleArray *result = 0 ;
  
  if (!SWIG_check_num_args("new_JointPosDoubleArray",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::JointPosDoubleArray *)new iDynTree::JointPosDoubleArray();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__JointPosDoubleArray, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_JointPosDoubleArray__SWIG_2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::JointPosDoubleArray *result = 0 ;
  
  if (!SWIG_check_num_args("new_JointPosDoubleArray",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_JointPosDoubleArray" "', argument " "1"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_JointPosDoubleArray" "', argument " "1"" of type '" "iDynTree::Model const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  result = (iDynTree::JointPosDoubleArray *)new iDynTree::JointPosDoubleArray((iDynTree::Model const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__JointPosDoubleArray, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_JointPosDoubleArray(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_JointPosDoubleArray__SWIG_1(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Model, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_JointPosDoubleArray__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_JointPosDoubleArray__SWIG_0(resc,resv,argc,argv);
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_JointPosDoubleArray'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::JointPosDoubleArray::JointPosDoubleArray(unsigned int)\n"
    "    iDynTree::JointPosDoubleArray::JointPosDoubleArray()\n"
    "    iDynTree::JointPosDoubleArray::JointPosDoubleArray(iDynTree::Model const &)\n");
  return 1;
}


int _wrap_JointPosDoubleArray_resize__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::JointPosDoubleArray *arg1 = (iDynTree::JointPosDoubleArray *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("JointPosDoubleArray_resize",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__JointPosDoubleArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JointPosDoubleArray_resize" "', argument " "1"" of type '" "iDynTree::JointPosDoubleArray *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::JointPosDoubleArray * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "JointPosDoubleArray_resize" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  (arg1)->resize(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_JointPosDoubleArray_resize__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::JointPosDoubleArray *arg1 = (iDynTree::JointPosDoubleArray *) 0 ;
  iDynTree::Model *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("JointPosDoubleArray_resize",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__JointPosDoubleArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JointPosDoubleArray_resize" "', argument " "1"" of type '" "iDynTree::JointPosDoubleArray *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::JointPosDoubleArray * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "JointPosDoubleArray_resize" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "JointPosDoubleArray_resize" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Model * >(argp2);
  (arg1)->resize((iDynTree::Model const &)*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_JointPosDoubleArray_resize(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__JointPosDoubleArray, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Model, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_JointPosDoubleArray_resize__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__JointPosDoubleArray, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_JointPosDoubleArray_resize__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'JointPosDoubleArray_resize'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::JointPosDoubleArray::resize(unsigned int)\n"
    "    iDynTree::JointPosDoubleArray::resize(iDynTree::Model const &)\n");
  return 1;
}


int _wrap_JointPosDoubleArray_isConsistent(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::JointPosDoubleArray *arg1 = (iDynTree::JointPosDoubleArray *) 0 ;
  iDynTree::Model *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("JointPosDoubleArray_isConsistent",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__JointPosDoubleArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JointPosDoubleArray_isConsistent" "', argument " "1"" of type '" "iDynTree::JointPosDoubleArray const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::JointPosDoubleArray * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "JointPosDoubleArray_isConsistent" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "JointPosDoubleArray_isConsistent" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Model * >(argp2);
  result = (bool)((iDynTree::JointPosDoubleArray const *)arg1)->isConsistent((iDynTree::Model const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_JointPosDoubleArray(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::JointPosDoubleArray *arg1 = (iDynTree::JointPosDoubleArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_JointPosDoubleArray",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__JointPosDoubleArray, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_JointPosDoubleArray" "', argument " "1"" of type '" "iDynTree::JointPosDoubleArray *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::JointPosDoubleArray * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_JointDOFsDoubleArray__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  mxArray * _out;
  iDynTree::JointDOFsDoubleArray *result = 0 ;
  
  if (!SWIG_check_num_args("new_JointDOFsDoubleArray",argc,1,1,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_unsigned_SS_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_JointDOFsDoubleArray" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  result = (iDynTree::JointDOFsDoubleArray *)new iDynTree::JointDOFsDoubleArray(arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__JointDOFsDoubleArray, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_JointDOFsDoubleArray__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::JointDOFsDoubleArray *result = 0 ;
  
  if (!SWIG_check_num_args("new_JointDOFsDoubleArray",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::JointDOFsDoubleArray *)new iDynTree::JointDOFsDoubleArray();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__JointDOFsDoubleArray, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_JointDOFsDoubleArray__SWIG_2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::JointDOFsDoubleArray *result = 0 ;
  
  if (!SWIG_check_num_args("new_JointDOFsDoubleArray",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_JointDOFsDoubleArray" "', argument " "1"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_JointDOFsDoubleArray" "', argument " "1"" of type '" "iDynTree::Model const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  result = (iDynTree::JointDOFsDoubleArray *)new iDynTree::JointDOFsDoubleArray((iDynTree::Model const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__JointDOFsDoubleArray, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_JointDOFsDoubleArray(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_JointDOFsDoubleArray__SWIG_1(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Model, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_JointDOFsDoubleArray__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_JointDOFsDoubleArray__SWIG_0(resc,resv,argc,argv);
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_JointDOFsDoubleArray'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::JointDOFsDoubleArray::JointDOFsDoubleArray(unsigned int)\n"
    "    iDynTree::JointDOFsDoubleArray::JointDOFsDoubleArray()\n"
    "    iDynTree::JointDOFsDoubleArray::JointDOFsDoubleArray(iDynTree::Model const &)\n");
  return 1;
}


int _wrap_JointDOFsDoubleArray_resize__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::JointDOFsDoubleArray *arg1 = (iDynTree::JointDOFsDoubleArray *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("JointDOFsDoubleArray_resize",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__JointDOFsDoubleArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JointDOFsDoubleArray_resize" "', argument " "1"" of type '" "iDynTree::JointDOFsDoubleArray *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::JointDOFsDoubleArray * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "JointDOFsDoubleArray_resize" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  (arg1)->resize(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_JointDOFsDoubleArray_resize__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::JointDOFsDoubleArray *arg1 = (iDynTree::JointDOFsDoubleArray *) 0 ;
  iDynTree::Model *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("JointDOFsDoubleArray_resize",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__JointDOFsDoubleArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JointDOFsDoubleArray_resize" "', argument " "1"" of type '" "iDynTree::JointDOFsDoubleArray *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::JointDOFsDoubleArray * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "JointDOFsDoubleArray_resize" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "JointDOFsDoubleArray_resize" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Model * >(argp2);
  (arg1)->resize((iDynTree::Model const &)*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_JointDOFsDoubleArray_resize(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__JointDOFsDoubleArray, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Model, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_JointDOFsDoubleArray_resize__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__JointDOFsDoubleArray, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_JointDOFsDoubleArray_resize__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'JointDOFsDoubleArray_resize'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::JointDOFsDoubleArray::resize(unsigned int)\n"
    "    iDynTree::JointDOFsDoubleArray::resize(iDynTree::Model const &)\n");
  return 1;
}


int _wrap_JointDOFsDoubleArray_isConsistent(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::JointDOFsDoubleArray *arg1 = (iDynTree::JointDOFsDoubleArray *) 0 ;
  iDynTree::Model *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("JointDOFsDoubleArray_isConsistent",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__JointDOFsDoubleArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JointDOFsDoubleArray_isConsistent" "', argument " "1"" of type '" "iDynTree::JointDOFsDoubleArray const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::JointDOFsDoubleArray * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "JointDOFsDoubleArray_isConsistent" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "JointDOFsDoubleArray_isConsistent" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Model * >(argp2);
  result = (bool)((iDynTree::JointDOFsDoubleArray const *)arg1)->isConsistent((iDynTree::Model const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_JointDOFsDoubleArray(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::JointDOFsDoubleArray *arg1 = (iDynTree::JointDOFsDoubleArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_JointDOFsDoubleArray",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__JointDOFsDoubleArray, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_JointDOFsDoubleArray" "', argument " "1"" of type '" "iDynTree::JointDOFsDoubleArray *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::JointDOFsDoubleArray * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_DOFSpatialForceArray__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  mxArray * _out;
  iDynTree::DOFSpatialForceArray *result = 0 ;
  
  if (!SWIG_check_num_args("new_DOFSpatialForceArray",argc,1,1,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_unsigned_SS_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DOFSpatialForceArray" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  result = (iDynTree::DOFSpatialForceArray *)new iDynTree::DOFSpatialForceArray(arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__DOFSpatialForceArray, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_DOFSpatialForceArray__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::DOFSpatialForceArray *result = 0 ;
  
  if (!SWIG_check_num_args("new_DOFSpatialForceArray",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::DOFSpatialForceArray *)new iDynTree::DOFSpatialForceArray();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__DOFSpatialForceArray, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_DOFSpatialForceArray__SWIG_2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::DOFSpatialForceArray *result = 0 ;
  
  if (!SWIG_check_num_args("new_DOFSpatialForceArray",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DOFSpatialForceArray" "', argument " "1"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DOFSpatialForceArray" "', argument " "1"" of type '" "iDynTree::Model const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  result = (iDynTree::DOFSpatialForceArray *)new iDynTree::DOFSpatialForceArray((iDynTree::Model const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__DOFSpatialForceArray, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_DOFSpatialForceArray(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_DOFSpatialForceArray__SWIG_1(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Model, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_DOFSpatialForceArray__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_DOFSpatialForceArray__SWIG_0(resc,resv,argc,argv);
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_DOFSpatialForceArray'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::DOFSpatialForceArray::DOFSpatialForceArray(unsigned int)\n"
    "    iDynTree::DOFSpatialForceArray::DOFSpatialForceArray()\n"
    "    iDynTree::DOFSpatialForceArray::DOFSpatialForceArray(iDynTree::Model const &)\n");
  return 1;
}


int _wrap_DOFSpatialForceArray_resize__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::DOFSpatialForceArray *arg1 = (iDynTree::DOFSpatialForceArray *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("DOFSpatialForceArray_resize",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__DOFSpatialForceArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOFSpatialForceArray_resize" "', argument " "1"" of type '" "iDynTree::DOFSpatialForceArray *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::DOFSpatialForceArray * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DOFSpatialForceArray_resize" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  (arg1)->resize(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DOFSpatialForceArray_resize__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::DOFSpatialForceArray *arg1 = (iDynTree::DOFSpatialForceArray *) 0 ;
  iDynTree::Model *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("DOFSpatialForceArray_resize",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__DOFSpatialForceArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOFSpatialForceArray_resize" "', argument " "1"" of type '" "iDynTree::DOFSpatialForceArray *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::DOFSpatialForceArray * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DOFSpatialForceArray_resize" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DOFSpatialForceArray_resize" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Model * >(argp2);
  (arg1)->resize((iDynTree::Model const &)*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DOFSpatialForceArray_resize(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__DOFSpatialForceArray, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Model, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DOFSpatialForceArray_resize__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__DOFSpatialForceArray, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DOFSpatialForceArray_resize__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'DOFSpatialForceArray_resize'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::DOFSpatialForceArray::resize(unsigned int const)\n"
    "    iDynTree::DOFSpatialForceArray::resize(iDynTree::Model const &)\n");
  return 1;
}


int _wrap_DOFSpatialForceArray_isConsistent(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::DOFSpatialForceArray *arg1 = (iDynTree::DOFSpatialForceArray *) 0 ;
  iDynTree::Model *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("DOFSpatialForceArray_isConsistent",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__DOFSpatialForceArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOFSpatialForceArray_isConsistent" "', argument " "1"" of type '" "iDynTree::DOFSpatialForceArray const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::DOFSpatialForceArray * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DOFSpatialForceArray_isConsistent" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DOFSpatialForceArray_isConsistent" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Model * >(argp2);
  result = (bool)((iDynTree::DOFSpatialForceArray const *)arg1)->isConsistent((iDynTree::Model const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DOFSpatialForceArray_paren__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::DOFSpatialForceArray *arg1 = (iDynTree::DOFSpatialForceArray *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialForceVector *result = 0 ;
  
  if (!SWIG_check_num_args("DOFSpatialForceArray_paren",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__DOFSpatialForceArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOFSpatialForceArray_paren" "', argument " "1"" of type '" "iDynTree::DOFSpatialForceArray *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::DOFSpatialForceArray * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DOFSpatialForceArray_paren" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (iDynTree::SpatialForceVector *) &(arg1)->operator ()(arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SpatialForceVector, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DOFSpatialForceArray_paren__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::DOFSpatialForceArray *arg1 = (iDynTree::DOFSpatialForceArray *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialForceVector *result = 0 ;
  
  if (!SWIG_check_num_args("DOFSpatialForceArray_paren",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__DOFSpatialForceArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOFSpatialForceArray_paren" "', argument " "1"" of type '" "iDynTree::DOFSpatialForceArray const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::DOFSpatialForceArray * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DOFSpatialForceArray_paren" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (iDynTree::SpatialForceVector *) &((iDynTree::DOFSpatialForceArray const *)arg1)->operator ()(arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SpatialForceVector, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DOFSpatialForceArray_paren(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__DOFSpatialForceArray, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DOFSpatialForceArray_paren__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__DOFSpatialForceArray, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DOFSpatialForceArray_paren__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'DOFSpatialForceArray_paren'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::DOFSpatialForceArray::operator ()(size_t const)\n"
    "    iDynTree::DOFSpatialForceArray::operator ()(size_t const) const\n");
  return 1;
}


int _wrap_delete_DOFSpatialForceArray(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::DOFSpatialForceArray *arg1 = (iDynTree::DOFSpatialForceArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_DOFSpatialForceArray",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__DOFSpatialForceArray, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DOFSpatialForceArray" "', argument " "1"" of type '" "iDynTree::DOFSpatialForceArray *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::DOFSpatialForceArray * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_DOFSpatialMotionArray__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  mxArray * _out;
  iDynTree::DOFSpatialMotionArray *result = 0 ;
  
  if (!SWIG_check_num_args("new_DOFSpatialMotionArray",argc,1,1,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_unsigned_SS_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DOFSpatialMotionArray" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  result = (iDynTree::DOFSpatialMotionArray *)new iDynTree::DOFSpatialMotionArray(arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__DOFSpatialMotionArray, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_DOFSpatialMotionArray__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::DOFSpatialMotionArray *result = 0 ;
  
  if (!SWIG_check_num_args("new_DOFSpatialMotionArray",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::DOFSpatialMotionArray *)new iDynTree::DOFSpatialMotionArray();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__DOFSpatialMotionArray, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_DOFSpatialMotionArray__SWIG_2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::DOFSpatialMotionArray *result = 0 ;
  
  if (!SWIG_check_num_args("new_DOFSpatialMotionArray",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DOFSpatialMotionArray" "', argument " "1"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DOFSpatialMotionArray" "', argument " "1"" of type '" "iDynTree::Model const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  result = (iDynTree::DOFSpatialMotionArray *)new iDynTree::DOFSpatialMotionArray((iDynTree::Model const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__DOFSpatialMotionArray, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_DOFSpatialMotionArray(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_DOFSpatialMotionArray__SWIG_1(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Model, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_DOFSpatialMotionArray__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_DOFSpatialMotionArray__SWIG_0(resc,resv,argc,argv);
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_DOFSpatialMotionArray'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::DOFSpatialMotionArray::DOFSpatialMotionArray(unsigned int)\n"
    "    iDynTree::DOFSpatialMotionArray::DOFSpatialMotionArray()\n"
    "    iDynTree::DOFSpatialMotionArray::DOFSpatialMotionArray(iDynTree::Model const &)\n");
  return 1;
}


int _wrap_DOFSpatialMotionArray_resize__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::DOFSpatialMotionArray *arg1 = (iDynTree::DOFSpatialMotionArray *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("DOFSpatialMotionArray_resize",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__DOFSpatialMotionArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOFSpatialMotionArray_resize" "', argument " "1"" of type '" "iDynTree::DOFSpatialMotionArray *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::DOFSpatialMotionArray * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DOFSpatialMotionArray_resize" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  (arg1)->resize(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DOFSpatialMotionArray_resize__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::DOFSpatialMotionArray *arg1 = (iDynTree::DOFSpatialMotionArray *) 0 ;
  iDynTree::Model *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("DOFSpatialMotionArray_resize",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__DOFSpatialMotionArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOFSpatialMotionArray_resize" "', argument " "1"" of type '" "iDynTree::DOFSpatialMotionArray *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::DOFSpatialMotionArray * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DOFSpatialMotionArray_resize" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DOFSpatialMotionArray_resize" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Model * >(argp2);
  (arg1)->resize((iDynTree::Model const &)*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DOFSpatialMotionArray_resize(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__DOFSpatialMotionArray, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Model, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DOFSpatialMotionArray_resize__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__DOFSpatialMotionArray, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DOFSpatialMotionArray_resize__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'DOFSpatialMotionArray_resize'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::DOFSpatialMotionArray::resize(unsigned int const)\n"
    "    iDynTree::DOFSpatialMotionArray::resize(iDynTree::Model const &)\n");
  return 1;
}


int _wrap_DOFSpatialMotionArray_isConsistent(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::DOFSpatialMotionArray *arg1 = (iDynTree::DOFSpatialMotionArray *) 0 ;
  iDynTree::Model *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("DOFSpatialMotionArray_isConsistent",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__DOFSpatialMotionArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOFSpatialMotionArray_isConsistent" "', argument " "1"" of type '" "iDynTree::DOFSpatialMotionArray const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::DOFSpatialMotionArray * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DOFSpatialMotionArray_isConsistent" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DOFSpatialMotionArray_isConsistent" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Model * >(argp2);
  result = (bool)((iDynTree::DOFSpatialMotionArray const *)arg1)->isConsistent((iDynTree::Model const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DOFSpatialMotionArray_paren__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::DOFSpatialMotionArray *arg1 = (iDynTree::DOFSpatialMotionArray *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialMotionVector *result = 0 ;
  
  if (!SWIG_check_num_args("DOFSpatialMotionArray_paren",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__DOFSpatialMotionArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOFSpatialMotionArray_paren" "', argument " "1"" of type '" "iDynTree::DOFSpatialMotionArray *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::DOFSpatialMotionArray * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DOFSpatialMotionArray_paren" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (iDynTree::SpatialMotionVector *) &(arg1)->operator ()(arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SpatialMotionVector, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DOFSpatialMotionArray_paren__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::DOFSpatialMotionArray *arg1 = (iDynTree::DOFSpatialMotionArray *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialMotionVector *result = 0 ;
  
  if (!SWIG_check_num_args("DOFSpatialMotionArray_paren",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__DOFSpatialMotionArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOFSpatialMotionArray_paren" "', argument " "1"" of type '" "iDynTree::DOFSpatialMotionArray const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::DOFSpatialMotionArray * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DOFSpatialMotionArray_paren" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (iDynTree::SpatialMotionVector *) &((iDynTree::DOFSpatialMotionArray const *)arg1)->operator ()(arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SpatialMotionVector, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DOFSpatialMotionArray_paren(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__DOFSpatialMotionArray, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DOFSpatialMotionArray_paren__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__DOFSpatialMotionArray, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DOFSpatialMotionArray_paren__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'DOFSpatialMotionArray_paren'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::DOFSpatialMotionArray::operator ()(size_t const)\n"
    "    iDynTree::DOFSpatialMotionArray::operator ()(size_t const) const\n");
  return 1;
}


int _wrap_delete_DOFSpatialMotionArray(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::DOFSpatialMotionArray *arg1 = (iDynTree::DOFSpatialMotionArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_DOFSpatialMotionArray",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__DOFSpatialMotionArray, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DOFSpatialMotionArray" "', argument " "1"" of type '" "iDynTree::DOFSpatialMotionArray *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::DOFSpatialMotionArray * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_FrameFreeFloatingJacobian__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  size_t arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  mxArray * _out;
  iDynTree::FrameFreeFloatingJacobian *result = 0 ;
  
  if (!SWIG_check_num_args("new_FrameFreeFloatingJacobian",argc,1,1,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_FrameFreeFloatingJacobian" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  result = (iDynTree::FrameFreeFloatingJacobian *)new iDynTree::FrameFreeFloatingJacobian(arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__FrameFreeFloatingJacobian, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_FrameFreeFloatingJacobian__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::FrameFreeFloatingJacobian *result = 0 ;
  
  if (!SWIG_check_num_args("new_FrameFreeFloatingJacobian",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::FrameFreeFloatingJacobian *)new iDynTree::FrameFreeFloatingJacobian();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__FrameFreeFloatingJacobian, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_FrameFreeFloatingJacobian__SWIG_2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::FrameFreeFloatingJacobian *result = 0 ;
  
  if (!SWIG_check_num_args("new_FrameFreeFloatingJacobian",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FrameFreeFloatingJacobian" "', argument " "1"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FrameFreeFloatingJacobian" "', argument " "1"" of type '" "iDynTree::Model const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  result = (iDynTree::FrameFreeFloatingJacobian *)new iDynTree::FrameFreeFloatingJacobian((iDynTree::Model const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__FrameFreeFloatingJacobian, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_FrameFreeFloatingJacobian(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_FrameFreeFloatingJacobian__SWIG_1(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Model, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_FrameFreeFloatingJacobian__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_FrameFreeFloatingJacobian__SWIG_0(resc,resv,argc,argv);
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_FrameFreeFloatingJacobian'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::FrameFreeFloatingJacobian::FrameFreeFloatingJacobian(size_t)\n"
    "    iDynTree::FrameFreeFloatingJacobian::FrameFreeFloatingJacobian()\n"
    "    iDynTree::FrameFreeFloatingJacobian::FrameFreeFloatingJacobian(iDynTree::Model const &)\n");
  return 1;
}


int _wrap_FrameFreeFloatingJacobian_resize(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::FrameFreeFloatingJacobian *arg1 = (iDynTree::FrameFreeFloatingJacobian *) 0 ;
  iDynTree::Model *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("FrameFreeFloatingJacobian_resize",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__FrameFreeFloatingJacobian, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FrameFreeFloatingJacobian_resize" "', argument " "1"" of type '" "iDynTree::FrameFreeFloatingJacobian *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::FrameFreeFloatingJacobian * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FrameFreeFloatingJacobian_resize" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FrameFreeFloatingJacobian_resize" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Model * >(argp2);
  (arg1)->resize((iDynTree::Model const &)*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_FrameFreeFloatingJacobian_isConsistent(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::FrameFreeFloatingJacobian *arg1 = (iDynTree::FrameFreeFloatingJacobian *) 0 ;
  iDynTree::Model *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("FrameFreeFloatingJacobian_isConsistent",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__FrameFreeFloatingJacobian, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FrameFreeFloatingJacobian_isConsistent" "', argument " "1"" of type '" "iDynTree::FrameFreeFloatingJacobian const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::FrameFreeFloatingJacobian * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FrameFreeFloatingJacobian_isConsistent" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FrameFreeFloatingJacobian_isConsistent" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Model * >(argp2);
  result = (bool)((iDynTree::FrameFreeFloatingJacobian const *)arg1)->isConsistent((iDynTree::Model const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_FrameFreeFloatingJacobian(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::FrameFreeFloatingJacobian *arg1 = (iDynTree::FrameFreeFloatingJacobian *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_FrameFreeFloatingJacobian",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__FrameFreeFloatingJacobian, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FrameFreeFloatingJacobian" "', argument " "1"" of type '" "iDynTree::FrameFreeFloatingJacobian *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::FrameFreeFloatingJacobian * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_MomentumFreeFloatingJacobian__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  size_t arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  mxArray * _out;
  iDynTree::MomentumFreeFloatingJacobian *result = 0 ;
  
  if (!SWIG_check_num_args("new_MomentumFreeFloatingJacobian",argc,1,1,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_MomentumFreeFloatingJacobian" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  result = (iDynTree::MomentumFreeFloatingJacobian *)new iDynTree::MomentumFreeFloatingJacobian(arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__MomentumFreeFloatingJacobian, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_MomentumFreeFloatingJacobian__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::MomentumFreeFloatingJacobian *result = 0 ;
  
  if (!SWIG_check_num_args("new_MomentumFreeFloatingJacobian",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::MomentumFreeFloatingJacobian *)new iDynTree::MomentumFreeFloatingJacobian();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__MomentumFreeFloatingJacobian, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_MomentumFreeFloatingJacobian__SWIG_2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::MomentumFreeFloatingJacobian *result = 0 ;
  
  if (!SWIG_check_num_args("new_MomentumFreeFloatingJacobian",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MomentumFreeFloatingJacobian" "', argument " "1"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MomentumFreeFloatingJacobian" "', argument " "1"" of type '" "iDynTree::Model const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  result = (iDynTree::MomentumFreeFloatingJacobian *)new iDynTree::MomentumFreeFloatingJacobian((iDynTree::Model const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__MomentumFreeFloatingJacobian, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_MomentumFreeFloatingJacobian(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_MomentumFreeFloatingJacobian__SWIG_1(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Model, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_MomentumFreeFloatingJacobian__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_MomentumFreeFloatingJacobian__SWIG_0(resc,resv,argc,argv);
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_MomentumFreeFloatingJacobian'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::MomentumFreeFloatingJacobian::MomentumFreeFloatingJacobian(size_t)\n"
    "    iDynTree::MomentumFreeFloatingJacobian::MomentumFreeFloatingJacobian()\n"
    "    iDynTree::MomentumFreeFloatingJacobian::MomentumFreeFloatingJacobian(iDynTree::Model const &)\n");
  return 1;
}


int _wrap_MomentumFreeFloatingJacobian_resize(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MomentumFreeFloatingJacobian *arg1 = (iDynTree::MomentumFreeFloatingJacobian *) 0 ;
  iDynTree::Model *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("MomentumFreeFloatingJacobian_resize",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MomentumFreeFloatingJacobian, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MomentumFreeFloatingJacobian_resize" "', argument " "1"" of type '" "iDynTree::MomentumFreeFloatingJacobian *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MomentumFreeFloatingJacobian * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MomentumFreeFloatingJacobian_resize" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MomentumFreeFloatingJacobian_resize" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Model * >(argp2);
  (arg1)->resize((iDynTree::Model const &)*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MomentumFreeFloatingJacobian_isConsistent(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MomentumFreeFloatingJacobian *arg1 = (iDynTree::MomentumFreeFloatingJacobian *) 0 ;
  iDynTree::Model *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("MomentumFreeFloatingJacobian_isConsistent",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MomentumFreeFloatingJacobian, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MomentumFreeFloatingJacobian_isConsistent" "', argument " "1"" of type '" "iDynTree::MomentumFreeFloatingJacobian const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MomentumFreeFloatingJacobian * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MomentumFreeFloatingJacobian_isConsistent" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MomentumFreeFloatingJacobian_isConsistent" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Model * >(argp2);
  result = (bool)((iDynTree::MomentumFreeFloatingJacobian const *)arg1)->isConsistent((iDynTree::Model const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_MomentumFreeFloatingJacobian(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MomentumFreeFloatingJacobian *arg1 = (iDynTree::MomentumFreeFloatingJacobian *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_MomentumFreeFloatingJacobian",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MomentumFreeFloatingJacobian, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MomentumFreeFloatingJacobian" "', argument " "1"" of type '" "iDynTree::MomentumFreeFloatingJacobian *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MomentumFreeFloatingJacobian * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_FreeFloatingMassMatrix__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  size_t arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  mxArray * _out;
  iDynTree::FreeFloatingMassMatrix *result = 0 ;
  
  if (!SWIG_check_num_args("new_FreeFloatingMassMatrix",argc,1,1,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_FreeFloatingMassMatrix" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  result = (iDynTree::FreeFloatingMassMatrix *)new iDynTree::FreeFloatingMassMatrix(arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__FreeFloatingMassMatrix, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_FreeFloatingMassMatrix__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::FreeFloatingMassMatrix *result = 0 ;
  
  if (!SWIG_check_num_args("new_FreeFloatingMassMatrix",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::FreeFloatingMassMatrix *)new iDynTree::FreeFloatingMassMatrix();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__FreeFloatingMassMatrix, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_FreeFloatingMassMatrix__SWIG_2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::FreeFloatingMassMatrix *result = 0 ;
  
  if (!SWIG_check_num_args("new_FreeFloatingMassMatrix",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FreeFloatingMassMatrix" "', argument " "1"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FreeFloatingMassMatrix" "', argument " "1"" of type '" "iDynTree::Model const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  result = (iDynTree::FreeFloatingMassMatrix *)new iDynTree::FreeFloatingMassMatrix((iDynTree::Model const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__FreeFloatingMassMatrix, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_FreeFloatingMassMatrix(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_FreeFloatingMassMatrix__SWIG_1(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Model, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_FreeFloatingMassMatrix__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_FreeFloatingMassMatrix__SWIG_0(resc,resv,argc,argv);
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_FreeFloatingMassMatrix'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::FreeFloatingMassMatrix::FreeFloatingMassMatrix(size_t)\n"
    "    iDynTree::FreeFloatingMassMatrix::FreeFloatingMassMatrix()\n"
    "    iDynTree::FreeFloatingMassMatrix::FreeFloatingMassMatrix(iDynTree::Model const &)\n");
  return 1;
}


int _wrap_FreeFloatingMassMatrix_resize(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::FreeFloatingMassMatrix *arg1 = (iDynTree::FreeFloatingMassMatrix *) 0 ;
  iDynTree::Model *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("FreeFloatingMassMatrix_resize",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__FreeFloatingMassMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FreeFloatingMassMatrix_resize" "', argument " "1"" of type '" "iDynTree::FreeFloatingMassMatrix *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::FreeFloatingMassMatrix * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FreeFloatingMassMatrix_resize" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FreeFloatingMassMatrix_resize" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Model * >(argp2);
  (arg1)->resize((iDynTree::Model const &)*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_FreeFloatingMassMatrix(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::FreeFloatingMassMatrix *arg1 = (iDynTree::FreeFloatingMassMatrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_FreeFloatingMassMatrix",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__FreeFloatingMassMatrix, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FreeFloatingMassMatrix" "', argument " "1"" of type '" "iDynTree::FreeFloatingMassMatrix *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::FreeFloatingMassMatrix * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_FreeFloatingPos__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::FreeFloatingPos *result = 0 ;
  
  if (!SWIG_check_num_args("new_FreeFloatingPos",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::FreeFloatingPos *)new iDynTree::FreeFloatingPos();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__FreeFloatingPos, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_FreeFloatingPos__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::FreeFloatingPos *result = 0 ;
  
  if (!SWIG_check_num_args("new_FreeFloatingPos",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FreeFloatingPos" "', argument " "1"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FreeFloatingPos" "', argument " "1"" of type '" "iDynTree::Model const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  result = (iDynTree::FreeFloatingPos *)new iDynTree::FreeFloatingPos((iDynTree::Model const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__FreeFloatingPos, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_FreeFloatingPos(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_FreeFloatingPos__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Model, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_FreeFloatingPos__SWIG_1(resc,resv,argc,argv);
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_FreeFloatingPos'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::FreeFloatingPos::FreeFloatingPos()\n"
    "    iDynTree::FreeFloatingPos::FreeFloatingPos(iDynTree::Model const &)\n");
  return 1;
}


int _wrap_FreeFloatingPos_resize(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::FreeFloatingPos *arg1 = (iDynTree::FreeFloatingPos *) 0 ;
  iDynTree::Model *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("FreeFloatingPos_resize",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__FreeFloatingPos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FreeFloatingPos_resize" "', argument " "1"" of type '" "iDynTree::FreeFloatingPos *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::FreeFloatingPos * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FreeFloatingPos_resize" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FreeFloatingPos_resize" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Model * >(argp2);
  (arg1)->resize((iDynTree::Model const &)*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_FreeFloatingPos_worldBasePos__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::FreeFloatingPos *arg1 = (iDynTree::FreeFloatingPos *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Transform *result = 0 ;
  
  if (!SWIG_check_num_args("FreeFloatingPos_worldBasePos",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__FreeFloatingPos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FreeFloatingPos_worldBasePos" "', argument " "1"" of type '" "iDynTree::FreeFloatingPos *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::FreeFloatingPos * >(argp1);
  result = (iDynTree::Transform *) &(arg1)->worldBasePos();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Transform, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_FreeFloatingPos_jointPos__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::FreeFloatingPos *arg1 = (iDynTree::FreeFloatingPos *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::JointPosDoubleArray *result = 0 ;
  
  if (!SWIG_check_num_args("FreeFloatingPos_jointPos",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__FreeFloatingPos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FreeFloatingPos_jointPos" "', argument " "1"" of type '" "iDynTree::FreeFloatingPos *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::FreeFloatingPos * >(argp1);
  result = (iDynTree::JointPosDoubleArray *) &(arg1)->jointPos();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__JointPosDoubleArray, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_FreeFloatingPos_worldBasePos__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::FreeFloatingPos *arg1 = (iDynTree::FreeFloatingPos *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Transform *result = 0 ;
  
  if (!SWIG_check_num_args("FreeFloatingPos_worldBasePos",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__FreeFloatingPos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FreeFloatingPos_worldBasePos" "', argument " "1"" of type '" "iDynTree::FreeFloatingPos const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::FreeFloatingPos * >(argp1);
  result = (iDynTree::Transform *) &((iDynTree::FreeFloatingPos const *)arg1)->worldBasePos();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Transform, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_FreeFloatingPos_worldBasePos(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__FreeFloatingPos, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_FreeFloatingPos_worldBasePos__SWIG_0(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__FreeFloatingPos, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_FreeFloatingPos_worldBasePos__SWIG_1(resc,resv,argc,argv);
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'FreeFloatingPos_worldBasePos'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::FreeFloatingPos::worldBasePos()\n"
    "    iDynTree::FreeFloatingPos::worldBasePos() const\n");
  return 1;
}


int _wrap_FreeFloatingPos_jointPos__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::FreeFloatingPos *arg1 = (iDynTree::FreeFloatingPos *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::JointPosDoubleArray *result = 0 ;
  
  if (!SWIG_check_num_args("FreeFloatingPos_jointPos",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__FreeFloatingPos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FreeFloatingPos_jointPos" "', argument " "1"" of type '" "iDynTree::FreeFloatingPos const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::FreeFloatingPos * >(argp1);
  result = (iDynTree::JointPosDoubleArray *) &((iDynTree::FreeFloatingPos const *)arg1)->jointPos();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__JointPosDoubleArray, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_FreeFloatingPos_jointPos(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__FreeFloatingPos, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_FreeFloatingPos_jointPos__SWIG_0(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__FreeFloatingPos, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_FreeFloatingPos_jointPos__SWIG_1(resc,resv,argc,argv);
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'FreeFloatingPos_jointPos'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::FreeFloatingPos::jointPos()\n"
    "    iDynTree::FreeFloatingPos::jointPos() const\n");
  return 1;
}


int _wrap_FreeFloatingPos_getNrOfPosCoords(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::FreeFloatingPos *arg1 = (iDynTree::FreeFloatingPos *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("FreeFloatingPos_getNrOfPosCoords",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__FreeFloatingPos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FreeFloatingPos_getNrOfPosCoords" "', argument " "1"" of type '" "iDynTree::FreeFloatingPos const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::FreeFloatingPos * >(argp1);
  result = (unsigned int)((iDynTree::FreeFloatingPos const *)arg1)->getNrOfPosCoords();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_FreeFloatingPos(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::FreeFloatingPos *arg1 = (iDynTree::FreeFloatingPos *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_FreeFloatingPos",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__FreeFloatingPos, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FreeFloatingPos" "', argument " "1"" of type '" "iDynTree::FreeFloatingPos *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::FreeFloatingPos * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_FreeFloatingGeneralizedTorques__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::FreeFloatingGeneralizedTorques *result = 0 ;
  
  if (!SWIG_check_num_args("new_FreeFloatingGeneralizedTorques",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::FreeFloatingGeneralizedTorques *)new iDynTree::FreeFloatingGeneralizedTorques();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__FreeFloatingGeneralizedTorques, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_FreeFloatingGeneralizedTorques__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::FreeFloatingGeneralizedTorques *result = 0 ;
  
  if (!SWIG_check_num_args("new_FreeFloatingGeneralizedTorques",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FreeFloatingGeneralizedTorques" "', argument " "1"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FreeFloatingGeneralizedTorques" "', argument " "1"" of type '" "iDynTree::Model const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  result = (iDynTree::FreeFloatingGeneralizedTorques *)new iDynTree::FreeFloatingGeneralizedTorques((iDynTree::Model const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__FreeFloatingGeneralizedTorques, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_FreeFloatingGeneralizedTorques(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_FreeFloatingGeneralizedTorques__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Model, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_FreeFloatingGeneralizedTorques__SWIG_1(resc,resv,argc,argv);
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_FreeFloatingGeneralizedTorques'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::FreeFloatingGeneralizedTorques::FreeFloatingGeneralizedTorques()\n"
    "    iDynTree::FreeFloatingGeneralizedTorques::FreeFloatingGeneralizedTorques(iDynTree::Model const &)\n");
  return 1;
}


int _wrap_FreeFloatingGeneralizedTorques_resize(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::FreeFloatingGeneralizedTorques *arg1 = (iDynTree::FreeFloatingGeneralizedTorques *) 0 ;
  iDynTree::Model *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("FreeFloatingGeneralizedTorques_resize",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__FreeFloatingGeneralizedTorques, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FreeFloatingGeneralizedTorques_resize" "', argument " "1"" of type '" "iDynTree::FreeFloatingGeneralizedTorques *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::FreeFloatingGeneralizedTorques * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FreeFloatingGeneralizedTorques_resize" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FreeFloatingGeneralizedTorques_resize" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Model * >(argp2);
  (arg1)->resize((iDynTree::Model const &)*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_FreeFloatingGeneralizedTorques_baseWrench__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::FreeFloatingGeneralizedTorques *arg1 = (iDynTree::FreeFloatingGeneralizedTorques *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Wrench *result = 0 ;
  
  if (!SWIG_check_num_args("FreeFloatingGeneralizedTorques_baseWrench",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__FreeFloatingGeneralizedTorques, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FreeFloatingGeneralizedTorques_baseWrench" "', argument " "1"" of type '" "iDynTree::FreeFloatingGeneralizedTorques *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::FreeFloatingGeneralizedTorques * >(argp1);
  result = (iDynTree::Wrench *) &(arg1)->baseWrench();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Wrench, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_FreeFloatingGeneralizedTorques_jointTorques__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::FreeFloatingGeneralizedTorques *arg1 = (iDynTree::FreeFloatingGeneralizedTorques *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::JointDOFsDoubleArray *result = 0 ;
  
  if (!SWIG_check_num_args("FreeFloatingGeneralizedTorques_jointTorques",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__FreeFloatingGeneralizedTorques, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FreeFloatingGeneralizedTorques_jointTorques" "', argument " "1"" of type '" "iDynTree::FreeFloatingGeneralizedTorques *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::FreeFloatingGeneralizedTorques * >(argp1);
  result = (iDynTree::JointDOFsDoubleArray *) &(arg1)->jointTorques();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__JointDOFsDoubleArray, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_FreeFloatingGeneralizedTorques_baseWrench__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::FreeFloatingGeneralizedTorques *arg1 = (iDynTree::FreeFloatingGeneralizedTorques *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Wrench *result = 0 ;
  
  if (!SWIG_check_num_args("FreeFloatingGeneralizedTorques_baseWrench",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__FreeFloatingGeneralizedTorques, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FreeFloatingGeneralizedTorques_baseWrench" "', argument " "1"" of type '" "iDynTree::FreeFloatingGeneralizedTorques const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::FreeFloatingGeneralizedTorques * >(argp1);
  result = (iDynTree::Wrench *) &((iDynTree::FreeFloatingGeneralizedTorques const *)arg1)->baseWrench();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Wrench, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_FreeFloatingGeneralizedTorques_baseWrench(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__FreeFloatingGeneralizedTorques, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_FreeFloatingGeneralizedTorques_baseWrench__SWIG_0(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__FreeFloatingGeneralizedTorques, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_FreeFloatingGeneralizedTorques_baseWrench__SWIG_1(resc,resv,argc,argv);
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'FreeFloatingGeneralizedTorques_baseWrench'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::FreeFloatingGeneralizedTorques::baseWrench()\n"
    "    iDynTree::FreeFloatingGeneralizedTorques::baseWrench() const\n");
  return 1;
}


int _wrap_FreeFloatingGeneralizedTorques_jointTorques__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::FreeFloatingGeneralizedTorques *arg1 = (iDynTree::FreeFloatingGeneralizedTorques *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::JointDOFsDoubleArray *result = 0 ;
  
  if (!SWIG_check_num_args("FreeFloatingGeneralizedTorques_jointTorques",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__FreeFloatingGeneralizedTorques, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FreeFloatingGeneralizedTorques_jointTorques" "', argument " "1"" of type '" "iDynTree::FreeFloatingGeneralizedTorques const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::FreeFloatingGeneralizedTorques * >(argp1);
  result = (iDynTree::JointDOFsDoubleArray *) &((iDynTree::FreeFloatingGeneralizedTorques const *)arg1)->jointTorques();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__JointDOFsDoubleArray, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_FreeFloatingGeneralizedTorques_jointTorques(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__FreeFloatingGeneralizedTorques, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_FreeFloatingGeneralizedTorques_jointTorques__SWIG_0(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__FreeFloatingGeneralizedTorques, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_FreeFloatingGeneralizedTorques_jointTorques__SWIG_1(resc,resv,argc,argv);
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'FreeFloatingGeneralizedTorques_jointTorques'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::FreeFloatingGeneralizedTorques::jointTorques()\n"
    "    iDynTree::FreeFloatingGeneralizedTorques::jointTorques() const\n");
  return 1;
}


int _wrap_FreeFloatingGeneralizedTorques_getNrOfDOFs(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::FreeFloatingGeneralizedTorques *arg1 = (iDynTree::FreeFloatingGeneralizedTorques *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("FreeFloatingGeneralizedTorques_getNrOfDOFs",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__FreeFloatingGeneralizedTorques, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FreeFloatingGeneralizedTorques_getNrOfDOFs" "', argument " "1"" of type '" "iDynTree::FreeFloatingGeneralizedTorques const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::FreeFloatingGeneralizedTorques * >(argp1);
  result = (unsigned int)((iDynTree::FreeFloatingGeneralizedTorques const *)arg1)->getNrOfDOFs();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_FreeFloatingGeneralizedTorques(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::FreeFloatingGeneralizedTorques *arg1 = (iDynTree::FreeFloatingGeneralizedTorques *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_FreeFloatingGeneralizedTorques",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__FreeFloatingGeneralizedTorques, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FreeFloatingGeneralizedTorques" "', argument " "1"" of type '" "iDynTree::FreeFloatingGeneralizedTorques *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::FreeFloatingGeneralizedTorques * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_FreeFloatingVel__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::FreeFloatingVel *result = 0 ;
  
  if (!SWIG_check_num_args("new_FreeFloatingVel",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::FreeFloatingVel *)new iDynTree::FreeFloatingVel();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__FreeFloatingVel, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_FreeFloatingVel__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::FreeFloatingVel *result = 0 ;
  
  if (!SWIG_check_num_args("new_FreeFloatingVel",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FreeFloatingVel" "', argument " "1"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FreeFloatingVel" "', argument " "1"" of type '" "iDynTree::Model const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  result = (iDynTree::FreeFloatingVel *)new iDynTree::FreeFloatingVel((iDynTree::Model const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__FreeFloatingVel, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_FreeFloatingVel(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_FreeFloatingVel__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Model, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_FreeFloatingVel__SWIG_1(resc,resv,argc,argv);
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_FreeFloatingVel'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::FreeFloatingVel::FreeFloatingVel()\n"
    "    iDynTree::FreeFloatingVel::FreeFloatingVel(iDynTree::Model const &)\n");
  return 1;
}


int _wrap_FreeFloatingVel_resize(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::FreeFloatingVel *arg1 = (iDynTree::FreeFloatingVel *) 0 ;
  iDynTree::Model *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("FreeFloatingVel_resize",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__FreeFloatingVel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FreeFloatingVel_resize" "', argument " "1"" of type '" "iDynTree::FreeFloatingVel *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::FreeFloatingVel * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FreeFloatingVel_resize" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FreeFloatingVel_resize" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Model * >(argp2);
  (arg1)->resize((iDynTree::Model const &)*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_FreeFloatingVel_baseVel__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::FreeFloatingVel *arg1 = (iDynTree::FreeFloatingVel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Twist *result = 0 ;
  
  if (!SWIG_check_num_args("FreeFloatingVel_baseVel",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__FreeFloatingVel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FreeFloatingVel_baseVel" "', argument " "1"" of type '" "iDynTree::FreeFloatingVel *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::FreeFloatingVel * >(argp1);
  result = (iDynTree::Twist *) &(arg1)->baseVel();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Twist, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_FreeFloatingVel_jointVel__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::FreeFloatingVel *arg1 = (iDynTree::FreeFloatingVel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::JointDOFsDoubleArray *result = 0 ;
  
  if (!SWIG_check_num_args("FreeFloatingVel_jointVel",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__FreeFloatingVel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FreeFloatingVel_jointVel" "', argument " "1"" of type '" "iDynTree::FreeFloatingVel *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::FreeFloatingVel * >(argp1);
  result = (iDynTree::JointDOFsDoubleArray *) &(arg1)->jointVel();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__JointDOFsDoubleArray, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_FreeFloatingVel_baseVel__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::FreeFloatingVel *arg1 = (iDynTree::FreeFloatingVel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Twist *result = 0 ;
  
  if (!SWIG_check_num_args("FreeFloatingVel_baseVel",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__FreeFloatingVel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FreeFloatingVel_baseVel" "', argument " "1"" of type '" "iDynTree::FreeFloatingVel const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::FreeFloatingVel * >(argp1);
  result = (iDynTree::Twist *) &((iDynTree::FreeFloatingVel const *)arg1)->baseVel();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Twist, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_FreeFloatingVel_baseVel(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__FreeFloatingVel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_FreeFloatingVel_baseVel__SWIG_0(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__FreeFloatingVel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_FreeFloatingVel_baseVel__SWIG_1(resc,resv,argc,argv);
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'FreeFloatingVel_baseVel'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::FreeFloatingVel::baseVel()\n"
    "    iDynTree::FreeFloatingVel::baseVel() const\n");
  return 1;
}


int _wrap_FreeFloatingVel_jointVel__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::FreeFloatingVel *arg1 = (iDynTree::FreeFloatingVel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::JointDOFsDoubleArray *result = 0 ;
  
  if (!SWIG_check_num_args("FreeFloatingVel_jointVel",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__FreeFloatingVel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FreeFloatingVel_jointVel" "', argument " "1"" of type '" "iDynTree::FreeFloatingVel const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::FreeFloatingVel * >(argp1);
  result = (iDynTree::JointDOFsDoubleArray *) &((iDynTree::FreeFloatingVel const *)arg1)->jointVel();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__JointDOFsDoubleArray, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_FreeFloatingVel_jointVel(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__FreeFloatingVel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_FreeFloatingVel_jointVel__SWIG_0(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__FreeFloatingVel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_FreeFloatingVel_jointVel__SWIG_1(resc,resv,argc,argv);
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'FreeFloatingVel_jointVel'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::FreeFloatingVel::jointVel()\n"
    "    iDynTree::FreeFloatingVel::jointVel() const\n");
  return 1;
}


int _wrap_FreeFloatingVel_getNrOfDOFs(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::FreeFloatingVel *arg1 = (iDynTree::FreeFloatingVel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("FreeFloatingVel_getNrOfDOFs",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__FreeFloatingVel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FreeFloatingVel_getNrOfDOFs" "', argument " "1"" of type '" "iDynTree::FreeFloatingVel const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::FreeFloatingVel * >(argp1);
  result = (unsigned int)((iDynTree::FreeFloatingVel const *)arg1)->getNrOfDOFs();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_FreeFloatingVel(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::FreeFloatingVel *arg1 = (iDynTree::FreeFloatingVel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_FreeFloatingVel",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__FreeFloatingVel, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FreeFloatingVel" "', argument " "1"" of type '" "iDynTree::FreeFloatingVel *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::FreeFloatingVel * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_FreeFloatingAcc__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::FreeFloatingAcc *result = 0 ;
  
  if (!SWIG_check_num_args("new_FreeFloatingAcc",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::FreeFloatingAcc *)new iDynTree::FreeFloatingAcc();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__FreeFloatingAcc, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_FreeFloatingAcc__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::FreeFloatingAcc *result = 0 ;
  
  if (!SWIG_check_num_args("new_FreeFloatingAcc",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FreeFloatingAcc" "', argument " "1"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FreeFloatingAcc" "', argument " "1"" of type '" "iDynTree::Model const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  result = (iDynTree::FreeFloatingAcc *)new iDynTree::FreeFloatingAcc((iDynTree::Model const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__FreeFloatingAcc, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_FreeFloatingAcc(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_FreeFloatingAcc__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Model, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_FreeFloatingAcc__SWIG_1(resc,resv,argc,argv);
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_FreeFloatingAcc'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::FreeFloatingAcc::FreeFloatingAcc()\n"
    "    iDynTree::FreeFloatingAcc::FreeFloatingAcc(iDynTree::Model const &)\n");
  return 1;
}


int _wrap_FreeFloatingAcc_resize(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::FreeFloatingAcc *arg1 = (iDynTree::FreeFloatingAcc *) 0 ;
  iDynTree::Model *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("FreeFloatingAcc_resize",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__FreeFloatingAcc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FreeFloatingAcc_resize" "', argument " "1"" of type '" "iDynTree::FreeFloatingAcc *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::FreeFloatingAcc * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FreeFloatingAcc_resize" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FreeFloatingAcc_resize" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Model * >(argp2);
  (arg1)->resize((iDynTree::Model const &)*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_FreeFloatingAcc_baseAcc__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::FreeFloatingAcc *arg1 = (iDynTree::FreeFloatingAcc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::SpatialAcc *result = 0 ;
  
  if (!SWIG_check_num_args("FreeFloatingAcc_baseAcc",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__FreeFloatingAcc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FreeFloatingAcc_baseAcc" "', argument " "1"" of type '" "iDynTree::FreeFloatingAcc *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::FreeFloatingAcc * >(argp1);
  result = (iDynTree::SpatialAcc *) &(arg1)->baseAcc();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SpatialAcc, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_FreeFloatingAcc_jointAcc__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::FreeFloatingAcc *arg1 = (iDynTree::FreeFloatingAcc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::JointDOFsDoubleArray *result = 0 ;
  
  if (!SWIG_check_num_args("FreeFloatingAcc_jointAcc",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__FreeFloatingAcc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FreeFloatingAcc_jointAcc" "', argument " "1"" of type '" "iDynTree::FreeFloatingAcc *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::FreeFloatingAcc * >(argp1);
  result = (iDynTree::JointDOFsDoubleArray *) &(arg1)->jointAcc();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__JointDOFsDoubleArray, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_FreeFloatingAcc_baseAcc__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::FreeFloatingAcc *arg1 = (iDynTree::FreeFloatingAcc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::SpatialAcc *result = 0 ;
  
  if (!SWIG_check_num_args("FreeFloatingAcc_baseAcc",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__FreeFloatingAcc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FreeFloatingAcc_baseAcc" "', argument " "1"" of type '" "iDynTree::FreeFloatingAcc const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::FreeFloatingAcc * >(argp1);
  result = (iDynTree::SpatialAcc *) &((iDynTree::FreeFloatingAcc const *)arg1)->baseAcc();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SpatialAcc, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_FreeFloatingAcc_baseAcc(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__FreeFloatingAcc, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_FreeFloatingAcc_baseAcc__SWIG_0(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__FreeFloatingAcc, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_FreeFloatingAcc_baseAcc__SWIG_1(resc,resv,argc,argv);
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'FreeFloatingAcc_baseAcc'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::FreeFloatingAcc::baseAcc()\n"
    "    iDynTree::FreeFloatingAcc::baseAcc() const\n");
  return 1;
}


int _wrap_FreeFloatingAcc_jointAcc__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::FreeFloatingAcc *arg1 = (iDynTree::FreeFloatingAcc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::JointDOFsDoubleArray *result = 0 ;
  
  if (!SWIG_check_num_args("FreeFloatingAcc_jointAcc",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__FreeFloatingAcc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FreeFloatingAcc_jointAcc" "', argument " "1"" of type '" "iDynTree::FreeFloatingAcc const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::FreeFloatingAcc * >(argp1);
  result = (iDynTree::JointDOFsDoubleArray *) &((iDynTree::FreeFloatingAcc const *)arg1)->jointAcc();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__JointDOFsDoubleArray, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_FreeFloatingAcc_jointAcc(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__FreeFloatingAcc, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_FreeFloatingAcc_jointAcc__SWIG_0(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__FreeFloatingAcc, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_FreeFloatingAcc_jointAcc__SWIG_1(resc,resv,argc,argv);
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'FreeFloatingAcc_jointAcc'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::FreeFloatingAcc::jointAcc()\n"
    "    iDynTree::FreeFloatingAcc::jointAcc() const\n");
  return 1;
}


int _wrap_FreeFloatingAcc_getNrOfDOFs(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::FreeFloatingAcc *arg1 = (iDynTree::FreeFloatingAcc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("FreeFloatingAcc_getNrOfDOFs",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__FreeFloatingAcc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FreeFloatingAcc_getNrOfDOFs" "', argument " "1"" of type '" "iDynTree::FreeFloatingAcc const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::FreeFloatingAcc * >(argp1);
  result = (unsigned int)((iDynTree::FreeFloatingAcc const *)arg1)->getNrOfDOFs();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_FreeFloatingAcc(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::FreeFloatingAcc *arg1 = (iDynTree::FreeFloatingAcc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_FreeFloatingAcc",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__FreeFloatingAcc, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FreeFloatingAcc" "', argument " "1"" of type '" "iDynTree::FreeFloatingAcc *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::FreeFloatingAcc * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ContactWrench_contactPoint__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ContactWrench *arg1 = (iDynTree::ContactWrench *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Position *result = 0 ;
  
  if (!SWIG_check_num_args("ContactWrench_contactPoint",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ContactWrench, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ContactWrench_contactPoint" "', argument " "1"" of type '" "iDynTree::ContactWrench *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ContactWrench * >(argp1);
  result = (iDynTree::Position *) &(arg1)->contactPoint();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Position, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ContactWrench_contactWrench__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ContactWrench *arg1 = (iDynTree::ContactWrench *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Wrench *result = 0 ;
  
  if (!SWIG_check_num_args("ContactWrench_contactWrench",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ContactWrench, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ContactWrench_contactWrench" "', argument " "1"" of type '" "iDynTree::ContactWrench *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ContactWrench * >(argp1);
  result = (iDynTree::Wrench *) &(arg1)->contactWrench();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Wrench, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ContactWrench_contactId(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ContactWrench *arg1 = (iDynTree::ContactWrench *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned long *result = 0 ;
  
  if (!SWIG_check_num_args("ContactWrench_contactId",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ContactWrench, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ContactWrench_contactId" "', argument " "1"" of type '" "iDynTree::ContactWrench *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ContactWrench * >(argp1);
  result = (unsigned long *) &(arg1)->contactId();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_long, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ContactWrench_contactPoint__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ContactWrench *arg1 = (iDynTree::ContactWrench *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Position *result = 0 ;
  
  if (!SWIG_check_num_args("ContactWrench_contactPoint",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ContactWrench, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ContactWrench_contactPoint" "', argument " "1"" of type '" "iDynTree::ContactWrench const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ContactWrench * >(argp1);
  result = (iDynTree::Position *) &((iDynTree::ContactWrench const *)arg1)->contactPoint();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Position, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ContactWrench_contactPoint(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__ContactWrench, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ContactWrench_contactPoint__SWIG_0(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__ContactWrench, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ContactWrench_contactPoint__SWIG_1(resc,resv,argc,argv);
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'ContactWrench_contactPoint'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::ContactWrench::contactPoint()\n"
    "    iDynTree::ContactWrench::contactPoint() const\n");
  return 1;
}


int _wrap_ContactWrench_contactWrench__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ContactWrench *arg1 = (iDynTree::ContactWrench *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Wrench *result = 0 ;
  
  if (!SWIG_check_num_args("ContactWrench_contactWrench",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ContactWrench, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ContactWrench_contactWrench" "', argument " "1"" of type '" "iDynTree::ContactWrench const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ContactWrench * >(argp1);
  result = (iDynTree::Wrench *) &((iDynTree::ContactWrench const *)arg1)->contactWrench();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Wrench, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ContactWrench_contactWrench(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__ContactWrench, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ContactWrench_contactWrench__SWIG_0(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__ContactWrench, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ContactWrench_contactWrench__SWIG_1(resc,resv,argc,argv);
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'ContactWrench_contactWrench'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::ContactWrench::contactWrench()\n"
    "    iDynTree::ContactWrench::contactWrench() const\n");
  return 1;
}


int _wrap_new_ContactWrench(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::ContactWrench *result = 0 ;
  
  if (!SWIG_check_num_args("new_ContactWrench",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::ContactWrench *)new iDynTree::ContactWrench();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__ContactWrench, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_ContactWrench(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ContactWrench *arg1 = (iDynTree::ContactWrench *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_ContactWrench",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ContactWrench, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ContactWrench" "', argument " "1"" of type '" "iDynTree::ContactWrench *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ContactWrench * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_LinkContactWrenches__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  mxArray * _out;
  iDynTree::LinkContactWrenches *result = 0 ;
  
  if (!SWIG_check_num_args("new_LinkContactWrenches",argc,1,1,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_unsigned_SS_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_LinkContactWrenches" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  result = (iDynTree::LinkContactWrenches *)new iDynTree::LinkContactWrenches(arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__LinkContactWrenches, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_LinkContactWrenches__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::LinkContactWrenches *result = 0 ;
  
  if (!SWIG_check_num_args("new_LinkContactWrenches",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::LinkContactWrenches *)new iDynTree::LinkContactWrenches();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__LinkContactWrenches, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_LinkContactWrenches__SWIG_2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::LinkContactWrenches *result = 0 ;
  
  if (!SWIG_check_num_args("new_LinkContactWrenches",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LinkContactWrenches" "', argument " "1"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LinkContactWrenches" "', argument " "1"" of type '" "iDynTree::Model const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  result = (iDynTree::LinkContactWrenches *)new iDynTree::LinkContactWrenches((iDynTree::Model const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__LinkContactWrenches, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_LinkContactWrenches(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_LinkContactWrenches__SWIG_1(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Model, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_LinkContactWrenches__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_LinkContactWrenches__SWIG_0(resc,resv,argc,argv);
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_LinkContactWrenches'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::LinkContactWrenches::LinkContactWrenches(unsigned int)\n"
    "    iDynTree::LinkContactWrenches::LinkContactWrenches()\n"
    "    iDynTree::LinkContactWrenches::LinkContactWrenches(iDynTree::Model const &)\n");
  return 1;
}


int _wrap_LinkContactWrenches_resize__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkContactWrenches *arg1 = (iDynTree::LinkContactWrenches *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("LinkContactWrenches_resize",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkContactWrenches, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinkContactWrenches_resize" "', argument " "1"" of type '" "iDynTree::LinkContactWrenches *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkContactWrenches * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LinkContactWrenches_resize" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  (arg1)->resize(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_LinkContactWrenches_resize__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkContactWrenches *arg1 = (iDynTree::LinkContactWrenches *) 0 ;
  iDynTree::Model *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("LinkContactWrenches_resize",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkContactWrenches, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinkContactWrenches_resize" "', argument " "1"" of type '" "iDynTree::LinkContactWrenches *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkContactWrenches * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LinkContactWrenches_resize" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinkContactWrenches_resize" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Model * >(argp2);
  (arg1)->resize((iDynTree::Model const &)*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_LinkContactWrenches_resize(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__LinkContactWrenches, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Model, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_LinkContactWrenches_resize__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__LinkContactWrenches, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_LinkContactWrenches_resize__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'LinkContactWrenches_resize'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::LinkContactWrenches::resize(unsigned int)\n"
    "    iDynTree::LinkContactWrenches::resize(iDynTree::Model const &)\n");
  return 1;
}


int _wrap_LinkContactWrenches_getNrOfContactsForLink(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkContactWrenches *arg1 = (iDynTree::LinkContactWrenches *) 0 ;
  iDynTree::LinkIndex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  size_t result;
  
  if (!SWIG_check_num_args("LinkContactWrenches_getNrOfContactsForLink",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkContactWrenches, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinkContactWrenches_getNrOfContactsForLink" "', argument " "1"" of type '" "iDynTree::LinkContactWrenches const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkContactWrenches * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LinkContactWrenches_getNrOfContactsForLink" "', argument " "2"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg2 = static_cast< iDynTree::LinkIndex >(val2);
  result = ((iDynTree::LinkContactWrenches const *)arg1)->getNrOfContactsForLink(arg2);
  _out = SWIG_From_size_t(static_cast< size_t >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_LinkContactWrenches_setNrOfContactsForLink(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkContactWrenches *arg1 = (iDynTree::LinkContactWrenches *) 0 ;
  iDynTree::LinkIndex arg2 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("LinkContactWrenches_setNrOfContactsForLink",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkContactWrenches, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinkContactWrenches_setNrOfContactsForLink" "', argument " "1"" of type '" "iDynTree::LinkContactWrenches *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkContactWrenches * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LinkContactWrenches_setNrOfContactsForLink" "', argument " "2"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg2 = static_cast< iDynTree::LinkIndex >(val2);
  ecode3 = SWIG_AsVal_size_t(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LinkContactWrenches_setNrOfContactsForLink" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  (arg1)->setNrOfContactsForLink(arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_LinkContactWrenches_getNrOfLinks(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkContactWrenches *arg1 = (iDynTree::LinkContactWrenches *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  size_t result;
  
  if (!SWIG_check_num_args("LinkContactWrenches_getNrOfLinks",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkContactWrenches, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinkContactWrenches_getNrOfLinks" "', argument " "1"" of type '" "iDynTree::LinkContactWrenches const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkContactWrenches * >(argp1);
  result = ((iDynTree::LinkContactWrenches const *)arg1)->getNrOfLinks();
  _out = SWIG_From_size_t(static_cast< size_t >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_LinkContactWrenches_contactWrench__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkContactWrenches *arg1 = (iDynTree::LinkContactWrenches *) 0 ;
  iDynTree::LinkIndex arg2 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  iDynTree::ContactWrench *result = 0 ;
  
  if (!SWIG_check_num_args("LinkContactWrenches_contactWrench",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkContactWrenches, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinkContactWrenches_contactWrench" "', argument " "1"" of type '" "iDynTree::LinkContactWrenches *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkContactWrenches * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LinkContactWrenches_contactWrench" "', argument " "2"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg2 = static_cast< iDynTree::LinkIndex >(val2);
  ecode3 = SWIG_AsVal_size_t(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LinkContactWrenches_contactWrench" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = (iDynTree::ContactWrench *) &(arg1)->contactWrench(arg2,arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__ContactWrench, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_LinkContactWrenches_contactWrench__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkContactWrenches *arg1 = (iDynTree::LinkContactWrenches *) 0 ;
  iDynTree::LinkIndex arg2 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  iDynTree::ContactWrench *result = 0 ;
  
  if (!SWIG_check_num_args("LinkContactWrenches_contactWrench",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkContactWrenches, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinkContactWrenches_contactWrench" "', argument " "1"" of type '" "iDynTree::LinkContactWrenches const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkContactWrenches * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LinkContactWrenches_contactWrench" "', argument " "2"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg2 = static_cast< iDynTree::LinkIndex >(val2);
  ecode3 = SWIG_AsVal_size_t(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LinkContactWrenches_contactWrench" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = (iDynTree::ContactWrench *) &((iDynTree::LinkContactWrenches const *)arg1)->contactWrench(arg2,arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__ContactWrench, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_LinkContactWrenches_contactWrench(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__LinkContactWrenches, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_LinkContactWrenches_contactWrench__SWIG_0(resc,resv,argc,argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__LinkContactWrenches, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_LinkContactWrenches_contactWrench__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'LinkContactWrenches_contactWrench'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::LinkContactWrenches::contactWrench(iDynTree::LinkIndex const,size_t const)\n"
    "    iDynTree::LinkContactWrenches::contactWrench(iDynTree::LinkIndex const,size_t const) const\n");
  return 1;
}


int _wrap_LinkContactWrenches_computeNetWrenches(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkContactWrenches *arg1 = (iDynTree::LinkContactWrenches *) 0 ;
  iDynTree::LinkNetExternalWrenches *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("LinkContactWrenches_computeNetWrenches",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkContactWrenches, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinkContactWrenches_computeNetWrenches" "', argument " "1"" of type '" "iDynTree::LinkContactWrenches const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkContactWrenches * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__LinkWrenches,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LinkContactWrenches_computeNetWrenches" "', argument " "2"" of type '" "iDynTree::LinkNetExternalWrenches &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinkContactWrenches_computeNetWrenches" "', argument " "2"" of type '" "iDynTree::LinkNetExternalWrenches &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::LinkNetExternalWrenches * >(argp2);
  result = (bool)((iDynTree::LinkContactWrenches const *)arg1)->computeNetWrenches(*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_LinkContactWrenches_toString(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkContactWrenches *arg1 = (iDynTree::LinkContactWrenches *) 0 ;
  iDynTree::Model *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("LinkContactWrenches_toString",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkContactWrenches, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinkContactWrenches_toString" "', argument " "1"" of type '" "iDynTree::LinkContactWrenches const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkContactWrenches * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LinkContactWrenches_toString" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinkContactWrenches_toString" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Model * >(argp2);
  result = ((iDynTree::LinkContactWrenches const *)arg1)->toString((iDynTree::Model const &)*arg2);
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_LinkContactWrenches(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkContactWrenches *arg1 = (iDynTree::LinkContactWrenches *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_LinkContactWrenches",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkContactWrenches, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LinkContactWrenches" "', argument " "1"" of type '" "iDynTree::LinkContactWrenches *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkContactWrenches * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ForwardPositionKinematics__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = 0 ;
  iDynTree::Traversal *arg2 = 0 ;
  iDynTree::Transform *arg3 = 0 ;
  iDynTree::VectorDynSize *arg4 = 0 ;
  iDynTree::LinkPositions *arg5 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("ForwardPositionKinematics",argc,5,5,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ForwardPositionKinematics" "', argument " "1"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ForwardPositionKinematics" "', argument " "1"" of type '" "iDynTree::Model const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Traversal,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ForwardPositionKinematics" "', argument " "2"" of type '" "iDynTree::Traversal const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ForwardPositionKinematics" "', argument " "2"" of type '" "iDynTree::Traversal const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Traversal * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__Transform,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ForwardPositionKinematics" "', argument " "3"" of type '" "iDynTree::Transform const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ForwardPositionKinematics" "', argument " "3"" of type '" "iDynTree::Transform const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::Transform * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ForwardPositionKinematics" "', argument " "4"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ForwardPositionKinematics" "', argument " "4"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  arg4 = reinterpret_cast< iDynTree::VectorDynSize * >(argp4);
  res5 = SWIG_ConvertPtr(argv[4], &argp5, SWIGTYPE_p_iDynTree__LinkPositions,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ForwardPositionKinematics" "', argument " "5"" of type '" "iDynTree::LinkPositions &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ForwardPositionKinematics" "', argument " "5"" of type '" "iDynTree::LinkPositions &""'"); 
  }
  arg5 = reinterpret_cast< iDynTree::LinkPositions * >(argp5);
  result = (bool)iDynTree::ForwardPositionKinematics((iDynTree::Model const &)*arg1,(iDynTree::Traversal const &)*arg2,(iDynTree::Transform const &)*arg3,(iDynTree::VectorDynSize const &)*arg4,*arg5);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ForwardPositionKinematics__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = 0 ;
  iDynTree::Traversal *arg2 = 0 ;
  iDynTree::FreeFloatingPos *arg3 = 0 ;
  iDynTree::LinkPositions *arg4 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("ForwardPositionKinematics",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ForwardPositionKinematics" "', argument " "1"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ForwardPositionKinematics" "', argument " "1"" of type '" "iDynTree::Model const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Traversal,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ForwardPositionKinematics" "', argument " "2"" of type '" "iDynTree::Traversal const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ForwardPositionKinematics" "', argument " "2"" of type '" "iDynTree::Traversal const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Traversal * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__FreeFloatingPos,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ForwardPositionKinematics" "', argument " "3"" of type '" "iDynTree::FreeFloatingPos const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ForwardPositionKinematics" "', argument " "3"" of type '" "iDynTree::FreeFloatingPos const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::FreeFloatingPos * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__LinkPositions,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ForwardPositionKinematics" "', argument " "4"" of type '" "iDynTree::LinkPositions &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ForwardPositionKinematics" "', argument " "4"" of type '" "iDynTree::LinkPositions &""'"); 
  }
  arg4 = reinterpret_cast< iDynTree::LinkPositions * >(argp4);
  result = (bool)iDynTree::ForwardPositionKinematics((iDynTree::Model const &)*arg1,(iDynTree::Traversal const &)*arg2,(iDynTree::FreeFloatingPos const &)*arg3,*arg4);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ForwardPositionKinematics(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Model, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Traversal, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_iDynTree__FreeFloatingPos, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_iDynTree__LinkPositions, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_ForwardPositionKinematics__SWIG_1(resc,resv,argc,argv);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Model, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Traversal, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_iDynTree__Transform, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_iDynTree__VectorDynSize, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_iDynTree__LinkPositions, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_ForwardPositionKinematics__SWIG_0(resc,resv,argc,argv);
            }
          }
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'ForwardPositionKinematics'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::ForwardPositionKinematics(iDynTree::Model const &,iDynTree::Traversal const &,iDynTree::Transform const &,iDynTree::VectorDynSize const &,iDynTree::LinkPositions &)\n"
    "    iDynTree::ForwardPositionKinematics(iDynTree::Model const &,iDynTree::Traversal const &,iDynTree::FreeFloatingPos const &,iDynTree::LinkPositions &)\n");
  return 1;
}


int _wrap_ForwardVelAccKinematics(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = 0 ;
  iDynTree::Traversal *arg2 = 0 ;
  iDynTree::FreeFloatingPos *arg3 = 0 ;
  iDynTree::FreeFloatingVel *arg4 = 0 ;
  iDynTree::FreeFloatingAcc *arg5 = 0 ;
  iDynTree::LinkVelArray *arg6 = 0 ;
  iDynTree::LinkAccArray *arg7 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("ForwardVelAccKinematics",argc,7,7,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ForwardVelAccKinematics" "', argument " "1"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ForwardVelAccKinematics" "', argument " "1"" of type '" "iDynTree::Model const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Traversal,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ForwardVelAccKinematics" "', argument " "2"" of type '" "iDynTree::Traversal const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ForwardVelAccKinematics" "', argument " "2"" of type '" "iDynTree::Traversal const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Traversal * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__FreeFloatingPos,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ForwardVelAccKinematics" "', argument " "3"" of type '" "iDynTree::FreeFloatingPos const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ForwardVelAccKinematics" "', argument " "3"" of type '" "iDynTree::FreeFloatingPos const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::FreeFloatingPos * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__FreeFloatingVel,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ForwardVelAccKinematics" "', argument " "4"" of type '" "iDynTree::FreeFloatingVel const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ForwardVelAccKinematics" "', argument " "4"" of type '" "iDynTree::FreeFloatingVel const &""'"); 
  }
  arg4 = reinterpret_cast< iDynTree::FreeFloatingVel * >(argp4);
  res5 = SWIG_ConvertPtr(argv[4], &argp5, SWIGTYPE_p_iDynTree__FreeFloatingAcc,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ForwardVelAccKinematics" "', argument " "5"" of type '" "iDynTree::FreeFloatingAcc const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ForwardVelAccKinematics" "', argument " "5"" of type '" "iDynTree::FreeFloatingAcc const &""'"); 
  }
  arg5 = reinterpret_cast< iDynTree::FreeFloatingAcc * >(argp5);
  res6 = SWIG_ConvertPtr(argv[5], &argp6, SWIGTYPE_p_iDynTree__LinkVelArray,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "ForwardVelAccKinematics" "', argument " "6"" of type '" "iDynTree::LinkVelArray &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ForwardVelAccKinematics" "', argument " "6"" of type '" "iDynTree::LinkVelArray &""'"); 
  }
  arg6 = reinterpret_cast< iDynTree::LinkVelArray * >(argp6);
  res7 = SWIG_ConvertPtr(argv[6], &argp7, SWIGTYPE_p_iDynTree__LinkAccArray,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "ForwardVelAccKinematics" "', argument " "7"" of type '" "iDynTree::LinkAccArray &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ForwardVelAccKinematics" "', argument " "7"" of type '" "iDynTree::LinkAccArray &""'"); 
  }
  arg7 = reinterpret_cast< iDynTree::LinkAccArray * >(argp7);
  result = (bool)iDynTree::ForwardVelAccKinematics((iDynTree::Model const &)*arg1,(iDynTree::Traversal const &)*arg2,(iDynTree::FreeFloatingPos const &)*arg3,(iDynTree::FreeFloatingVel const &)*arg4,(iDynTree::FreeFloatingAcc const &)*arg5,*arg6,*arg7);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ForwardPosVelAccKinematics(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = 0 ;
  iDynTree::Traversal *arg2 = 0 ;
  iDynTree::FreeFloatingPos *arg3 = 0 ;
  iDynTree::FreeFloatingVel *arg4 = 0 ;
  iDynTree::FreeFloatingAcc *arg5 = 0 ;
  iDynTree::LinkPositions *arg6 = 0 ;
  iDynTree::LinkVelArray *arg7 = 0 ;
  iDynTree::LinkAccArray *arg8 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("ForwardPosVelAccKinematics",argc,8,8,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ForwardPosVelAccKinematics" "', argument " "1"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ForwardPosVelAccKinematics" "', argument " "1"" of type '" "iDynTree::Model const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Traversal,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ForwardPosVelAccKinematics" "', argument " "2"" of type '" "iDynTree::Traversal const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ForwardPosVelAccKinematics" "', argument " "2"" of type '" "iDynTree::Traversal const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Traversal * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__FreeFloatingPos,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ForwardPosVelAccKinematics" "', argument " "3"" of type '" "iDynTree::FreeFloatingPos const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ForwardPosVelAccKinematics" "', argument " "3"" of type '" "iDynTree::FreeFloatingPos const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::FreeFloatingPos * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__FreeFloatingVel,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ForwardPosVelAccKinematics" "', argument " "4"" of type '" "iDynTree::FreeFloatingVel const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ForwardPosVelAccKinematics" "', argument " "4"" of type '" "iDynTree::FreeFloatingVel const &""'"); 
  }
  arg4 = reinterpret_cast< iDynTree::FreeFloatingVel * >(argp4);
  res5 = SWIG_ConvertPtr(argv[4], &argp5, SWIGTYPE_p_iDynTree__FreeFloatingAcc,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ForwardPosVelAccKinematics" "', argument " "5"" of type '" "iDynTree::FreeFloatingAcc const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ForwardPosVelAccKinematics" "', argument " "5"" of type '" "iDynTree::FreeFloatingAcc const &""'"); 
  }
  arg5 = reinterpret_cast< iDynTree::FreeFloatingAcc * >(argp5);
  res6 = SWIG_ConvertPtr(argv[5], &argp6, SWIGTYPE_p_iDynTree__LinkPositions,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "ForwardPosVelAccKinematics" "', argument " "6"" of type '" "iDynTree::LinkPositions &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ForwardPosVelAccKinematics" "', argument " "6"" of type '" "iDynTree::LinkPositions &""'"); 
  }
  arg6 = reinterpret_cast< iDynTree::LinkPositions * >(argp6);
  res7 = SWIG_ConvertPtr(argv[6], &argp7, SWIGTYPE_p_iDynTree__LinkVelArray,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "ForwardPosVelAccKinematics" "', argument " "7"" of type '" "iDynTree::LinkVelArray &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ForwardPosVelAccKinematics" "', argument " "7"" of type '" "iDynTree::LinkVelArray &""'"); 
  }
  arg7 = reinterpret_cast< iDynTree::LinkVelArray * >(argp7);
  res8 = SWIG_ConvertPtr(argv[7], &argp8, SWIGTYPE_p_iDynTree__LinkAccArray,  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "ForwardPosVelAccKinematics" "', argument " "8"" of type '" "iDynTree::LinkAccArray &""'"); 
  }
  if (!argp8) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ForwardPosVelAccKinematics" "', argument " "8"" of type '" "iDynTree::LinkAccArray &""'"); 
  }
  arg8 = reinterpret_cast< iDynTree::LinkAccArray * >(argp8);
  result = (bool)iDynTree::ForwardPosVelAccKinematics((iDynTree::Model const &)*arg1,(iDynTree::Traversal const &)*arg2,(iDynTree::FreeFloatingPos const &)*arg3,(iDynTree::FreeFloatingVel const &)*arg4,(iDynTree::FreeFloatingAcc const &)*arg5,*arg6,*arg7,*arg8);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ForwardPosVelKinematics(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = 0 ;
  iDynTree::Traversal *arg2 = 0 ;
  iDynTree::FreeFloatingPos *arg3 = 0 ;
  iDynTree::FreeFloatingVel *arg4 = 0 ;
  iDynTree::LinkPositions *arg5 = 0 ;
  iDynTree::LinkVelArray *arg6 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("ForwardPosVelKinematics",argc,6,6,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ForwardPosVelKinematics" "', argument " "1"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ForwardPosVelKinematics" "', argument " "1"" of type '" "iDynTree::Model const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Traversal,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ForwardPosVelKinematics" "', argument " "2"" of type '" "iDynTree::Traversal const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ForwardPosVelKinematics" "', argument " "2"" of type '" "iDynTree::Traversal const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Traversal * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__FreeFloatingPos,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ForwardPosVelKinematics" "', argument " "3"" of type '" "iDynTree::FreeFloatingPos const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ForwardPosVelKinematics" "', argument " "3"" of type '" "iDynTree::FreeFloatingPos const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::FreeFloatingPos * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__FreeFloatingVel,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ForwardPosVelKinematics" "', argument " "4"" of type '" "iDynTree::FreeFloatingVel const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ForwardPosVelKinematics" "', argument " "4"" of type '" "iDynTree::FreeFloatingVel const &""'"); 
  }
  arg4 = reinterpret_cast< iDynTree::FreeFloatingVel * >(argp4);
  res5 = SWIG_ConvertPtr(argv[4], &argp5, SWIGTYPE_p_iDynTree__LinkPositions,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ForwardPosVelKinematics" "', argument " "5"" of type '" "iDynTree::LinkPositions &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ForwardPosVelKinematics" "', argument " "5"" of type '" "iDynTree::LinkPositions &""'"); 
  }
  arg5 = reinterpret_cast< iDynTree::LinkPositions * >(argp5);
  res6 = SWIG_ConvertPtr(argv[5], &argp6, SWIGTYPE_p_iDynTree__LinkVelArray,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "ForwardPosVelKinematics" "', argument " "6"" of type '" "iDynTree::LinkVelArray &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ForwardPosVelKinematics" "', argument " "6"" of type '" "iDynTree::LinkVelArray &""'"); 
  }
  arg6 = reinterpret_cast< iDynTree::LinkVelArray * >(argp6);
  result = (bool)iDynTree::ForwardPosVelKinematics((iDynTree::Model const &)*arg1,(iDynTree::Traversal const &)*arg2,(iDynTree::FreeFloatingPos const &)*arg3,(iDynTree::FreeFloatingVel const &)*arg4,*arg5,*arg6);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ForwardAccKinematics(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = 0 ;
  iDynTree::Traversal *arg2 = 0 ;
  iDynTree::FreeFloatingPos *arg3 = 0 ;
  iDynTree::FreeFloatingVel *arg4 = 0 ;
  iDynTree::FreeFloatingAcc *arg5 = 0 ;
  iDynTree::LinkVelArray *arg6 = 0 ;
  iDynTree::LinkAccArray *arg7 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("ForwardAccKinematics",argc,7,7,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ForwardAccKinematics" "', argument " "1"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ForwardAccKinematics" "', argument " "1"" of type '" "iDynTree::Model const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Traversal,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ForwardAccKinematics" "', argument " "2"" of type '" "iDynTree::Traversal const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ForwardAccKinematics" "', argument " "2"" of type '" "iDynTree::Traversal const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Traversal * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__FreeFloatingPos,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ForwardAccKinematics" "', argument " "3"" of type '" "iDynTree::FreeFloatingPos const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ForwardAccKinematics" "', argument " "3"" of type '" "iDynTree::FreeFloatingPos const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::FreeFloatingPos * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__FreeFloatingVel,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ForwardAccKinematics" "', argument " "4"" of type '" "iDynTree::FreeFloatingVel const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ForwardAccKinematics" "', argument " "4"" of type '" "iDynTree::FreeFloatingVel const &""'"); 
  }
  arg4 = reinterpret_cast< iDynTree::FreeFloatingVel * >(argp4);
  res5 = SWIG_ConvertPtr(argv[4], &argp5, SWIGTYPE_p_iDynTree__FreeFloatingAcc,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ForwardAccKinematics" "', argument " "5"" of type '" "iDynTree::FreeFloatingAcc const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ForwardAccKinematics" "', argument " "5"" of type '" "iDynTree::FreeFloatingAcc const &""'"); 
  }
  arg5 = reinterpret_cast< iDynTree::FreeFloatingAcc * >(argp5);
  res6 = SWIG_ConvertPtr(argv[5], &argp6, SWIGTYPE_p_iDynTree__LinkVelArray,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "ForwardAccKinematics" "', argument " "6"" of type '" "iDynTree::LinkVelArray const &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ForwardAccKinematics" "', argument " "6"" of type '" "iDynTree::LinkVelArray const &""'"); 
  }
  arg6 = reinterpret_cast< iDynTree::LinkVelArray * >(argp6);
  res7 = SWIG_ConvertPtr(argv[6], &argp7, SWIGTYPE_p_iDynTree__LinkAccArray,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "ForwardAccKinematics" "', argument " "7"" of type '" "iDynTree::LinkAccArray &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ForwardAccKinematics" "', argument " "7"" of type '" "iDynTree::LinkAccArray &""'"); 
  }
  arg7 = reinterpret_cast< iDynTree::LinkAccArray * >(argp7);
  result = (bool)iDynTree::ForwardAccKinematics((iDynTree::Model const &)*arg1,(iDynTree::Traversal const &)*arg2,(iDynTree::FreeFloatingPos const &)*arg3,(iDynTree::FreeFloatingVel const &)*arg4,(iDynTree::FreeFloatingAcc const &)*arg5,(iDynTree::LinkVelArray const &)*arg6,*arg7);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ForwardBiasAccKinematics(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = 0 ;
  iDynTree::Traversal *arg2 = 0 ;
  iDynTree::FreeFloatingPos *arg3 = 0 ;
  iDynTree::FreeFloatingVel *arg4 = 0 ;
  iDynTree::LinkVelArray *arg5 = 0 ;
  iDynTree::LinkAccArray *arg6 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("ForwardBiasAccKinematics",argc,6,6,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ForwardBiasAccKinematics" "', argument " "1"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ForwardBiasAccKinematics" "', argument " "1"" of type '" "iDynTree::Model const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Traversal,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ForwardBiasAccKinematics" "', argument " "2"" of type '" "iDynTree::Traversal const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ForwardBiasAccKinematics" "', argument " "2"" of type '" "iDynTree::Traversal const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Traversal * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__FreeFloatingPos,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ForwardBiasAccKinematics" "', argument " "3"" of type '" "iDynTree::FreeFloatingPos const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ForwardBiasAccKinematics" "', argument " "3"" of type '" "iDynTree::FreeFloatingPos const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::FreeFloatingPos * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__FreeFloatingVel,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ForwardBiasAccKinematics" "', argument " "4"" of type '" "iDynTree::FreeFloatingVel const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ForwardBiasAccKinematics" "', argument " "4"" of type '" "iDynTree::FreeFloatingVel const &""'"); 
  }
  arg4 = reinterpret_cast< iDynTree::FreeFloatingVel * >(argp4);
  res5 = SWIG_ConvertPtr(argv[4], &argp5, SWIGTYPE_p_iDynTree__LinkVelArray,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ForwardBiasAccKinematics" "', argument " "5"" of type '" "iDynTree::LinkVelArray const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ForwardBiasAccKinematics" "', argument " "5"" of type '" "iDynTree::LinkVelArray const &""'"); 
  }
  arg5 = reinterpret_cast< iDynTree::LinkVelArray * >(argp5);
  res6 = SWIG_ConvertPtr(argv[5], &argp6, SWIGTYPE_p_iDynTree__LinkAccArray,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "ForwardBiasAccKinematics" "', argument " "6"" of type '" "iDynTree::LinkAccArray &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ForwardBiasAccKinematics" "', argument " "6"" of type '" "iDynTree::LinkAccArray &""'"); 
  }
  arg6 = reinterpret_cast< iDynTree::LinkAccArray * >(argp6);
  result = (bool)iDynTree::ForwardBiasAccKinematics((iDynTree::Model const &)*arg1,(iDynTree::Traversal const &)*arg2,(iDynTree::FreeFloatingPos const &)*arg3,(iDynTree::FreeFloatingVel const &)*arg4,(iDynTree::LinkVelArray const &)*arg5,*arg6);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ComputeLinearAndAngularMomentum(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = 0 ;
  iDynTree::LinkPositions *arg2 = 0 ;
  iDynTree::LinkVelArray *arg3 = 0 ;
  iDynTree::SpatialMomentum *arg4 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("ComputeLinearAndAngularMomentum",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComputeLinearAndAngularMomentum" "', argument " "1"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComputeLinearAndAngularMomentum" "', argument " "1"" of type '" "iDynTree::Model const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__LinkPositions,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ComputeLinearAndAngularMomentum" "', argument " "2"" of type '" "iDynTree::LinkPositions const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComputeLinearAndAngularMomentum" "', argument " "2"" of type '" "iDynTree::LinkPositions const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::LinkPositions * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__LinkVelArray,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ComputeLinearAndAngularMomentum" "', argument " "3"" of type '" "iDynTree::LinkVelArray const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComputeLinearAndAngularMomentum" "', argument " "3"" of type '" "iDynTree::LinkVelArray const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::LinkVelArray * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__SpatialMomentum,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ComputeLinearAndAngularMomentum" "', argument " "4"" of type '" "iDynTree::SpatialMomentum &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComputeLinearAndAngularMomentum" "', argument " "4"" of type '" "iDynTree::SpatialMomentum &""'"); 
  }
  arg4 = reinterpret_cast< iDynTree::SpatialMomentum * >(argp4);
  result = (bool)iDynTree::ComputeLinearAndAngularMomentum((iDynTree::Model const &)*arg1,(iDynTree::LinkPositions const &)*arg2,(iDynTree::LinkVelArray const &)*arg3,*arg4);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ComputeLinearAndAngularMomentumDerivativeBias(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = 0 ;
  iDynTree::LinkPositions *arg2 = 0 ;
  iDynTree::LinkVelArray *arg3 = 0 ;
  iDynTree::LinkAccArray *arg4 = 0 ;
  iDynTree::Wrench *arg5 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("ComputeLinearAndAngularMomentumDerivativeBias",argc,5,5,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComputeLinearAndAngularMomentumDerivativeBias" "', argument " "1"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComputeLinearAndAngularMomentumDerivativeBias" "', argument " "1"" of type '" "iDynTree::Model const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__LinkPositions,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ComputeLinearAndAngularMomentumDerivativeBias" "', argument " "2"" of type '" "iDynTree::LinkPositions const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComputeLinearAndAngularMomentumDerivativeBias" "', argument " "2"" of type '" "iDynTree::LinkPositions const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::LinkPositions * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__LinkVelArray,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ComputeLinearAndAngularMomentumDerivativeBias" "', argument " "3"" of type '" "iDynTree::LinkVelArray const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComputeLinearAndAngularMomentumDerivativeBias" "', argument " "3"" of type '" "iDynTree::LinkVelArray const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::LinkVelArray * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__LinkAccArray,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ComputeLinearAndAngularMomentumDerivativeBias" "', argument " "4"" of type '" "iDynTree::LinkAccArray const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComputeLinearAndAngularMomentumDerivativeBias" "', argument " "4"" of type '" "iDynTree::LinkAccArray const &""'"); 
  }
  arg4 = reinterpret_cast< iDynTree::LinkAccArray * >(argp4);
  res5 = SWIG_ConvertPtr(argv[4], &argp5, SWIGTYPE_p_iDynTree__Wrench,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ComputeLinearAndAngularMomentumDerivativeBias" "', argument " "5"" of type '" "iDynTree::Wrench &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComputeLinearAndAngularMomentumDerivativeBias" "', argument " "5"" of type '" "iDynTree::Wrench &""'"); 
  }
  arg5 = reinterpret_cast< iDynTree::Wrench * >(argp5);
  result = (bool)iDynTree::ComputeLinearAndAngularMomentumDerivativeBias((iDynTree::Model const &)*arg1,(iDynTree::LinkPositions const &)*arg2,(iDynTree::LinkVelArray const &)*arg3,(iDynTree::LinkAccArray const &)*arg4,*arg5);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RNEADynamicPhase(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = 0 ;
  iDynTree::Traversal *arg2 = 0 ;
  iDynTree::JointPosDoubleArray *arg3 = 0 ;
  iDynTree::LinkVelArray *arg4 = 0 ;
  iDynTree::LinkAccArray *arg5 = 0 ;
  iDynTree::LinkNetExternalWrenches *arg6 = 0 ;
  iDynTree::LinkInternalWrenches *arg7 = 0 ;
  iDynTree::FreeFloatingGeneralizedTorques *arg8 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("RNEADynamicPhase",argc,8,8,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RNEADynamicPhase" "', argument " "1"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RNEADynamicPhase" "', argument " "1"" of type '" "iDynTree::Model const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Traversal,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RNEADynamicPhase" "', argument " "2"" of type '" "iDynTree::Traversal const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RNEADynamicPhase" "', argument " "2"" of type '" "iDynTree::Traversal const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Traversal * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__JointPosDoubleArray,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RNEADynamicPhase" "', argument " "3"" of type '" "iDynTree::JointPosDoubleArray const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RNEADynamicPhase" "', argument " "3"" of type '" "iDynTree::JointPosDoubleArray const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::JointPosDoubleArray * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__LinkVelArray,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "RNEADynamicPhase" "', argument " "4"" of type '" "iDynTree::LinkVelArray const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RNEADynamicPhase" "', argument " "4"" of type '" "iDynTree::LinkVelArray const &""'"); 
  }
  arg4 = reinterpret_cast< iDynTree::LinkVelArray * >(argp4);
  res5 = SWIG_ConvertPtr(argv[4], &argp5, SWIGTYPE_p_iDynTree__LinkAccArray,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "RNEADynamicPhase" "', argument " "5"" of type '" "iDynTree::LinkAccArray const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RNEADynamicPhase" "', argument " "5"" of type '" "iDynTree::LinkAccArray const &""'"); 
  }
  arg5 = reinterpret_cast< iDynTree::LinkAccArray * >(argp5);
  res6 = SWIG_ConvertPtr(argv[5], &argp6, SWIGTYPE_p_iDynTree__LinkWrenches,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "RNEADynamicPhase" "', argument " "6"" of type '" "iDynTree::LinkNetExternalWrenches const &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RNEADynamicPhase" "', argument " "6"" of type '" "iDynTree::LinkNetExternalWrenches const &""'"); 
  }
  arg6 = reinterpret_cast< iDynTree::LinkNetExternalWrenches * >(argp6);
  res7 = SWIG_ConvertPtr(argv[6], &argp7, SWIGTYPE_p_iDynTree__LinkWrenches,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "RNEADynamicPhase" "', argument " "7"" of type '" "iDynTree::LinkInternalWrenches &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RNEADynamicPhase" "', argument " "7"" of type '" "iDynTree::LinkInternalWrenches &""'"); 
  }
  arg7 = reinterpret_cast< iDynTree::LinkInternalWrenches * >(argp7);
  res8 = SWIG_ConvertPtr(argv[7], &argp8, SWIGTYPE_p_iDynTree__FreeFloatingGeneralizedTorques,  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "RNEADynamicPhase" "', argument " "8"" of type '" "iDynTree::FreeFloatingGeneralizedTorques &""'"); 
  }
  if (!argp8) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RNEADynamicPhase" "', argument " "8"" of type '" "iDynTree::FreeFloatingGeneralizedTorques &""'"); 
  }
  arg8 = reinterpret_cast< iDynTree::FreeFloatingGeneralizedTorques * >(argp8);
  result = (bool)iDynTree::RNEADynamicPhase((iDynTree::Model const &)*arg1,(iDynTree::Traversal const &)*arg2,(iDynTree::JointPosDoubleArray const &)*arg3,(iDynTree::LinkVelArray const &)*arg4,(iDynTree::LinkAccArray const &)*arg5,(iDynTree::LinkWrenches const &)*arg6,*arg7,*arg8);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_CompositeRigidBodyAlgorithm(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = 0 ;
  iDynTree::Traversal *arg2 = 0 ;
  iDynTree::JointPosDoubleArray *arg3 = 0 ;
  iDynTree::LinkCompositeRigidBodyInertias *arg4 = 0 ;
  iDynTree::FreeFloatingMassMatrix *arg5 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("CompositeRigidBodyAlgorithm",argc,5,5,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeRigidBodyAlgorithm" "', argument " "1"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CompositeRigidBodyAlgorithm" "', argument " "1"" of type '" "iDynTree::Model const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Traversal,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CompositeRigidBodyAlgorithm" "', argument " "2"" of type '" "iDynTree::Traversal const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CompositeRigidBodyAlgorithm" "', argument " "2"" of type '" "iDynTree::Traversal const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Traversal * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__JointPosDoubleArray,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CompositeRigidBodyAlgorithm" "', argument " "3"" of type '" "iDynTree::JointPosDoubleArray const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CompositeRigidBodyAlgorithm" "', argument " "3"" of type '" "iDynTree::JointPosDoubleArray const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::JointPosDoubleArray * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__LinkInertias,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CompositeRigidBodyAlgorithm" "', argument " "4"" of type '" "iDynTree::LinkCompositeRigidBodyInertias &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CompositeRigidBodyAlgorithm" "', argument " "4"" of type '" "iDynTree::LinkCompositeRigidBodyInertias &""'"); 
  }
  arg4 = reinterpret_cast< iDynTree::LinkCompositeRigidBodyInertias * >(argp4);
  res5 = SWIG_ConvertPtr(argv[4], &argp5, SWIGTYPE_p_iDynTree__FreeFloatingMassMatrix,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CompositeRigidBodyAlgorithm" "', argument " "5"" of type '" "iDynTree::FreeFloatingMassMatrix &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CompositeRigidBodyAlgorithm" "', argument " "5"" of type '" "iDynTree::FreeFloatingMassMatrix &""'"); 
  }
  arg5 = reinterpret_cast< iDynTree::FreeFloatingMassMatrix * >(argp5);
  result = (bool)iDynTree::CompositeRigidBodyAlgorithm((iDynTree::Model const &)*arg1,(iDynTree::Traversal const &)*arg2,(iDynTree::JointPosDoubleArray const &)*arg3,*arg4,*arg5);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_ArticulatedBodyAlgorithmInternalBuffers__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::ArticulatedBodyAlgorithmInternalBuffers *result = 0 ;
  
  if (!SWIG_check_num_args("new_ArticulatedBodyAlgorithmInternalBuffers",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::ArticulatedBodyAlgorithmInternalBuffers *)new iDynTree::ArticulatedBodyAlgorithmInternalBuffers();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__ArticulatedBodyAlgorithmInternalBuffers, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_ArticulatedBodyAlgorithmInternalBuffers__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::ArticulatedBodyAlgorithmInternalBuffers *result = 0 ;
  
  if (!SWIG_check_num_args("new_ArticulatedBodyAlgorithmInternalBuffers",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ArticulatedBodyAlgorithmInternalBuffers" "', argument " "1"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ArticulatedBodyAlgorithmInternalBuffers" "', argument " "1"" of type '" "iDynTree::Model const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  result = (iDynTree::ArticulatedBodyAlgorithmInternalBuffers *)new iDynTree::ArticulatedBodyAlgorithmInternalBuffers((iDynTree::Model const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__ArticulatedBodyAlgorithmInternalBuffers, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_ArticulatedBodyAlgorithmInternalBuffers(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_ArticulatedBodyAlgorithmInternalBuffers__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Model, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ArticulatedBodyAlgorithmInternalBuffers__SWIG_1(resc,resv,argc,argv);
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_ArticulatedBodyAlgorithmInternalBuffers'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::ArticulatedBodyAlgorithmInternalBuffers::ArticulatedBodyAlgorithmInternalBuffers()\n"
    "    iDynTree::ArticulatedBodyAlgorithmInternalBuffers::ArticulatedBodyAlgorithmInternalBuffers(iDynTree::Model const &)\n");
  return 1;
}


int _wrap_ArticulatedBodyAlgorithmInternalBuffers_resize(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ArticulatedBodyAlgorithmInternalBuffers *arg1 = (iDynTree::ArticulatedBodyAlgorithmInternalBuffers *) 0 ;
  iDynTree::Model *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("ArticulatedBodyAlgorithmInternalBuffers_resize",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ArticulatedBodyAlgorithmInternalBuffers, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArticulatedBodyAlgorithmInternalBuffers_resize" "', argument " "1"" of type '" "iDynTree::ArticulatedBodyAlgorithmInternalBuffers *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ArticulatedBodyAlgorithmInternalBuffers * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ArticulatedBodyAlgorithmInternalBuffers_resize" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ArticulatedBodyAlgorithmInternalBuffers_resize" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Model * >(argp2);
  (arg1)->resize((iDynTree::Model const &)*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ArticulatedBodyAlgorithmInternalBuffers_isConsistent(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ArticulatedBodyAlgorithmInternalBuffers *arg1 = (iDynTree::ArticulatedBodyAlgorithmInternalBuffers *) 0 ;
  iDynTree::Model *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("ArticulatedBodyAlgorithmInternalBuffers_isConsistent",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ArticulatedBodyAlgorithmInternalBuffers, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArticulatedBodyAlgorithmInternalBuffers_isConsistent" "', argument " "1"" of type '" "iDynTree::ArticulatedBodyAlgorithmInternalBuffers *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ArticulatedBodyAlgorithmInternalBuffers * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ArticulatedBodyAlgorithmInternalBuffers_isConsistent" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ArticulatedBodyAlgorithmInternalBuffers_isConsistent" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Model * >(argp2);
  result = (bool)(arg1)->isConsistent((iDynTree::Model const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ArticulatedBodyAlgorithmInternalBuffers_S_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ArticulatedBodyAlgorithmInternalBuffers *arg1 = (iDynTree::ArticulatedBodyAlgorithmInternalBuffers *) 0 ;
  iDynTree::DOFSpatialMotionArray *arg2 = (iDynTree::DOFSpatialMotionArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("ArticulatedBodyAlgorithmInternalBuffers_S_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ArticulatedBodyAlgorithmInternalBuffers, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArticulatedBodyAlgorithmInternalBuffers_S_set" "', argument " "1"" of type '" "iDynTree::ArticulatedBodyAlgorithmInternalBuffers *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ArticulatedBodyAlgorithmInternalBuffers * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_iDynTree__DOFSpatialMotionArray, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ArticulatedBodyAlgorithmInternalBuffers_S_set" "', argument " "2"" of type '" "iDynTree::DOFSpatialMotionArray *""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::DOFSpatialMotionArray * >(argp2);
  if (arg1) (arg1)->S = *arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ArticulatedBodyAlgorithmInternalBuffers_S_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ArticulatedBodyAlgorithmInternalBuffers *arg1 = (iDynTree::ArticulatedBodyAlgorithmInternalBuffers *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::DOFSpatialMotionArray *result = 0 ;
  
  if (!SWIG_check_num_args("ArticulatedBodyAlgorithmInternalBuffers_S_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ArticulatedBodyAlgorithmInternalBuffers, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArticulatedBodyAlgorithmInternalBuffers_S_get" "', argument " "1"" of type '" "iDynTree::ArticulatedBodyAlgorithmInternalBuffers *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ArticulatedBodyAlgorithmInternalBuffers * >(argp1);
  result = (iDynTree::DOFSpatialMotionArray *)& ((arg1)->S);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__DOFSpatialMotionArray, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ArticulatedBodyAlgorithmInternalBuffers_U_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ArticulatedBodyAlgorithmInternalBuffers *arg1 = (iDynTree::ArticulatedBodyAlgorithmInternalBuffers *) 0 ;
  iDynTree::DOFSpatialForceArray *arg2 = (iDynTree::DOFSpatialForceArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("ArticulatedBodyAlgorithmInternalBuffers_U_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ArticulatedBodyAlgorithmInternalBuffers, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArticulatedBodyAlgorithmInternalBuffers_U_set" "', argument " "1"" of type '" "iDynTree::ArticulatedBodyAlgorithmInternalBuffers *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ArticulatedBodyAlgorithmInternalBuffers * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_iDynTree__DOFSpatialForceArray, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ArticulatedBodyAlgorithmInternalBuffers_U_set" "', argument " "2"" of type '" "iDynTree::DOFSpatialForceArray *""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::DOFSpatialForceArray * >(argp2);
  if (arg1) (arg1)->U = *arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ArticulatedBodyAlgorithmInternalBuffers_U_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ArticulatedBodyAlgorithmInternalBuffers *arg1 = (iDynTree::ArticulatedBodyAlgorithmInternalBuffers *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::DOFSpatialForceArray *result = 0 ;
  
  if (!SWIG_check_num_args("ArticulatedBodyAlgorithmInternalBuffers_U_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ArticulatedBodyAlgorithmInternalBuffers, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArticulatedBodyAlgorithmInternalBuffers_U_get" "', argument " "1"" of type '" "iDynTree::ArticulatedBodyAlgorithmInternalBuffers *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ArticulatedBodyAlgorithmInternalBuffers * >(argp1);
  result = (iDynTree::DOFSpatialForceArray *)& ((arg1)->U);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__DOFSpatialForceArray, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ArticulatedBodyAlgorithmInternalBuffers_D_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ArticulatedBodyAlgorithmInternalBuffers *arg1 = (iDynTree::ArticulatedBodyAlgorithmInternalBuffers *) 0 ;
  iDynTree::JointDOFsDoubleArray *arg2 = (iDynTree::JointDOFsDoubleArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("ArticulatedBodyAlgorithmInternalBuffers_D_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ArticulatedBodyAlgorithmInternalBuffers, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArticulatedBodyAlgorithmInternalBuffers_D_set" "', argument " "1"" of type '" "iDynTree::ArticulatedBodyAlgorithmInternalBuffers *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ArticulatedBodyAlgorithmInternalBuffers * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_iDynTree__JointDOFsDoubleArray, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ArticulatedBodyAlgorithmInternalBuffers_D_set" "', argument " "2"" of type '" "iDynTree::JointDOFsDoubleArray *""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::JointDOFsDoubleArray * >(argp2);
  if (arg1) (arg1)->D = *arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ArticulatedBodyAlgorithmInternalBuffers_D_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ArticulatedBodyAlgorithmInternalBuffers *arg1 = (iDynTree::ArticulatedBodyAlgorithmInternalBuffers *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::JointDOFsDoubleArray *result = 0 ;
  
  if (!SWIG_check_num_args("ArticulatedBodyAlgorithmInternalBuffers_D_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ArticulatedBodyAlgorithmInternalBuffers, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArticulatedBodyAlgorithmInternalBuffers_D_get" "', argument " "1"" of type '" "iDynTree::ArticulatedBodyAlgorithmInternalBuffers *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ArticulatedBodyAlgorithmInternalBuffers * >(argp1);
  result = (iDynTree::JointDOFsDoubleArray *)& ((arg1)->D);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__JointDOFsDoubleArray, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ArticulatedBodyAlgorithmInternalBuffers_u_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ArticulatedBodyAlgorithmInternalBuffers *arg1 = (iDynTree::ArticulatedBodyAlgorithmInternalBuffers *) 0 ;
  iDynTree::JointDOFsDoubleArray *arg2 = (iDynTree::JointDOFsDoubleArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("ArticulatedBodyAlgorithmInternalBuffers_u_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ArticulatedBodyAlgorithmInternalBuffers, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArticulatedBodyAlgorithmInternalBuffers_u_set" "', argument " "1"" of type '" "iDynTree::ArticulatedBodyAlgorithmInternalBuffers *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ArticulatedBodyAlgorithmInternalBuffers * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_iDynTree__JointDOFsDoubleArray, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ArticulatedBodyAlgorithmInternalBuffers_u_set" "', argument " "2"" of type '" "iDynTree::JointDOFsDoubleArray *""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::JointDOFsDoubleArray * >(argp2);
  if (arg1) (arg1)->u = *arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ArticulatedBodyAlgorithmInternalBuffers_u_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ArticulatedBodyAlgorithmInternalBuffers *arg1 = (iDynTree::ArticulatedBodyAlgorithmInternalBuffers *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::JointDOFsDoubleArray *result = 0 ;
  
  if (!SWIG_check_num_args("ArticulatedBodyAlgorithmInternalBuffers_u_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ArticulatedBodyAlgorithmInternalBuffers, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArticulatedBodyAlgorithmInternalBuffers_u_get" "', argument " "1"" of type '" "iDynTree::ArticulatedBodyAlgorithmInternalBuffers *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ArticulatedBodyAlgorithmInternalBuffers * >(argp1);
  result = (iDynTree::JointDOFsDoubleArray *)& ((arg1)->u);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__JointDOFsDoubleArray, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ArticulatedBodyAlgorithmInternalBuffers_linksVel_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ArticulatedBodyAlgorithmInternalBuffers *arg1 = (iDynTree::ArticulatedBodyAlgorithmInternalBuffers *) 0 ;
  iDynTree::LinkVelArray *arg2 = (iDynTree::LinkVelArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("ArticulatedBodyAlgorithmInternalBuffers_linksVel_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ArticulatedBodyAlgorithmInternalBuffers, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArticulatedBodyAlgorithmInternalBuffers_linksVel_set" "', argument " "1"" of type '" "iDynTree::ArticulatedBodyAlgorithmInternalBuffers *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ArticulatedBodyAlgorithmInternalBuffers * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_iDynTree__LinkVelArray, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ArticulatedBodyAlgorithmInternalBuffers_linksVel_set" "', argument " "2"" of type '" "iDynTree::LinkVelArray *""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::LinkVelArray * >(argp2);
  if (arg1) (arg1)->linksVel = *arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ArticulatedBodyAlgorithmInternalBuffers_linksVel_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ArticulatedBodyAlgorithmInternalBuffers *arg1 = (iDynTree::ArticulatedBodyAlgorithmInternalBuffers *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::LinkVelArray *result = 0 ;
  
  if (!SWIG_check_num_args("ArticulatedBodyAlgorithmInternalBuffers_linksVel_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ArticulatedBodyAlgorithmInternalBuffers, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArticulatedBodyAlgorithmInternalBuffers_linksVel_get" "', argument " "1"" of type '" "iDynTree::ArticulatedBodyAlgorithmInternalBuffers *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ArticulatedBodyAlgorithmInternalBuffers * >(argp1);
  result = (iDynTree::LinkVelArray *)& ((arg1)->linksVel);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__LinkVelArray, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ArticulatedBodyAlgorithmInternalBuffers_linksBiasAcceleration_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ArticulatedBodyAlgorithmInternalBuffers *arg1 = (iDynTree::ArticulatedBodyAlgorithmInternalBuffers *) 0 ;
  iDynTree::LinkAccArray *arg2 = (iDynTree::LinkAccArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("ArticulatedBodyAlgorithmInternalBuffers_linksBiasAcceleration_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ArticulatedBodyAlgorithmInternalBuffers, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArticulatedBodyAlgorithmInternalBuffers_linksBiasAcceleration_set" "', argument " "1"" of type '" "iDynTree::ArticulatedBodyAlgorithmInternalBuffers *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ArticulatedBodyAlgorithmInternalBuffers * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_iDynTree__LinkAccArray, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ArticulatedBodyAlgorithmInternalBuffers_linksBiasAcceleration_set" "', argument " "2"" of type '" "iDynTree::LinkAccArray *""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::LinkAccArray * >(argp2);
  if (arg1) (arg1)->linksBiasAcceleration = *arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ArticulatedBodyAlgorithmInternalBuffers_linksBiasAcceleration_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ArticulatedBodyAlgorithmInternalBuffers *arg1 = (iDynTree::ArticulatedBodyAlgorithmInternalBuffers *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::LinkAccArray *result = 0 ;
  
  if (!SWIG_check_num_args("ArticulatedBodyAlgorithmInternalBuffers_linksBiasAcceleration_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ArticulatedBodyAlgorithmInternalBuffers, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArticulatedBodyAlgorithmInternalBuffers_linksBiasAcceleration_get" "', argument " "1"" of type '" "iDynTree::ArticulatedBodyAlgorithmInternalBuffers *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ArticulatedBodyAlgorithmInternalBuffers * >(argp1);
  result = (iDynTree::LinkAccArray *)& ((arg1)->linksBiasAcceleration);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__LinkAccArray, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ArticulatedBodyAlgorithmInternalBuffers_linksAccelerations_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ArticulatedBodyAlgorithmInternalBuffers *arg1 = (iDynTree::ArticulatedBodyAlgorithmInternalBuffers *) 0 ;
  iDynTree::LinkAccArray *arg2 = (iDynTree::LinkAccArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("ArticulatedBodyAlgorithmInternalBuffers_linksAccelerations_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ArticulatedBodyAlgorithmInternalBuffers, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArticulatedBodyAlgorithmInternalBuffers_linksAccelerations_set" "', argument " "1"" of type '" "iDynTree::ArticulatedBodyAlgorithmInternalBuffers *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ArticulatedBodyAlgorithmInternalBuffers * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_iDynTree__LinkAccArray, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ArticulatedBodyAlgorithmInternalBuffers_linksAccelerations_set" "', argument " "2"" of type '" "iDynTree::LinkAccArray *""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::LinkAccArray * >(argp2);
  if (arg1) (arg1)->linksAccelerations = *arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ArticulatedBodyAlgorithmInternalBuffers_linksAccelerations_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ArticulatedBodyAlgorithmInternalBuffers *arg1 = (iDynTree::ArticulatedBodyAlgorithmInternalBuffers *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::LinkAccArray *result = 0 ;
  
  if (!SWIG_check_num_args("ArticulatedBodyAlgorithmInternalBuffers_linksAccelerations_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ArticulatedBodyAlgorithmInternalBuffers, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArticulatedBodyAlgorithmInternalBuffers_linksAccelerations_get" "', argument " "1"" of type '" "iDynTree::ArticulatedBodyAlgorithmInternalBuffers *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ArticulatedBodyAlgorithmInternalBuffers * >(argp1);
  result = (iDynTree::LinkAccArray *)& ((arg1)->linksAccelerations);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__LinkAccArray, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ArticulatedBodyAlgorithmInternalBuffers_linkABIs_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ArticulatedBodyAlgorithmInternalBuffers *arg1 = (iDynTree::ArticulatedBodyAlgorithmInternalBuffers *) 0 ;
  iDynTree::LinkArticulatedBodyInertias *arg2 = (iDynTree::LinkArticulatedBodyInertias *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("ArticulatedBodyAlgorithmInternalBuffers_linkABIs_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ArticulatedBodyAlgorithmInternalBuffers, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArticulatedBodyAlgorithmInternalBuffers_linkABIs_set" "', argument " "1"" of type '" "iDynTree::ArticulatedBodyAlgorithmInternalBuffers *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ArticulatedBodyAlgorithmInternalBuffers * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_iDynTree__LinkArticulatedBodyInertias, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ArticulatedBodyAlgorithmInternalBuffers_linkABIs_set" "', argument " "2"" of type '" "iDynTree::LinkArticulatedBodyInertias *""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::LinkArticulatedBodyInertias * >(argp2);
  if (arg1) (arg1)->linkABIs = *arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ArticulatedBodyAlgorithmInternalBuffers_linkABIs_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ArticulatedBodyAlgorithmInternalBuffers *arg1 = (iDynTree::ArticulatedBodyAlgorithmInternalBuffers *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::LinkArticulatedBodyInertias *result = 0 ;
  
  if (!SWIG_check_num_args("ArticulatedBodyAlgorithmInternalBuffers_linkABIs_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ArticulatedBodyAlgorithmInternalBuffers, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArticulatedBodyAlgorithmInternalBuffers_linkABIs_get" "', argument " "1"" of type '" "iDynTree::ArticulatedBodyAlgorithmInternalBuffers *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ArticulatedBodyAlgorithmInternalBuffers * >(argp1);
  result = (iDynTree::LinkArticulatedBodyInertias *)& ((arg1)->linkABIs);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__LinkArticulatedBodyInertias, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ArticulatedBodyAlgorithmInternalBuffers_linksBiasWrench_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ArticulatedBodyAlgorithmInternalBuffers *arg1 = (iDynTree::ArticulatedBodyAlgorithmInternalBuffers *) 0 ;
  iDynTree::LinkWrenches *arg2 = (iDynTree::LinkWrenches *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("ArticulatedBodyAlgorithmInternalBuffers_linksBiasWrench_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ArticulatedBodyAlgorithmInternalBuffers, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArticulatedBodyAlgorithmInternalBuffers_linksBiasWrench_set" "', argument " "1"" of type '" "iDynTree::ArticulatedBodyAlgorithmInternalBuffers *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ArticulatedBodyAlgorithmInternalBuffers * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_iDynTree__LinkWrenches, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ArticulatedBodyAlgorithmInternalBuffers_linksBiasWrench_set" "', argument " "2"" of type '" "iDynTree::LinkWrenches *""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::LinkWrenches * >(argp2);
  if (arg1) (arg1)->linksBiasWrench = *arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ArticulatedBodyAlgorithmInternalBuffers_linksBiasWrench_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ArticulatedBodyAlgorithmInternalBuffers *arg1 = (iDynTree::ArticulatedBodyAlgorithmInternalBuffers *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::LinkWrenches *result = 0 ;
  
  if (!SWIG_check_num_args("ArticulatedBodyAlgorithmInternalBuffers_linksBiasWrench_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ArticulatedBodyAlgorithmInternalBuffers, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArticulatedBodyAlgorithmInternalBuffers_linksBiasWrench_get" "', argument " "1"" of type '" "iDynTree::ArticulatedBodyAlgorithmInternalBuffers *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ArticulatedBodyAlgorithmInternalBuffers * >(argp1);
  result = (iDynTree::LinkWrenches *)& ((arg1)->linksBiasWrench);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__LinkWrenches, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_ArticulatedBodyAlgorithmInternalBuffers(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ArticulatedBodyAlgorithmInternalBuffers *arg1 = (iDynTree::ArticulatedBodyAlgorithmInternalBuffers *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_ArticulatedBodyAlgorithmInternalBuffers",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ArticulatedBodyAlgorithmInternalBuffers, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ArticulatedBodyAlgorithmInternalBuffers" "', argument " "1"" of type '" "iDynTree::ArticulatedBodyAlgorithmInternalBuffers *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ArticulatedBodyAlgorithmInternalBuffers * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ArticulatedBodyAlgorithm(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = 0 ;
  iDynTree::Traversal *arg2 = 0 ;
  iDynTree::FreeFloatingPos *arg3 = 0 ;
  iDynTree::FreeFloatingVel *arg4 = 0 ;
  iDynTree::LinkNetExternalWrenches *arg5 = 0 ;
  iDynTree::JointDOFsDoubleArray *arg6 = 0 ;
  iDynTree::ArticulatedBodyAlgorithmInternalBuffers *arg7 = 0 ;
  iDynTree::FreeFloatingAcc *arg8 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("ArticulatedBodyAlgorithm",argc,8,8,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArticulatedBodyAlgorithm" "', argument " "1"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ArticulatedBodyAlgorithm" "', argument " "1"" of type '" "iDynTree::Model const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Traversal,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ArticulatedBodyAlgorithm" "', argument " "2"" of type '" "iDynTree::Traversal const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ArticulatedBodyAlgorithm" "', argument " "2"" of type '" "iDynTree::Traversal const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Traversal * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__FreeFloatingPos,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ArticulatedBodyAlgorithm" "', argument " "3"" of type '" "iDynTree::FreeFloatingPos const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ArticulatedBodyAlgorithm" "', argument " "3"" of type '" "iDynTree::FreeFloatingPos const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::FreeFloatingPos * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__FreeFloatingVel,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ArticulatedBodyAlgorithm" "', argument " "4"" of type '" "iDynTree::FreeFloatingVel const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ArticulatedBodyAlgorithm" "', argument " "4"" of type '" "iDynTree::FreeFloatingVel const &""'"); 
  }
  arg4 = reinterpret_cast< iDynTree::FreeFloatingVel * >(argp4);
  res5 = SWIG_ConvertPtr(argv[4], &argp5, SWIGTYPE_p_iDynTree__LinkWrenches,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ArticulatedBodyAlgorithm" "', argument " "5"" of type '" "iDynTree::LinkNetExternalWrenches const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ArticulatedBodyAlgorithm" "', argument " "5"" of type '" "iDynTree::LinkNetExternalWrenches const &""'"); 
  }
  arg5 = reinterpret_cast< iDynTree::LinkNetExternalWrenches * >(argp5);
  res6 = SWIG_ConvertPtr(argv[5], &argp6, SWIGTYPE_p_iDynTree__JointDOFsDoubleArray,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "ArticulatedBodyAlgorithm" "', argument " "6"" of type '" "iDynTree::JointDOFsDoubleArray const &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ArticulatedBodyAlgorithm" "', argument " "6"" of type '" "iDynTree::JointDOFsDoubleArray const &""'"); 
  }
  arg6 = reinterpret_cast< iDynTree::JointDOFsDoubleArray * >(argp6);
  res7 = SWIG_ConvertPtr(argv[6], &argp7, SWIGTYPE_p_iDynTree__ArticulatedBodyAlgorithmInternalBuffers,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "ArticulatedBodyAlgorithm" "', argument " "7"" of type '" "iDynTree::ArticulatedBodyAlgorithmInternalBuffers &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ArticulatedBodyAlgorithm" "', argument " "7"" of type '" "iDynTree::ArticulatedBodyAlgorithmInternalBuffers &""'"); 
  }
  arg7 = reinterpret_cast< iDynTree::ArticulatedBodyAlgorithmInternalBuffers * >(argp7);
  res8 = SWIG_ConvertPtr(argv[7], &argp8, SWIGTYPE_p_iDynTree__FreeFloatingAcc,  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "ArticulatedBodyAlgorithm" "', argument " "8"" of type '" "iDynTree::FreeFloatingAcc &""'"); 
  }
  if (!argp8) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ArticulatedBodyAlgorithm" "', argument " "8"" of type '" "iDynTree::FreeFloatingAcc &""'"); 
  }
  arg8 = reinterpret_cast< iDynTree::FreeFloatingAcc * >(argp8);
  result = (bool)iDynTree::ArticulatedBodyAlgorithm((iDynTree::Model const &)*arg1,(iDynTree::Traversal const &)*arg2,(iDynTree::FreeFloatingPos const &)*arg3,(iDynTree::FreeFloatingVel const &)*arg4,(iDynTree::LinkWrenches const &)*arg5,(iDynTree::JointDOFsDoubleArray const &)*arg6,*arg7,*arg8);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


SWIGINTERN int _wrap_NR_OF_SENSOR_TYPES_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  resv[0] = SWIG_From_int(static_cast< int >(iDynTree::NR_OF_SENSOR_TYPES));
  return 0;
}


int _wrap_isLinkSensor(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SensorType arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("isLinkSensor",argc,1,1,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "isLinkSensor" "', argument " "1"" of type '" "iDynTree::SensorType""'");
  } 
  arg1 = static_cast< iDynTree::SensorType >(val1);
  result = (bool)iDynTree::isLinkSensor(arg1);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_isJointSensor(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SensorType arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("isJointSensor",argc,1,1,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "isJointSensor" "', argument " "1"" of type '" "iDynTree::SensorType""'");
  } 
  arg1 = static_cast< iDynTree::SensorType >(val1);
  result = (bool)iDynTree::isJointSensor(arg1);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_getSensorTypeSize(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SensorType arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("getSensorTypeSize",argc,1,1,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "getSensorTypeSize" "', argument " "1"" of type '" "iDynTree::SensorType""'");
  } 
  arg1 = static_cast< iDynTree::SensorType >(val1);
  result = (unsigned int)iDynTree::getSensorTypeSize(arg1);
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_Sensor(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Sensor *arg1 = (iDynTree::Sensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_Sensor",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Sensor, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Sensor" "', argument " "1"" of type '" "iDynTree::Sensor *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Sensor * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Sensor_getName(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Sensor *arg1 = (iDynTree::Sensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("Sensor_getName",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Sensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sensor_getName" "', argument " "1"" of type '" "iDynTree::Sensor const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Sensor * >(argp1);
  result = ((iDynTree::Sensor const *)arg1)->getName();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Sensor_getSensorType(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Sensor *arg1 = (iDynTree::Sensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::SensorType result;
  
  if (!SWIG_check_num_args("Sensor_getSensorType",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Sensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sensor_getSensorType" "', argument " "1"" of type '" "iDynTree::Sensor const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Sensor * >(argp1);
  result = (iDynTree::SensorType)((iDynTree::Sensor const *)arg1)->getSensorType();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Sensor_isValid(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Sensor *arg1 = (iDynTree::Sensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("Sensor_isValid",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Sensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sensor_isValid" "', argument " "1"" of type '" "iDynTree::Sensor const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Sensor * >(argp1);
  result = (bool)((iDynTree::Sensor const *)arg1)->isValid();
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Sensor_setName(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Sensor *arg1 = (iDynTree::Sensor *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("Sensor_setName",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Sensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sensor_setName" "', argument " "1"" of type '" "iDynTree::Sensor *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Sensor * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Sensor_setName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Sensor_setName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->setName((std::string const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_Sensor_clone(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Sensor *arg1 = (iDynTree::Sensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Sensor *result = 0 ;
  
  if (!SWIG_check_num_args("Sensor_clone",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Sensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sensor_clone" "', argument " "1"" of type '" "iDynTree::Sensor const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Sensor * >(argp1);
  result = (iDynTree::Sensor *)((iDynTree::Sensor const *)arg1)->clone();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Sensor, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Sensor_updateIndices(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Sensor *arg1 = (iDynTree::Sensor *) 0 ;
  iDynTree::Model *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("Sensor_updateIndices",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Sensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sensor_updateIndices" "', argument " "1"" of type '" "iDynTree::Sensor *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Sensor * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Sensor_updateIndices" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Sensor_updateIndices" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Model * >(argp2);
  result = (bool)(arg1)->updateIndices((iDynTree::Model const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Sensor_updateIndeces(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Sensor *arg1 = (iDynTree::Sensor *) 0 ;
  iDynTree::Model *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("Sensor_updateIndeces",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Sensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sensor_updateIndeces" "', argument " "1"" of type '" "iDynTree::Sensor *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Sensor * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Sensor_updateIndeces" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Sensor_updateIndeces" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Model * >(argp2);
  result = (bool)(arg1)->updateIndeces((iDynTree::Model const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_JointSensor(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::JointSensor *arg1 = (iDynTree::JointSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_JointSensor",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__JointSensor, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_JointSensor" "', argument " "1"" of type '" "iDynTree::JointSensor *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::JointSensor * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_JointSensor_getParentJoint(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::JointSensor *arg1 = (iDynTree::JointSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("JointSensor_getParentJoint",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__JointSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JointSensor_getParentJoint" "', argument " "1"" of type '" "iDynTree::JointSensor const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::JointSensor * >(argp1);
  result = ((iDynTree::JointSensor const *)arg1)->getParentJoint();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_JointSensor_getParentJointIndex(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::JointSensor *arg1 = (iDynTree::JointSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("JointSensor_getParentJointIndex",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__JointSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JointSensor_getParentJointIndex" "', argument " "1"" of type '" "iDynTree::JointSensor const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::JointSensor * >(argp1);
  result = (int)((iDynTree::JointSensor const *)arg1)->getParentJointIndex();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_JointSensor_setParentJoint(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::JointSensor *arg1 = (iDynTree::JointSensor *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("JointSensor_setParentJoint",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__JointSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JointSensor_setParentJoint" "', argument " "1"" of type '" "iDynTree::JointSensor *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::JointSensor * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "JointSensor_setParentJoint" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "JointSensor_setParentJoint" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->setParentJoint((std::string const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_JointSensor_setParentJointIndex(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::JointSensor *arg1 = (iDynTree::JointSensor *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("JointSensor_setParentJointIndex",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__JointSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JointSensor_setParentJointIndex" "', argument " "1"" of type '" "iDynTree::JointSensor *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::JointSensor * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "JointSensor_setParentJointIndex" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  result = (bool)(arg1)->setParentJointIndex((int const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_LinkSensor(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkSensor *arg1 = (iDynTree::LinkSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_LinkSensor",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkSensor, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LinkSensor" "', argument " "1"" of type '" "iDynTree::LinkSensor *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkSensor * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_LinkSensor_getParentLink(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkSensor *arg1 = (iDynTree::LinkSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("LinkSensor_getParentLink",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinkSensor_getParentLink" "', argument " "1"" of type '" "iDynTree::LinkSensor const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkSensor * >(argp1);
  result = ((iDynTree::LinkSensor const *)arg1)->getParentLink();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_LinkSensor_getParentLinkIndex(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkSensor *arg1 = (iDynTree::LinkSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::LinkIndex result;
  
  if (!SWIG_check_num_args("LinkSensor_getParentLinkIndex",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinkSensor_getParentLinkIndex" "', argument " "1"" of type '" "iDynTree::LinkSensor const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkSensor * >(argp1);
  result = (iDynTree::LinkIndex)((iDynTree::LinkSensor const *)arg1)->getParentLinkIndex();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_LinkSensor_getLinkSensorTransform(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkSensor *arg1 = (iDynTree::LinkSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Transform result;
  
  if (!SWIG_check_num_args("LinkSensor_getLinkSensorTransform",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinkSensor_getLinkSensorTransform" "', argument " "1"" of type '" "iDynTree::LinkSensor const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkSensor * >(argp1);
  result = ((iDynTree::LinkSensor const *)arg1)->getLinkSensorTransform();
  _out = SWIG_NewPointerObj((new iDynTree::Transform(static_cast< const iDynTree::Transform& >(result))), SWIGTYPE_p_iDynTree__Transform, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_LinkSensor_setParentLink(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkSensor *arg1 = (iDynTree::LinkSensor *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("LinkSensor_setParentLink",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinkSensor_setParentLink" "', argument " "1"" of type '" "iDynTree::LinkSensor *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkSensor * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LinkSensor_setParentLink" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinkSensor_setParentLink" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->setParentLink((std::string const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_LinkSensor_setParentLinkIndex(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkSensor *arg1 = (iDynTree::LinkSensor *) 0 ;
  iDynTree::LinkIndex *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  iDynTree::LinkIndex temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("LinkSensor_setParentLinkIndex",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinkSensor_setParentLinkIndex" "', argument " "1"" of type '" "iDynTree::LinkSensor *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkSensor * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LinkSensor_setParentLinkIndex" "', argument " "2"" of type '" "iDynTree::LinkIndex""'");
  } 
  temp2 = static_cast< iDynTree::LinkIndex >(val2);
  arg2 = &temp2;
  result = (bool)(arg1)->setParentLinkIndex((iDynTree::LinkIndex const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_LinkSensor_setLinkSensorTransform(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkSensor *arg1 = (iDynTree::LinkSensor *) 0 ;
  iDynTree::Transform *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("LinkSensor_setLinkSensorTransform",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinkSensor_setLinkSensorTransform" "', argument " "1"" of type '" "iDynTree::LinkSensor *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkSensor * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Transform,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LinkSensor_setLinkSensorTransform" "', argument " "2"" of type '" "iDynTree::Transform const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinkSensor_setLinkSensorTransform" "', argument " "2"" of type '" "iDynTree::Transform const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Transform * >(argp2);
  result = (bool)(arg1)->setLinkSensorTransform((iDynTree::Transform const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SensorsList__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::SensorsList *result = 0 ;
  
  if (!SWIG_check_num_args("new_SensorsList",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::SensorsList *)new iDynTree::SensorsList();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SensorsList, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SensorsList__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SensorsList *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::SensorsList *result = 0 ;
  
  if (!SWIG_check_num_args("new_SensorsList",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__SensorsList,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SensorsList" "', argument " "1"" of type '" "iDynTree::SensorsList const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SensorsList" "', argument " "1"" of type '" "iDynTree::SensorsList const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SensorsList * >(argp1);
  result = (iDynTree::SensorsList *)new iDynTree::SensorsList((iDynTree::SensorsList const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SensorsList, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SensorsList(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_SensorsList__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SensorsList, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SensorsList__SWIG_1(resc,resv,argc,argv);
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_SensorsList'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::SensorsList::SensorsList()\n"
    "    iDynTree::SensorsList::SensorsList(iDynTree::SensorsList const &)\n");
  return 1;
}


int _wrap_delete_SensorsList(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SensorsList *arg1 = (iDynTree::SensorsList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_SensorsList",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SensorsList, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SensorsList" "', argument " "1"" of type '" "iDynTree::SensorsList *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SensorsList * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SensorsList_addSensor(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SensorsList *arg1 = (iDynTree::SensorsList *) 0 ;
  iDynTree::Sensor *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("SensorsList_addSensor",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SensorsList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SensorsList_addSensor" "', argument " "1"" of type '" "iDynTree::SensorsList *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SensorsList * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Sensor,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SensorsList_addSensor" "', argument " "2"" of type '" "iDynTree::Sensor const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SensorsList_addSensor" "', argument " "2"" of type '" "iDynTree::Sensor const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Sensor * >(argp2);
  result = (int)(arg1)->addSensor((iDynTree::Sensor const &)*arg2);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SensorsList_setSerialization(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SensorsList *arg1 = (iDynTree::SensorsList *) 0 ;
  iDynTree::SensorType *arg2 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 ;
  iDynTree::SensorType temp2 ;
  int res3 = SWIG_OLDOBJ ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("SensorsList_setSerialization",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SensorsList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SensorsList_setSerialization" "', argument " "1"" of type '" "iDynTree::SensorsList *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SensorsList * >(argp1);
  ecode2 = SWIG_AsVal_int (argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SensorsList_setSerialization" "', argument " "2"" of type '" "iDynTree::SensorType const &""'");
  } else {
    temp2 = static_cast< iDynTree::SensorType >(val2);
    arg2 = &temp2;
  }
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res3 = swig::asptr(argv[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SensorsList_setSerialization" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SensorsList_setSerialization" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (bool)(arg1)->setSerialization((iDynTree::SensorType const &)*arg2,(std::vector< std::string,std::allocator< std::string > > const &)*arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 0;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 1;
}


int _wrap_SensorsList_getSerialization(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SensorsList *arg1 = (iDynTree::SensorsList *) 0 ;
  iDynTree::SensorType *arg2 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 ;
  iDynTree::SensorType temp2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("SensorsList_getSerialization",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SensorsList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SensorsList_getSerialization" "', argument " "1"" of type '" "iDynTree::SensorsList *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SensorsList * >(argp1);
  ecode2 = SWIG_AsVal_int (argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SensorsList_getSerialization" "', argument " "2"" of type '" "iDynTree::SensorType const &""'");
  } else {
    temp2 = static_cast< iDynTree::SensorType >(val2);
    arg2 = &temp2;
  }
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SensorsList_getSerialization" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SensorsList_getSerialization" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< std::string,std::allocator< std::string > > * >(argp3);
  result = (bool)(arg1)->getSerialization((iDynTree::SensorType const &)*arg2,*arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SensorsList_getNrOfSensors(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SensorsList *arg1 = (iDynTree::SensorsList *) 0 ;
  iDynTree::SensorType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 ;
  iDynTree::SensorType temp2 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("SensorsList_getNrOfSensors",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SensorsList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SensorsList_getNrOfSensors" "', argument " "1"" of type '" "iDynTree::SensorsList const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SensorsList * >(argp1);
  ecode2 = SWIG_AsVal_int (argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SensorsList_getNrOfSensors" "', argument " "2"" of type '" "iDynTree::SensorType const &""'");
  } else {
    temp2 = static_cast< iDynTree::SensorType >(val2);
    arg2 = &temp2;
  }
  result = (unsigned int)((iDynTree::SensorsList const *)arg1)->getNrOfSensors((iDynTree::SensorType const &)*arg2);
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SensorsList_getSensorIndex__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SensorsList *arg1 = (iDynTree::SensorsList *) 0 ;
  iDynTree::SensorType *arg2 = 0 ;
  std::string *arg3 = 0 ;
  unsigned int *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 ;
  iDynTree::SensorType temp2 ;
  int res3 = SWIG_OLDOBJ ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("SensorsList_getSensorIndex",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SensorsList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SensorsList_getSensorIndex" "', argument " "1"" of type '" "iDynTree::SensorsList const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SensorsList * >(argp1);
  ecode2 = SWIG_AsVal_int (argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SensorsList_getSensorIndex" "', argument " "2"" of type '" "iDynTree::SensorType const &""'");
  } else {
    temp2 = static_cast< iDynTree::SensorType >(val2);
    arg2 = &temp2;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SensorsList_getSensorIndex" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SensorsList_getSensorIndex" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_unsigned_int,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "SensorsList_getSensorIndex" "', argument " "4"" of type '" "unsigned int &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SensorsList_getSensorIndex" "', argument " "4"" of type '" "unsigned int &""'"); 
  }
  arg4 = reinterpret_cast< unsigned int * >(argp4);
  result = (bool)((iDynTree::SensorsList const *)arg1)->getSensorIndex((iDynTree::SensorType const &)*arg2,(std::string const &)*arg3,*arg4);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 0;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 1;
}


int _wrap_SensorsList_getSensorIndex__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SensorsList *arg1 = (iDynTree::SensorsList *) 0 ;
  iDynTree::SensorType *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 ;
  iDynTree::SensorType temp2 ;
  int res3 = SWIG_OLDOBJ ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("SensorsList_getSensorIndex",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SensorsList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SensorsList_getSensorIndex" "', argument " "1"" of type '" "iDynTree::SensorsList const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SensorsList * >(argp1);
  ecode2 = SWIG_AsVal_int (argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SensorsList_getSensorIndex" "', argument " "2"" of type '" "iDynTree::SensorType const &""'");
  } else {
    temp2 = static_cast< iDynTree::SensorType >(val2);
    arg2 = &temp2;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SensorsList_getSensorIndex" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SensorsList_getSensorIndex" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  result = (int)((iDynTree::SensorsList const *)arg1)->getSensorIndex((iDynTree::SensorType const &)*arg2,(std::string const &)*arg3);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 0;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 1;
}


int _wrap_SensorsList_getSensorIndex(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SensorsList, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_SensorsList_getSensorIndex__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SensorsList, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_unsigned_int, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_SensorsList_getSensorIndex__SWIG_0(resc,resv,argc,argv);
          }
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'SensorsList_getSensorIndex'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::SensorsList::getSensorIndex(iDynTree::SensorType const &,std::string const &,unsigned int &) const\n"
    "    iDynTree::SensorsList::getSensorIndex(iDynTree::SensorType const &,std::string const &) const\n");
  return 1;
}


int _wrap_SensorsList_getSizeOfAllSensorsMeasurements(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SensorsList *arg1 = (iDynTree::SensorsList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  size_t result;
  
  if (!SWIG_check_num_args("SensorsList_getSizeOfAllSensorsMeasurements",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SensorsList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SensorsList_getSizeOfAllSensorsMeasurements" "', argument " "1"" of type '" "iDynTree::SensorsList const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SensorsList * >(argp1);
  result = ((iDynTree::SensorsList const *)arg1)->getSizeOfAllSensorsMeasurements();
  _out = SWIG_From_size_t(static_cast< size_t >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SensorsList_getSensor(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SensorsList *arg1 = (iDynTree::SensorsList *) 0 ;
  iDynTree::SensorType *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 ;
  iDynTree::SensorType temp2 ;
  int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  iDynTree::Sensor *result = 0 ;
  
  if (!SWIG_check_num_args("SensorsList_getSensor",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SensorsList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SensorsList_getSensor" "', argument " "1"" of type '" "iDynTree::SensorsList const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SensorsList * >(argp1);
  ecode2 = SWIG_AsVal_int (argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SensorsList_getSensor" "', argument " "2"" of type '" "iDynTree::SensorType const &""'");
  } else {
    temp2 = static_cast< iDynTree::SensorType >(val2);
    arg2 = &temp2;
  }
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SensorsList_getSensor" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (iDynTree::Sensor *)((iDynTree::SensorsList const *)arg1)->getSensor((iDynTree::SensorType const &)*arg2,arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Sensor, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SensorsList_removeSensor__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SensorsList *arg1 = (iDynTree::SensorsList *) 0 ;
  iDynTree::SensorType *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 ;
  iDynTree::SensorType temp2 ;
  int res3 = SWIG_OLDOBJ ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("SensorsList_removeSensor",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SensorsList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SensorsList_removeSensor" "', argument " "1"" of type '" "iDynTree::SensorsList *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SensorsList * >(argp1);
  ecode2 = SWIG_AsVal_int (argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SensorsList_removeSensor" "', argument " "2"" of type '" "iDynTree::SensorType const &""'");
  } else {
    temp2 = static_cast< iDynTree::SensorType >(val2);
    arg2 = &temp2;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SensorsList_removeSensor" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SensorsList_removeSensor" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  result = (bool)(arg1)->removeSensor((iDynTree::SensorType const &)*arg2,(std::string const &)*arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 0;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 1;
}


int _wrap_SensorsList_removeSensor__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SensorsList *arg1 = (iDynTree::SensorsList *) 0 ;
  iDynTree::SensorType *arg2 = 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 ;
  iDynTree::SensorType temp2 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("SensorsList_removeSensor",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SensorsList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SensorsList_removeSensor" "', argument " "1"" of type '" "iDynTree::SensorsList *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SensorsList * >(argp1);
  ecode2 = SWIG_AsVal_int (argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SensorsList_removeSensor" "', argument " "2"" of type '" "iDynTree::SensorType const &""'");
  } else {
    temp2 = static_cast< iDynTree::SensorType >(val2);
    arg2 = &temp2;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SensorsList_removeSensor" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  result = (bool)(arg1)->removeSensor((iDynTree::SensorType const &)*arg2,arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SensorsList_removeSensor(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SensorsList, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_SensorsList_removeSensor__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SensorsList, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_SensorsList_removeSensor__SWIG_0(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'SensorsList_removeSensor'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::SensorsList::removeSensor(iDynTree::SensorType const &,std::string const &)\n"
    "    iDynTree::SensorsList::removeSensor(iDynTree::SensorType const &,unsigned int const)\n");
  return 1;
}


int _wrap_SensorsList_removeAllSensorsOfType(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SensorsList *arg1 = (iDynTree::SensorsList *) 0 ;
  iDynTree::SensorType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 ;
  iDynTree::SensorType temp2 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("SensorsList_removeAllSensorsOfType",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SensorsList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SensorsList_removeAllSensorsOfType" "', argument " "1"" of type '" "iDynTree::SensorsList *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SensorsList * >(argp1);
  ecode2 = SWIG_AsVal_int (argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SensorsList_removeAllSensorsOfType" "', argument " "2"" of type '" "iDynTree::SensorType const &""'");
  } else {
    temp2 = static_cast< iDynTree::SensorType >(val2);
    arg2 = &temp2;
  }
  result = (bool)(arg1)->removeAllSensorsOfType((iDynTree::SensorType const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SensorsList_getSixAxisForceTorqueSensor(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SensorsList *arg1 = (iDynTree::SensorsList *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::SixAxisForceTorqueSensor *result = 0 ;
  
  if (!SWIG_check_num_args("SensorsList_getSixAxisForceTorqueSensor",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SensorsList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SensorsList_getSixAxisForceTorqueSensor" "', argument " "1"" of type '" "iDynTree::SensorsList const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SensorsList * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SensorsList_getSixAxisForceTorqueSensor" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (iDynTree::SixAxisForceTorqueSensor *)iDynTree_SensorsList_getSixAxisForceTorqueSensor((iDynTree::SensorsList const *)arg1,arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SixAxisForceTorqueSensor, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SensorsList_getAccelerometerSensor(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SensorsList *arg1 = (iDynTree::SensorsList *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::AccelerometerSensor *result = 0 ;
  
  if (!SWIG_check_num_args("SensorsList_getAccelerometerSensor",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SensorsList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SensorsList_getAccelerometerSensor" "', argument " "1"" of type '" "iDynTree::SensorsList const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SensorsList * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SensorsList_getAccelerometerSensor" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (iDynTree::AccelerometerSensor *)iDynTree_SensorsList_getAccelerometerSensor((iDynTree::SensorsList const *)arg1,arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__AccelerometerSensor, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SensorsList_getGyroscopeSensor(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SensorsList *arg1 = (iDynTree::SensorsList *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::GyroscopeSensor *result = 0 ;
  
  if (!SWIG_check_num_args("SensorsList_getGyroscopeSensor",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SensorsList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SensorsList_getGyroscopeSensor" "', argument " "1"" of type '" "iDynTree::SensorsList const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SensorsList * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SensorsList_getGyroscopeSensor" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (iDynTree::GyroscopeSensor *)iDynTree_SensorsList_getGyroscopeSensor((iDynTree::SensorsList const *)arg1,arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__GyroscopeSensor, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SensorsMeasurements__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::SensorsMeasurements *result = 0 ;
  
  if (!SWIG_check_num_args("new_SensorsMeasurements",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::SensorsMeasurements *)new iDynTree::SensorsMeasurements();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SensorsMeasurements, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SensorsMeasurements__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SensorsList *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::SensorsMeasurements *result = 0 ;
  
  if (!SWIG_check_num_args("new_SensorsMeasurements",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__SensorsList,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SensorsMeasurements" "', argument " "1"" of type '" "iDynTree::SensorsList const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SensorsMeasurements" "', argument " "1"" of type '" "iDynTree::SensorsList const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SensorsList * >(argp1);
  result = (iDynTree::SensorsMeasurements *)new iDynTree::SensorsMeasurements((iDynTree::SensorsList const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SensorsMeasurements, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SensorsMeasurements__SWIG_2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SensorsMeasurements *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::SensorsMeasurements *result = 0 ;
  
  if (!SWIG_check_num_args("new_SensorsMeasurements",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__SensorsMeasurements,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SensorsMeasurements" "', argument " "1"" of type '" "iDynTree::SensorsMeasurements const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SensorsMeasurements" "', argument " "1"" of type '" "iDynTree::SensorsMeasurements const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SensorsMeasurements * >(argp1);
  result = (iDynTree::SensorsMeasurements *)new iDynTree::SensorsMeasurements((iDynTree::SensorsMeasurements const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SensorsMeasurements, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SensorsMeasurements(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_SensorsMeasurements__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SensorsList, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SensorsMeasurements__SWIG_1(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SensorsMeasurements, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SensorsMeasurements__SWIG_2(resc,resv,argc,argv);
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_SensorsMeasurements'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::SensorsMeasurements::SensorsMeasurements()\n"
    "    iDynTree::SensorsMeasurements::SensorsMeasurements(iDynTree::SensorsList const &)\n"
    "    iDynTree::SensorsMeasurements::SensorsMeasurements(iDynTree::SensorsMeasurements const &)\n");
  return 1;
}


int _wrap_delete_SensorsMeasurements(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SensorsMeasurements *arg1 = (iDynTree::SensorsMeasurements *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_SensorsMeasurements",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SensorsMeasurements, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SensorsMeasurements" "', argument " "1"" of type '" "iDynTree::SensorsMeasurements *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SensorsMeasurements * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SensorsMeasurements_setNrOfSensors(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SensorsMeasurements *arg1 = (iDynTree::SensorsMeasurements *) 0 ;
  iDynTree::SensorType *arg2 = 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 ;
  iDynTree::SensorType temp2 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("SensorsMeasurements_setNrOfSensors",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SensorsMeasurements, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SensorsMeasurements_setNrOfSensors" "', argument " "1"" of type '" "iDynTree::SensorsMeasurements *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SensorsMeasurements * >(argp1);
  ecode2 = SWIG_AsVal_int (argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SensorsMeasurements_setNrOfSensors" "', argument " "2"" of type '" "iDynTree::SensorType const &""'");
  } else {
    temp2 = static_cast< iDynTree::SensorType >(val2);
    arg2 = &temp2;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SensorsMeasurements_setNrOfSensors" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  result = (bool)(arg1)->setNrOfSensors((iDynTree::SensorType const &)*arg2,arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SensorsMeasurements_getNrOfSensors(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SensorsMeasurements *arg1 = (iDynTree::SensorsMeasurements *) 0 ;
  iDynTree::SensorType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 ;
  iDynTree::SensorType temp2 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("SensorsMeasurements_getNrOfSensors",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SensorsMeasurements, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SensorsMeasurements_getNrOfSensors" "', argument " "1"" of type '" "iDynTree::SensorsMeasurements const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SensorsMeasurements * >(argp1);
  ecode2 = SWIG_AsVal_int (argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SensorsMeasurements_getNrOfSensors" "', argument " "2"" of type '" "iDynTree::SensorType const &""'");
  } else {
    temp2 = static_cast< iDynTree::SensorType >(val2);
    arg2 = &temp2;
  }
  result = (unsigned int)((iDynTree::SensorsMeasurements const *)arg1)->getNrOfSensors((iDynTree::SensorType const &)*arg2);
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SensorsMeasurements_resize(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SensorsMeasurements *arg1 = (iDynTree::SensorsMeasurements *) 0 ;
  iDynTree::SensorsList *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("SensorsMeasurements_resize",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SensorsMeasurements, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SensorsMeasurements_resize" "', argument " "1"" of type '" "iDynTree::SensorsMeasurements *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SensorsMeasurements * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SensorsList,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SensorsMeasurements_resize" "', argument " "2"" of type '" "iDynTree::SensorsList const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SensorsMeasurements_resize" "', argument " "2"" of type '" "iDynTree::SensorsList const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SensorsList * >(argp2);
  result = (bool)(arg1)->resize((iDynTree::SensorsList const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SensorsMeasurements_toVector(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SensorsMeasurements *arg1 = (iDynTree::SensorsMeasurements *) 0 ;
  iDynTree::VectorDynSize *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("SensorsMeasurements_toVector",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SensorsMeasurements, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SensorsMeasurements_toVector" "', argument " "1"" of type '" "iDynTree::SensorsMeasurements const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SensorsMeasurements * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SensorsMeasurements_toVector" "', argument " "2"" of type '" "iDynTree::VectorDynSize &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SensorsMeasurements_toVector" "', argument " "2"" of type '" "iDynTree::VectorDynSize &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::VectorDynSize * >(argp2);
  result = (bool)((iDynTree::SensorsMeasurements const *)arg1)->toVector(*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SensorsMeasurements_setMeasurement__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SensorsMeasurements *arg1 = (iDynTree::SensorsMeasurements *) 0 ;
  iDynTree::SensorType *arg2 = 0 ;
  unsigned int *arg3 = 0 ;
  iDynTree::Wrench *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 ;
  iDynTree::SensorType temp2 ;
  unsigned int temp3 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("SensorsMeasurements_setMeasurement",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SensorsMeasurements, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SensorsMeasurements_setMeasurement" "', argument " "1"" of type '" "iDynTree::SensorsMeasurements *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SensorsMeasurements * >(argp1);
  ecode2 = SWIG_AsVal_int (argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SensorsMeasurements_setMeasurement" "', argument " "2"" of type '" "iDynTree::SensorType const &""'");
  } else {
    temp2 = static_cast< iDynTree::SensorType >(val2);
    arg2 = &temp2;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SensorsMeasurements_setMeasurement" "', argument " "3"" of type '" "unsigned int""'");
  } 
  temp3 = static_cast< unsigned int >(val3);
  arg3 = &temp3;
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__Wrench,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "SensorsMeasurements_setMeasurement" "', argument " "4"" of type '" "iDynTree::Wrench const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SensorsMeasurements_setMeasurement" "', argument " "4"" of type '" "iDynTree::Wrench const &""'"); 
  }
  arg4 = reinterpret_cast< iDynTree::Wrench * >(argp4);
  result = (bool)(arg1)->setMeasurement((iDynTree::SensorType const &)*arg2,(unsigned int const &)*arg3,(iDynTree::Wrench const &)*arg4);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SensorsMeasurements_setMeasurement__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SensorsMeasurements *arg1 = (iDynTree::SensorsMeasurements *) 0 ;
  iDynTree::SensorType *arg2 = 0 ;
  unsigned int *arg3 = 0 ;
  iDynTree::LinAcceleration *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 ;
  iDynTree::SensorType temp2 ;
  unsigned int temp3 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("SensorsMeasurements_setMeasurement",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SensorsMeasurements, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SensorsMeasurements_setMeasurement" "', argument " "1"" of type '" "iDynTree::SensorsMeasurements *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SensorsMeasurements * >(argp1);
  ecode2 = SWIG_AsVal_int (argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SensorsMeasurements_setMeasurement" "', argument " "2"" of type '" "iDynTree::SensorType const &""'");
  } else {
    temp2 = static_cast< iDynTree::SensorType >(val2);
    arg2 = &temp2;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SensorsMeasurements_setMeasurement" "', argument " "3"" of type '" "unsigned int""'");
  } 
  temp3 = static_cast< unsigned int >(val3);
  arg3 = &temp3;
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__LinearMotionVector3,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "SensorsMeasurements_setMeasurement" "', argument " "4"" of type '" "iDynTree::LinAcceleration const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SensorsMeasurements_setMeasurement" "', argument " "4"" of type '" "iDynTree::LinAcceleration const &""'"); 
  }
  arg4 = reinterpret_cast< iDynTree::LinAcceleration * >(argp4);
  result = (bool)(arg1)->setMeasurement((iDynTree::SensorType const &)*arg2,(unsigned int const &)*arg3,(iDynTree::LinAcceleration const &)*arg4);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SensorsMeasurements_setMeasurement__SWIG_2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SensorsMeasurements *arg1 = (iDynTree::SensorsMeasurements *) 0 ;
  iDynTree::SensorType *arg2 = 0 ;
  unsigned int *arg3 = 0 ;
  iDynTree::AngVelocity *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 ;
  iDynTree::SensorType temp2 ;
  unsigned int temp3 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("SensorsMeasurements_setMeasurement",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SensorsMeasurements, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SensorsMeasurements_setMeasurement" "', argument " "1"" of type '" "iDynTree::SensorsMeasurements *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SensorsMeasurements * >(argp1);
  ecode2 = SWIG_AsVal_int (argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SensorsMeasurements_setMeasurement" "', argument " "2"" of type '" "iDynTree::SensorType const &""'");
  } else {
    temp2 = static_cast< iDynTree::SensorType >(val2);
    arg2 = &temp2;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SensorsMeasurements_setMeasurement" "', argument " "3"" of type '" "unsigned int""'");
  } 
  temp3 = static_cast< unsigned int >(val3);
  arg3 = &temp3;
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__AngularMotionVector3,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "SensorsMeasurements_setMeasurement" "', argument " "4"" of type '" "iDynTree::AngVelocity const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SensorsMeasurements_setMeasurement" "', argument " "4"" of type '" "iDynTree::AngVelocity const &""'"); 
  }
  arg4 = reinterpret_cast< iDynTree::AngVelocity * >(argp4);
  result = (bool)(arg1)->setMeasurement((iDynTree::SensorType const &)*arg2,(unsigned int const &)*arg3,(iDynTree::AngVelocity const &)*arg4);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SensorsMeasurements_setMeasurement(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SensorsMeasurements, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_iDynTree__Wrench, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_SensorsMeasurements_setMeasurement__SWIG_0(resc,resv,argc,argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SensorsMeasurements, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_iDynTree__LinearMotionVector3, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_SensorsMeasurements_setMeasurement__SWIG_1(resc,resv,argc,argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SensorsMeasurements, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_iDynTree__AngularMotionVector3, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_SensorsMeasurements_setMeasurement__SWIG_2(resc,resv,argc,argv);
          }
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'SensorsMeasurements_setMeasurement'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::SensorsMeasurements::setMeasurement(iDynTree::SensorType const &,unsigned int const &,iDynTree::Wrench const &)\n"
    "    iDynTree::SensorsMeasurements::setMeasurement(iDynTree::SensorType const &,unsigned int const &,iDynTree::LinAcceleration const &)\n"
    "    iDynTree::SensorsMeasurements::setMeasurement(iDynTree::SensorType const &,unsigned int const &,iDynTree::AngVelocity const &)\n");
  return 1;
}


int _wrap_SensorsMeasurements_getMeasurement__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SensorsMeasurements *arg1 = (iDynTree::SensorsMeasurements *) 0 ;
  iDynTree::SensorType *arg2 = 0 ;
  unsigned int *arg3 = 0 ;
  iDynTree::Wrench *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 ;
  iDynTree::SensorType temp2 ;
  unsigned int temp3 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("SensorsMeasurements_getMeasurement",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SensorsMeasurements, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SensorsMeasurements_getMeasurement" "', argument " "1"" of type '" "iDynTree::SensorsMeasurements const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SensorsMeasurements * >(argp1);
  ecode2 = SWIG_AsVal_int (argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SensorsMeasurements_getMeasurement" "', argument " "2"" of type '" "iDynTree::SensorType const &""'");
  } else {
    temp2 = static_cast< iDynTree::SensorType >(val2);
    arg2 = &temp2;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SensorsMeasurements_getMeasurement" "', argument " "3"" of type '" "unsigned int""'");
  } 
  temp3 = static_cast< unsigned int >(val3);
  arg3 = &temp3;
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__Wrench,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "SensorsMeasurements_getMeasurement" "', argument " "4"" of type '" "iDynTree::Wrench &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SensorsMeasurements_getMeasurement" "', argument " "4"" of type '" "iDynTree::Wrench &""'"); 
  }
  arg4 = reinterpret_cast< iDynTree::Wrench * >(argp4);
  result = (bool)((iDynTree::SensorsMeasurements const *)arg1)->getMeasurement((iDynTree::SensorType const &)*arg2,(unsigned int const &)*arg3,*arg4);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SensorsMeasurements_getMeasurement__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SensorsMeasurements *arg1 = (iDynTree::SensorsMeasurements *) 0 ;
  iDynTree::SensorType *arg2 = 0 ;
  unsigned int *arg3 = 0 ;
  iDynTree::LinAcceleration *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 ;
  iDynTree::SensorType temp2 ;
  unsigned int temp3 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("SensorsMeasurements_getMeasurement",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SensorsMeasurements, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SensorsMeasurements_getMeasurement" "', argument " "1"" of type '" "iDynTree::SensorsMeasurements const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SensorsMeasurements * >(argp1);
  ecode2 = SWIG_AsVal_int (argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SensorsMeasurements_getMeasurement" "', argument " "2"" of type '" "iDynTree::SensorType const &""'");
  } else {
    temp2 = static_cast< iDynTree::SensorType >(val2);
    arg2 = &temp2;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SensorsMeasurements_getMeasurement" "', argument " "3"" of type '" "unsigned int""'");
  } 
  temp3 = static_cast< unsigned int >(val3);
  arg3 = &temp3;
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__LinearMotionVector3,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "SensorsMeasurements_getMeasurement" "', argument " "4"" of type '" "iDynTree::LinAcceleration &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SensorsMeasurements_getMeasurement" "', argument " "4"" of type '" "iDynTree::LinAcceleration &""'"); 
  }
  arg4 = reinterpret_cast< iDynTree::LinAcceleration * >(argp4);
  result = (bool)((iDynTree::SensorsMeasurements const *)arg1)->getMeasurement((iDynTree::SensorType const &)*arg2,(unsigned int const &)*arg3,*arg4);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SensorsMeasurements_getMeasurement__SWIG_2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SensorsMeasurements *arg1 = (iDynTree::SensorsMeasurements *) 0 ;
  iDynTree::SensorType *arg2 = 0 ;
  unsigned int *arg3 = 0 ;
  iDynTree::AngVelocity *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 ;
  iDynTree::SensorType temp2 ;
  unsigned int temp3 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("SensorsMeasurements_getMeasurement",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SensorsMeasurements, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SensorsMeasurements_getMeasurement" "', argument " "1"" of type '" "iDynTree::SensorsMeasurements const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SensorsMeasurements * >(argp1);
  ecode2 = SWIG_AsVal_int (argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SensorsMeasurements_getMeasurement" "', argument " "2"" of type '" "iDynTree::SensorType const &""'");
  } else {
    temp2 = static_cast< iDynTree::SensorType >(val2);
    arg2 = &temp2;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SensorsMeasurements_getMeasurement" "', argument " "3"" of type '" "unsigned int""'");
  } 
  temp3 = static_cast< unsigned int >(val3);
  arg3 = &temp3;
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__AngularMotionVector3,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "SensorsMeasurements_getMeasurement" "', argument " "4"" of type '" "iDynTree::AngVelocity &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SensorsMeasurements_getMeasurement" "', argument " "4"" of type '" "iDynTree::AngVelocity &""'"); 
  }
  arg4 = reinterpret_cast< iDynTree::AngVelocity * >(argp4);
  result = (bool)((iDynTree::SensorsMeasurements const *)arg1)->getMeasurement((iDynTree::SensorType const &)*arg2,(unsigned int const &)*arg3,*arg4);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SensorsMeasurements_getMeasurement(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SensorsMeasurements, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_iDynTree__Wrench, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_SensorsMeasurements_getMeasurement__SWIG_0(resc,resv,argc,argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SensorsMeasurements, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_iDynTree__LinearMotionVector3, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_SensorsMeasurements_getMeasurement__SWIG_1(resc,resv,argc,argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SensorsMeasurements, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_iDynTree__AngularMotionVector3, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_SensorsMeasurements_getMeasurement__SWIG_2(resc,resv,argc,argv);
          }
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'SensorsMeasurements_getMeasurement'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::SensorsMeasurements::getMeasurement(iDynTree::SensorType const &,unsigned int const &,iDynTree::Wrench &) const\n"
    "    iDynTree::SensorsMeasurements::getMeasurement(iDynTree::SensorType const &,unsigned int const &,iDynTree::LinAcceleration &) const\n"
    "    iDynTree::SensorsMeasurements::getMeasurement(iDynTree::SensorType const &,unsigned int const &,iDynTree::AngVelocity &) const\n");
  return 1;
}


int _wrap_SensorsMeasurements_getSizeOfAllSensorsMeasurements(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SensorsMeasurements *arg1 = (iDynTree::SensorsMeasurements *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  size_t result;
  
  if (!SWIG_check_num_args("SensorsMeasurements_getSizeOfAllSensorsMeasurements",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SensorsMeasurements, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SensorsMeasurements_getSizeOfAllSensorsMeasurements" "', argument " "1"" of type '" "iDynTree::SensorsMeasurements const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SensorsMeasurements * >(argp1);
  result = ((iDynTree::SensorsMeasurements const *)arg1)->getSizeOfAllSensorsMeasurements();
  _out = SWIG_From_size_t(static_cast< size_t >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SixAxisForceTorqueSensor__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::SixAxisForceTorqueSensor *result = 0 ;
  
  if (!SWIG_check_num_args("new_SixAxisForceTorqueSensor",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::SixAxisForceTorqueSensor *)new iDynTree::SixAxisForceTorqueSensor();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SixAxisForceTorqueSensor, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SixAxisForceTorqueSensor__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SixAxisForceTorqueSensor *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::SixAxisForceTorqueSensor *result = 0 ;
  
  if (!SWIG_check_num_args("new_SixAxisForceTorqueSensor",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__SixAxisForceTorqueSensor,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SixAxisForceTorqueSensor" "', argument " "1"" of type '" "iDynTree::SixAxisForceTorqueSensor const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SixAxisForceTorqueSensor" "', argument " "1"" of type '" "iDynTree::SixAxisForceTorqueSensor const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SixAxisForceTorqueSensor * >(argp1);
  result = (iDynTree::SixAxisForceTorqueSensor *)new iDynTree::SixAxisForceTorqueSensor((iDynTree::SixAxisForceTorqueSensor const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SixAxisForceTorqueSensor, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SixAxisForceTorqueSensor(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_SixAxisForceTorqueSensor__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SixAxisForceTorqueSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SixAxisForceTorqueSensor__SWIG_1(resc,resv,argc,argv);
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_SixAxisForceTorqueSensor'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::SixAxisForceTorqueSensor::SixAxisForceTorqueSensor()\n"
    "    iDynTree::SixAxisForceTorqueSensor::SixAxisForceTorqueSensor(iDynTree::SixAxisForceTorqueSensor const &)\n");
  return 1;
}


int _wrap_delete_SixAxisForceTorqueSensor(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SixAxisForceTorqueSensor *arg1 = (iDynTree::SixAxisForceTorqueSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_SixAxisForceTorqueSensor",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SixAxisForceTorqueSensor, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SixAxisForceTorqueSensor" "', argument " "1"" of type '" "iDynTree::SixAxisForceTorqueSensor *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SixAxisForceTorqueSensor * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SixAxisForceTorqueSensor_setName(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SixAxisForceTorqueSensor *arg1 = (iDynTree::SixAxisForceTorqueSensor *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("SixAxisForceTorqueSensor_setName",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SixAxisForceTorqueSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SixAxisForceTorqueSensor_setName" "', argument " "1"" of type '" "iDynTree::SixAxisForceTorqueSensor *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SixAxisForceTorqueSensor * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SixAxisForceTorqueSensor_setName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SixAxisForceTorqueSensor_setName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->setName((std::string const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_SixAxisForceTorqueSensor_setFirstLinkSensorTransform(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SixAxisForceTorqueSensor *arg1 = (iDynTree::SixAxisForceTorqueSensor *) 0 ;
  int arg2 ;
  iDynTree::Transform *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("SixAxisForceTorqueSensor_setFirstLinkSensorTransform",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SixAxisForceTorqueSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SixAxisForceTorqueSensor_setFirstLinkSensorTransform" "', argument " "1"" of type '" "iDynTree::SixAxisForceTorqueSensor const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SixAxisForceTorqueSensor * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SixAxisForceTorqueSensor_setFirstLinkSensorTransform" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__Transform,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SixAxisForceTorqueSensor_setFirstLinkSensorTransform" "', argument " "3"" of type '" "iDynTree::Transform const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SixAxisForceTorqueSensor_setFirstLinkSensorTransform" "', argument " "3"" of type '" "iDynTree::Transform const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::Transform * >(argp3);
  result = (bool)((iDynTree::SixAxisForceTorqueSensor const *)arg1)->setFirstLinkSensorTransform(arg2,(iDynTree::Transform const &)*arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SixAxisForceTorqueSensor_setSecondLinkSensorTransform(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SixAxisForceTorqueSensor *arg1 = (iDynTree::SixAxisForceTorqueSensor *) 0 ;
  int arg2 ;
  iDynTree::Transform *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("SixAxisForceTorqueSensor_setSecondLinkSensorTransform",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SixAxisForceTorqueSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SixAxisForceTorqueSensor_setSecondLinkSensorTransform" "', argument " "1"" of type '" "iDynTree::SixAxisForceTorqueSensor const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SixAxisForceTorqueSensor * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SixAxisForceTorqueSensor_setSecondLinkSensorTransform" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__Transform,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SixAxisForceTorqueSensor_setSecondLinkSensorTransform" "', argument " "3"" of type '" "iDynTree::Transform const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SixAxisForceTorqueSensor_setSecondLinkSensorTransform" "', argument " "3"" of type '" "iDynTree::Transform const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::Transform * >(argp3);
  result = (bool)((iDynTree::SixAxisForceTorqueSensor const *)arg1)->setSecondLinkSensorTransform(arg2,(iDynTree::Transform const &)*arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SixAxisForceTorqueSensor_getFirstLinkIndex(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SixAxisForceTorqueSensor *arg1 = (iDynTree::SixAxisForceTorqueSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::LinkIndex result;
  
  if (!SWIG_check_num_args("SixAxisForceTorqueSensor_getFirstLinkIndex",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SixAxisForceTorqueSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SixAxisForceTorqueSensor_getFirstLinkIndex" "', argument " "1"" of type '" "iDynTree::SixAxisForceTorqueSensor const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SixAxisForceTorqueSensor * >(argp1);
  result = (iDynTree::LinkIndex)((iDynTree::SixAxisForceTorqueSensor const *)arg1)->getFirstLinkIndex();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SixAxisForceTorqueSensor_getSecondLinkIndex(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SixAxisForceTorqueSensor *arg1 = (iDynTree::SixAxisForceTorqueSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::LinkIndex result;
  
  if (!SWIG_check_num_args("SixAxisForceTorqueSensor_getSecondLinkIndex",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SixAxisForceTorqueSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SixAxisForceTorqueSensor_getSecondLinkIndex" "', argument " "1"" of type '" "iDynTree::SixAxisForceTorqueSensor const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SixAxisForceTorqueSensor * >(argp1);
  result = (iDynTree::LinkIndex)((iDynTree::SixAxisForceTorqueSensor const *)arg1)->getSecondLinkIndex();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SixAxisForceTorqueSensor_setFirstLinkName(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SixAxisForceTorqueSensor *arg1 = (iDynTree::SixAxisForceTorqueSensor *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("SixAxisForceTorqueSensor_setFirstLinkName",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SixAxisForceTorqueSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SixAxisForceTorqueSensor_setFirstLinkName" "', argument " "1"" of type '" "iDynTree::SixAxisForceTorqueSensor *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SixAxisForceTorqueSensor * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SixAxisForceTorqueSensor_setFirstLinkName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SixAxisForceTorqueSensor_setFirstLinkName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->setFirstLinkName((std::string const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_SixAxisForceTorqueSensor_setSecondLinkName(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SixAxisForceTorqueSensor *arg1 = (iDynTree::SixAxisForceTorqueSensor *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("SixAxisForceTorqueSensor_setSecondLinkName",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SixAxisForceTorqueSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SixAxisForceTorqueSensor_setSecondLinkName" "', argument " "1"" of type '" "iDynTree::SixAxisForceTorqueSensor *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SixAxisForceTorqueSensor * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SixAxisForceTorqueSensor_setSecondLinkName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SixAxisForceTorqueSensor_setSecondLinkName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->setSecondLinkName((std::string const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_SixAxisForceTorqueSensor_getFirstLinkName(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SixAxisForceTorqueSensor *arg1 = (iDynTree::SixAxisForceTorqueSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("SixAxisForceTorqueSensor_getFirstLinkName",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SixAxisForceTorqueSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SixAxisForceTorqueSensor_getFirstLinkName" "', argument " "1"" of type '" "iDynTree::SixAxisForceTorqueSensor const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SixAxisForceTorqueSensor * >(argp1);
  result = ((iDynTree::SixAxisForceTorqueSensor const *)arg1)->getFirstLinkName();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SixAxisForceTorqueSensor_getSecondLinkName(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SixAxisForceTorqueSensor *arg1 = (iDynTree::SixAxisForceTorqueSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("SixAxisForceTorqueSensor_getSecondLinkName",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SixAxisForceTorqueSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SixAxisForceTorqueSensor_getSecondLinkName" "', argument " "1"" of type '" "iDynTree::SixAxisForceTorqueSensor const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SixAxisForceTorqueSensor * >(argp1);
  result = ((iDynTree::SixAxisForceTorqueSensor const *)arg1)->getSecondLinkName();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SixAxisForceTorqueSensor_setParentJoint(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SixAxisForceTorqueSensor *arg1 = (iDynTree::SixAxisForceTorqueSensor *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("SixAxisForceTorqueSensor_setParentJoint",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SixAxisForceTorqueSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SixAxisForceTorqueSensor_setParentJoint" "', argument " "1"" of type '" "iDynTree::SixAxisForceTorqueSensor *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SixAxisForceTorqueSensor * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SixAxisForceTorqueSensor_setParentJoint" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SixAxisForceTorqueSensor_setParentJoint" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->setParentJoint((std::string const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_SixAxisForceTorqueSensor_setParentJointIndex(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SixAxisForceTorqueSensor *arg1 = (iDynTree::SixAxisForceTorqueSensor *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("SixAxisForceTorqueSensor_setParentJointIndex",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SixAxisForceTorqueSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SixAxisForceTorqueSensor_setParentJointIndex" "', argument " "1"" of type '" "iDynTree::SixAxisForceTorqueSensor *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SixAxisForceTorqueSensor * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SixAxisForceTorqueSensor_setParentJointIndex" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  result = (bool)(arg1)->setParentJointIndex((int const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SixAxisForceTorqueSensor_setAppliedWrenchLink(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SixAxisForceTorqueSensor *arg1 = (iDynTree::SixAxisForceTorqueSensor *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("SixAxisForceTorqueSensor_setAppliedWrenchLink",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SixAxisForceTorqueSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SixAxisForceTorqueSensor_setAppliedWrenchLink" "', argument " "1"" of type '" "iDynTree::SixAxisForceTorqueSensor *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SixAxisForceTorqueSensor * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SixAxisForceTorqueSensor_setAppliedWrenchLink" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (bool)(arg1)->setAppliedWrenchLink(arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SixAxisForceTorqueSensor_getName(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SixAxisForceTorqueSensor *arg1 = (iDynTree::SixAxisForceTorqueSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("SixAxisForceTorqueSensor_getName",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SixAxisForceTorqueSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SixAxisForceTorqueSensor_getName" "', argument " "1"" of type '" "iDynTree::SixAxisForceTorqueSensor const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SixAxisForceTorqueSensor * >(argp1);
  result = ((iDynTree::SixAxisForceTorqueSensor const *)arg1)->getName();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SixAxisForceTorqueSensor_getSensorType(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SixAxisForceTorqueSensor *arg1 = (iDynTree::SixAxisForceTorqueSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::SensorType result;
  
  if (!SWIG_check_num_args("SixAxisForceTorqueSensor_getSensorType",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SixAxisForceTorqueSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SixAxisForceTorqueSensor_getSensorType" "', argument " "1"" of type '" "iDynTree::SixAxisForceTorqueSensor const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SixAxisForceTorqueSensor * >(argp1);
  result = (iDynTree::SensorType)((iDynTree::SixAxisForceTorqueSensor const *)arg1)->getSensorType();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SixAxisForceTorqueSensor_getParentJoint(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SixAxisForceTorqueSensor *arg1 = (iDynTree::SixAxisForceTorqueSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("SixAxisForceTorqueSensor_getParentJoint",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SixAxisForceTorqueSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SixAxisForceTorqueSensor_getParentJoint" "', argument " "1"" of type '" "iDynTree::SixAxisForceTorqueSensor const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SixAxisForceTorqueSensor * >(argp1);
  result = ((iDynTree::SixAxisForceTorqueSensor const *)arg1)->getParentJoint();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SixAxisForceTorqueSensor_getParentJointIndex(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SixAxisForceTorqueSensor *arg1 = (iDynTree::SixAxisForceTorqueSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::JointIndex result;
  
  if (!SWIG_check_num_args("SixAxisForceTorqueSensor_getParentJointIndex",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SixAxisForceTorqueSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SixAxisForceTorqueSensor_getParentJointIndex" "', argument " "1"" of type '" "iDynTree::SixAxisForceTorqueSensor const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SixAxisForceTorqueSensor * >(argp1);
  result = (iDynTree::JointIndex)((iDynTree::SixAxisForceTorqueSensor const *)arg1)->getParentJointIndex();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SixAxisForceTorqueSensor_isValid(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SixAxisForceTorqueSensor *arg1 = (iDynTree::SixAxisForceTorqueSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("SixAxisForceTorqueSensor_isValid",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SixAxisForceTorqueSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SixAxisForceTorqueSensor_isValid" "', argument " "1"" of type '" "iDynTree::SixAxisForceTorqueSensor const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SixAxisForceTorqueSensor * >(argp1);
  result = (bool)((iDynTree::SixAxisForceTorqueSensor const *)arg1)->isValid();
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SixAxisForceTorqueSensor_clone(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SixAxisForceTorqueSensor *arg1 = (iDynTree::SixAxisForceTorqueSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Sensor *result = 0 ;
  
  if (!SWIG_check_num_args("SixAxisForceTorqueSensor_clone",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SixAxisForceTorqueSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SixAxisForceTorqueSensor_clone" "', argument " "1"" of type '" "iDynTree::SixAxisForceTorqueSensor const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SixAxisForceTorqueSensor * >(argp1);
  result = (iDynTree::Sensor *)((iDynTree::SixAxisForceTorqueSensor const *)arg1)->clone();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Sensor, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SixAxisForceTorqueSensor_updateIndices(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SixAxisForceTorqueSensor *arg1 = (iDynTree::SixAxisForceTorqueSensor *) 0 ;
  iDynTree::Model *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("SixAxisForceTorqueSensor_updateIndices",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SixAxisForceTorqueSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SixAxisForceTorqueSensor_updateIndices" "', argument " "1"" of type '" "iDynTree::SixAxisForceTorqueSensor *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SixAxisForceTorqueSensor * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SixAxisForceTorqueSensor_updateIndices" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SixAxisForceTorqueSensor_updateIndices" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Model * >(argp2);
  result = (bool)(arg1)->updateIndices((iDynTree::Model const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SixAxisForceTorqueSensor_updateIndeces(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SixAxisForceTorqueSensor *arg1 = (iDynTree::SixAxisForceTorqueSensor *) 0 ;
  iDynTree::Model *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("SixAxisForceTorqueSensor_updateIndeces",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SixAxisForceTorqueSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SixAxisForceTorqueSensor_updateIndeces" "', argument " "1"" of type '" "iDynTree::SixAxisForceTorqueSensor *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SixAxisForceTorqueSensor * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SixAxisForceTorqueSensor_updateIndeces" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SixAxisForceTorqueSensor_updateIndeces" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Model * >(argp2);
  result = (bool)(arg1)->updateIndeces((iDynTree::Model const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SixAxisForceTorqueSensor_getAppliedWrenchLink(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SixAxisForceTorqueSensor *arg1 = (iDynTree::SixAxisForceTorqueSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("SixAxisForceTorqueSensor_getAppliedWrenchLink",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SixAxisForceTorqueSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SixAxisForceTorqueSensor_getAppliedWrenchLink" "', argument " "1"" of type '" "iDynTree::SixAxisForceTorqueSensor const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SixAxisForceTorqueSensor * >(argp1);
  result = (int)((iDynTree::SixAxisForceTorqueSensor const *)arg1)->getAppliedWrenchLink();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SixAxisForceTorqueSensor_isLinkAttachedToSensor(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SixAxisForceTorqueSensor *arg1 = (iDynTree::SixAxisForceTorqueSensor *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("SixAxisForceTorqueSensor_isLinkAttachedToSensor",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SixAxisForceTorqueSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SixAxisForceTorqueSensor_isLinkAttachedToSensor" "', argument " "1"" of type '" "iDynTree::SixAxisForceTorqueSensor const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SixAxisForceTorqueSensor * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SixAxisForceTorqueSensor_isLinkAttachedToSensor" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (bool)((iDynTree::SixAxisForceTorqueSensor const *)arg1)->isLinkAttachedToSensor(arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SixAxisForceTorqueSensor_getLinkSensorTransform(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SixAxisForceTorqueSensor *arg1 = (iDynTree::SixAxisForceTorqueSensor *) 0 ;
  int arg2 ;
  iDynTree::Transform *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("SixAxisForceTorqueSensor_getLinkSensorTransform",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SixAxisForceTorqueSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SixAxisForceTorqueSensor_getLinkSensorTransform" "', argument " "1"" of type '" "iDynTree::SixAxisForceTorqueSensor const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SixAxisForceTorqueSensor * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SixAxisForceTorqueSensor_getLinkSensorTransform" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__Transform,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SixAxisForceTorqueSensor_getLinkSensorTransform" "', argument " "3"" of type '" "iDynTree::Transform &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SixAxisForceTorqueSensor_getLinkSensorTransform" "', argument " "3"" of type '" "iDynTree::Transform &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::Transform * >(argp3);
  result = (bool)((iDynTree::SixAxisForceTorqueSensor const *)arg1)->getLinkSensorTransform(arg2,*arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SixAxisForceTorqueSensor_getWrenchAppliedOnLink(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SixAxisForceTorqueSensor *arg1 = (iDynTree::SixAxisForceTorqueSensor *) 0 ;
  int arg2 ;
  iDynTree::Wrench *arg3 = 0 ;
  iDynTree::Wrench *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("SixAxisForceTorqueSensor_getWrenchAppliedOnLink",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SixAxisForceTorqueSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SixAxisForceTorqueSensor_getWrenchAppliedOnLink" "', argument " "1"" of type '" "iDynTree::SixAxisForceTorqueSensor const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SixAxisForceTorqueSensor * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SixAxisForceTorqueSensor_getWrenchAppliedOnLink" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__Wrench,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SixAxisForceTorqueSensor_getWrenchAppliedOnLink" "', argument " "3"" of type '" "iDynTree::Wrench const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SixAxisForceTorqueSensor_getWrenchAppliedOnLink" "', argument " "3"" of type '" "iDynTree::Wrench const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::Wrench * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__Wrench,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "SixAxisForceTorqueSensor_getWrenchAppliedOnLink" "', argument " "4"" of type '" "iDynTree::Wrench &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SixAxisForceTorqueSensor_getWrenchAppliedOnLink" "', argument " "4"" of type '" "iDynTree::Wrench &""'"); 
  }
  arg4 = reinterpret_cast< iDynTree::Wrench * >(argp4);
  result = (bool)((iDynTree::SixAxisForceTorqueSensor const *)arg1)->getWrenchAppliedOnLink(arg2,(iDynTree::Wrench const &)*arg3,*arg4);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SixAxisForceTorqueSensor_getWrenchAppliedOnLinkMatrix(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SixAxisForceTorqueSensor *arg1 = (iDynTree::SixAxisForceTorqueSensor *) 0 ;
  iDynTree::LinkIndex arg2 ;
  iDynTree::Matrix6x6 *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("SixAxisForceTorqueSensor_getWrenchAppliedOnLinkMatrix",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SixAxisForceTorqueSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SixAxisForceTorqueSensor_getWrenchAppliedOnLinkMatrix" "', argument " "1"" of type '" "iDynTree::SixAxisForceTorqueSensor const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SixAxisForceTorqueSensor * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SixAxisForceTorqueSensor_getWrenchAppliedOnLinkMatrix" "', argument " "2"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg2 = static_cast< iDynTree::LinkIndex >(val2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__MatrixFixSizeT_6_6_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SixAxisForceTorqueSensor_getWrenchAppliedOnLinkMatrix" "', argument " "3"" of type '" "iDynTree::Matrix6x6 &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SixAxisForceTorqueSensor_getWrenchAppliedOnLinkMatrix" "', argument " "3"" of type '" "iDynTree::Matrix6x6 &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::Matrix6x6 * >(argp3);
  result = (bool)((iDynTree::SixAxisForceTorqueSensor const *)arg1)->getWrenchAppliedOnLinkMatrix(arg2,*arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SixAxisForceTorqueSensor_getWrenchAppliedOnLinkInverseMatrix(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SixAxisForceTorqueSensor *arg1 = (iDynTree::SixAxisForceTorqueSensor *) 0 ;
  iDynTree::LinkIndex arg2 ;
  iDynTree::Matrix6x6 *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("SixAxisForceTorqueSensor_getWrenchAppliedOnLinkInverseMatrix",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SixAxisForceTorqueSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SixAxisForceTorqueSensor_getWrenchAppliedOnLinkInverseMatrix" "', argument " "1"" of type '" "iDynTree::SixAxisForceTorqueSensor const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SixAxisForceTorqueSensor * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SixAxisForceTorqueSensor_getWrenchAppliedOnLinkInverseMatrix" "', argument " "2"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg2 = static_cast< iDynTree::LinkIndex >(val2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__MatrixFixSizeT_6_6_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SixAxisForceTorqueSensor_getWrenchAppliedOnLinkInverseMatrix" "', argument " "3"" of type '" "iDynTree::Matrix6x6 &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SixAxisForceTorqueSensor_getWrenchAppliedOnLinkInverseMatrix" "', argument " "3"" of type '" "iDynTree::Matrix6x6 &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::Matrix6x6 * >(argp3);
  result = (bool)((iDynTree::SixAxisForceTorqueSensor const *)arg1)->getWrenchAppliedOnLinkInverseMatrix(arg2,*arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SixAxisForceTorqueSensor_predictMeasurement(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SixAxisForceTorqueSensor *arg1 = (iDynTree::SixAxisForceTorqueSensor *) 0 ;
  iDynTree::Traversal *arg2 = 0 ;
  iDynTree::LinkInternalWrenches *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  mxArray * _out;
  iDynTree::Wrench result;
  
  if (!SWIG_check_num_args("SixAxisForceTorqueSensor_predictMeasurement",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SixAxisForceTorqueSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SixAxisForceTorqueSensor_predictMeasurement" "', argument " "1"" of type '" "iDynTree::SixAxisForceTorqueSensor *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SixAxisForceTorqueSensor * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Traversal,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SixAxisForceTorqueSensor_predictMeasurement" "', argument " "2"" of type '" "iDynTree::Traversal const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SixAxisForceTorqueSensor_predictMeasurement" "', argument " "2"" of type '" "iDynTree::Traversal const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Traversal * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__LinkWrenches,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SixAxisForceTorqueSensor_predictMeasurement" "', argument " "3"" of type '" "iDynTree::LinkInternalWrenches const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SixAxisForceTorqueSensor_predictMeasurement" "', argument " "3"" of type '" "iDynTree::LinkInternalWrenches const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::LinkInternalWrenches * >(argp3);
  result = (arg1)->predictMeasurement((iDynTree::Traversal const &)*arg2,(iDynTree::LinkInternalWrenches const &)*arg3);
  _out = SWIG_NewPointerObj((new iDynTree::Wrench(static_cast< const iDynTree::Wrench& >(result))), SWIGTYPE_p_iDynTree__Wrench, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SixAxisForceTorqueSensor_toString(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SixAxisForceTorqueSensor *arg1 = (iDynTree::SixAxisForceTorqueSensor *) 0 ;
  iDynTree::Model *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("SixAxisForceTorqueSensor_toString",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SixAxisForceTorqueSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SixAxisForceTorqueSensor_toString" "', argument " "1"" of type '" "iDynTree::SixAxisForceTorqueSensor const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SixAxisForceTorqueSensor * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SixAxisForceTorqueSensor_toString" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SixAxisForceTorqueSensor_toString" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Model * >(argp2);
  result = ((iDynTree::SixAxisForceTorqueSensor const *)arg1)->toString((iDynTree::Model const &)*arg2);
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_AccelerometerSensor__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::AccelerometerSensor *result = 0 ;
  
  if (!SWIG_check_num_args("new_AccelerometerSensor",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::AccelerometerSensor *)new iDynTree::AccelerometerSensor();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__AccelerometerSensor, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_AccelerometerSensor__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::AccelerometerSensor *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::AccelerometerSensor *result = 0 ;
  
  if (!SWIG_check_num_args("new_AccelerometerSensor",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__AccelerometerSensor,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_AccelerometerSensor" "', argument " "1"" of type '" "iDynTree::AccelerometerSensor const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_AccelerometerSensor" "', argument " "1"" of type '" "iDynTree::AccelerometerSensor const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::AccelerometerSensor * >(argp1);
  result = (iDynTree::AccelerometerSensor *)new iDynTree::AccelerometerSensor((iDynTree::AccelerometerSensor const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__AccelerometerSensor, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_AccelerometerSensor(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_AccelerometerSensor__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__AccelerometerSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_AccelerometerSensor__SWIG_1(resc,resv,argc,argv);
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_AccelerometerSensor'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::AccelerometerSensor::AccelerometerSensor()\n"
    "    iDynTree::AccelerometerSensor::AccelerometerSensor(iDynTree::AccelerometerSensor const &)\n");
  return 1;
}


int _wrap_delete_AccelerometerSensor(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::AccelerometerSensor *arg1 = (iDynTree::AccelerometerSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_AccelerometerSensor",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__AccelerometerSensor, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_AccelerometerSensor" "', argument " "1"" of type '" "iDynTree::AccelerometerSensor *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::AccelerometerSensor * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AccelerometerSensor_setName(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::AccelerometerSensor *arg1 = (iDynTree::AccelerometerSensor *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("AccelerometerSensor_setName",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__AccelerometerSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AccelerometerSensor_setName" "', argument " "1"" of type '" "iDynTree::AccelerometerSensor *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::AccelerometerSensor * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AccelerometerSensor_setName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AccelerometerSensor_setName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->setName((std::string const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_AccelerometerSensor_setLinkSensorTransform(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::AccelerometerSensor *arg1 = (iDynTree::AccelerometerSensor *) 0 ;
  iDynTree::Transform *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("AccelerometerSensor_setLinkSensorTransform",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__AccelerometerSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AccelerometerSensor_setLinkSensorTransform" "', argument " "1"" of type '" "iDynTree::AccelerometerSensor *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::AccelerometerSensor * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Transform,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AccelerometerSensor_setLinkSensorTransform" "', argument " "2"" of type '" "iDynTree::Transform const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AccelerometerSensor_setLinkSensorTransform" "', argument " "2"" of type '" "iDynTree::Transform const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Transform * >(argp2);
  result = (bool)(arg1)->setLinkSensorTransform((iDynTree::Transform const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AccelerometerSensor_setParentLink(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::AccelerometerSensor *arg1 = (iDynTree::AccelerometerSensor *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("AccelerometerSensor_setParentLink",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__AccelerometerSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AccelerometerSensor_setParentLink" "', argument " "1"" of type '" "iDynTree::AccelerometerSensor *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::AccelerometerSensor * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AccelerometerSensor_setParentLink" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AccelerometerSensor_setParentLink" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->setParentLink((std::string const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_AccelerometerSensor_setParentLinkIndex(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::AccelerometerSensor *arg1 = (iDynTree::AccelerometerSensor *) 0 ;
  iDynTree::LinkIndex *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  iDynTree::LinkIndex temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("AccelerometerSensor_setParentLinkIndex",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__AccelerometerSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AccelerometerSensor_setParentLinkIndex" "', argument " "1"" of type '" "iDynTree::AccelerometerSensor *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::AccelerometerSensor * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AccelerometerSensor_setParentLinkIndex" "', argument " "2"" of type '" "iDynTree::LinkIndex""'");
  } 
  temp2 = static_cast< iDynTree::LinkIndex >(val2);
  arg2 = &temp2;
  result = (bool)(arg1)->setParentLinkIndex((iDynTree::LinkIndex const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AccelerometerSensor_getName(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::AccelerometerSensor *arg1 = (iDynTree::AccelerometerSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("AccelerometerSensor_getName",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__AccelerometerSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AccelerometerSensor_getName" "', argument " "1"" of type '" "iDynTree::AccelerometerSensor const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::AccelerometerSensor * >(argp1);
  result = ((iDynTree::AccelerometerSensor const *)arg1)->getName();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AccelerometerSensor_getSensorType(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::AccelerometerSensor *arg1 = (iDynTree::AccelerometerSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::SensorType result;
  
  if (!SWIG_check_num_args("AccelerometerSensor_getSensorType",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__AccelerometerSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AccelerometerSensor_getSensorType" "', argument " "1"" of type '" "iDynTree::AccelerometerSensor const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::AccelerometerSensor * >(argp1);
  result = (iDynTree::SensorType)((iDynTree::AccelerometerSensor const *)arg1)->getSensorType();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AccelerometerSensor_getParentLink(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::AccelerometerSensor *arg1 = (iDynTree::AccelerometerSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("AccelerometerSensor_getParentLink",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__AccelerometerSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AccelerometerSensor_getParentLink" "', argument " "1"" of type '" "iDynTree::AccelerometerSensor const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::AccelerometerSensor * >(argp1);
  result = ((iDynTree::AccelerometerSensor const *)arg1)->getParentLink();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AccelerometerSensor_getParentLinkIndex(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::AccelerometerSensor *arg1 = (iDynTree::AccelerometerSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::LinkIndex result;
  
  if (!SWIG_check_num_args("AccelerometerSensor_getParentLinkIndex",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__AccelerometerSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AccelerometerSensor_getParentLinkIndex" "', argument " "1"" of type '" "iDynTree::AccelerometerSensor const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::AccelerometerSensor * >(argp1);
  result = (iDynTree::LinkIndex)((iDynTree::AccelerometerSensor const *)arg1)->getParentLinkIndex();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AccelerometerSensor_getLinkSensorTransform(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::AccelerometerSensor *arg1 = (iDynTree::AccelerometerSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Transform result;
  
  if (!SWIG_check_num_args("AccelerometerSensor_getLinkSensorTransform",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__AccelerometerSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AccelerometerSensor_getLinkSensorTransform" "', argument " "1"" of type '" "iDynTree::AccelerometerSensor const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::AccelerometerSensor * >(argp1);
  result = ((iDynTree::AccelerometerSensor const *)arg1)->getLinkSensorTransform();
  _out = SWIG_NewPointerObj((new iDynTree::Transform(static_cast< const iDynTree::Transform& >(result))), SWIGTYPE_p_iDynTree__Transform, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AccelerometerSensor_isValid(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::AccelerometerSensor *arg1 = (iDynTree::AccelerometerSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("AccelerometerSensor_isValid",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__AccelerometerSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AccelerometerSensor_isValid" "', argument " "1"" of type '" "iDynTree::AccelerometerSensor const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::AccelerometerSensor * >(argp1);
  result = (bool)((iDynTree::AccelerometerSensor const *)arg1)->isValid();
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AccelerometerSensor_clone(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::AccelerometerSensor *arg1 = (iDynTree::AccelerometerSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Sensor *result = 0 ;
  
  if (!SWIG_check_num_args("AccelerometerSensor_clone",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__AccelerometerSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AccelerometerSensor_clone" "', argument " "1"" of type '" "iDynTree::AccelerometerSensor const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::AccelerometerSensor * >(argp1);
  result = (iDynTree::Sensor *)((iDynTree::AccelerometerSensor const *)arg1)->clone();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Sensor, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AccelerometerSensor_updateIndices(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::AccelerometerSensor *arg1 = (iDynTree::AccelerometerSensor *) 0 ;
  iDynTree::Model *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("AccelerometerSensor_updateIndices",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__AccelerometerSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AccelerometerSensor_updateIndices" "', argument " "1"" of type '" "iDynTree::AccelerometerSensor *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::AccelerometerSensor * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AccelerometerSensor_updateIndices" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AccelerometerSensor_updateIndices" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Model * >(argp2);
  result = (bool)(arg1)->updateIndices((iDynTree::Model const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AccelerometerSensor_updateIndeces(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::AccelerometerSensor *arg1 = (iDynTree::AccelerometerSensor *) 0 ;
  iDynTree::Model *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("AccelerometerSensor_updateIndeces",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__AccelerometerSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AccelerometerSensor_updateIndeces" "', argument " "1"" of type '" "iDynTree::AccelerometerSensor *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::AccelerometerSensor * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AccelerometerSensor_updateIndeces" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AccelerometerSensor_updateIndeces" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Model * >(argp2);
  result = (bool)(arg1)->updateIndeces((iDynTree::Model const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AccelerometerSensor_predictMeasurement(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::AccelerometerSensor *arg1 = (iDynTree::AccelerometerSensor *) 0 ;
  iDynTree::SpatialAcc *arg2 = 0 ;
  iDynTree::Twist *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  mxArray * _out;
  iDynTree::LinAcceleration result;
  
  if (!SWIG_check_num_args("AccelerometerSensor_predictMeasurement",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__AccelerometerSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AccelerometerSensor_predictMeasurement" "', argument " "1"" of type '" "iDynTree::AccelerometerSensor *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::AccelerometerSensor * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialAcc,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AccelerometerSensor_predictMeasurement" "', argument " "2"" of type '" "iDynTree::SpatialAcc const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AccelerometerSensor_predictMeasurement" "', argument " "2"" of type '" "iDynTree::SpatialAcc const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialAcc * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__Twist,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AccelerometerSensor_predictMeasurement" "', argument " "3"" of type '" "iDynTree::Twist const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AccelerometerSensor_predictMeasurement" "', argument " "3"" of type '" "iDynTree::Twist const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::Twist * >(argp3);
  result = (arg1)->predictMeasurement((iDynTree::SpatialAcc const &)*arg2,(iDynTree::Twist const &)*arg3);
  _out = SWIG_NewPointerObj((new iDynTree::LinAcceleration(static_cast< const iDynTree::LinAcceleration& >(result))), SWIGTYPE_p_iDynTree__LinearMotionVector3, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_GyroscopeSensor__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::GyroscopeSensor *result = 0 ;
  
  if (!SWIG_check_num_args("new_GyroscopeSensor",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::GyroscopeSensor *)new iDynTree::GyroscopeSensor();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__GyroscopeSensor, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_GyroscopeSensor__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GyroscopeSensor *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::GyroscopeSensor *result = 0 ;
  
  if (!SWIG_check_num_args("new_GyroscopeSensor",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__GyroscopeSensor,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GyroscopeSensor" "', argument " "1"" of type '" "iDynTree::GyroscopeSensor const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GyroscopeSensor" "', argument " "1"" of type '" "iDynTree::GyroscopeSensor const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GyroscopeSensor * >(argp1);
  result = (iDynTree::GyroscopeSensor *)new iDynTree::GyroscopeSensor((iDynTree::GyroscopeSensor const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__GyroscopeSensor, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_GyroscopeSensor(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_GyroscopeSensor__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__GyroscopeSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_GyroscopeSensor__SWIG_1(resc,resv,argc,argv);
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_GyroscopeSensor'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::GyroscopeSensor::GyroscopeSensor()\n"
    "    iDynTree::GyroscopeSensor::GyroscopeSensor(iDynTree::GyroscopeSensor const &)\n");
  return 1;
}


int _wrap_delete_GyroscopeSensor(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GyroscopeSensor *arg1 = (iDynTree::GyroscopeSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_GyroscopeSensor",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GyroscopeSensor, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GyroscopeSensor" "', argument " "1"" of type '" "iDynTree::GyroscopeSensor *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GyroscopeSensor * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GyroscopeSensor_setName(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GyroscopeSensor *arg1 = (iDynTree::GyroscopeSensor *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("GyroscopeSensor_setName",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GyroscopeSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GyroscopeSensor_setName" "', argument " "1"" of type '" "iDynTree::GyroscopeSensor *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GyroscopeSensor * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GyroscopeSensor_setName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GyroscopeSensor_setName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->setName((std::string const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_GyroscopeSensor_setLinkSensorTransform(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GyroscopeSensor *arg1 = (iDynTree::GyroscopeSensor *) 0 ;
  iDynTree::Transform *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("GyroscopeSensor_setLinkSensorTransform",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GyroscopeSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GyroscopeSensor_setLinkSensorTransform" "', argument " "1"" of type '" "iDynTree::GyroscopeSensor *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GyroscopeSensor * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Transform,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GyroscopeSensor_setLinkSensorTransform" "', argument " "2"" of type '" "iDynTree::Transform const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GyroscopeSensor_setLinkSensorTransform" "', argument " "2"" of type '" "iDynTree::Transform const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Transform * >(argp2);
  result = (bool)(arg1)->setLinkSensorTransform((iDynTree::Transform const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GyroscopeSensor_setParentLink(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GyroscopeSensor *arg1 = (iDynTree::GyroscopeSensor *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("GyroscopeSensor_setParentLink",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GyroscopeSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GyroscopeSensor_setParentLink" "', argument " "1"" of type '" "iDynTree::GyroscopeSensor *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GyroscopeSensor * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GyroscopeSensor_setParentLink" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GyroscopeSensor_setParentLink" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->setParentLink((std::string const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_GyroscopeSensor_setParentLinkIndex(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GyroscopeSensor *arg1 = (iDynTree::GyroscopeSensor *) 0 ;
  iDynTree::LinkIndex *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  iDynTree::LinkIndex temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("GyroscopeSensor_setParentLinkIndex",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GyroscopeSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GyroscopeSensor_setParentLinkIndex" "', argument " "1"" of type '" "iDynTree::GyroscopeSensor *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GyroscopeSensor * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GyroscopeSensor_setParentLinkIndex" "', argument " "2"" of type '" "iDynTree::LinkIndex""'");
  } 
  temp2 = static_cast< iDynTree::LinkIndex >(val2);
  arg2 = &temp2;
  result = (bool)(arg1)->setParentLinkIndex((iDynTree::LinkIndex const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GyroscopeSensor_getName(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GyroscopeSensor *arg1 = (iDynTree::GyroscopeSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("GyroscopeSensor_getName",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GyroscopeSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GyroscopeSensor_getName" "', argument " "1"" of type '" "iDynTree::GyroscopeSensor const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GyroscopeSensor * >(argp1);
  result = ((iDynTree::GyroscopeSensor const *)arg1)->getName();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GyroscopeSensor_getSensorType(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GyroscopeSensor *arg1 = (iDynTree::GyroscopeSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::SensorType result;
  
  if (!SWIG_check_num_args("GyroscopeSensor_getSensorType",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GyroscopeSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GyroscopeSensor_getSensorType" "', argument " "1"" of type '" "iDynTree::GyroscopeSensor const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GyroscopeSensor * >(argp1);
  result = (iDynTree::SensorType)((iDynTree::GyroscopeSensor const *)arg1)->getSensorType();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GyroscopeSensor_getParentLink(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GyroscopeSensor *arg1 = (iDynTree::GyroscopeSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("GyroscopeSensor_getParentLink",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GyroscopeSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GyroscopeSensor_getParentLink" "', argument " "1"" of type '" "iDynTree::GyroscopeSensor const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GyroscopeSensor * >(argp1);
  result = ((iDynTree::GyroscopeSensor const *)arg1)->getParentLink();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GyroscopeSensor_getParentLinkIndex(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GyroscopeSensor *arg1 = (iDynTree::GyroscopeSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::LinkIndex result;
  
  if (!SWIG_check_num_args("GyroscopeSensor_getParentLinkIndex",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GyroscopeSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GyroscopeSensor_getParentLinkIndex" "', argument " "1"" of type '" "iDynTree::GyroscopeSensor const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GyroscopeSensor * >(argp1);
  result = (iDynTree::LinkIndex)((iDynTree::GyroscopeSensor const *)arg1)->getParentLinkIndex();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GyroscopeSensor_getLinkSensorTransform(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GyroscopeSensor *arg1 = (iDynTree::GyroscopeSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Transform result;
  
  if (!SWIG_check_num_args("GyroscopeSensor_getLinkSensorTransform",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GyroscopeSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GyroscopeSensor_getLinkSensorTransform" "', argument " "1"" of type '" "iDynTree::GyroscopeSensor const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GyroscopeSensor * >(argp1);
  result = ((iDynTree::GyroscopeSensor const *)arg1)->getLinkSensorTransform();
  _out = SWIG_NewPointerObj((new iDynTree::Transform(static_cast< const iDynTree::Transform& >(result))), SWIGTYPE_p_iDynTree__Transform, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GyroscopeSensor_isValid(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GyroscopeSensor *arg1 = (iDynTree::GyroscopeSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("GyroscopeSensor_isValid",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GyroscopeSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GyroscopeSensor_isValid" "', argument " "1"" of type '" "iDynTree::GyroscopeSensor const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GyroscopeSensor * >(argp1);
  result = (bool)((iDynTree::GyroscopeSensor const *)arg1)->isValid();
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GyroscopeSensor_clone(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GyroscopeSensor *arg1 = (iDynTree::GyroscopeSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Sensor *result = 0 ;
  
  if (!SWIG_check_num_args("GyroscopeSensor_clone",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GyroscopeSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GyroscopeSensor_clone" "', argument " "1"" of type '" "iDynTree::GyroscopeSensor const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GyroscopeSensor * >(argp1);
  result = (iDynTree::Sensor *)((iDynTree::GyroscopeSensor const *)arg1)->clone();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Sensor, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GyroscopeSensor_updateIndices(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GyroscopeSensor *arg1 = (iDynTree::GyroscopeSensor *) 0 ;
  iDynTree::Model *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("GyroscopeSensor_updateIndices",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GyroscopeSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GyroscopeSensor_updateIndices" "', argument " "1"" of type '" "iDynTree::GyroscopeSensor *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GyroscopeSensor * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GyroscopeSensor_updateIndices" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GyroscopeSensor_updateIndices" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Model * >(argp2);
  result = (bool)(arg1)->updateIndices((iDynTree::Model const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GyroscopeSensor_updateIndeces(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GyroscopeSensor *arg1 = (iDynTree::GyroscopeSensor *) 0 ;
  iDynTree::Model *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("GyroscopeSensor_updateIndeces",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GyroscopeSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GyroscopeSensor_updateIndeces" "', argument " "1"" of type '" "iDynTree::GyroscopeSensor *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GyroscopeSensor * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GyroscopeSensor_updateIndeces" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GyroscopeSensor_updateIndeces" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Model * >(argp2);
  result = (bool)(arg1)->updateIndeces((iDynTree::Model const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GyroscopeSensor_predictMeasurement(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GyroscopeSensor *arg1 = (iDynTree::GyroscopeSensor *) 0 ;
  iDynTree::Twist *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::AngVelocity result;
  
  if (!SWIG_check_num_args("GyroscopeSensor_predictMeasurement",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GyroscopeSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GyroscopeSensor_predictMeasurement" "', argument " "1"" of type '" "iDynTree::GyroscopeSensor *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GyroscopeSensor * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Twist,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GyroscopeSensor_predictMeasurement" "', argument " "2"" of type '" "iDynTree::Twist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GyroscopeSensor_predictMeasurement" "', argument " "2"" of type '" "iDynTree::Twist const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Twist * >(argp2);
  result = (arg1)->predictMeasurement((iDynTree::Twist const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::AngVelocity(static_cast< const iDynTree::AngVelocity& >(result))), SWIGTYPE_p_iDynTree__AngularMotionVector3, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_predictSensorsMeasurements(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = 0 ;
  iDynTree::SensorsList *arg2 = 0 ;
  iDynTree::Traversal *arg3 = 0 ;
  iDynTree::FreeFloatingPos *arg4 = 0 ;
  iDynTree::FreeFloatingVel *arg5 = 0 ;
  iDynTree::FreeFloatingAcc *arg6 = 0 ;
  iDynTree::LinAcceleration *arg7 = 0 ;
  iDynTree::LinkNetExternalWrenches *arg8 = 0 ;
  iDynTree::FreeFloatingAcc *arg9 = 0 ;
  iDynTree::LinkPositions *arg10 = 0 ;
  iDynTree::LinkVelArray *arg11 = 0 ;
  iDynTree::LinkAccArray *arg12 = 0 ;
  iDynTree::LinkInternalWrenches *arg13 = 0 ;
  iDynTree::FreeFloatingGeneralizedTorques *arg14 = 0 ;
  iDynTree::SensorsMeasurements *arg15 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  void *argp8 ;
  int res8 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  void *argp10 = 0 ;
  int res10 = 0 ;
  void *argp11 = 0 ;
  int res11 = 0 ;
  void *argp12 = 0 ;
  int res12 = 0 ;
  void *argp13 = 0 ;
  int res13 = 0 ;
  void *argp14 = 0 ;
  int res14 = 0 ;
  void *argp15 = 0 ;
  int res15 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("predictSensorsMeasurements",argc,15,15,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "predictSensorsMeasurements" "', argument " "1"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "predictSensorsMeasurements" "', argument " "1"" of type '" "iDynTree::Model const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SensorsList,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "predictSensorsMeasurements" "', argument " "2"" of type '" "iDynTree::SensorsList const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "predictSensorsMeasurements" "', argument " "2"" of type '" "iDynTree::SensorsList const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SensorsList * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__Traversal,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "predictSensorsMeasurements" "', argument " "3"" of type '" "iDynTree::Traversal const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "predictSensorsMeasurements" "', argument " "3"" of type '" "iDynTree::Traversal const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::Traversal * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__FreeFloatingPos,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "predictSensorsMeasurements" "', argument " "4"" of type '" "iDynTree::FreeFloatingPos const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "predictSensorsMeasurements" "', argument " "4"" of type '" "iDynTree::FreeFloatingPos const &""'"); 
  }
  arg4 = reinterpret_cast< iDynTree::FreeFloatingPos * >(argp4);
  res5 = SWIG_ConvertPtr(argv[4], &argp5, SWIGTYPE_p_iDynTree__FreeFloatingVel,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "predictSensorsMeasurements" "', argument " "5"" of type '" "iDynTree::FreeFloatingVel const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "predictSensorsMeasurements" "', argument " "5"" of type '" "iDynTree::FreeFloatingVel const &""'"); 
  }
  arg5 = reinterpret_cast< iDynTree::FreeFloatingVel * >(argp5);
  res6 = SWIG_ConvertPtr(argv[5], &argp6, SWIGTYPE_p_iDynTree__FreeFloatingAcc,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "predictSensorsMeasurements" "', argument " "6"" of type '" "iDynTree::FreeFloatingAcc const &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "predictSensorsMeasurements" "', argument " "6"" of type '" "iDynTree::FreeFloatingAcc const &""'"); 
  }
  arg6 = reinterpret_cast< iDynTree::FreeFloatingAcc * >(argp6);
  res7 = SWIG_ConvertPtr(argv[6], &argp7, SWIGTYPE_p_iDynTree__LinearMotionVector3,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "predictSensorsMeasurements" "', argument " "7"" of type '" "iDynTree::LinAcceleration const &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "predictSensorsMeasurements" "', argument " "7"" of type '" "iDynTree::LinAcceleration const &""'"); 
  }
  arg7 = reinterpret_cast< iDynTree::LinAcceleration * >(argp7);
  res8 = SWIG_ConvertPtr(argv[7], &argp8, SWIGTYPE_p_iDynTree__LinkWrenches,  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "predictSensorsMeasurements" "', argument " "8"" of type '" "iDynTree::LinkNetExternalWrenches const &""'"); 
  }
  if (!argp8) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "predictSensorsMeasurements" "', argument " "8"" of type '" "iDynTree::LinkNetExternalWrenches const &""'"); 
  }
  arg8 = reinterpret_cast< iDynTree::LinkNetExternalWrenches * >(argp8);
  res9 = SWIG_ConvertPtr(argv[8], &argp9, SWIGTYPE_p_iDynTree__FreeFloatingAcc,  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "predictSensorsMeasurements" "', argument " "9"" of type '" "iDynTree::FreeFloatingAcc &""'"); 
  }
  if (!argp9) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "predictSensorsMeasurements" "', argument " "9"" of type '" "iDynTree::FreeFloatingAcc &""'"); 
  }
  arg9 = reinterpret_cast< iDynTree::FreeFloatingAcc * >(argp9);
  res10 = SWIG_ConvertPtr(argv[9], &argp10, SWIGTYPE_p_iDynTree__LinkPositions,  0 );
  if (!SWIG_IsOK(res10)) {
    SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "predictSensorsMeasurements" "', argument " "10"" of type '" "iDynTree::LinkPositions &""'"); 
  }
  if (!argp10) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "predictSensorsMeasurements" "', argument " "10"" of type '" "iDynTree::LinkPositions &""'"); 
  }
  arg10 = reinterpret_cast< iDynTree::LinkPositions * >(argp10);
  res11 = SWIG_ConvertPtr(argv[10], &argp11, SWIGTYPE_p_iDynTree__LinkVelArray,  0 );
  if (!SWIG_IsOK(res11)) {
    SWIG_exception_fail(SWIG_ArgError(res11), "in method '" "predictSensorsMeasurements" "', argument " "11"" of type '" "iDynTree::LinkVelArray &""'"); 
  }
  if (!argp11) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "predictSensorsMeasurements" "', argument " "11"" of type '" "iDynTree::LinkVelArray &""'"); 
  }
  arg11 = reinterpret_cast< iDynTree::LinkVelArray * >(argp11);
  res12 = SWIG_ConvertPtr(argv[11], &argp12, SWIGTYPE_p_iDynTree__LinkAccArray,  0 );
  if (!SWIG_IsOK(res12)) {
    SWIG_exception_fail(SWIG_ArgError(res12), "in method '" "predictSensorsMeasurements" "', argument " "12"" of type '" "iDynTree::LinkAccArray &""'"); 
  }
  if (!argp12) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "predictSensorsMeasurements" "', argument " "12"" of type '" "iDynTree::LinkAccArray &""'"); 
  }
  arg12 = reinterpret_cast< iDynTree::LinkAccArray * >(argp12);
  res13 = SWIG_ConvertPtr(argv[12], &argp13, SWIGTYPE_p_iDynTree__LinkWrenches,  0 );
  if (!SWIG_IsOK(res13)) {
    SWIG_exception_fail(SWIG_ArgError(res13), "in method '" "predictSensorsMeasurements" "', argument " "13"" of type '" "iDynTree::LinkInternalWrenches &""'"); 
  }
  if (!argp13) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "predictSensorsMeasurements" "', argument " "13"" of type '" "iDynTree::LinkInternalWrenches &""'"); 
  }
  arg13 = reinterpret_cast< iDynTree::LinkInternalWrenches * >(argp13);
  res14 = SWIG_ConvertPtr(argv[13], &argp14, SWIGTYPE_p_iDynTree__FreeFloatingGeneralizedTorques,  0 );
  if (!SWIG_IsOK(res14)) {
    SWIG_exception_fail(SWIG_ArgError(res14), "in method '" "predictSensorsMeasurements" "', argument " "14"" of type '" "iDynTree::FreeFloatingGeneralizedTorques &""'"); 
  }
  if (!argp14) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "predictSensorsMeasurements" "', argument " "14"" of type '" "iDynTree::FreeFloatingGeneralizedTorques &""'"); 
  }
  arg14 = reinterpret_cast< iDynTree::FreeFloatingGeneralizedTorques * >(argp14);
  res15 = SWIG_ConvertPtr(argv[14], &argp15, SWIGTYPE_p_iDynTree__SensorsMeasurements,  0 );
  if (!SWIG_IsOK(res15)) {
    SWIG_exception_fail(SWIG_ArgError(res15), "in method '" "predictSensorsMeasurements" "', argument " "15"" of type '" "iDynTree::SensorsMeasurements &""'"); 
  }
  if (!argp15) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "predictSensorsMeasurements" "', argument " "15"" of type '" "iDynTree::SensorsMeasurements &""'"); 
  }
  arg15 = reinterpret_cast< iDynTree::SensorsMeasurements * >(argp15);
  result = (bool)iDynTree::predictSensorsMeasurements((iDynTree::Model const &)*arg1,(iDynTree::SensorsList const &)*arg2,(iDynTree::Traversal const &)*arg3,(iDynTree::FreeFloatingPos const &)*arg4,(iDynTree::FreeFloatingVel const &)*arg5,(iDynTree::FreeFloatingAcc const &)*arg6,(iDynTree::LinearMotionVector3 const &)*arg7,(iDynTree::LinkWrenches const &)*arg8,*arg9,*arg10,*arg11,*arg12,*arg13,*arg14,*arg15);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_predictSensorsMeasurementsFromRawBuffers(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = 0 ;
  iDynTree::SensorsList *arg2 = 0 ;
  iDynTree::Traversal *arg3 = 0 ;
  iDynTree::LinkVelArray *arg4 = 0 ;
  iDynTree::LinkAccArray *arg5 = 0 ;
  iDynTree::LinkInternalWrenches *arg6 = 0 ;
  iDynTree::SensorsMeasurements *arg7 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("predictSensorsMeasurementsFromRawBuffers",argc,7,7,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "predictSensorsMeasurementsFromRawBuffers" "', argument " "1"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "predictSensorsMeasurementsFromRawBuffers" "', argument " "1"" of type '" "iDynTree::Model const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SensorsList,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "predictSensorsMeasurementsFromRawBuffers" "', argument " "2"" of type '" "iDynTree::SensorsList const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "predictSensorsMeasurementsFromRawBuffers" "', argument " "2"" of type '" "iDynTree::SensorsList const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SensorsList * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__Traversal,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "predictSensorsMeasurementsFromRawBuffers" "', argument " "3"" of type '" "iDynTree::Traversal const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "predictSensorsMeasurementsFromRawBuffers" "', argument " "3"" of type '" "iDynTree::Traversal const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::Traversal * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__LinkVelArray,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "predictSensorsMeasurementsFromRawBuffers" "', argument " "4"" of type '" "iDynTree::LinkVelArray const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "predictSensorsMeasurementsFromRawBuffers" "', argument " "4"" of type '" "iDynTree::LinkVelArray const &""'"); 
  }
  arg4 = reinterpret_cast< iDynTree::LinkVelArray * >(argp4);
  res5 = SWIG_ConvertPtr(argv[4], &argp5, SWIGTYPE_p_iDynTree__LinkAccArray,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "predictSensorsMeasurementsFromRawBuffers" "', argument " "5"" of type '" "iDynTree::LinkAccArray const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "predictSensorsMeasurementsFromRawBuffers" "', argument " "5"" of type '" "iDynTree::LinkAccArray const &""'"); 
  }
  arg5 = reinterpret_cast< iDynTree::LinkAccArray * >(argp5);
  res6 = SWIG_ConvertPtr(argv[5], &argp6, SWIGTYPE_p_iDynTree__LinkWrenches,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "predictSensorsMeasurementsFromRawBuffers" "', argument " "6"" of type '" "iDynTree::LinkInternalWrenches const &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "predictSensorsMeasurementsFromRawBuffers" "', argument " "6"" of type '" "iDynTree::LinkInternalWrenches const &""'"); 
  }
  arg6 = reinterpret_cast< iDynTree::LinkInternalWrenches * >(argp6);
  res7 = SWIG_ConvertPtr(argv[6], &argp7, SWIGTYPE_p_iDynTree__SensorsMeasurements,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "predictSensorsMeasurementsFromRawBuffers" "', argument " "7"" of type '" "iDynTree::SensorsMeasurements &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "predictSensorsMeasurementsFromRawBuffers" "', argument " "7"" of type '" "iDynTree::SensorsMeasurements &""'"); 
  }
  arg7 = reinterpret_cast< iDynTree::SensorsMeasurements * >(argp7);
  result = (bool)iDynTree::predictSensorsMeasurementsFromRawBuffers((iDynTree::Model const &)*arg1,(iDynTree::SensorsList const &)*arg2,(iDynTree::Traversal const &)*arg3,(iDynTree::LinkVelArray const &)*arg4,(iDynTree::LinkAccArray const &)*arg5,(iDynTree::LinkWrenches const &)*arg6,*arg7);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_URDFParserOptions_addSensorFramesAsAdditionalFrames_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::URDFParserOptions *arg1 = (iDynTree::URDFParserOptions *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("URDFParserOptions_addSensorFramesAsAdditionalFrames_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__URDFParserOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "URDFParserOptions_addSensorFramesAsAdditionalFrames_set" "', argument " "1"" of type '" "iDynTree::URDFParserOptions *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::URDFParserOptions * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "URDFParserOptions_addSensorFramesAsAdditionalFrames_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->addSensorFramesAsAdditionalFrames = arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_URDFParserOptions_addSensorFramesAsAdditionalFrames_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::URDFParserOptions *arg1 = (iDynTree::URDFParserOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("URDFParserOptions_addSensorFramesAsAdditionalFrames_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__URDFParserOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "URDFParserOptions_addSensorFramesAsAdditionalFrames_get" "', argument " "1"" of type '" "iDynTree::URDFParserOptions *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::URDFParserOptions * >(argp1);
  result = (bool) ((arg1)->addSensorFramesAsAdditionalFrames);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_URDFParserOptions_originalFilename_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::URDFParserOptions *arg1 = (iDynTree::URDFParserOptions *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("URDFParserOptions_originalFilename_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__URDFParserOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "URDFParserOptions_originalFilename_set" "', argument " "1"" of type '" "iDynTree::URDFParserOptions *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::URDFParserOptions * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "URDFParserOptions_originalFilename_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "URDFParserOptions_originalFilename_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->originalFilename = *arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_URDFParserOptions_originalFilename_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::URDFParserOptions *arg1 = (iDynTree::URDFParserOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string *result = 0 ;
  
  if (!SWIG_check_num_args("URDFParserOptions_originalFilename_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__URDFParserOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "URDFParserOptions_originalFilename_get" "', argument " "1"" of type '" "iDynTree::URDFParserOptions *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::URDFParserOptions * >(argp1);
  result = (std::string *) & ((arg1)->originalFilename);
  _out = SWIG_From_std_string(static_cast< std::string >(*result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_URDFParserOptions(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::URDFParserOptions *result = 0 ;
  
  if (!SWIG_check_num_args("new_URDFParserOptions",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::URDFParserOptions *)new iDynTree::URDFParserOptions();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__URDFParserOptions, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_URDFParserOptions(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::URDFParserOptions *arg1 = (iDynTree::URDFParserOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_URDFParserOptions",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__URDFParserOptions, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_URDFParserOptions" "', argument " "1"" of type '" "iDynTree::URDFParserOptions *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::URDFParserOptions * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_modelFromURDF__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::string *arg1 = 0 ;
  iDynTree::Model *arg2 = 0 ;
  iDynTree::URDFParserOptions arg3 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("modelFromURDF",argc,3,3,0)) {
    SWIG_fail;
  }
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "modelFromURDF" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "modelFromURDF" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "modelFromURDF" "', argument " "2"" of type '" "iDynTree::Model &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "modelFromURDF" "', argument " "2"" of type '" "iDynTree::Model &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Model * >(argp2);
  {
    res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__URDFParserOptions,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "modelFromURDF" "', argument " "3"" of type '" "iDynTree::URDFParserOptions const""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "modelFromURDF" "', argument " "3"" of type '" "iDynTree::URDFParserOptions const""'");
    } else {
      arg3 = *(reinterpret_cast< iDynTree::URDFParserOptions * >(argp3));
    }
  }
  result = (bool)iDynTree::modelFromURDF((std::string const &)*arg1,*arg2,arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res1)) delete arg1;
  return 0;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return 1;
}


int _wrap_modelFromURDF__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::string *arg1 = 0 ;
  iDynTree::Model *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("modelFromURDF",argc,2,2,0)) {
    SWIG_fail;
  }
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "modelFromURDF" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "modelFromURDF" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "modelFromURDF" "', argument " "2"" of type '" "iDynTree::Model &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "modelFromURDF" "', argument " "2"" of type '" "iDynTree::Model &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Model * >(argp2);
  result = (bool)iDynTree::modelFromURDF((std::string const &)*arg1,*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res1)) delete arg1;
  return 0;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return 1;
}


int _wrap_modelFromURDF(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Model, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_modelFromURDF__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Model, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_iDynTree__URDFParserOptions, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_modelFromURDF__SWIG_0(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'modelFromURDF'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::modelFromURDF(std::string const &,iDynTree::Model &,iDynTree::URDFParserOptions const)\n"
    "    iDynTree::modelFromURDF(std::string const &,iDynTree::Model &)\n");
  return 1;
}


int _wrap_modelFromURDFString__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::string *arg1 = 0 ;
  iDynTree::Model *arg2 = 0 ;
  iDynTree::URDFParserOptions arg3 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("modelFromURDFString",argc,3,3,0)) {
    SWIG_fail;
  }
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "modelFromURDFString" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "modelFromURDFString" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "modelFromURDFString" "', argument " "2"" of type '" "iDynTree::Model &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "modelFromURDFString" "', argument " "2"" of type '" "iDynTree::Model &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Model * >(argp2);
  {
    res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__URDFParserOptions,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "modelFromURDFString" "', argument " "3"" of type '" "iDynTree::URDFParserOptions const""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "modelFromURDFString" "', argument " "3"" of type '" "iDynTree::URDFParserOptions const""'");
    } else {
      arg3 = *(reinterpret_cast< iDynTree::URDFParserOptions * >(argp3));
    }
  }
  result = (bool)iDynTree::modelFromURDFString((std::string const &)*arg1,*arg2,arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res1)) delete arg1;
  return 0;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return 1;
}


int _wrap_modelFromURDFString__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::string *arg1 = 0 ;
  iDynTree::Model *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("modelFromURDFString",argc,2,2,0)) {
    SWIG_fail;
  }
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "modelFromURDFString" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "modelFromURDFString" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "modelFromURDFString" "', argument " "2"" of type '" "iDynTree::Model &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "modelFromURDFString" "', argument " "2"" of type '" "iDynTree::Model &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Model * >(argp2);
  result = (bool)iDynTree::modelFromURDFString((std::string const &)*arg1,*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res1)) delete arg1;
  return 0;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return 1;
}


int _wrap_modelFromURDFString(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Model, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_modelFromURDFString__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Model, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_iDynTree__URDFParserOptions, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_modelFromURDFString__SWIG_0(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'modelFromURDFString'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::modelFromURDFString(std::string const &,iDynTree::Model &,iDynTree::URDFParserOptions const)\n"
    "    iDynTree::modelFromURDFString(std::string const &,iDynTree::Model &)\n");
  return 1;
}


int _wrap_dofsListFromURDF(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::string *arg1 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("dofsListFromURDF",argc,2,2,0)) {
    SWIG_fail;
  }
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dofsListFromURDF" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dofsListFromURDF" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dofsListFromURDF" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dofsListFromURDF" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::string,std::allocator< std::string > > * >(argp2);
  result = (bool)iDynTree::dofsListFromURDF((std::string const &)*arg1,*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res1)) delete arg1;
  return 0;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return 1;
}


int _wrap_dofsListFromURDFString(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::string *arg1 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("dofsListFromURDFString",argc,2,2,0)) {
    SWIG_fail;
  }
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dofsListFromURDFString" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dofsListFromURDFString" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dofsListFromURDFString" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dofsListFromURDFString" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::string,std::allocator< std::string > > * >(argp2);
  result = (bool)iDynTree::dofsListFromURDFString((std::string const &)*arg1,*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res1)) delete arg1;
  return 0;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return 1;
}


int _wrap_sensorsFromURDF__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::string *arg1 = 0 ;
  iDynTree::SensorsList *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("sensorsFromURDF",argc,2,2,0)) {
    SWIG_fail;
  }
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sensorsFromURDF" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sensorsFromURDF" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SensorsList,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sensorsFromURDF" "', argument " "2"" of type '" "iDynTree::SensorsList &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sensorsFromURDF" "', argument " "2"" of type '" "iDynTree::SensorsList &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SensorsList * >(argp2);
  result = (bool)iDynTree::sensorsFromURDF((std::string const &)*arg1,*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res1)) delete arg1;
  return 0;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return 1;
}


int _wrap_sensorsFromURDF__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::string *arg1 = 0 ;
  iDynTree::Model *arg2 = 0 ;
  iDynTree::SensorsList *arg3 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("sensorsFromURDF",argc,3,3,0)) {
    SWIG_fail;
  }
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sensorsFromURDF" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sensorsFromURDF" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sensorsFromURDF" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sensorsFromURDF" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Model * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__SensorsList,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "sensorsFromURDF" "', argument " "3"" of type '" "iDynTree::SensorsList &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sensorsFromURDF" "', argument " "3"" of type '" "iDynTree::SensorsList &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::SensorsList * >(argp3);
  result = (bool)iDynTree::sensorsFromURDF((std::string const &)*arg1,(iDynTree::Model const &)*arg2,*arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res1)) delete arg1;
  return 0;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return 1;
}


int _wrap_sensorsFromURDF(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__SensorsList, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_sensorsFromURDF__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Model, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_iDynTree__SensorsList, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_sensorsFromURDF__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'sensorsFromURDF'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::sensorsFromURDF(std::string const &,iDynTree::SensorsList &)\n"
    "    iDynTree::sensorsFromURDF(std::string const &,iDynTree::Model const &,iDynTree::SensorsList &)\n");
  return 1;
}


int _wrap_sensorsFromURDFString__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::string *arg1 = 0 ;
  iDynTree::SensorsList *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("sensorsFromURDFString",argc,2,2,0)) {
    SWIG_fail;
  }
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sensorsFromURDFString" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sensorsFromURDFString" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SensorsList,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sensorsFromURDFString" "', argument " "2"" of type '" "iDynTree::SensorsList &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sensorsFromURDFString" "', argument " "2"" of type '" "iDynTree::SensorsList &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SensorsList * >(argp2);
  result = (bool)iDynTree::sensorsFromURDFString((std::string const &)*arg1,*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res1)) delete arg1;
  return 0;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return 1;
}


int _wrap_sensorsFromURDFString__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::string *arg1 = 0 ;
  iDynTree::Model *arg2 = 0 ;
  iDynTree::SensorsList *arg3 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("sensorsFromURDFString",argc,3,3,0)) {
    SWIG_fail;
  }
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sensorsFromURDFString" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sensorsFromURDFString" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sensorsFromURDFString" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sensorsFromURDFString" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Model * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__SensorsList,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "sensorsFromURDFString" "', argument " "3"" of type '" "iDynTree::SensorsList &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sensorsFromURDFString" "', argument " "3"" of type '" "iDynTree::SensorsList &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::SensorsList * >(argp3);
  result = (bool)iDynTree::sensorsFromURDFString((std::string const &)*arg1,(iDynTree::Model const &)*arg2,*arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res1)) delete arg1;
  return 0;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return 1;
}


int _wrap_sensorsFromURDFString(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__SensorsList, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_sensorsFromURDFString__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Model, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_iDynTree__SensorsList, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_sensorsFromURDFString__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'sensorsFromURDFString'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::sensorsFromURDFString(std::string const &,iDynTree::SensorsList &)\n"
    "    iDynTree::sensorsFromURDFString(std::string const &,iDynTree::Model const &,iDynTree::SensorsList &)\n");
  return 1;
}


int _wrap_new_ModelLoader(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::ModelLoader *result = 0 ;
  
  if (!SWIG_check_num_args("new_ModelLoader",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::ModelLoader *)new iDynTree::ModelLoader();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__ModelLoader, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ModelLoader_loadModelFromString__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ModelLoader *arg1 = (iDynTree::ModelLoader *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("ModelLoader_loadModelFromString",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ModelLoader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ModelLoader_loadModelFromString" "', argument " "1"" of type '" "iDynTree::ModelLoader *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ModelLoader * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ModelLoader_loadModelFromString" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ModelLoader_loadModelFromString" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ModelLoader_loadModelFromString" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ModelLoader_loadModelFromString" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  result = (bool)(arg1)->loadModelFromString((std::string const &)*arg2,(std::string const &)*arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 1;
}


int _wrap_ModelLoader_loadModelFromString__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ModelLoader *arg1 = (iDynTree::ModelLoader *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("ModelLoader_loadModelFromString",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ModelLoader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ModelLoader_loadModelFromString" "', argument " "1"" of type '" "iDynTree::ModelLoader *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ModelLoader * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ModelLoader_loadModelFromString" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ModelLoader_loadModelFromString" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->loadModelFromString((std::string const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_ModelLoader_loadModelFromString(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__ModelLoader, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ModelLoader_loadModelFromString__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__ModelLoader, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ModelLoader_loadModelFromString__SWIG_0(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'ModelLoader_loadModelFromString'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::ModelLoader::loadModelFromString(std::string const &,std::string const &)\n"
    "    iDynTree::ModelLoader::loadModelFromString(std::string const &)\n");
  return 1;
}


int _wrap_ModelLoader_loadModelFromFile__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ModelLoader *arg1 = (iDynTree::ModelLoader *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("ModelLoader_loadModelFromFile",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ModelLoader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ModelLoader_loadModelFromFile" "', argument " "1"" of type '" "iDynTree::ModelLoader *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ModelLoader * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ModelLoader_loadModelFromFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ModelLoader_loadModelFromFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ModelLoader_loadModelFromFile" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ModelLoader_loadModelFromFile" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  result = (bool)(arg1)->loadModelFromFile((std::string const &)*arg2,(std::string const &)*arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 1;
}


int _wrap_ModelLoader_loadModelFromFile__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ModelLoader *arg1 = (iDynTree::ModelLoader *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("ModelLoader_loadModelFromFile",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ModelLoader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ModelLoader_loadModelFromFile" "', argument " "1"" of type '" "iDynTree::ModelLoader *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ModelLoader * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ModelLoader_loadModelFromFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ModelLoader_loadModelFromFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->loadModelFromFile((std::string const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_ModelLoader_loadModelFromFile(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__ModelLoader, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ModelLoader_loadModelFromFile__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__ModelLoader, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ModelLoader_loadModelFromFile__SWIG_0(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'ModelLoader_loadModelFromFile'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::ModelLoader::loadModelFromFile(std::string const &,std::string const &)\n"
    "    iDynTree::ModelLoader::loadModelFromFile(std::string const &)\n");
  return 1;
}


int _wrap_ModelLoader_loadReducedModelFromFullModel__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ModelLoader *arg1 = (iDynTree::ModelLoader *) 0 ;
  iDynTree::Model *arg2 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg3 = 0 ;
  std::string arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("ModelLoader_loadReducedModelFromFullModel",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ModelLoader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ModelLoader_loadReducedModelFromFullModel" "', argument " "1"" of type '" "iDynTree::ModelLoader *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ModelLoader * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ModelLoader_loadReducedModelFromFullModel" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ModelLoader_loadReducedModelFromFullModel" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Model * >(argp2);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res3 = swig::asptr(argv[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ModelLoader_loadReducedModelFromFullModel" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ModelLoader_loadReducedModelFromFullModel" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[3], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "ModelLoader_loadReducedModelFromFullModel" "', argument " "4"" of type '" "std::string const""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (bool)(arg1)->loadReducedModelFromFullModel((iDynTree::Model const &)*arg2,(std::vector< std::string,std::allocator< std::string > > const &)*arg3,arg4);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 0;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 1;
}


int _wrap_ModelLoader_loadReducedModelFromFullModel__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ModelLoader *arg1 = (iDynTree::ModelLoader *) 0 ;
  iDynTree::Model *arg2 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("ModelLoader_loadReducedModelFromFullModel",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ModelLoader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ModelLoader_loadReducedModelFromFullModel" "', argument " "1"" of type '" "iDynTree::ModelLoader *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ModelLoader * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ModelLoader_loadReducedModelFromFullModel" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ModelLoader_loadReducedModelFromFullModel" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Model * >(argp2);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res3 = swig::asptr(argv[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ModelLoader_loadReducedModelFromFullModel" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ModelLoader_loadReducedModelFromFullModel" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (bool)(arg1)->loadReducedModelFromFullModel((iDynTree::Model const &)*arg2,(std::vector< std::string,std::allocator< std::string > > const &)*arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 0;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 1;
}


int _wrap_ModelLoader_loadReducedModelFromFullModel(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__ModelLoader, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Model, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< std::string,std::allocator< std::string > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ModelLoader_loadReducedModelFromFullModel__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__ModelLoader, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Model, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< std::string,std::allocator< std::string > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_ModelLoader_loadReducedModelFromFullModel__SWIG_0(resc,resv,argc,argv);
          }
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'ModelLoader_loadReducedModelFromFullModel'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::ModelLoader::loadReducedModelFromFullModel(iDynTree::Model const &,std::vector< std::string,std::allocator< std::string > > const &,std::string const)\n"
    "    iDynTree::ModelLoader::loadReducedModelFromFullModel(iDynTree::Model const &,std::vector< std::string,std::allocator< std::string > > const &)\n");
  return 1;
}


int _wrap_ModelLoader_loadReducedModelFromString__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ModelLoader *arg1 = (iDynTree::ModelLoader *) 0 ;
  std::string arg2 ;
  std::vector< std::string,std::allocator< std::string > > *arg3 = 0 ;
  std::string arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("ModelLoader_loadReducedModelFromString",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ModelLoader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ModelLoader_loadReducedModelFromString" "', argument " "1"" of type '" "iDynTree::ModelLoader *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ModelLoader * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "ModelLoader_loadReducedModelFromString" "', argument " "2"" of type '" "std::string const""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res3 = swig::asptr(argv[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ModelLoader_loadReducedModelFromString" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ModelLoader_loadReducedModelFromString" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[3], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "ModelLoader_loadReducedModelFromString" "', argument " "4"" of type '" "std::string const""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (bool)(arg1)->loadReducedModelFromString(arg2,(std::vector< std::string,std::allocator< std::string > > const &)*arg3,arg4);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 0;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 1;
}


int _wrap_ModelLoader_loadReducedModelFromString__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ModelLoader *arg1 = (iDynTree::ModelLoader *) 0 ;
  std::string arg2 ;
  std::vector< std::string,std::allocator< std::string > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("ModelLoader_loadReducedModelFromString",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ModelLoader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ModelLoader_loadReducedModelFromString" "', argument " "1"" of type '" "iDynTree::ModelLoader *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ModelLoader * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "ModelLoader_loadReducedModelFromString" "', argument " "2"" of type '" "std::string const""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res3 = swig::asptr(argv[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ModelLoader_loadReducedModelFromString" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ModelLoader_loadReducedModelFromString" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (bool)(arg1)->loadReducedModelFromString(arg2,(std::vector< std::string,std::allocator< std::string > > const &)*arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 0;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 1;
}


int _wrap_ModelLoader_loadReducedModelFromString(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__ModelLoader, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< std::string,std::allocator< std::string > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ModelLoader_loadReducedModelFromString__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__ModelLoader, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< std::string,std::allocator< std::string > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_ModelLoader_loadReducedModelFromString__SWIG_0(resc,resv,argc,argv);
          }
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'ModelLoader_loadReducedModelFromString'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::ModelLoader::loadReducedModelFromString(std::string const,std::vector< std::string,std::allocator< std::string > > const &,std::string const)\n"
    "    iDynTree::ModelLoader::loadReducedModelFromString(std::string const,std::vector< std::string,std::allocator< std::string > > const &)\n");
  return 1;
}


int _wrap_ModelLoader_loadReducedModelFromFile__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ModelLoader *arg1 = (iDynTree::ModelLoader *) 0 ;
  std::string arg2 ;
  std::vector< std::string,std::allocator< std::string > > *arg3 = 0 ;
  std::string arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("ModelLoader_loadReducedModelFromFile",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ModelLoader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ModelLoader_loadReducedModelFromFile" "', argument " "1"" of type '" "iDynTree::ModelLoader *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ModelLoader * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "ModelLoader_loadReducedModelFromFile" "', argument " "2"" of type '" "std::string const""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res3 = swig::asptr(argv[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ModelLoader_loadReducedModelFromFile" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ModelLoader_loadReducedModelFromFile" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[3], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "ModelLoader_loadReducedModelFromFile" "', argument " "4"" of type '" "std::string const""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (bool)(arg1)->loadReducedModelFromFile(arg2,(std::vector< std::string,std::allocator< std::string > > const &)*arg3,arg4);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 0;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 1;
}


int _wrap_ModelLoader_loadReducedModelFromFile__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ModelLoader *arg1 = (iDynTree::ModelLoader *) 0 ;
  std::string arg2 ;
  std::vector< std::string,std::allocator< std::string > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("ModelLoader_loadReducedModelFromFile",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ModelLoader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ModelLoader_loadReducedModelFromFile" "', argument " "1"" of type '" "iDynTree::ModelLoader *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ModelLoader * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "ModelLoader_loadReducedModelFromFile" "', argument " "2"" of type '" "std::string const""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res3 = swig::asptr(argv[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ModelLoader_loadReducedModelFromFile" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ModelLoader_loadReducedModelFromFile" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (bool)(arg1)->loadReducedModelFromFile(arg2,(std::vector< std::string,std::allocator< std::string > > const &)*arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 0;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 1;
}


int _wrap_ModelLoader_loadReducedModelFromFile(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__ModelLoader, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< std::string,std::allocator< std::string > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ModelLoader_loadReducedModelFromFile__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__ModelLoader, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< std::string,std::allocator< std::string > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_ModelLoader_loadReducedModelFromFile__SWIG_0(resc,resv,argc,argv);
          }
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'ModelLoader_loadReducedModelFromFile'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::ModelLoader::loadReducedModelFromFile(std::string const,std::vector< std::string,std::allocator< std::string > > const &,std::string const)\n"
    "    iDynTree::ModelLoader::loadReducedModelFromFile(std::string const,std::vector< std::string,std::allocator< std::string > > const &)\n");
  return 1;
}


int _wrap_ModelLoader_model(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ModelLoader *arg1 = (iDynTree::ModelLoader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Model *result = 0 ;
  
  if (!SWIG_check_num_args("ModelLoader_model",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ModelLoader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ModelLoader_model" "', argument " "1"" of type '" "iDynTree::ModelLoader *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ModelLoader * >(argp1);
  result = (iDynTree::Model *) &(arg1)->model();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Model, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ModelLoader_sensors(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ModelLoader *arg1 = (iDynTree::ModelLoader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::SensorsList *result = 0 ;
  
  if (!SWIG_check_num_args("ModelLoader_sensors",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ModelLoader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ModelLoader_sensors" "', argument " "1"" of type '" "iDynTree::ModelLoader *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ModelLoader * >(argp1);
  result = (iDynTree::SensorsList *) &(arg1)->sensors();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SensorsList, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ModelLoader_isValid(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ModelLoader *arg1 = (iDynTree::ModelLoader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("ModelLoader_isValid",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ModelLoader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ModelLoader_isValid" "', argument " "1"" of type '" "iDynTree::ModelLoader *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ModelLoader * >(argp1);
  result = (bool)(arg1)->isValid();
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_ModelLoader(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ModelLoader *arg1 = (iDynTree::ModelLoader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_ModelLoader",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ModelLoader, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ModelLoader" "', argument " "1"" of type '" "iDynTree::ModelLoader *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ModelLoader * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_UnknownWrenchContact__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::UnknownWrenchContact *result = 0 ;
  
  if (!SWIG_check_num_args("new_UnknownWrenchContact",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::UnknownWrenchContact *)new iDynTree::UnknownWrenchContact();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__UnknownWrenchContact, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_UnknownWrenchContact__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::UnknownWrenchContactType arg1 ;
  iDynTree::Position *arg2 = 0 ;
  iDynTree::Direction *arg3 = 0 ;
  iDynTree::Wrench *arg4 = 0 ;
  unsigned long *arg5 = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  unsigned long temp5 ;
  unsigned long val5 ;
  int ecode5 = 0 ;
  mxArray * _out;
  iDynTree::UnknownWrenchContact *result = 0 ;
  
  if (!SWIG_check_num_args("new_UnknownWrenchContact",argc,5,5,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_UnknownWrenchContact" "', argument " "1"" of type '" "iDynTree::UnknownWrenchContactType""'");
  } 
  arg1 = static_cast< iDynTree::UnknownWrenchContactType >(val1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Position,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_UnknownWrenchContact" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_UnknownWrenchContact" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Position * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__Direction,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_UnknownWrenchContact" "', argument " "3"" of type '" "iDynTree::Direction const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_UnknownWrenchContact" "', argument " "3"" of type '" "iDynTree::Direction const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::Direction * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__Wrench,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_UnknownWrenchContact" "', argument " "4"" of type '" "iDynTree::Wrench const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_UnknownWrenchContact" "', argument " "4"" of type '" "iDynTree::Wrench const &""'"); 
  }
  arg4 = reinterpret_cast< iDynTree::Wrench * >(argp4);
  ecode5 = SWIG_AsVal_unsigned_SS_long(argv[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_UnknownWrenchContact" "', argument " "5"" of type '" "unsigned long""'");
  } 
  temp5 = static_cast< unsigned long >(val5);
  arg5 = &temp5;
  result = (iDynTree::UnknownWrenchContact *)new iDynTree::UnknownWrenchContact(arg1,(iDynTree::Position const &)*arg2,(iDynTree::Direction const &)*arg3,(iDynTree::Wrench const &)*arg4,(unsigned long const &)*arg5);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__UnknownWrenchContact, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_UnknownWrenchContact__SWIG_2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::UnknownWrenchContactType arg1 ;
  iDynTree::Position *arg2 = 0 ;
  iDynTree::Direction *arg3 = 0 ;
  iDynTree::Wrench *arg4 = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  mxArray * _out;
  iDynTree::UnknownWrenchContact *result = 0 ;
  
  if (!SWIG_check_num_args("new_UnknownWrenchContact",argc,4,4,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_UnknownWrenchContact" "', argument " "1"" of type '" "iDynTree::UnknownWrenchContactType""'");
  } 
  arg1 = static_cast< iDynTree::UnknownWrenchContactType >(val1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Position,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_UnknownWrenchContact" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_UnknownWrenchContact" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Position * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__Direction,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_UnknownWrenchContact" "', argument " "3"" of type '" "iDynTree::Direction const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_UnknownWrenchContact" "', argument " "3"" of type '" "iDynTree::Direction const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::Direction * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__Wrench,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_UnknownWrenchContact" "', argument " "4"" of type '" "iDynTree::Wrench const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_UnknownWrenchContact" "', argument " "4"" of type '" "iDynTree::Wrench const &""'"); 
  }
  arg4 = reinterpret_cast< iDynTree::Wrench * >(argp4);
  result = (iDynTree::UnknownWrenchContact *)new iDynTree::UnknownWrenchContact(arg1,(iDynTree::Position const &)*arg2,(iDynTree::Direction const &)*arg3,(iDynTree::Wrench const &)*arg4);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__UnknownWrenchContact, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_UnknownWrenchContact__SWIG_3(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::UnknownWrenchContactType arg1 ;
  iDynTree::Position *arg2 = 0 ;
  iDynTree::Direction *arg3 = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  mxArray * _out;
  iDynTree::UnknownWrenchContact *result = 0 ;
  
  if (!SWIG_check_num_args("new_UnknownWrenchContact",argc,3,3,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_UnknownWrenchContact" "', argument " "1"" of type '" "iDynTree::UnknownWrenchContactType""'");
  } 
  arg1 = static_cast< iDynTree::UnknownWrenchContactType >(val1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Position,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_UnknownWrenchContact" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_UnknownWrenchContact" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Position * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__Direction,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_UnknownWrenchContact" "', argument " "3"" of type '" "iDynTree::Direction const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_UnknownWrenchContact" "', argument " "3"" of type '" "iDynTree::Direction const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::Direction * >(argp3);
  result = (iDynTree::UnknownWrenchContact *)new iDynTree::UnknownWrenchContact(arg1,(iDynTree::Position const &)*arg2,(iDynTree::Direction const &)*arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__UnknownWrenchContact, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_UnknownWrenchContact__SWIG_4(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::UnknownWrenchContactType arg1 ;
  iDynTree::Position *arg2 = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::UnknownWrenchContact *result = 0 ;
  
  if (!SWIG_check_num_args("new_UnknownWrenchContact",argc,2,2,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_UnknownWrenchContact" "', argument " "1"" of type '" "iDynTree::UnknownWrenchContactType""'");
  } 
  arg1 = static_cast< iDynTree::UnknownWrenchContactType >(val1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Position,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_UnknownWrenchContact" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_UnknownWrenchContact" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Position * >(argp2);
  result = (iDynTree::UnknownWrenchContact *)new iDynTree::UnknownWrenchContact(arg1,(iDynTree::Position const &)*arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__UnknownWrenchContact, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_UnknownWrenchContact(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_UnknownWrenchContact__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Position, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_UnknownWrenchContact__SWIG_4(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Position, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_iDynTree__Direction, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_UnknownWrenchContact__SWIG_3(resc,resv,argc,argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Position, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_iDynTree__Direction, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_iDynTree__Wrench, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_new_UnknownWrenchContact__SWIG_2(resc,resv,argc,argv);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Position, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_iDynTree__Direction, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_iDynTree__Wrench, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_long(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_UnknownWrenchContact__SWIG_1(resc,resv,argc,argv);
            }
          }
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_UnknownWrenchContact'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::UnknownWrenchContact::UnknownWrenchContact()\n"
    "    iDynTree::UnknownWrenchContact::UnknownWrenchContact(iDynTree::UnknownWrenchContactType const,iDynTree::Position const &,iDynTree::Direction const &,iDynTree::Wrench const &,unsigned long const &)\n"
    "    iDynTree::UnknownWrenchContact::UnknownWrenchContact(iDynTree::UnknownWrenchContactType const,iDynTree::Position const &,iDynTree::Direction const &,iDynTree::Wrench const &)\n"
    "    iDynTree::UnknownWrenchContact::UnknownWrenchContact(iDynTree::UnknownWrenchContactType const,iDynTree::Position const &,iDynTree::Direction const &)\n"
    "    iDynTree::UnknownWrenchContact::UnknownWrenchContact(iDynTree::UnknownWrenchContactType const,iDynTree::Position const &)\n");
  return 1;
}


int _wrap_UnknownWrenchContact_unknownType_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::UnknownWrenchContact *arg1 = (iDynTree::UnknownWrenchContact *) 0 ;
  iDynTree::UnknownWrenchContactType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("UnknownWrenchContact_unknownType_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__UnknownWrenchContact, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnknownWrenchContact_unknownType_set" "', argument " "1"" of type '" "iDynTree::UnknownWrenchContact *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::UnknownWrenchContact * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UnknownWrenchContact_unknownType_set" "', argument " "2"" of type '" "iDynTree::UnknownWrenchContactType""'");
  } 
  arg2 = static_cast< iDynTree::UnknownWrenchContactType >(val2);
  if (arg1) (arg1)->unknownType = arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_UnknownWrenchContact_unknownType_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::UnknownWrenchContact *arg1 = (iDynTree::UnknownWrenchContact *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::UnknownWrenchContactType result;
  
  if (!SWIG_check_num_args("UnknownWrenchContact_unknownType_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__UnknownWrenchContact, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnknownWrenchContact_unknownType_get" "', argument " "1"" of type '" "iDynTree::UnknownWrenchContact *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::UnknownWrenchContact * >(argp1);
  result = (iDynTree::UnknownWrenchContactType) ((arg1)->unknownType);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_UnknownWrenchContact_contactPoint_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::UnknownWrenchContact *arg1 = (iDynTree::UnknownWrenchContact *) 0 ;
  iDynTree::Position *arg2 = (iDynTree::Position *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("UnknownWrenchContact_contactPoint_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__UnknownWrenchContact, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnknownWrenchContact_contactPoint_set" "', argument " "1"" of type '" "iDynTree::UnknownWrenchContact *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::UnknownWrenchContact * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_iDynTree__Position, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UnknownWrenchContact_contactPoint_set" "', argument " "2"" of type '" "iDynTree::Position *""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Position * >(argp2);
  if (arg1) (arg1)->contactPoint = *arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_UnknownWrenchContact_contactPoint_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::UnknownWrenchContact *arg1 = (iDynTree::UnknownWrenchContact *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Position *result = 0 ;
  
  if (!SWIG_check_num_args("UnknownWrenchContact_contactPoint_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__UnknownWrenchContact, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnknownWrenchContact_contactPoint_get" "', argument " "1"" of type '" "iDynTree::UnknownWrenchContact *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::UnknownWrenchContact * >(argp1);
  result = (iDynTree::Position *)& ((arg1)->contactPoint);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Position, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_UnknownWrenchContact_forceDirection_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::UnknownWrenchContact *arg1 = (iDynTree::UnknownWrenchContact *) 0 ;
  iDynTree::Direction *arg2 = (iDynTree::Direction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("UnknownWrenchContact_forceDirection_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__UnknownWrenchContact, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnknownWrenchContact_forceDirection_set" "', argument " "1"" of type '" "iDynTree::UnknownWrenchContact *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::UnknownWrenchContact * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_iDynTree__Direction, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UnknownWrenchContact_forceDirection_set" "', argument " "2"" of type '" "iDynTree::Direction *""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Direction * >(argp2);
  if (arg1) (arg1)->forceDirection = *arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_UnknownWrenchContact_forceDirection_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::UnknownWrenchContact *arg1 = (iDynTree::UnknownWrenchContact *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Direction *result = 0 ;
  
  if (!SWIG_check_num_args("UnknownWrenchContact_forceDirection_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__UnknownWrenchContact, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnknownWrenchContact_forceDirection_get" "', argument " "1"" of type '" "iDynTree::UnknownWrenchContact *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::UnknownWrenchContact * >(argp1);
  result = (iDynTree::Direction *)& ((arg1)->forceDirection);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Direction, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_UnknownWrenchContact_knownWrench_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::UnknownWrenchContact *arg1 = (iDynTree::UnknownWrenchContact *) 0 ;
  iDynTree::Wrench *arg2 = (iDynTree::Wrench *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("UnknownWrenchContact_knownWrench_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__UnknownWrenchContact, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnknownWrenchContact_knownWrench_set" "', argument " "1"" of type '" "iDynTree::UnknownWrenchContact *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::UnknownWrenchContact * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_iDynTree__Wrench, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UnknownWrenchContact_knownWrench_set" "', argument " "2"" of type '" "iDynTree::Wrench *""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Wrench * >(argp2);
  if (arg1) (arg1)->knownWrench = *arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_UnknownWrenchContact_knownWrench_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::UnknownWrenchContact *arg1 = (iDynTree::UnknownWrenchContact *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Wrench *result = 0 ;
  
  if (!SWIG_check_num_args("UnknownWrenchContact_knownWrench_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__UnknownWrenchContact, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnknownWrenchContact_knownWrench_get" "', argument " "1"" of type '" "iDynTree::UnknownWrenchContact *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::UnknownWrenchContact * >(argp1);
  result = (iDynTree::Wrench *)& ((arg1)->knownWrench);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Wrench, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_UnknownWrenchContact_contactId_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::UnknownWrenchContact *arg1 = (iDynTree::UnknownWrenchContact *) 0 ;
  unsigned long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("UnknownWrenchContact_contactId_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__UnknownWrenchContact, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnknownWrenchContact_contactId_set" "', argument " "1"" of type '" "iDynTree::UnknownWrenchContact *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::UnknownWrenchContact * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UnknownWrenchContact_contactId_set" "', argument " "2"" of type '" "unsigned long""'");
  } 
  arg2 = static_cast< unsigned long >(val2);
  if (arg1) (arg1)->contactId = arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_UnknownWrenchContact_contactId_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::UnknownWrenchContact *arg1 = (iDynTree::UnknownWrenchContact *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned long result;
  
  if (!SWIG_check_num_args("UnknownWrenchContact_contactId_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__UnknownWrenchContact, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnknownWrenchContact_contactId_get" "', argument " "1"" of type '" "iDynTree::UnknownWrenchContact *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::UnknownWrenchContact * >(argp1);
  result = (unsigned long) ((arg1)->contactId);
  _out = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_UnknownWrenchContact(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::UnknownWrenchContact *arg1 = (iDynTree::UnknownWrenchContact *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_UnknownWrenchContact",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__UnknownWrenchContact, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_UnknownWrenchContact" "', argument " "1"" of type '" "iDynTree::UnknownWrenchContact *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::UnknownWrenchContact * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_LinkUnknownWrenchContacts__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  mxArray * _out;
  iDynTree::LinkUnknownWrenchContacts *result = 0 ;
  
  if (!SWIG_check_num_args("new_LinkUnknownWrenchContacts",argc,1,1,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_unsigned_SS_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_LinkUnknownWrenchContacts" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  result = (iDynTree::LinkUnknownWrenchContacts *)new iDynTree::LinkUnknownWrenchContacts(arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__LinkUnknownWrenchContacts, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_LinkUnknownWrenchContacts__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::LinkUnknownWrenchContacts *result = 0 ;
  
  if (!SWIG_check_num_args("new_LinkUnknownWrenchContacts",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::LinkUnknownWrenchContacts *)new iDynTree::LinkUnknownWrenchContacts();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__LinkUnknownWrenchContacts, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_LinkUnknownWrenchContacts__SWIG_2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::LinkUnknownWrenchContacts *result = 0 ;
  
  if (!SWIG_check_num_args("new_LinkUnknownWrenchContacts",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LinkUnknownWrenchContacts" "', argument " "1"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LinkUnknownWrenchContacts" "', argument " "1"" of type '" "iDynTree::Model const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  result = (iDynTree::LinkUnknownWrenchContacts *)new iDynTree::LinkUnknownWrenchContacts((iDynTree::Model const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__LinkUnknownWrenchContacts, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_LinkUnknownWrenchContacts(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_LinkUnknownWrenchContacts__SWIG_1(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Model, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_LinkUnknownWrenchContacts__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_LinkUnknownWrenchContacts__SWIG_0(resc,resv,argc,argv);
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_LinkUnknownWrenchContacts'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::LinkUnknownWrenchContacts::LinkUnknownWrenchContacts(unsigned int)\n"
    "    iDynTree::LinkUnknownWrenchContacts::LinkUnknownWrenchContacts()\n"
    "    iDynTree::LinkUnknownWrenchContacts::LinkUnknownWrenchContacts(iDynTree::Model const &)\n");
  return 1;
}


int _wrap_LinkUnknownWrenchContacts_clear(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkUnknownWrenchContacts *arg1 = (iDynTree::LinkUnknownWrenchContacts *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("LinkUnknownWrenchContacts_clear",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkUnknownWrenchContacts, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinkUnknownWrenchContacts_clear" "', argument " "1"" of type '" "iDynTree::LinkUnknownWrenchContacts *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkUnknownWrenchContacts * >(argp1);
  (arg1)->clear();
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_LinkUnknownWrenchContacts_resize__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkUnknownWrenchContacts *arg1 = (iDynTree::LinkUnknownWrenchContacts *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("LinkUnknownWrenchContacts_resize",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkUnknownWrenchContacts, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinkUnknownWrenchContacts_resize" "', argument " "1"" of type '" "iDynTree::LinkUnknownWrenchContacts *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkUnknownWrenchContacts * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LinkUnknownWrenchContacts_resize" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  (arg1)->resize(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_LinkUnknownWrenchContacts_resize__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkUnknownWrenchContacts *arg1 = (iDynTree::LinkUnknownWrenchContacts *) 0 ;
  iDynTree::Model *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("LinkUnknownWrenchContacts_resize",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkUnknownWrenchContacts, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinkUnknownWrenchContacts_resize" "', argument " "1"" of type '" "iDynTree::LinkUnknownWrenchContacts *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkUnknownWrenchContacts * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LinkUnknownWrenchContacts_resize" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinkUnknownWrenchContacts_resize" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Model * >(argp2);
  (arg1)->resize((iDynTree::Model const &)*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_LinkUnknownWrenchContacts_resize(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__LinkUnknownWrenchContacts, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Model, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_LinkUnknownWrenchContacts_resize__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__LinkUnknownWrenchContacts, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_LinkUnknownWrenchContacts_resize__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'LinkUnknownWrenchContacts_resize'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::LinkUnknownWrenchContacts::resize(unsigned int)\n"
    "    iDynTree::LinkUnknownWrenchContacts::resize(iDynTree::Model const &)\n");
  return 1;
}


int _wrap_LinkUnknownWrenchContacts_getNrOfContactsForLink(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkUnknownWrenchContacts *arg1 = (iDynTree::LinkUnknownWrenchContacts *) 0 ;
  iDynTree::LinkIndex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  size_t result;
  
  if (!SWIG_check_num_args("LinkUnknownWrenchContacts_getNrOfContactsForLink",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkUnknownWrenchContacts, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinkUnknownWrenchContacts_getNrOfContactsForLink" "', argument " "1"" of type '" "iDynTree::LinkUnknownWrenchContacts const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkUnknownWrenchContacts * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LinkUnknownWrenchContacts_getNrOfContactsForLink" "', argument " "2"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg2 = static_cast< iDynTree::LinkIndex >(val2);
  result = ((iDynTree::LinkUnknownWrenchContacts const *)arg1)->getNrOfContactsForLink(arg2);
  _out = SWIG_From_size_t(static_cast< size_t >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_LinkUnknownWrenchContacts_setNrOfContactsForLink(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkUnknownWrenchContacts *arg1 = (iDynTree::LinkUnknownWrenchContacts *) 0 ;
  iDynTree::LinkIndex arg2 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("LinkUnknownWrenchContacts_setNrOfContactsForLink",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkUnknownWrenchContacts, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinkUnknownWrenchContacts_setNrOfContactsForLink" "', argument " "1"" of type '" "iDynTree::LinkUnknownWrenchContacts *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkUnknownWrenchContacts * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LinkUnknownWrenchContacts_setNrOfContactsForLink" "', argument " "2"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg2 = static_cast< iDynTree::LinkIndex >(val2);
  ecode3 = SWIG_AsVal_size_t(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LinkUnknownWrenchContacts_setNrOfContactsForLink" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  (arg1)->setNrOfContactsForLink(arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_LinkUnknownWrenchContacts_addNewContactForLink(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkUnknownWrenchContacts *arg1 = (iDynTree::LinkUnknownWrenchContacts *) 0 ;
  iDynTree::LinkIndex arg2 ;
  iDynTree::UnknownWrenchContact *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("LinkUnknownWrenchContacts_addNewContactForLink",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkUnknownWrenchContacts, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinkUnknownWrenchContacts_addNewContactForLink" "', argument " "1"" of type '" "iDynTree::LinkUnknownWrenchContacts *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkUnknownWrenchContacts * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LinkUnknownWrenchContacts_addNewContactForLink" "', argument " "2"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg2 = static_cast< iDynTree::LinkIndex >(val2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__UnknownWrenchContact,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LinkUnknownWrenchContacts_addNewContactForLink" "', argument " "3"" of type '" "iDynTree::UnknownWrenchContact const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinkUnknownWrenchContacts_addNewContactForLink" "', argument " "3"" of type '" "iDynTree::UnknownWrenchContact const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::UnknownWrenchContact * >(argp3);
  (arg1)->addNewContactForLink(arg2,(iDynTree::UnknownWrenchContact const &)*arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_LinkUnknownWrenchContacts_addNewContactInFrame(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkUnknownWrenchContacts *arg1 = (iDynTree::LinkUnknownWrenchContacts *) 0 ;
  iDynTree::Model *arg2 = 0 ;
  iDynTree::FrameIndex arg3 ;
  iDynTree::UnknownWrenchContact *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("LinkUnknownWrenchContacts_addNewContactInFrame",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkUnknownWrenchContacts, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinkUnknownWrenchContacts_addNewContactInFrame" "', argument " "1"" of type '" "iDynTree::LinkUnknownWrenchContacts *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkUnknownWrenchContacts * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LinkUnknownWrenchContacts_addNewContactInFrame" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinkUnknownWrenchContacts_addNewContactInFrame" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Model * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LinkUnknownWrenchContacts_addNewContactInFrame" "', argument " "3"" of type '" "iDynTree::FrameIndex""'");
  } 
  arg3 = static_cast< iDynTree::FrameIndex >(val3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__UnknownWrenchContact,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "LinkUnknownWrenchContacts_addNewContactInFrame" "', argument " "4"" of type '" "iDynTree::UnknownWrenchContact const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinkUnknownWrenchContacts_addNewContactInFrame" "', argument " "4"" of type '" "iDynTree::UnknownWrenchContact const &""'"); 
  }
  arg4 = reinterpret_cast< iDynTree::UnknownWrenchContact * >(argp4);
  result = (bool)(arg1)->addNewContactInFrame((iDynTree::Model const &)*arg2,arg3,(iDynTree::UnknownWrenchContact const &)*arg4);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_LinkUnknownWrenchContacts_addNewUnknownFullWrenchInFrameOrigin(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkUnknownWrenchContacts *arg1 = (iDynTree::LinkUnknownWrenchContacts *) 0 ;
  iDynTree::Model *arg2 = 0 ;
  iDynTree::FrameIndex arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("LinkUnknownWrenchContacts_addNewUnknownFullWrenchInFrameOrigin",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkUnknownWrenchContacts, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinkUnknownWrenchContacts_addNewUnknownFullWrenchInFrameOrigin" "', argument " "1"" of type '" "iDynTree::LinkUnknownWrenchContacts *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkUnknownWrenchContacts * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LinkUnknownWrenchContacts_addNewUnknownFullWrenchInFrameOrigin" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinkUnknownWrenchContacts_addNewUnknownFullWrenchInFrameOrigin" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Model * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LinkUnknownWrenchContacts_addNewUnknownFullWrenchInFrameOrigin" "', argument " "3"" of type '" "iDynTree::FrameIndex""'");
  } 
  arg3 = static_cast< iDynTree::FrameIndex >(val3);
  result = (bool)(arg1)->addNewUnknownFullWrenchInFrameOrigin((iDynTree::Model const &)*arg2,arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_LinkUnknownWrenchContacts_contactWrench__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkUnknownWrenchContacts *arg1 = (iDynTree::LinkUnknownWrenchContacts *) 0 ;
  iDynTree::LinkIndex arg2 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  iDynTree::UnknownWrenchContact *result = 0 ;
  
  if (!SWIG_check_num_args("LinkUnknownWrenchContacts_contactWrench",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkUnknownWrenchContacts, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinkUnknownWrenchContacts_contactWrench" "', argument " "1"" of type '" "iDynTree::LinkUnknownWrenchContacts *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkUnknownWrenchContacts * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LinkUnknownWrenchContacts_contactWrench" "', argument " "2"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg2 = static_cast< iDynTree::LinkIndex >(val2);
  ecode3 = SWIG_AsVal_size_t(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LinkUnknownWrenchContacts_contactWrench" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = (iDynTree::UnknownWrenchContact *) &(arg1)->contactWrench(arg2,arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__UnknownWrenchContact, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_LinkUnknownWrenchContacts_contactWrench__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkUnknownWrenchContacts *arg1 = (iDynTree::LinkUnknownWrenchContacts *) 0 ;
  iDynTree::LinkIndex arg2 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  iDynTree::UnknownWrenchContact *result = 0 ;
  
  if (!SWIG_check_num_args("LinkUnknownWrenchContacts_contactWrench",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkUnknownWrenchContacts, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinkUnknownWrenchContacts_contactWrench" "', argument " "1"" of type '" "iDynTree::LinkUnknownWrenchContacts const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkUnknownWrenchContacts * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LinkUnknownWrenchContacts_contactWrench" "', argument " "2"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg2 = static_cast< iDynTree::LinkIndex >(val2);
  ecode3 = SWIG_AsVal_size_t(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LinkUnknownWrenchContacts_contactWrench" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = (iDynTree::UnknownWrenchContact *) &((iDynTree::LinkUnknownWrenchContacts const *)arg1)->contactWrench(arg2,arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__UnknownWrenchContact, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_LinkUnknownWrenchContacts_contactWrench(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__LinkUnknownWrenchContacts, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_LinkUnknownWrenchContacts_contactWrench__SWIG_0(resc,resv,argc,argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__LinkUnknownWrenchContacts, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_LinkUnknownWrenchContacts_contactWrench__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'LinkUnknownWrenchContacts_contactWrench'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::LinkUnknownWrenchContacts::contactWrench(iDynTree::LinkIndex const,size_t const)\n"
    "    iDynTree::LinkUnknownWrenchContacts::contactWrench(iDynTree::LinkIndex const,size_t const) const\n");
  return 1;
}


int _wrap_LinkUnknownWrenchContacts_toString(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkUnknownWrenchContacts *arg1 = (iDynTree::LinkUnknownWrenchContacts *) 0 ;
  iDynTree::Model *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("LinkUnknownWrenchContacts_toString",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkUnknownWrenchContacts, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinkUnknownWrenchContacts_toString" "', argument " "1"" of type '" "iDynTree::LinkUnknownWrenchContacts const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkUnknownWrenchContacts * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LinkUnknownWrenchContacts_toString" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinkUnknownWrenchContacts_toString" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Model * >(argp2);
  result = ((iDynTree::LinkUnknownWrenchContacts const *)arg1)->toString((iDynTree::Model const &)*arg2);
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_LinkUnknownWrenchContacts(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkUnknownWrenchContacts *arg1 = (iDynTree::LinkUnknownWrenchContacts *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_LinkUnknownWrenchContacts",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkUnknownWrenchContacts, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LinkUnknownWrenchContacts" "', argument " "1"" of type '" "iDynTree::LinkUnknownWrenchContacts *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkUnknownWrenchContacts * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_estimateExternalWrenchesBuffers__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::estimateExternalWrenchesBuffers *result = 0 ;
  
  if (!SWIG_check_num_args("new_estimateExternalWrenchesBuffers",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::estimateExternalWrenchesBuffers *)new iDynTree::estimateExternalWrenchesBuffers();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__estimateExternalWrenchesBuffers, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_estimateExternalWrenchesBuffers__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SubModelDecomposition *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::estimateExternalWrenchesBuffers *result = 0 ;
  
  if (!SWIG_check_num_args("new_estimateExternalWrenchesBuffers",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__SubModelDecomposition,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_estimateExternalWrenchesBuffers" "', argument " "1"" of type '" "iDynTree::SubModelDecomposition const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_estimateExternalWrenchesBuffers" "', argument " "1"" of type '" "iDynTree::SubModelDecomposition const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SubModelDecomposition * >(argp1);
  result = (iDynTree::estimateExternalWrenchesBuffers *)new iDynTree::estimateExternalWrenchesBuffers((iDynTree::SubModelDecomposition const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__estimateExternalWrenchesBuffers, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_estimateExternalWrenchesBuffers__SWIG_2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  size_t arg1 ;
  size_t arg2 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::estimateExternalWrenchesBuffers *result = 0 ;
  
  if (!SWIG_check_num_args("new_estimateExternalWrenchesBuffers",argc,2,2,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_estimateExternalWrenchesBuffers" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_estimateExternalWrenchesBuffers" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (iDynTree::estimateExternalWrenchesBuffers *)new iDynTree::estimateExternalWrenchesBuffers(arg1,arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__estimateExternalWrenchesBuffers, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_estimateExternalWrenchesBuffers(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_estimateExternalWrenchesBuffers__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SubModelDecomposition, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_estimateExternalWrenchesBuffers__SWIG_1(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_estimateExternalWrenchesBuffers__SWIG_2(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_estimateExternalWrenchesBuffers'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::estimateExternalWrenchesBuffers::estimateExternalWrenchesBuffers()\n"
    "    iDynTree::estimateExternalWrenchesBuffers::estimateExternalWrenchesBuffers(iDynTree::SubModelDecomposition const &)\n"
    "    iDynTree::estimateExternalWrenchesBuffers::estimateExternalWrenchesBuffers(size_t const,size_t const)\n");
  return 1;
}


int _wrap_estimateExternalWrenchesBuffers_resize__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::estimateExternalWrenchesBuffers *arg1 = (iDynTree::estimateExternalWrenchesBuffers *) 0 ;
  iDynTree::SubModelDecomposition *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("estimateExternalWrenchesBuffers_resize",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__estimateExternalWrenchesBuffers, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "estimateExternalWrenchesBuffers_resize" "', argument " "1"" of type '" "iDynTree::estimateExternalWrenchesBuffers *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::estimateExternalWrenchesBuffers * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SubModelDecomposition,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "estimateExternalWrenchesBuffers_resize" "', argument " "2"" of type '" "iDynTree::SubModelDecomposition const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "estimateExternalWrenchesBuffers_resize" "', argument " "2"" of type '" "iDynTree::SubModelDecomposition const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SubModelDecomposition * >(argp2);
  (arg1)->resize((iDynTree::SubModelDecomposition const &)*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_estimateExternalWrenchesBuffers_resize__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::estimateExternalWrenchesBuffers *arg1 = (iDynTree::estimateExternalWrenchesBuffers *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("estimateExternalWrenchesBuffers_resize",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__estimateExternalWrenchesBuffers, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "estimateExternalWrenchesBuffers_resize" "', argument " "1"" of type '" "iDynTree::estimateExternalWrenchesBuffers *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::estimateExternalWrenchesBuffers * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "estimateExternalWrenchesBuffers_resize" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "estimateExternalWrenchesBuffers_resize" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  (arg1)->resize(arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_estimateExternalWrenchesBuffers_resize(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__estimateExternalWrenchesBuffers, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__SubModelDecomposition, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_estimateExternalWrenchesBuffers_resize__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__estimateExternalWrenchesBuffers, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_estimateExternalWrenchesBuffers_resize__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'estimateExternalWrenchesBuffers_resize'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::estimateExternalWrenchesBuffers::resize(iDynTree::SubModelDecomposition const &)\n"
    "    iDynTree::estimateExternalWrenchesBuffers::resize(size_t const,size_t const)\n");
  return 1;
}


int _wrap_estimateExternalWrenchesBuffers_getNrOfSubModels(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::estimateExternalWrenchesBuffers *arg1 = (iDynTree::estimateExternalWrenchesBuffers *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  size_t result;
  
  if (!SWIG_check_num_args("estimateExternalWrenchesBuffers_getNrOfSubModels",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__estimateExternalWrenchesBuffers, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "estimateExternalWrenchesBuffers_getNrOfSubModels" "', argument " "1"" of type '" "iDynTree::estimateExternalWrenchesBuffers const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::estimateExternalWrenchesBuffers * >(argp1);
  result = ((iDynTree::estimateExternalWrenchesBuffers const *)arg1)->getNrOfSubModels();
  _out = SWIG_From_size_t(static_cast< size_t >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_estimateExternalWrenchesBuffers_getNrOfLinks(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::estimateExternalWrenchesBuffers *arg1 = (iDynTree::estimateExternalWrenchesBuffers *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  size_t result;
  
  if (!SWIG_check_num_args("estimateExternalWrenchesBuffers_getNrOfLinks",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__estimateExternalWrenchesBuffers, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "estimateExternalWrenchesBuffers_getNrOfLinks" "', argument " "1"" of type '" "iDynTree::estimateExternalWrenchesBuffers const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::estimateExternalWrenchesBuffers * >(argp1);
  result = ((iDynTree::estimateExternalWrenchesBuffers const *)arg1)->getNrOfLinks();
  _out = SWIG_From_size_t(static_cast< size_t >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_estimateExternalWrenchesBuffers_isConsistent(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::estimateExternalWrenchesBuffers *arg1 = (iDynTree::estimateExternalWrenchesBuffers *) 0 ;
  iDynTree::SubModelDecomposition *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("estimateExternalWrenchesBuffers_isConsistent",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__estimateExternalWrenchesBuffers, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "estimateExternalWrenchesBuffers_isConsistent" "', argument " "1"" of type '" "iDynTree::estimateExternalWrenchesBuffers const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::estimateExternalWrenchesBuffers * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SubModelDecomposition,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "estimateExternalWrenchesBuffers_isConsistent" "', argument " "2"" of type '" "iDynTree::SubModelDecomposition const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "estimateExternalWrenchesBuffers_isConsistent" "', argument " "2"" of type '" "iDynTree::SubModelDecomposition const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SubModelDecomposition * >(argp2);
  result = (bool)((iDynTree::estimateExternalWrenchesBuffers const *)arg1)->isConsistent((iDynTree::SubModelDecomposition const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_estimateExternalWrenchesBuffers_A_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::estimateExternalWrenchesBuffers *arg1 = (iDynTree::estimateExternalWrenchesBuffers *) 0 ;
  std::vector< iDynTree::MatrixDynSize,std::allocator< iDynTree::MatrixDynSize > > *arg2 = (std::vector< iDynTree::MatrixDynSize,std::allocator< iDynTree::MatrixDynSize > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("estimateExternalWrenchesBuffers_A_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__estimateExternalWrenchesBuffers, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "estimateExternalWrenchesBuffers_A_set" "', argument " "1"" of type '" "iDynTree::estimateExternalWrenchesBuffers *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::estimateExternalWrenchesBuffers * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_std__vectorT_iDynTree__MatrixDynSize_std__allocatorT_iDynTree__MatrixDynSize_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "estimateExternalWrenchesBuffers_A_set" "', argument " "2"" of type '" "std::vector< iDynTree::MatrixDynSize,std::allocator< iDynTree::MatrixDynSize > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< iDynTree::MatrixDynSize,std::allocator< iDynTree::MatrixDynSize > > * >(argp2);
  if (arg1) (arg1)->A = *arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_estimateExternalWrenchesBuffers_A_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::estimateExternalWrenchesBuffers *arg1 = (iDynTree::estimateExternalWrenchesBuffers *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< iDynTree::MatrixDynSize,std::allocator< iDynTree::MatrixDynSize > > *result = 0 ;
  
  if (!SWIG_check_num_args("estimateExternalWrenchesBuffers_A_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__estimateExternalWrenchesBuffers, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "estimateExternalWrenchesBuffers_A_get" "', argument " "1"" of type '" "iDynTree::estimateExternalWrenchesBuffers *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::estimateExternalWrenchesBuffers * >(argp1);
  result = (std::vector< iDynTree::MatrixDynSize,std::allocator< iDynTree::MatrixDynSize > > *)& ((arg1)->A);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_iDynTree__MatrixDynSize_std__allocatorT_iDynTree__MatrixDynSize_t_t, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_estimateExternalWrenchesBuffers_x_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::estimateExternalWrenchesBuffers *arg1 = (iDynTree::estimateExternalWrenchesBuffers *) 0 ;
  std::vector< iDynTree::VectorDynSize,std::allocator< iDynTree::VectorDynSize > > *arg2 = (std::vector< iDynTree::VectorDynSize,std::allocator< iDynTree::VectorDynSize > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("estimateExternalWrenchesBuffers_x_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__estimateExternalWrenchesBuffers, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "estimateExternalWrenchesBuffers_x_set" "', argument " "1"" of type '" "iDynTree::estimateExternalWrenchesBuffers *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::estimateExternalWrenchesBuffers * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_std__vectorT_iDynTree__VectorDynSize_std__allocatorT_iDynTree__VectorDynSize_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "estimateExternalWrenchesBuffers_x_set" "', argument " "2"" of type '" "std::vector< iDynTree::VectorDynSize,std::allocator< iDynTree::VectorDynSize > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< iDynTree::VectorDynSize,std::allocator< iDynTree::VectorDynSize > > * >(argp2);
  if (arg1) (arg1)->x = *arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_estimateExternalWrenchesBuffers_x_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::estimateExternalWrenchesBuffers *arg1 = (iDynTree::estimateExternalWrenchesBuffers *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< iDynTree::VectorDynSize,std::allocator< iDynTree::VectorDynSize > > *result = 0 ;
  
  if (!SWIG_check_num_args("estimateExternalWrenchesBuffers_x_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__estimateExternalWrenchesBuffers, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "estimateExternalWrenchesBuffers_x_get" "', argument " "1"" of type '" "iDynTree::estimateExternalWrenchesBuffers *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::estimateExternalWrenchesBuffers * >(argp1);
  result = (std::vector< iDynTree::VectorDynSize,std::allocator< iDynTree::VectorDynSize > > *)& ((arg1)->x);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_iDynTree__VectorDynSize_std__allocatorT_iDynTree__VectorDynSize_t_t, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_estimateExternalWrenchesBuffers_b_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::estimateExternalWrenchesBuffers *arg1 = (iDynTree::estimateExternalWrenchesBuffers *) 0 ;
  std::vector< iDynTree::Vector6,std::allocator< iDynTree::Vector6 > > *arg2 = (std::vector< iDynTree::Vector6,std::allocator< iDynTree::Vector6 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("estimateExternalWrenchesBuffers_b_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__estimateExternalWrenchesBuffers, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "estimateExternalWrenchesBuffers_b_set" "', argument " "1"" of type '" "iDynTree::estimateExternalWrenchesBuffers *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::estimateExternalWrenchesBuffers * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_std__vectorT_iDynTree__VectorFixSizeT_6_t_std__allocatorT_iDynTree__VectorFixSizeT_6_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "estimateExternalWrenchesBuffers_b_set" "', argument " "2"" of type '" "std::vector< iDynTree::Vector6,std::allocator< iDynTree::Vector6 > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< iDynTree::Vector6,std::allocator< iDynTree::Vector6 > > * >(argp2);
  if (arg1) (arg1)->b = *arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_estimateExternalWrenchesBuffers_b_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::estimateExternalWrenchesBuffers *arg1 = (iDynTree::estimateExternalWrenchesBuffers *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< iDynTree::Vector6,std::allocator< iDynTree::Vector6 > > *result = 0 ;
  
  if (!SWIG_check_num_args("estimateExternalWrenchesBuffers_b_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__estimateExternalWrenchesBuffers, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "estimateExternalWrenchesBuffers_b_get" "', argument " "1"" of type '" "iDynTree::estimateExternalWrenchesBuffers *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::estimateExternalWrenchesBuffers * >(argp1);
  result = (std::vector< iDynTree::Vector6,std::allocator< iDynTree::Vector6 > > *)& ((arg1)->b);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_iDynTree__VectorFixSizeT_6_t_std__allocatorT_iDynTree__VectorFixSizeT_6_t_t_t, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_estimateExternalWrenchesBuffers_pinvA_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::estimateExternalWrenchesBuffers *arg1 = (iDynTree::estimateExternalWrenchesBuffers *) 0 ;
  std::vector< iDynTree::MatrixDynSize,std::allocator< iDynTree::MatrixDynSize > > *arg2 = (std::vector< iDynTree::MatrixDynSize,std::allocator< iDynTree::MatrixDynSize > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("estimateExternalWrenchesBuffers_pinvA_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__estimateExternalWrenchesBuffers, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "estimateExternalWrenchesBuffers_pinvA_set" "', argument " "1"" of type '" "iDynTree::estimateExternalWrenchesBuffers *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::estimateExternalWrenchesBuffers * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_std__vectorT_iDynTree__MatrixDynSize_std__allocatorT_iDynTree__MatrixDynSize_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "estimateExternalWrenchesBuffers_pinvA_set" "', argument " "2"" of type '" "std::vector< iDynTree::MatrixDynSize,std::allocator< iDynTree::MatrixDynSize > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< iDynTree::MatrixDynSize,std::allocator< iDynTree::MatrixDynSize > > * >(argp2);
  if (arg1) (arg1)->pinvA = *arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_estimateExternalWrenchesBuffers_pinvA_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::estimateExternalWrenchesBuffers *arg1 = (iDynTree::estimateExternalWrenchesBuffers *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< iDynTree::MatrixDynSize,std::allocator< iDynTree::MatrixDynSize > > *result = 0 ;
  
  if (!SWIG_check_num_args("estimateExternalWrenchesBuffers_pinvA_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__estimateExternalWrenchesBuffers, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "estimateExternalWrenchesBuffers_pinvA_get" "', argument " "1"" of type '" "iDynTree::estimateExternalWrenchesBuffers *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::estimateExternalWrenchesBuffers * >(argp1);
  result = (std::vector< iDynTree::MatrixDynSize,std::allocator< iDynTree::MatrixDynSize > > *)& ((arg1)->pinvA);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_iDynTree__MatrixDynSize_std__allocatorT_iDynTree__MatrixDynSize_t_t, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_estimateExternalWrenchesBuffers_b_contacts_subtree_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::estimateExternalWrenchesBuffers *arg1 = (iDynTree::estimateExternalWrenchesBuffers *) 0 ;
  iDynTree::LinkWrenches *arg2 = (iDynTree::LinkWrenches *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("estimateExternalWrenchesBuffers_b_contacts_subtree_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__estimateExternalWrenchesBuffers, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "estimateExternalWrenchesBuffers_b_contacts_subtree_set" "', argument " "1"" of type '" "iDynTree::estimateExternalWrenchesBuffers *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::estimateExternalWrenchesBuffers * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_iDynTree__LinkWrenches, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "estimateExternalWrenchesBuffers_b_contacts_subtree_set" "', argument " "2"" of type '" "iDynTree::LinkWrenches *""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::LinkWrenches * >(argp2);
  if (arg1) (arg1)->b_contacts_subtree = *arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_estimateExternalWrenchesBuffers_b_contacts_subtree_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::estimateExternalWrenchesBuffers *arg1 = (iDynTree::estimateExternalWrenchesBuffers *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::LinkWrenches *result = 0 ;
  
  if (!SWIG_check_num_args("estimateExternalWrenchesBuffers_b_contacts_subtree_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__estimateExternalWrenchesBuffers, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "estimateExternalWrenchesBuffers_b_contacts_subtree_get" "', argument " "1"" of type '" "iDynTree::estimateExternalWrenchesBuffers *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::estimateExternalWrenchesBuffers * >(argp1);
  result = (iDynTree::LinkWrenches *)& ((arg1)->b_contacts_subtree);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__LinkWrenches, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_estimateExternalWrenchesBuffers_subModelBase_H_link_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::estimateExternalWrenchesBuffers *arg1 = (iDynTree::estimateExternalWrenchesBuffers *) 0 ;
  iDynTree::LinkPositions *arg2 = (iDynTree::LinkPositions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("estimateExternalWrenchesBuffers_subModelBase_H_link_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__estimateExternalWrenchesBuffers, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "estimateExternalWrenchesBuffers_subModelBase_H_link_set" "', argument " "1"" of type '" "iDynTree::estimateExternalWrenchesBuffers *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::estimateExternalWrenchesBuffers * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_iDynTree__LinkPositions, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "estimateExternalWrenchesBuffers_subModelBase_H_link_set" "', argument " "2"" of type '" "iDynTree::LinkPositions *""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::LinkPositions * >(argp2);
  if (arg1) (arg1)->subModelBase_H_link = *arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_estimateExternalWrenchesBuffers_subModelBase_H_link_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::estimateExternalWrenchesBuffers *arg1 = (iDynTree::estimateExternalWrenchesBuffers *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::LinkPositions *result = 0 ;
  
  if (!SWIG_check_num_args("estimateExternalWrenchesBuffers_subModelBase_H_link_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__estimateExternalWrenchesBuffers, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "estimateExternalWrenchesBuffers_subModelBase_H_link_get" "', argument " "1"" of type '" "iDynTree::estimateExternalWrenchesBuffers *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::estimateExternalWrenchesBuffers * >(argp1);
  result = (iDynTree::LinkPositions *)& ((arg1)->subModelBase_H_link);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__LinkPositions, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_estimateExternalWrenchesBuffers(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::estimateExternalWrenchesBuffers *arg1 = (iDynTree::estimateExternalWrenchesBuffers *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_estimateExternalWrenchesBuffers",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__estimateExternalWrenchesBuffers, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_estimateExternalWrenchesBuffers" "', argument " "1"" of type '" "iDynTree::estimateExternalWrenchesBuffers *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::estimateExternalWrenchesBuffers * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_estimateExternalWrenchesWithoutInternalFT(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = 0 ;
  iDynTree::Traversal *arg2 = 0 ;
  iDynTree::LinkUnknownWrenchContacts *arg3 = 0 ;
  iDynTree::JointPosDoubleArray *arg4 = 0 ;
  iDynTree::LinkVelArray *arg5 = 0 ;
  iDynTree::LinkAccArray *arg6 = 0 ;
  iDynTree::estimateExternalWrenchesBuffers *arg7 = 0 ;
  iDynTree::LinkContactWrenches *arg8 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("estimateExternalWrenchesWithoutInternalFT",argc,8,8,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "estimateExternalWrenchesWithoutInternalFT" "', argument " "1"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "estimateExternalWrenchesWithoutInternalFT" "', argument " "1"" of type '" "iDynTree::Model const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Traversal,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "estimateExternalWrenchesWithoutInternalFT" "', argument " "2"" of type '" "iDynTree::Traversal const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "estimateExternalWrenchesWithoutInternalFT" "', argument " "2"" of type '" "iDynTree::Traversal const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Traversal * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__LinkUnknownWrenchContacts,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "estimateExternalWrenchesWithoutInternalFT" "', argument " "3"" of type '" "iDynTree::LinkUnknownWrenchContacts const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "estimateExternalWrenchesWithoutInternalFT" "', argument " "3"" of type '" "iDynTree::LinkUnknownWrenchContacts const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::LinkUnknownWrenchContacts * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__JointPosDoubleArray,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "estimateExternalWrenchesWithoutInternalFT" "', argument " "4"" of type '" "iDynTree::JointPosDoubleArray const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "estimateExternalWrenchesWithoutInternalFT" "', argument " "4"" of type '" "iDynTree::JointPosDoubleArray const &""'"); 
  }
  arg4 = reinterpret_cast< iDynTree::JointPosDoubleArray * >(argp4);
  res5 = SWIG_ConvertPtr(argv[4], &argp5, SWIGTYPE_p_iDynTree__LinkVelArray,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "estimateExternalWrenchesWithoutInternalFT" "', argument " "5"" of type '" "iDynTree::LinkVelArray const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "estimateExternalWrenchesWithoutInternalFT" "', argument " "5"" of type '" "iDynTree::LinkVelArray const &""'"); 
  }
  arg5 = reinterpret_cast< iDynTree::LinkVelArray * >(argp5);
  res6 = SWIG_ConvertPtr(argv[5], &argp6, SWIGTYPE_p_iDynTree__LinkAccArray,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "estimateExternalWrenchesWithoutInternalFT" "', argument " "6"" of type '" "iDynTree::LinkAccArray const &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "estimateExternalWrenchesWithoutInternalFT" "', argument " "6"" of type '" "iDynTree::LinkAccArray const &""'"); 
  }
  arg6 = reinterpret_cast< iDynTree::LinkAccArray * >(argp6);
  res7 = SWIG_ConvertPtr(argv[6], &argp7, SWIGTYPE_p_iDynTree__estimateExternalWrenchesBuffers,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "estimateExternalWrenchesWithoutInternalFT" "', argument " "7"" of type '" "iDynTree::estimateExternalWrenchesBuffers &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "estimateExternalWrenchesWithoutInternalFT" "', argument " "7"" of type '" "iDynTree::estimateExternalWrenchesBuffers &""'"); 
  }
  arg7 = reinterpret_cast< iDynTree::estimateExternalWrenchesBuffers * >(argp7);
  res8 = SWIG_ConvertPtr(argv[7], &argp8, SWIGTYPE_p_iDynTree__LinkContactWrenches,  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "estimateExternalWrenchesWithoutInternalFT" "', argument " "8"" of type '" "iDynTree::LinkContactWrenches &""'"); 
  }
  if (!argp8) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "estimateExternalWrenchesWithoutInternalFT" "', argument " "8"" of type '" "iDynTree::LinkContactWrenches &""'"); 
  }
  arg8 = reinterpret_cast< iDynTree::LinkContactWrenches * >(argp8);
  result = (bool)iDynTree::estimateExternalWrenchesWithoutInternalFT((iDynTree::Model const &)*arg1,(iDynTree::Traversal const &)*arg2,(iDynTree::LinkUnknownWrenchContacts const &)*arg3,(iDynTree::JointPosDoubleArray const &)*arg4,(iDynTree::LinkVelArray const &)*arg5,(iDynTree::LinkAccArray const &)*arg6,*arg7,*arg8);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_estimateExternalWrenches(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = 0 ;
  iDynTree::SubModelDecomposition *arg2 = 0 ;
  iDynTree::SensorsList *arg3 = 0 ;
  iDynTree::LinkUnknownWrenchContacts *arg4 = 0 ;
  iDynTree::JointPosDoubleArray *arg5 = 0 ;
  iDynTree::LinkVelArray *arg6 = 0 ;
  iDynTree::LinkAccArray *arg7 = 0 ;
  iDynTree::SensorsMeasurements *arg8 = 0 ;
  iDynTree::estimateExternalWrenchesBuffers *arg9 = 0 ;
  iDynTree::LinkContactWrenches *arg10 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  void *argp8 ;
  int res8 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  void *argp10 = 0 ;
  int res10 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("estimateExternalWrenches",argc,10,10,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "estimateExternalWrenches" "', argument " "1"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "estimateExternalWrenches" "', argument " "1"" of type '" "iDynTree::Model const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SubModelDecomposition,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "estimateExternalWrenches" "', argument " "2"" of type '" "iDynTree::SubModelDecomposition const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "estimateExternalWrenches" "', argument " "2"" of type '" "iDynTree::SubModelDecomposition const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SubModelDecomposition * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__SensorsList,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "estimateExternalWrenches" "', argument " "3"" of type '" "iDynTree::SensorsList const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "estimateExternalWrenches" "', argument " "3"" of type '" "iDynTree::SensorsList const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::SensorsList * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__LinkUnknownWrenchContacts,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "estimateExternalWrenches" "', argument " "4"" of type '" "iDynTree::LinkUnknownWrenchContacts const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "estimateExternalWrenches" "', argument " "4"" of type '" "iDynTree::LinkUnknownWrenchContacts const &""'"); 
  }
  arg4 = reinterpret_cast< iDynTree::LinkUnknownWrenchContacts * >(argp4);
  res5 = SWIG_ConvertPtr(argv[4], &argp5, SWIGTYPE_p_iDynTree__JointPosDoubleArray,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "estimateExternalWrenches" "', argument " "5"" of type '" "iDynTree::JointPosDoubleArray const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "estimateExternalWrenches" "', argument " "5"" of type '" "iDynTree::JointPosDoubleArray const &""'"); 
  }
  arg5 = reinterpret_cast< iDynTree::JointPosDoubleArray * >(argp5);
  res6 = SWIG_ConvertPtr(argv[5], &argp6, SWIGTYPE_p_iDynTree__LinkVelArray,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "estimateExternalWrenches" "', argument " "6"" of type '" "iDynTree::LinkVelArray const &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "estimateExternalWrenches" "', argument " "6"" of type '" "iDynTree::LinkVelArray const &""'"); 
  }
  arg6 = reinterpret_cast< iDynTree::LinkVelArray * >(argp6);
  res7 = SWIG_ConvertPtr(argv[6], &argp7, SWIGTYPE_p_iDynTree__LinkAccArray,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "estimateExternalWrenches" "', argument " "7"" of type '" "iDynTree::LinkAccArray const &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "estimateExternalWrenches" "', argument " "7"" of type '" "iDynTree::LinkAccArray const &""'"); 
  }
  arg7 = reinterpret_cast< iDynTree::LinkAccArray * >(argp7);
  res8 = SWIG_ConvertPtr(argv[7], &argp8, SWIGTYPE_p_iDynTree__SensorsMeasurements,  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "estimateExternalWrenches" "', argument " "8"" of type '" "iDynTree::SensorsMeasurements const &""'"); 
  }
  if (!argp8) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "estimateExternalWrenches" "', argument " "8"" of type '" "iDynTree::SensorsMeasurements const &""'"); 
  }
  arg8 = reinterpret_cast< iDynTree::SensorsMeasurements * >(argp8);
  res9 = SWIG_ConvertPtr(argv[8], &argp9, SWIGTYPE_p_iDynTree__estimateExternalWrenchesBuffers,  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "estimateExternalWrenches" "', argument " "9"" of type '" "iDynTree::estimateExternalWrenchesBuffers &""'"); 
  }
  if (!argp9) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "estimateExternalWrenches" "', argument " "9"" of type '" "iDynTree::estimateExternalWrenchesBuffers &""'"); 
  }
  arg9 = reinterpret_cast< iDynTree::estimateExternalWrenchesBuffers * >(argp9);
  res10 = SWIG_ConvertPtr(argv[9], &argp10, SWIGTYPE_p_iDynTree__LinkContactWrenches,  0 );
  if (!SWIG_IsOK(res10)) {
    SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "estimateExternalWrenches" "', argument " "10"" of type '" "iDynTree::LinkContactWrenches &""'"); 
  }
  if (!argp10) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "estimateExternalWrenches" "', argument " "10"" of type '" "iDynTree::LinkContactWrenches &""'"); 
  }
  arg10 = reinterpret_cast< iDynTree::LinkContactWrenches * >(argp10);
  result = (bool)iDynTree::estimateExternalWrenches((iDynTree::Model const &)*arg1,(iDynTree::SubModelDecomposition const &)*arg2,(iDynTree::SensorsList const &)*arg3,(iDynTree::LinkUnknownWrenchContacts const &)*arg4,(iDynTree::JointPosDoubleArray const &)*arg5,(iDynTree::LinkVelArray const &)*arg6,(iDynTree::LinkAccArray const &)*arg7,(iDynTree::SensorsMeasurements const &)*arg8,*arg9,*arg10);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_dynamicsEstimationForwardVelAccKinematics(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = 0 ;
  iDynTree::Traversal *arg2 = 0 ;
  iDynTree::Vector3 *arg3 = 0 ;
  iDynTree::Vector3 *arg4 = 0 ;
  iDynTree::Vector3 *arg5 = 0 ;
  iDynTree::JointPosDoubleArray *arg6 = 0 ;
  iDynTree::JointDOFsDoubleArray *arg7 = 0 ;
  iDynTree::JointDOFsDoubleArray *arg8 = 0 ;
  iDynTree::LinkVelArray *arg9 = 0 ;
  iDynTree::LinkAccArray *arg10 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  void *argp8 ;
  int res8 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  void *argp10 = 0 ;
  int res10 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("dynamicsEstimationForwardVelAccKinematics",argc,10,10,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dynamicsEstimationForwardVelAccKinematics" "', argument " "1"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dynamicsEstimationForwardVelAccKinematics" "', argument " "1"" of type '" "iDynTree::Model const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Traversal,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dynamicsEstimationForwardVelAccKinematics" "', argument " "2"" of type '" "iDynTree::Traversal const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dynamicsEstimationForwardVelAccKinematics" "', argument " "2"" of type '" "iDynTree::Traversal const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Traversal * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__VectorFixSizeT_3_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "dynamicsEstimationForwardVelAccKinematics" "', argument " "3"" of type '" "iDynTree::Vector3 const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dynamicsEstimationForwardVelAccKinematics" "', argument " "3"" of type '" "iDynTree::Vector3 const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::Vector3 * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__VectorFixSizeT_3_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "dynamicsEstimationForwardVelAccKinematics" "', argument " "4"" of type '" "iDynTree::Vector3 const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dynamicsEstimationForwardVelAccKinematics" "', argument " "4"" of type '" "iDynTree::Vector3 const &""'"); 
  }
  arg4 = reinterpret_cast< iDynTree::Vector3 * >(argp4);
  res5 = SWIG_ConvertPtr(argv[4], &argp5, SWIGTYPE_p_iDynTree__VectorFixSizeT_3_t,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "dynamicsEstimationForwardVelAccKinematics" "', argument " "5"" of type '" "iDynTree::Vector3 const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dynamicsEstimationForwardVelAccKinematics" "', argument " "5"" of type '" "iDynTree::Vector3 const &""'"); 
  }
  arg5 = reinterpret_cast< iDynTree::Vector3 * >(argp5);
  res6 = SWIG_ConvertPtr(argv[5], &argp6, SWIGTYPE_p_iDynTree__JointPosDoubleArray,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "dynamicsEstimationForwardVelAccKinematics" "', argument " "6"" of type '" "iDynTree::JointPosDoubleArray const &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dynamicsEstimationForwardVelAccKinematics" "', argument " "6"" of type '" "iDynTree::JointPosDoubleArray const &""'"); 
  }
  arg6 = reinterpret_cast< iDynTree::JointPosDoubleArray * >(argp6);
  res7 = SWIG_ConvertPtr(argv[6], &argp7, SWIGTYPE_p_iDynTree__JointDOFsDoubleArray,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "dynamicsEstimationForwardVelAccKinematics" "', argument " "7"" of type '" "iDynTree::JointDOFsDoubleArray const &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dynamicsEstimationForwardVelAccKinematics" "', argument " "7"" of type '" "iDynTree::JointDOFsDoubleArray const &""'"); 
  }
  arg7 = reinterpret_cast< iDynTree::JointDOFsDoubleArray * >(argp7);
  res8 = SWIG_ConvertPtr(argv[7], &argp8, SWIGTYPE_p_iDynTree__JointDOFsDoubleArray,  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "dynamicsEstimationForwardVelAccKinematics" "', argument " "8"" of type '" "iDynTree::JointDOFsDoubleArray const &""'"); 
  }
  if (!argp8) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dynamicsEstimationForwardVelAccKinematics" "', argument " "8"" of type '" "iDynTree::JointDOFsDoubleArray const &""'"); 
  }
  arg8 = reinterpret_cast< iDynTree::JointDOFsDoubleArray * >(argp8);
  res9 = SWIG_ConvertPtr(argv[8], &argp9, SWIGTYPE_p_iDynTree__LinkVelArray,  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "dynamicsEstimationForwardVelAccKinematics" "', argument " "9"" of type '" "iDynTree::LinkVelArray &""'"); 
  }
  if (!argp9) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dynamicsEstimationForwardVelAccKinematics" "', argument " "9"" of type '" "iDynTree::LinkVelArray &""'"); 
  }
  arg9 = reinterpret_cast< iDynTree::LinkVelArray * >(argp9);
  res10 = SWIG_ConvertPtr(argv[9], &argp10, SWIGTYPE_p_iDynTree__LinkAccArray,  0 );
  if (!SWIG_IsOK(res10)) {
    SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "dynamicsEstimationForwardVelAccKinematics" "', argument " "10"" of type '" "iDynTree::LinkAccArray &""'"); 
  }
  if (!argp10) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dynamicsEstimationForwardVelAccKinematics" "', argument " "10"" of type '" "iDynTree::LinkAccArray &""'"); 
  }
  arg10 = reinterpret_cast< iDynTree::LinkAccArray * >(argp10);
  result = (bool)iDynTree::dynamicsEstimationForwardVelAccKinematics((iDynTree::Model const &)*arg1,(iDynTree::Traversal const &)*arg2,(iDynTree::VectorFixSize< 3 > const &)*arg3,(iDynTree::VectorFixSize< 3 > const &)*arg4,(iDynTree::VectorFixSize< 3 > const &)*arg5,(iDynTree::JointPosDoubleArray const &)*arg6,(iDynTree::JointDOFsDoubleArray const &)*arg7,(iDynTree::JointDOFsDoubleArray const &)*arg8,*arg9,*arg10);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_dynamicsEstimationForwardVelKinematics(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = 0 ;
  iDynTree::Traversal *arg2 = 0 ;
  iDynTree::Vector3 *arg3 = 0 ;
  iDynTree::JointPosDoubleArray *arg4 = 0 ;
  iDynTree::JointDOFsDoubleArray *arg5 = 0 ;
  iDynTree::LinkVelArray *arg6 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("dynamicsEstimationForwardVelKinematics",argc,6,6,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dynamicsEstimationForwardVelKinematics" "', argument " "1"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dynamicsEstimationForwardVelKinematics" "', argument " "1"" of type '" "iDynTree::Model const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Traversal,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dynamicsEstimationForwardVelKinematics" "', argument " "2"" of type '" "iDynTree::Traversal const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dynamicsEstimationForwardVelKinematics" "', argument " "2"" of type '" "iDynTree::Traversal const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Traversal * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__VectorFixSizeT_3_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "dynamicsEstimationForwardVelKinematics" "', argument " "3"" of type '" "iDynTree::Vector3 const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dynamicsEstimationForwardVelKinematics" "', argument " "3"" of type '" "iDynTree::Vector3 const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::Vector3 * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__JointPosDoubleArray,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "dynamicsEstimationForwardVelKinematics" "', argument " "4"" of type '" "iDynTree::JointPosDoubleArray const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dynamicsEstimationForwardVelKinematics" "', argument " "4"" of type '" "iDynTree::JointPosDoubleArray const &""'"); 
  }
  arg4 = reinterpret_cast< iDynTree::JointPosDoubleArray * >(argp4);
  res5 = SWIG_ConvertPtr(argv[4], &argp5, SWIGTYPE_p_iDynTree__JointDOFsDoubleArray,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "dynamicsEstimationForwardVelKinematics" "', argument " "5"" of type '" "iDynTree::JointDOFsDoubleArray const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dynamicsEstimationForwardVelKinematics" "', argument " "5"" of type '" "iDynTree::JointDOFsDoubleArray const &""'"); 
  }
  arg5 = reinterpret_cast< iDynTree::JointDOFsDoubleArray * >(argp5);
  res6 = SWIG_ConvertPtr(argv[5], &argp6, SWIGTYPE_p_iDynTree__LinkVelArray,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "dynamicsEstimationForwardVelKinematics" "', argument " "6"" of type '" "iDynTree::LinkVelArray &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dynamicsEstimationForwardVelKinematics" "', argument " "6"" of type '" "iDynTree::LinkVelArray &""'"); 
  }
  arg6 = reinterpret_cast< iDynTree::LinkVelArray * >(argp6);
  result = (bool)iDynTree::dynamicsEstimationForwardVelKinematics((iDynTree::Model const &)*arg1,(iDynTree::Traversal const &)*arg2,(iDynTree::VectorFixSize< 3 > const &)*arg3,(iDynTree::JointPosDoubleArray const &)*arg4,(iDynTree::JointDOFsDoubleArray const &)*arg5,*arg6);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_computeLinkNetWrenchesWithoutGravity(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = 0 ;
  iDynTree::LinkVelArray *arg2 = 0 ;
  iDynTree::LinkAccArray *arg3 = 0 ;
  iDynTree::LinkNetTotalWrenchesWithoutGravity *arg4 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("computeLinkNetWrenchesWithoutGravity",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "computeLinkNetWrenchesWithoutGravity" "', argument " "1"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "computeLinkNetWrenchesWithoutGravity" "', argument " "1"" of type '" "iDynTree::Model const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__LinkVelArray,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "computeLinkNetWrenchesWithoutGravity" "', argument " "2"" of type '" "iDynTree::LinkVelArray const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "computeLinkNetWrenchesWithoutGravity" "', argument " "2"" of type '" "iDynTree::LinkVelArray const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::LinkVelArray * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__LinkAccArray,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "computeLinkNetWrenchesWithoutGravity" "', argument " "3"" of type '" "iDynTree::LinkAccArray const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "computeLinkNetWrenchesWithoutGravity" "', argument " "3"" of type '" "iDynTree::LinkAccArray const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::LinkAccArray * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__LinkWrenches,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "computeLinkNetWrenchesWithoutGravity" "', argument " "4"" of type '" "iDynTree::LinkNetTotalWrenchesWithoutGravity &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "computeLinkNetWrenchesWithoutGravity" "', argument " "4"" of type '" "iDynTree::LinkNetTotalWrenchesWithoutGravity &""'"); 
  }
  arg4 = reinterpret_cast< iDynTree::LinkNetTotalWrenchesWithoutGravity * >(argp4);
  result = (bool)iDynTree::computeLinkNetWrenchesWithoutGravity((iDynTree::Model const &)*arg1,(iDynTree::LinkVelArray const &)*arg2,(iDynTree::LinkAccArray const &)*arg3,*arg4);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_ExtWrenchesAndJointTorquesEstimator(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::ExtWrenchesAndJointTorquesEstimator *result = 0 ;
  
  if (!SWIG_check_num_args("new_ExtWrenchesAndJointTorquesEstimator",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::ExtWrenchesAndJointTorquesEstimator *)new iDynTree::ExtWrenchesAndJointTorquesEstimator();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__ExtWrenchesAndJointTorquesEstimator, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_ExtWrenchesAndJointTorquesEstimator(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ExtWrenchesAndJointTorquesEstimator *arg1 = (iDynTree::ExtWrenchesAndJointTorquesEstimator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_ExtWrenchesAndJointTorquesEstimator",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ExtWrenchesAndJointTorquesEstimator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ExtWrenchesAndJointTorquesEstimator" "', argument " "1"" of type '" "iDynTree::ExtWrenchesAndJointTorquesEstimator *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ExtWrenchesAndJointTorquesEstimator * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ExtWrenchesAndJointTorquesEstimator_setModelAndSensors(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ExtWrenchesAndJointTorquesEstimator *arg1 = (iDynTree::ExtWrenchesAndJointTorquesEstimator *) 0 ;
  iDynTree::Model *arg2 = 0 ;
  iDynTree::SensorsList *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("ExtWrenchesAndJointTorquesEstimator_setModelAndSensors",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ExtWrenchesAndJointTorquesEstimator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExtWrenchesAndJointTorquesEstimator_setModelAndSensors" "', argument " "1"" of type '" "iDynTree::ExtWrenchesAndJointTorquesEstimator *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ExtWrenchesAndJointTorquesEstimator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ExtWrenchesAndJointTorquesEstimator_setModelAndSensors" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ExtWrenchesAndJointTorquesEstimator_setModelAndSensors" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Model * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__SensorsList,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ExtWrenchesAndJointTorquesEstimator_setModelAndSensors" "', argument " "3"" of type '" "iDynTree::SensorsList const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ExtWrenchesAndJointTorquesEstimator_setModelAndSensors" "', argument " "3"" of type '" "iDynTree::SensorsList const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::SensorsList * >(argp3);
  result = (bool)(arg1)->setModelAndSensors((iDynTree::Model const &)*arg2,(iDynTree::SensorsList const &)*arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ExtWrenchesAndJointTorquesEstimator_loadModelAndSensorsFromFile__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ExtWrenchesAndJointTorquesEstimator *arg1 = (iDynTree::ExtWrenchesAndJointTorquesEstimator *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("ExtWrenchesAndJointTorquesEstimator_loadModelAndSensorsFromFile",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ExtWrenchesAndJointTorquesEstimator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExtWrenchesAndJointTorquesEstimator_loadModelAndSensorsFromFile" "', argument " "1"" of type '" "iDynTree::ExtWrenchesAndJointTorquesEstimator *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ExtWrenchesAndJointTorquesEstimator * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "ExtWrenchesAndJointTorquesEstimator_loadModelAndSensorsFromFile" "', argument " "2"" of type '" "std::string const""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "ExtWrenchesAndJointTorquesEstimator_loadModelAndSensorsFromFile" "', argument " "3"" of type '" "std::string const""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (bool)(arg1)->loadModelAndSensorsFromFile(arg2,arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ExtWrenchesAndJointTorquesEstimator_loadModelAndSensorsFromFile__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ExtWrenchesAndJointTorquesEstimator *arg1 = (iDynTree::ExtWrenchesAndJointTorquesEstimator *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("ExtWrenchesAndJointTorquesEstimator_loadModelAndSensorsFromFile",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ExtWrenchesAndJointTorquesEstimator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExtWrenchesAndJointTorquesEstimator_loadModelAndSensorsFromFile" "', argument " "1"" of type '" "iDynTree::ExtWrenchesAndJointTorquesEstimator *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ExtWrenchesAndJointTorquesEstimator * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "ExtWrenchesAndJointTorquesEstimator_loadModelAndSensorsFromFile" "', argument " "2"" of type '" "std::string const""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (bool)(arg1)->loadModelAndSensorsFromFile(arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ExtWrenchesAndJointTorquesEstimator_loadModelAndSensorsFromFile(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__ExtWrenchesAndJointTorquesEstimator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ExtWrenchesAndJointTorquesEstimator_loadModelAndSensorsFromFile__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__ExtWrenchesAndJointTorquesEstimator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ExtWrenchesAndJointTorquesEstimator_loadModelAndSensorsFromFile__SWIG_0(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'ExtWrenchesAndJointTorquesEstimator_loadModelAndSensorsFromFile'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::ExtWrenchesAndJointTorquesEstimator::loadModelAndSensorsFromFile(std::string const,std::string const)\n"
    "    iDynTree::ExtWrenchesAndJointTorquesEstimator::loadModelAndSensorsFromFile(std::string const)\n");
  return 1;
}


int _wrap_ExtWrenchesAndJointTorquesEstimator_loadModelAndSensorsFromFileWithSpecifiedDOFs__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ExtWrenchesAndJointTorquesEstimator *arg1 = (iDynTree::ExtWrenchesAndJointTorquesEstimator *) 0 ;
  std::string arg2 ;
  std::vector< std::string,std::allocator< std::string > > *arg3 = 0 ;
  std::string arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("ExtWrenchesAndJointTorquesEstimator_loadModelAndSensorsFromFileWithSpecifiedDOFs",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ExtWrenchesAndJointTorquesEstimator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExtWrenchesAndJointTorquesEstimator_loadModelAndSensorsFromFileWithSpecifiedDOFs" "', argument " "1"" of type '" "iDynTree::ExtWrenchesAndJointTorquesEstimator *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ExtWrenchesAndJointTorquesEstimator * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "ExtWrenchesAndJointTorquesEstimator_loadModelAndSensorsFromFileWithSpecifiedDOFs" "', argument " "2"" of type '" "std::string const""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res3 = swig::asptr(argv[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ExtWrenchesAndJointTorquesEstimator_loadModelAndSensorsFromFileWithSpecifiedDOFs" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ExtWrenchesAndJointTorquesEstimator_loadModelAndSensorsFromFileWithSpecifiedDOFs" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[3], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "ExtWrenchesAndJointTorquesEstimator_loadModelAndSensorsFromFileWithSpecifiedDOFs" "', argument " "4"" of type '" "std::string const""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (bool)(arg1)->loadModelAndSensorsFromFileWithSpecifiedDOFs(arg2,(std::vector< std::string,std::allocator< std::string > > const &)*arg3,arg4);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 0;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 1;
}


int _wrap_ExtWrenchesAndJointTorquesEstimator_loadModelAndSensorsFromFileWithSpecifiedDOFs__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ExtWrenchesAndJointTorquesEstimator *arg1 = (iDynTree::ExtWrenchesAndJointTorquesEstimator *) 0 ;
  std::string arg2 ;
  std::vector< std::string,std::allocator< std::string > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("ExtWrenchesAndJointTorquesEstimator_loadModelAndSensorsFromFileWithSpecifiedDOFs",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ExtWrenchesAndJointTorquesEstimator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExtWrenchesAndJointTorquesEstimator_loadModelAndSensorsFromFileWithSpecifiedDOFs" "', argument " "1"" of type '" "iDynTree::ExtWrenchesAndJointTorquesEstimator *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ExtWrenchesAndJointTorquesEstimator * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "ExtWrenchesAndJointTorquesEstimator_loadModelAndSensorsFromFileWithSpecifiedDOFs" "', argument " "2"" of type '" "std::string const""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res3 = swig::asptr(argv[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ExtWrenchesAndJointTorquesEstimator_loadModelAndSensorsFromFileWithSpecifiedDOFs" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ExtWrenchesAndJointTorquesEstimator_loadModelAndSensorsFromFileWithSpecifiedDOFs" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (bool)(arg1)->loadModelAndSensorsFromFileWithSpecifiedDOFs(arg2,(std::vector< std::string,std::allocator< std::string > > const &)*arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 0;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 1;
}


int _wrap_ExtWrenchesAndJointTorquesEstimator_loadModelAndSensorsFromFileWithSpecifiedDOFs(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__ExtWrenchesAndJointTorquesEstimator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< std::string,std::allocator< std::string > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ExtWrenchesAndJointTorquesEstimator_loadModelAndSensorsFromFileWithSpecifiedDOFs__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__ExtWrenchesAndJointTorquesEstimator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< std::string,std::allocator< std::string > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_ExtWrenchesAndJointTorquesEstimator_loadModelAndSensorsFromFileWithSpecifiedDOFs__SWIG_0(resc,resv,argc,argv);
          }
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'ExtWrenchesAndJointTorquesEstimator_loadModelAndSensorsFromFileWithSpecifiedDOFs'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::ExtWrenchesAndJointTorquesEstimator::loadModelAndSensorsFromFileWithSpecifiedDOFs(std::string const,std::vector< std::string,std::allocator< std::string > > const &,std::string const)\n"
    "    iDynTree::ExtWrenchesAndJointTorquesEstimator::loadModelAndSensorsFromFileWithSpecifiedDOFs(std::string const,std::vector< std::string,std::allocator< std::string > > const &)\n");
  return 1;
}


int _wrap_ExtWrenchesAndJointTorquesEstimator_model(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ExtWrenchesAndJointTorquesEstimator *arg1 = (iDynTree::ExtWrenchesAndJointTorquesEstimator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Model *result = 0 ;
  
  if (!SWIG_check_num_args("ExtWrenchesAndJointTorquesEstimator_model",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ExtWrenchesAndJointTorquesEstimator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExtWrenchesAndJointTorquesEstimator_model" "', argument " "1"" of type '" "iDynTree::ExtWrenchesAndJointTorquesEstimator const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ExtWrenchesAndJointTorquesEstimator * >(argp1);
  result = (iDynTree::Model *) &((iDynTree::ExtWrenchesAndJointTorquesEstimator const *)arg1)->model();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Model, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ExtWrenchesAndJointTorquesEstimator_sensors(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ExtWrenchesAndJointTorquesEstimator *arg1 = (iDynTree::ExtWrenchesAndJointTorquesEstimator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::SensorsList *result = 0 ;
  
  if (!SWIG_check_num_args("ExtWrenchesAndJointTorquesEstimator_sensors",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ExtWrenchesAndJointTorquesEstimator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExtWrenchesAndJointTorquesEstimator_sensors" "', argument " "1"" of type '" "iDynTree::ExtWrenchesAndJointTorquesEstimator const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ExtWrenchesAndJointTorquesEstimator * >(argp1);
  result = (iDynTree::SensorsList *) &((iDynTree::ExtWrenchesAndJointTorquesEstimator const *)arg1)->sensors();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SensorsList, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ExtWrenchesAndJointTorquesEstimator_submodels(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ExtWrenchesAndJointTorquesEstimator *arg1 = (iDynTree::ExtWrenchesAndJointTorquesEstimator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::SubModelDecomposition *result = 0 ;
  
  if (!SWIG_check_num_args("ExtWrenchesAndJointTorquesEstimator_submodels",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ExtWrenchesAndJointTorquesEstimator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExtWrenchesAndJointTorquesEstimator_submodels" "', argument " "1"" of type '" "iDynTree::ExtWrenchesAndJointTorquesEstimator const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ExtWrenchesAndJointTorquesEstimator * >(argp1);
  result = (iDynTree::SubModelDecomposition *) &((iDynTree::ExtWrenchesAndJointTorquesEstimator const *)arg1)->submodels();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SubModelDecomposition, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ExtWrenchesAndJointTorquesEstimator_updateKinematicsFromFloatingBase(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ExtWrenchesAndJointTorquesEstimator *arg1 = (iDynTree::ExtWrenchesAndJointTorquesEstimator *) 0 ;
  iDynTree::JointPosDoubleArray *arg2 = 0 ;
  iDynTree::JointDOFsDoubleArray *arg3 = 0 ;
  iDynTree::JointDOFsDoubleArray *arg4 = 0 ;
  iDynTree::FrameIndex *arg5 = 0 ;
  iDynTree::Vector3 *arg6 = 0 ;
  iDynTree::Vector3 *arg7 = 0 ;
  iDynTree::Vector3 *arg8 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  iDynTree::FrameIndex temp5 ;
  int val5 ;
  int ecode5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  void *argp8 ;
  int res8 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("ExtWrenchesAndJointTorquesEstimator_updateKinematicsFromFloatingBase",argc,8,8,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ExtWrenchesAndJointTorquesEstimator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExtWrenchesAndJointTorquesEstimator_updateKinematicsFromFloatingBase" "', argument " "1"" of type '" "iDynTree::ExtWrenchesAndJointTorquesEstimator *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ExtWrenchesAndJointTorquesEstimator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__JointPosDoubleArray,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ExtWrenchesAndJointTorquesEstimator_updateKinematicsFromFloatingBase" "', argument " "2"" of type '" "iDynTree::JointPosDoubleArray const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ExtWrenchesAndJointTorquesEstimator_updateKinematicsFromFloatingBase" "', argument " "2"" of type '" "iDynTree::JointPosDoubleArray const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::JointPosDoubleArray * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__JointDOFsDoubleArray,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ExtWrenchesAndJointTorquesEstimator_updateKinematicsFromFloatingBase" "', argument " "3"" of type '" "iDynTree::JointDOFsDoubleArray const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ExtWrenchesAndJointTorquesEstimator_updateKinematicsFromFloatingBase" "', argument " "3"" of type '" "iDynTree::JointDOFsDoubleArray const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::JointDOFsDoubleArray * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__JointDOFsDoubleArray,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ExtWrenchesAndJointTorquesEstimator_updateKinematicsFromFloatingBase" "', argument " "4"" of type '" "iDynTree::JointDOFsDoubleArray const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ExtWrenchesAndJointTorquesEstimator_updateKinematicsFromFloatingBase" "', argument " "4"" of type '" "iDynTree::JointDOFsDoubleArray const &""'"); 
  }
  arg4 = reinterpret_cast< iDynTree::JointDOFsDoubleArray * >(argp4);
  ecode5 = SWIG_AsVal_int(argv[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ExtWrenchesAndJointTorquesEstimator_updateKinematicsFromFloatingBase" "', argument " "5"" of type '" "iDynTree::FrameIndex""'");
  } 
  temp5 = static_cast< iDynTree::FrameIndex >(val5);
  arg5 = &temp5;
  res6 = SWIG_ConvertPtr(argv[5], &argp6, SWIGTYPE_p_iDynTree__VectorFixSizeT_3_t,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "ExtWrenchesAndJointTorquesEstimator_updateKinematicsFromFloatingBase" "', argument " "6"" of type '" "iDynTree::Vector3 const &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ExtWrenchesAndJointTorquesEstimator_updateKinematicsFromFloatingBase" "', argument " "6"" of type '" "iDynTree::Vector3 const &""'"); 
  }
  arg6 = reinterpret_cast< iDynTree::Vector3 * >(argp6);
  res7 = SWIG_ConvertPtr(argv[6], &argp7, SWIGTYPE_p_iDynTree__VectorFixSizeT_3_t,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "ExtWrenchesAndJointTorquesEstimator_updateKinematicsFromFloatingBase" "', argument " "7"" of type '" "iDynTree::Vector3 const &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ExtWrenchesAndJointTorquesEstimator_updateKinematicsFromFloatingBase" "', argument " "7"" of type '" "iDynTree::Vector3 const &""'"); 
  }
  arg7 = reinterpret_cast< iDynTree::Vector3 * >(argp7);
  res8 = SWIG_ConvertPtr(argv[7], &argp8, SWIGTYPE_p_iDynTree__VectorFixSizeT_3_t,  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "ExtWrenchesAndJointTorquesEstimator_updateKinematicsFromFloatingBase" "', argument " "8"" of type '" "iDynTree::Vector3 const &""'"); 
  }
  if (!argp8) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ExtWrenchesAndJointTorquesEstimator_updateKinematicsFromFloatingBase" "', argument " "8"" of type '" "iDynTree::Vector3 const &""'"); 
  }
  arg8 = reinterpret_cast< iDynTree::Vector3 * >(argp8);
  result = (bool)(arg1)->updateKinematicsFromFloatingBase((iDynTree::JointPosDoubleArray const &)*arg2,(iDynTree::JointDOFsDoubleArray const &)*arg3,(iDynTree::JointDOFsDoubleArray const &)*arg4,(iDynTree::FrameIndex const &)*arg5,(iDynTree::Vector3 const &)*arg6,(iDynTree::Vector3 const &)*arg7,(iDynTree::Vector3 const &)*arg8);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ExtWrenchesAndJointTorquesEstimator_updateKinematicsFromFixedBase(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ExtWrenchesAndJointTorquesEstimator *arg1 = (iDynTree::ExtWrenchesAndJointTorquesEstimator *) 0 ;
  iDynTree::JointPosDoubleArray *arg2 = 0 ;
  iDynTree::JointDOFsDoubleArray *arg3 = 0 ;
  iDynTree::JointDOFsDoubleArray *arg4 = 0 ;
  iDynTree::FrameIndex *arg5 = 0 ;
  iDynTree::Vector3 *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  iDynTree::FrameIndex temp5 ;
  int val5 ;
  int ecode5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("ExtWrenchesAndJointTorquesEstimator_updateKinematicsFromFixedBase",argc,6,6,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ExtWrenchesAndJointTorquesEstimator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExtWrenchesAndJointTorquesEstimator_updateKinematicsFromFixedBase" "', argument " "1"" of type '" "iDynTree::ExtWrenchesAndJointTorquesEstimator *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ExtWrenchesAndJointTorquesEstimator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__JointPosDoubleArray,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ExtWrenchesAndJointTorquesEstimator_updateKinematicsFromFixedBase" "', argument " "2"" of type '" "iDynTree::JointPosDoubleArray const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ExtWrenchesAndJointTorquesEstimator_updateKinematicsFromFixedBase" "', argument " "2"" of type '" "iDynTree::JointPosDoubleArray const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::JointPosDoubleArray * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__JointDOFsDoubleArray,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ExtWrenchesAndJointTorquesEstimator_updateKinematicsFromFixedBase" "', argument " "3"" of type '" "iDynTree::JointDOFsDoubleArray const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ExtWrenchesAndJointTorquesEstimator_updateKinematicsFromFixedBase" "', argument " "3"" of type '" "iDynTree::JointDOFsDoubleArray const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::JointDOFsDoubleArray * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__JointDOFsDoubleArray,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ExtWrenchesAndJointTorquesEstimator_updateKinematicsFromFixedBase" "', argument " "4"" of type '" "iDynTree::JointDOFsDoubleArray const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ExtWrenchesAndJointTorquesEstimator_updateKinematicsFromFixedBase" "', argument " "4"" of type '" "iDynTree::JointDOFsDoubleArray const &""'"); 
  }
  arg4 = reinterpret_cast< iDynTree::JointDOFsDoubleArray * >(argp4);
  ecode5 = SWIG_AsVal_int(argv[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ExtWrenchesAndJointTorquesEstimator_updateKinematicsFromFixedBase" "', argument " "5"" of type '" "iDynTree::FrameIndex""'");
  } 
  temp5 = static_cast< iDynTree::FrameIndex >(val5);
  arg5 = &temp5;
  res6 = SWIG_ConvertPtr(argv[5], &argp6, SWIGTYPE_p_iDynTree__VectorFixSizeT_3_t,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "ExtWrenchesAndJointTorquesEstimator_updateKinematicsFromFixedBase" "', argument " "6"" of type '" "iDynTree::Vector3 const &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ExtWrenchesAndJointTorquesEstimator_updateKinematicsFromFixedBase" "', argument " "6"" of type '" "iDynTree::Vector3 const &""'"); 
  }
  arg6 = reinterpret_cast< iDynTree::Vector3 * >(argp6);
  result = (bool)(arg1)->updateKinematicsFromFixedBase((iDynTree::JointPosDoubleArray const &)*arg2,(iDynTree::JointDOFsDoubleArray const &)*arg3,(iDynTree::JointDOFsDoubleArray const &)*arg4,(iDynTree::FrameIndex const &)*arg5,(iDynTree::Vector3 const &)*arg6);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ExtWrenchesAndJointTorquesEstimator_computeExpectedFTSensorsMeasurements(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ExtWrenchesAndJointTorquesEstimator *arg1 = (iDynTree::ExtWrenchesAndJointTorquesEstimator *) 0 ;
  iDynTree::LinkUnknownWrenchContacts *arg2 = 0 ;
  iDynTree::SensorsMeasurements *arg3 = 0 ;
  iDynTree::LinkContactWrenches *arg4 = 0 ;
  iDynTree::JointDOFsDoubleArray *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("ExtWrenchesAndJointTorquesEstimator_computeExpectedFTSensorsMeasurements",argc,5,5,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ExtWrenchesAndJointTorquesEstimator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExtWrenchesAndJointTorquesEstimator_computeExpectedFTSensorsMeasurements" "', argument " "1"" of type '" "iDynTree::ExtWrenchesAndJointTorquesEstimator *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ExtWrenchesAndJointTorquesEstimator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__LinkUnknownWrenchContacts,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ExtWrenchesAndJointTorquesEstimator_computeExpectedFTSensorsMeasurements" "', argument " "2"" of type '" "iDynTree::LinkUnknownWrenchContacts const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ExtWrenchesAndJointTorquesEstimator_computeExpectedFTSensorsMeasurements" "', argument " "2"" of type '" "iDynTree::LinkUnknownWrenchContacts const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::LinkUnknownWrenchContacts * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__SensorsMeasurements,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ExtWrenchesAndJointTorquesEstimator_computeExpectedFTSensorsMeasurements" "', argument " "3"" of type '" "iDynTree::SensorsMeasurements &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ExtWrenchesAndJointTorquesEstimator_computeExpectedFTSensorsMeasurements" "', argument " "3"" of type '" "iDynTree::SensorsMeasurements &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::SensorsMeasurements * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__LinkContactWrenches,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ExtWrenchesAndJointTorquesEstimator_computeExpectedFTSensorsMeasurements" "', argument " "4"" of type '" "iDynTree::LinkContactWrenches &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ExtWrenchesAndJointTorquesEstimator_computeExpectedFTSensorsMeasurements" "', argument " "4"" of type '" "iDynTree::LinkContactWrenches &""'"); 
  }
  arg4 = reinterpret_cast< iDynTree::LinkContactWrenches * >(argp4);
  res5 = SWIG_ConvertPtr(argv[4], &argp5, SWIGTYPE_p_iDynTree__JointDOFsDoubleArray,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ExtWrenchesAndJointTorquesEstimator_computeExpectedFTSensorsMeasurements" "', argument " "5"" of type '" "iDynTree::JointDOFsDoubleArray &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ExtWrenchesAndJointTorquesEstimator_computeExpectedFTSensorsMeasurements" "', argument " "5"" of type '" "iDynTree::JointDOFsDoubleArray &""'"); 
  }
  arg5 = reinterpret_cast< iDynTree::JointDOFsDoubleArray * >(argp5);
  result = (bool)(arg1)->computeExpectedFTSensorsMeasurements((iDynTree::LinkUnknownWrenchContacts const &)*arg2,*arg3,*arg4,*arg5);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ExtWrenchesAndJointTorquesEstimator_estimateExtWrenchesAndJointTorques(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ExtWrenchesAndJointTorquesEstimator *arg1 = (iDynTree::ExtWrenchesAndJointTorquesEstimator *) 0 ;
  iDynTree::LinkUnknownWrenchContacts *arg2 = 0 ;
  iDynTree::SensorsMeasurements *arg3 = 0 ;
  iDynTree::LinkContactWrenches *arg4 = 0 ;
  iDynTree::JointDOFsDoubleArray *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("ExtWrenchesAndJointTorquesEstimator_estimateExtWrenchesAndJointTorques",argc,5,5,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ExtWrenchesAndJointTorquesEstimator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExtWrenchesAndJointTorquesEstimator_estimateExtWrenchesAndJointTorques" "', argument " "1"" of type '" "iDynTree::ExtWrenchesAndJointTorquesEstimator *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ExtWrenchesAndJointTorquesEstimator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__LinkUnknownWrenchContacts,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ExtWrenchesAndJointTorquesEstimator_estimateExtWrenchesAndJointTorques" "', argument " "2"" of type '" "iDynTree::LinkUnknownWrenchContacts const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ExtWrenchesAndJointTorquesEstimator_estimateExtWrenchesAndJointTorques" "', argument " "2"" of type '" "iDynTree::LinkUnknownWrenchContacts const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::LinkUnknownWrenchContacts * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__SensorsMeasurements,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ExtWrenchesAndJointTorquesEstimator_estimateExtWrenchesAndJointTorques" "', argument " "3"" of type '" "iDynTree::SensorsMeasurements const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ExtWrenchesAndJointTorquesEstimator_estimateExtWrenchesAndJointTorques" "', argument " "3"" of type '" "iDynTree::SensorsMeasurements const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::SensorsMeasurements * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__LinkContactWrenches,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ExtWrenchesAndJointTorquesEstimator_estimateExtWrenchesAndJointTorques" "', argument " "4"" of type '" "iDynTree::LinkContactWrenches &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ExtWrenchesAndJointTorquesEstimator_estimateExtWrenchesAndJointTorques" "', argument " "4"" of type '" "iDynTree::LinkContactWrenches &""'"); 
  }
  arg4 = reinterpret_cast< iDynTree::LinkContactWrenches * >(argp4);
  res5 = SWIG_ConvertPtr(argv[4], &argp5, SWIGTYPE_p_iDynTree__JointDOFsDoubleArray,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ExtWrenchesAndJointTorquesEstimator_estimateExtWrenchesAndJointTorques" "', argument " "5"" of type '" "iDynTree::JointDOFsDoubleArray &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ExtWrenchesAndJointTorquesEstimator_estimateExtWrenchesAndJointTorques" "', argument " "5"" of type '" "iDynTree::JointDOFsDoubleArray &""'"); 
  }
  arg5 = reinterpret_cast< iDynTree::JointDOFsDoubleArray * >(argp5);
  result = (bool)(arg1)->estimateExtWrenchesAndJointTorques((iDynTree::LinkUnknownWrenchContacts const &)*arg2,(iDynTree::SensorsMeasurements const &)*arg3,*arg4,*arg5);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ExtWrenchesAndJointTorquesEstimator_checkThatTheModelIsStill(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ExtWrenchesAndJointTorquesEstimator *arg1 = (iDynTree::ExtWrenchesAndJointTorquesEstimator *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("ExtWrenchesAndJointTorquesEstimator_checkThatTheModelIsStill",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ExtWrenchesAndJointTorquesEstimator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExtWrenchesAndJointTorquesEstimator_checkThatTheModelIsStill" "', argument " "1"" of type '" "iDynTree::ExtWrenchesAndJointTorquesEstimator *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ExtWrenchesAndJointTorquesEstimator * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ExtWrenchesAndJointTorquesEstimator_checkThatTheModelIsStill" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ExtWrenchesAndJointTorquesEstimator_checkThatTheModelIsStill" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ExtWrenchesAndJointTorquesEstimator_checkThatTheModelIsStill" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  result = (bool)(arg1)->checkThatTheModelIsStill(arg2,arg3,arg4);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ExtWrenchesAndJointTorquesEstimator_estimateLinkNetWrenchesWithoutGravity(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ExtWrenchesAndJointTorquesEstimator *arg1 = (iDynTree::ExtWrenchesAndJointTorquesEstimator *) 0 ;
  iDynTree::LinkNetTotalWrenchesWithoutGravity *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("ExtWrenchesAndJointTorquesEstimator_estimateLinkNetWrenchesWithoutGravity",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ExtWrenchesAndJointTorquesEstimator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExtWrenchesAndJointTorquesEstimator_estimateLinkNetWrenchesWithoutGravity" "', argument " "1"" of type '" "iDynTree::ExtWrenchesAndJointTorquesEstimator *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ExtWrenchesAndJointTorquesEstimator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__LinkWrenches,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ExtWrenchesAndJointTorquesEstimator_estimateLinkNetWrenchesWithoutGravity" "', argument " "2"" of type '" "iDynTree::LinkNetTotalWrenchesWithoutGravity &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ExtWrenchesAndJointTorquesEstimator_estimateLinkNetWrenchesWithoutGravity" "', argument " "2"" of type '" "iDynTree::LinkNetTotalWrenchesWithoutGravity &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::LinkNetTotalWrenchesWithoutGravity * >(argp2);
  result = (bool)(arg1)->estimateLinkNetWrenchesWithoutGravity(*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SimpleLeggedOdometry(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::SimpleLeggedOdometry *result = 0 ;
  
  if (!SWIG_check_num_args("new_SimpleLeggedOdometry",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::SimpleLeggedOdometry *)new iDynTree::SimpleLeggedOdometry();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SimpleLeggedOdometry, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_SimpleLeggedOdometry(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SimpleLeggedOdometry *arg1 = (iDynTree::SimpleLeggedOdometry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_SimpleLeggedOdometry",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SimpleLeggedOdometry, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SimpleLeggedOdometry" "', argument " "1"" of type '" "iDynTree::SimpleLeggedOdometry *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SimpleLeggedOdometry * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SimpleLeggedOdometry_setModel(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SimpleLeggedOdometry *arg1 = (iDynTree::SimpleLeggedOdometry *) 0 ;
  iDynTree::Model *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("SimpleLeggedOdometry_setModel",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SimpleLeggedOdometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimpleLeggedOdometry_setModel" "', argument " "1"" of type '" "iDynTree::SimpleLeggedOdometry *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SimpleLeggedOdometry * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimpleLeggedOdometry_setModel" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimpleLeggedOdometry_setModel" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Model * >(argp2);
  result = (bool)(arg1)->setModel((iDynTree::Model const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SimpleLeggedOdometry_loadModelFromFile__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SimpleLeggedOdometry *arg1 = (iDynTree::SimpleLeggedOdometry *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("SimpleLeggedOdometry_loadModelFromFile",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SimpleLeggedOdometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimpleLeggedOdometry_loadModelFromFile" "', argument " "1"" of type '" "iDynTree::SimpleLeggedOdometry *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SimpleLeggedOdometry * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "SimpleLeggedOdometry_loadModelFromFile" "', argument " "2"" of type '" "std::string const""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "SimpleLeggedOdometry_loadModelFromFile" "', argument " "3"" of type '" "std::string const""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (bool)(arg1)->loadModelFromFile(arg2,arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SimpleLeggedOdometry_loadModelFromFile__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SimpleLeggedOdometry *arg1 = (iDynTree::SimpleLeggedOdometry *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("SimpleLeggedOdometry_loadModelFromFile",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SimpleLeggedOdometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimpleLeggedOdometry_loadModelFromFile" "', argument " "1"" of type '" "iDynTree::SimpleLeggedOdometry *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SimpleLeggedOdometry * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "SimpleLeggedOdometry_loadModelFromFile" "', argument " "2"" of type '" "std::string const""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (bool)(arg1)->loadModelFromFile(arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SimpleLeggedOdometry_loadModelFromFile(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SimpleLeggedOdometry, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimpleLeggedOdometry_loadModelFromFile__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SimpleLeggedOdometry, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_SimpleLeggedOdometry_loadModelFromFile__SWIG_0(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'SimpleLeggedOdometry_loadModelFromFile'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::SimpleLeggedOdometry::loadModelFromFile(std::string const,std::string const)\n"
    "    iDynTree::SimpleLeggedOdometry::loadModelFromFile(std::string const)\n");
  return 1;
}


int _wrap_SimpleLeggedOdometry_loadModelFromFileWithSpecifiedDOFs__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SimpleLeggedOdometry *arg1 = (iDynTree::SimpleLeggedOdometry *) 0 ;
  std::string arg2 ;
  std::vector< std::string,std::allocator< std::string > > *arg3 = 0 ;
  std::string arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("SimpleLeggedOdometry_loadModelFromFileWithSpecifiedDOFs",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SimpleLeggedOdometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimpleLeggedOdometry_loadModelFromFileWithSpecifiedDOFs" "', argument " "1"" of type '" "iDynTree::SimpleLeggedOdometry *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SimpleLeggedOdometry * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "SimpleLeggedOdometry_loadModelFromFileWithSpecifiedDOFs" "', argument " "2"" of type '" "std::string const""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res3 = swig::asptr(argv[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SimpleLeggedOdometry_loadModelFromFileWithSpecifiedDOFs" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimpleLeggedOdometry_loadModelFromFileWithSpecifiedDOFs" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[3], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "SimpleLeggedOdometry_loadModelFromFileWithSpecifiedDOFs" "', argument " "4"" of type '" "std::string const""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (bool)(arg1)->loadModelFromFileWithSpecifiedDOFs(arg2,(std::vector< std::string,std::allocator< std::string > > const &)*arg3,arg4);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 0;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 1;
}


int _wrap_SimpleLeggedOdometry_loadModelFromFileWithSpecifiedDOFs__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SimpleLeggedOdometry *arg1 = (iDynTree::SimpleLeggedOdometry *) 0 ;
  std::string arg2 ;
  std::vector< std::string,std::allocator< std::string > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("SimpleLeggedOdometry_loadModelFromFileWithSpecifiedDOFs",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SimpleLeggedOdometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimpleLeggedOdometry_loadModelFromFileWithSpecifiedDOFs" "', argument " "1"" of type '" "iDynTree::SimpleLeggedOdometry *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SimpleLeggedOdometry * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "SimpleLeggedOdometry_loadModelFromFileWithSpecifiedDOFs" "', argument " "2"" of type '" "std::string const""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res3 = swig::asptr(argv[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SimpleLeggedOdometry_loadModelFromFileWithSpecifiedDOFs" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimpleLeggedOdometry_loadModelFromFileWithSpecifiedDOFs" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (bool)(arg1)->loadModelFromFileWithSpecifiedDOFs(arg2,(std::vector< std::string,std::allocator< std::string > > const &)*arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 0;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 1;
}


int _wrap_SimpleLeggedOdometry_loadModelFromFileWithSpecifiedDOFs(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SimpleLeggedOdometry, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< std::string,std::allocator< std::string > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_SimpleLeggedOdometry_loadModelFromFileWithSpecifiedDOFs__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SimpleLeggedOdometry, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< std::string,std::allocator< std::string > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_SimpleLeggedOdometry_loadModelFromFileWithSpecifiedDOFs__SWIG_0(resc,resv,argc,argv);
          }
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'SimpleLeggedOdometry_loadModelFromFileWithSpecifiedDOFs'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::SimpleLeggedOdometry::loadModelFromFileWithSpecifiedDOFs(std::string const,std::vector< std::string,std::allocator< std::string > > const &,std::string const)\n"
    "    iDynTree::SimpleLeggedOdometry::loadModelFromFileWithSpecifiedDOFs(std::string const,std::vector< std::string,std::allocator< std::string > > const &)\n");
  return 1;
}


int _wrap_SimpleLeggedOdometry_model(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SimpleLeggedOdometry *arg1 = (iDynTree::SimpleLeggedOdometry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Model *result = 0 ;
  
  if (!SWIG_check_num_args("SimpleLeggedOdometry_model",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SimpleLeggedOdometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimpleLeggedOdometry_model" "', argument " "1"" of type '" "iDynTree::SimpleLeggedOdometry const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SimpleLeggedOdometry * >(argp1);
  result = (iDynTree::Model *) &((iDynTree::SimpleLeggedOdometry const *)arg1)->model();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Model, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SimpleLeggedOdometry_updateKinematics(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SimpleLeggedOdometry *arg1 = (iDynTree::SimpleLeggedOdometry *) 0 ;
  iDynTree::JointPosDoubleArray *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("SimpleLeggedOdometry_updateKinematics",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SimpleLeggedOdometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimpleLeggedOdometry_updateKinematics" "', argument " "1"" of type '" "iDynTree::SimpleLeggedOdometry *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SimpleLeggedOdometry * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__JointPosDoubleArray,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimpleLeggedOdometry_updateKinematics" "', argument " "2"" of type '" "iDynTree::JointPosDoubleArray &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimpleLeggedOdometry_updateKinematics" "', argument " "2"" of type '" "iDynTree::JointPosDoubleArray &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::JointPosDoubleArray * >(argp2);
  result = (bool)(arg1)->updateKinematics(*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SimpleLeggedOdometry_init__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SimpleLeggedOdometry *arg1 = (iDynTree::SimpleLeggedOdometry *) 0 ;
  std::string *arg2 = 0 ;
  iDynTree::Transform arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 ;
  int res3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("SimpleLeggedOdometry_init",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SimpleLeggedOdometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimpleLeggedOdometry_init" "', argument " "1"" of type '" "iDynTree::SimpleLeggedOdometry *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SimpleLeggedOdometry * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimpleLeggedOdometry_init" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimpleLeggedOdometry_init" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__Transform,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SimpleLeggedOdometry_init" "', argument " "3"" of type '" "iDynTree::Transform const""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimpleLeggedOdometry_init" "', argument " "3"" of type '" "iDynTree::Transform const""'");
    } else {
      arg3 = *(reinterpret_cast< iDynTree::Transform * >(argp3));
    }
  }
  result = (bool)(arg1)->init((std::string const &)*arg2,arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_SimpleLeggedOdometry_init__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SimpleLeggedOdometry *arg1 = (iDynTree::SimpleLeggedOdometry *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("SimpleLeggedOdometry_init",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SimpleLeggedOdometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimpleLeggedOdometry_init" "', argument " "1"" of type '" "iDynTree::SimpleLeggedOdometry *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SimpleLeggedOdometry * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimpleLeggedOdometry_init" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimpleLeggedOdometry_init" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->init((std::string const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_SimpleLeggedOdometry_init__SWIG_2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SimpleLeggedOdometry *arg1 = (iDynTree::SimpleLeggedOdometry *) 0 ;
  iDynTree::FrameIndex arg2 ;
  iDynTree::Transform arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("SimpleLeggedOdometry_init",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SimpleLeggedOdometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimpleLeggedOdometry_init" "', argument " "1"" of type '" "iDynTree::SimpleLeggedOdometry *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SimpleLeggedOdometry * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SimpleLeggedOdometry_init" "', argument " "2"" of type '" "iDynTree::FrameIndex""'");
  } 
  arg2 = static_cast< iDynTree::FrameIndex >(val2);
  {
    res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__Transform,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SimpleLeggedOdometry_init" "', argument " "3"" of type '" "iDynTree::Transform const""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimpleLeggedOdometry_init" "', argument " "3"" of type '" "iDynTree::Transform const""'");
    } else {
      arg3 = *(reinterpret_cast< iDynTree::Transform * >(argp3));
    }
  }
  result = (bool)(arg1)->init(arg2,arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SimpleLeggedOdometry_init__SWIG_3(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SimpleLeggedOdometry *arg1 = (iDynTree::SimpleLeggedOdometry *) 0 ;
  iDynTree::FrameIndex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("SimpleLeggedOdometry_init",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SimpleLeggedOdometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimpleLeggedOdometry_init" "', argument " "1"" of type '" "iDynTree::SimpleLeggedOdometry *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SimpleLeggedOdometry * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SimpleLeggedOdometry_init" "', argument " "2"" of type '" "iDynTree::FrameIndex""'");
  } 
  arg2 = static_cast< iDynTree::FrameIndex >(val2);
  result = (bool)(arg1)->init(arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SimpleLeggedOdometry_init__SWIG_4(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SimpleLeggedOdometry *arg1 = (iDynTree::SimpleLeggedOdometry *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  iDynTree::Transform arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  void *argp4 ;
  int res4 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("SimpleLeggedOdometry_init",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SimpleLeggedOdometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimpleLeggedOdometry_init" "', argument " "1"" of type '" "iDynTree::SimpleLeggedOdometry *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SimpleLeggedOdometry * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimpleLeggedOdometry_init" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimpleLeggedOdometry_init" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SimpleLeggedOdometry_init" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimpleLeggedOdometry_init" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__Transform,  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "SimpleLeggedOdometry_init" "', argument " "4"" of type '" "iDynTree::Transform const""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimpleLeggedOdometry_init" "', argument " "4"" of type '" "iDynTree::Transform const""'");
    } else {
      arg4 = *(reinterpret_cast< iDynTree::Transform * >(argp4));
    }
  }
  result = (bool)(arg1)->init((std::string const &)*arg2,(std::string const &)*arg3,arg4);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 1;
}


int _wrap_SimpleLeggedOdometry_init__SWIG_5(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SimpleLeggedOdometry *arg1 = (iDynTree::SimpleLeggedOdometry *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("SimpleLeggedOdometry_init",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SimpleLeggedOdometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimpleLeggedOdometry_init" "', argument " "1"" of type '" "iDynTree::SimpleLeggedOdometry *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SimpleLeggedOdometry * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimpleLeggedOdometry_init" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimpleLeggedOdometry_init" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SimpleLeggedOdometry_init" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimpleLeggedOdometry_init" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  result = (bool)(arg1)->init((std::string const &)*arg2,(std::string const &)*arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 1;
}


int _wrap_SimpleLeggedOdometry_init__SWIG_6(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SimpleLeggedOdometry *arg1 = (iDynTree::SimpleLeggedOdometry *) 0 ;
  iDynTree::FrameIndex arg2 ;
  iDynTree::FrameIndex arg3 ;
  iDynTree::Transform arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("SimpleLeggedOdometry_init",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SimpleLeggedOdometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimpleLeggedOdometry_init" "', argument " "1"" of type '" "iDynTree::SimpleLeggedOdometry *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SimpleLeggedOdometry * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SimpleLeggedOdometry_init" "', argument " "2"" of type '" "iDynTree::FrameIndex""'");
  } 
  arg2 = static_cast< iDynTree::FrameIndex >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SimpleLeggedOdometry_init" "', argument " "3"" of type '" "iDynTree::FrameIndex""'");
  } 
  arg3 = static_cast< iDynTree::FrameIndex >(val3);
  {
    res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__Transform,  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "SimpleLeggedOdometry_init" "', argument " "4"" of type '" "iDynTree::Transform const""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimpleLeggedOdometry_init" "', argument " "4"" of type '" "iDynTree::Transform const""'");
    } else {
      arg4 = *(reinterpret_cast< iDynTree::Transform * >(argp4));
    }
  }
  result = (bool)(arg1)->init(arg2,arg3,arg4);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SimpleLeggedOdometry_init__SWIG_7(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SimpleLeggedOdometry *arg1 = (iDynTree::SimpleLeggedOdometry *) 0 ;
  iDynTree::FrameIndex arg2 ;
  iDynTree::FrameIndex arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("SimpleLeggedOdometry_init",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SimpleLeggedOdometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimpleLeggedOdometry_init" "', argument " "1"" of type '" "iDynTree::SimpleLeggedOdometry *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SimpleLeggedOdometry * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SimpleLeggedOdometry_init" "', argument " "2"" of type '" "iDynTree::FrameIndex""'");
  } 
  arg2 = static_cast< iDynTree::FrameIndex >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SimpleLeggedOdometry_init" "', argument " "3"" of type '" "iDynTree::FrameIndex""'");
  } 
  arg3 = static_cast< iDynTree::FrameIndex >(val3);
  result = (bool)(arg1)->init(arg2,arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SimpleLeggedOdometry_init(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SimpleLeggedOdometry, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SimpleLeggedOdometry_init__SWIG_3(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SimpleLeggedOdometry, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimpleLeggedOdometry_init__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SimpleLeggedOdometry, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_iDynTree__Transform, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_SimpleLeggedOdometry_init__SWIG_2(resc,resv,argc,argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SimpleLeggedOdometry, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_SimpleLeggedOdometry_init__SWIG_7(resc,resv,argc,argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SimpleLeggedOdometry, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_iDynTree__Transform, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_SimpleLeggedOdometry_init__SWIG_0(resc,resv,argc,argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SimpleLeggedOdometry, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_SimpleLeggedOdometry_init__SWIG_5(resc,resv,argc,argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SimpleLeggedOdometry, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_iDynTree__Transform, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_SimpleLeggedOdometry_init__SWIG_6(resc,resv,argc,argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SimpleLeggedOdometry, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_iDynTree__Transform, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_SimpleLeggedOdometry_init__SWIG_4(resc,resv,argc,argv);
          }
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'SimpleLeggedOdometry_init'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::SimpleLeggedOdometry::init(std::string const &,iDynTree::Transform const)\n"
    "    iDynTree::SimpleLeggedOdometry::init(std::string const &)\n"
    "    iDynTree::SimpleLeggedOdometry::init(iDynTree::FrameIndex const,iDynTree::Transform const)\n"
    "    iDynTree::SimpleLeggedOdometry::init(iDynTree::FrameIndex const)\n"
    "    iDynTree::SimpleLeggedOdometry::init(std::string const &,std::string const &,iDynTree::Transform const)\n"
    "    iDynTree::SimpleLeggedOdometry::init(std::string const &,std::string const &)\n"
    "    iDynTree::SimpleLeggedOdometry::init(iDynTree::FrameIndex const,iDynTree::FrameIndex const,iDynTree::Transform const)\n"
    "    iDynTree::SimpleLeggedOdometry::init(iDynTree::FrameIndex const,iDynTree::FrameIndex const)\n");
  return 1;
}


int _wrap_SimpleLeggedOdometry_changeFixedFrame__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SimpleLeggedOdometry *arg1 = (iDynTree::SimpleLeggedOdometry *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("SimpleLeggedOdometry_changeFixedFrame",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SimpleLeggedOdometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimpleLeggedOdometry_changeFixedFrame" "', argument " "1"" of type '" "iDynTree::SimpleLeggedOdometry *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SimpleLeggedOdometry * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimpleLeggedOdometry_changeFixedFrame" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimpleLeggedOdometry_changeFixedFrame" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->changeFixedFrame((std::string const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_SimpleLeggedOdometry_changeFixedFrame__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SimpleLeggedOdometry *arg1 = (iDynTree::SimpleLeggedOdometry *) 0 ;
  iDynTree::FrameIndex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("SimpleLeggedOdometry_changeFixedFrame",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SimpleLeggedOdometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimpleLeggedOdometry_changeFixedFrame" "', argument " "1"" of type '" "iDynTree::SimpleLeggedOdometry *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SimpleLeggedOdometry * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SimpleLeggedOdometry_changeFixedFrame" "', argument " "2"" of type '" "iDynTree::FrameIndex""'");
  } 
  arg2 = static_cast< iDynTree::FrameIndex >(val2);
  result = (bool)(arg1)->changeFixedFrame(arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SimpleLeggedOdometry_changeFixedFrame(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SimpleLeggedOdometry, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SimpleLeggedOdometry_changeFixedFrame__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SimpleLeggedOdometry, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimpleLeggedOdometry_changeFixedFrame__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'SimpleLeggedOdometry_changeFixedFrame'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::SimpleLeggedOdometry::changeFixedFrame(std::string const &)\n"
    "    iDynTree::SimpleLeggedOdometry::changeFixedFrame(iDynTree::FrameIndex const)\n");
  return 1;
}


int _wrap_SimpleLeggedOdometry_getCurrentFixedLink(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SimpleLeggedOdometry *arg1 = (iDynTree::SimpleLeggedOdometry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("SimpleLeggedOdometry_getCurrentFixedLink",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SimpleLeggedOdometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimpleLeggedOdometry_getCurrentFixedLink" "', argument " "1"" of type '" "iDynTree::SimpleLeggedOdometry *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SimpleLeggedOdometry * >(argp1);
  result = (arg1)->getCurrentFixedLink();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SimpleLeggedOdometry_getWorldLinkTransform(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SimpleLeggedOdometry *arg1 = (iDynTree::SimpleLeggedOdometry *) 0 ;
  iDynTree::LinkIndex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::Transform result;
  
  if (!SWIG_check_num_args("SimpleLeggedOdometry_getWorldLinkTransform",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SimpleLeggedOdometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimpleLeggedOdometry_getWorldLinkTransform" "', argument " "1"" of type '" "iDynTree::SimpleLeggedOdometry *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SimpleLeggedOdometry * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SimpleLeggedOdometry_getWorldLinkTransform" "', argument " "2"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg2 = static_cast< iDynTree::LinkIndex >(val2);
  result = (arg1)->getWorldLinkTransform(arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Transform(static_cast< const iDynTree::Transform& >(result))), SWIGTYPE_p_iDynTree__Transform, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_isLinkBerdyDynamicVariable(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::BerdyDynamicVariablesTypes arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("isLinkBerdyDynamicVariable",argc,1,1,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "isLinkBerdyDynamicVariable" "', argument " "1"" of type '" "iDynTree::BerdyDynamicVariablesTypes""'");
  } 
  arg1 = static_cast< iDynTree::BerdyDynamicVariablesTypes >(val1);
  result = (bool)iDynTree::isLinkBerdyDynamicVariable(arg1);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_isJointBerdyDynamicVariable(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::BerdyDynamicVariablesTypes arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("isJointBerdyDynamicVariable",argc,1,1,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "isJointBerdyDynamicVariable" "', argument " "1"" of type '" "iDynTree::BerdyDynamicVariablesTypes""'");
  } 
  arg1 = static_cast< iDynTree::BerdyDynamicVariablesTypes >(val1);
  result = (bool)iDynTree::isJointBerdyDynamicVariable(arg1);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_isDOFBerdyDynamicVariable(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::BerdyDynamicVariablesTypes arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("isDOFBerdyDynamicVariable",argc,1,1,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "isDOFBerdyDynamicVariable" "', argument " "1"" of type '" "iDynTree::BerdyDynamicVariablesTypes""'");
  } 
  arg1 = static_cast< iDynTree::BerdyDynamicVariablesTypes >(val1);
  result = (bool)iDynTree::isDOFBerdyDynamicVariable(arg1);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_BerdyOptions(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::BerdyOptions *result = 0 ;
  
  if (!SWIG_check_num_args("new_BerdyOptions",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::BerdyOptions *)new iDynTree::BerdyOptions();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__BerdyOptions, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdyOptions_berdyVariant_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::BerdyOptions *arg1 = (iDynTree::BerdyOptions *) 0 ;
  iDynTree::BerdyVariants arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("BerdyOptions_berdyVariant_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__BerdyOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdyOptions_berdyVariant_set" "', argument " "1"" of type '" "iDynTree::BerdyOptions *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::BerdyOptions * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BerdyOptions_berdyVariant_set" "', argument " "2"" of type '" "iDynTree::BerdyVariants""'");
  } 
  arg2 = static_cast< iDynTree::BerdyVariants >(val2);
  if (arg1) (arg1)->berdyVariant = arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdyOptions_berdyVariant_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::BerdyOptions *arg1 = (iDynTree::BerdyOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::BerdyVariants result;
  
  if (!SWIG_check_num_args("BerdyOptions_berdyVariant_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__BerdyOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdyOptions_berdyVariant_get" "', argument " "1"" of type '" "iDynTree::BerdyOptions *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::BerdyOptions * >(argp1);
  result = (iDynTree::BerdyVariants) ((arg1)->berdyVariant);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdyOptions_includeAllNetExternalWrenchesAsDynamicVariables_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::BerdyOptions *arg1 = (iDynTree::BerdyOptions *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("BerdyOptions_includeAllNetExternalWrenchesAsDynamicVariables_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__BerdyOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdyOptions_includeAllNetExternalWrenchesAsDynamicVariables_set" "', argument " "1"" of type '" "iDynTree::BerdyOptions *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::BerdyOptions * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BerdyOptions_includeAllNetExternalWrenchesAsDynamicVariables_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->includeAllNetExternalWrenchesAsDynamicVariables = arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdyOptions_includeAllNetExternalWrenchesAsDynamicVariables_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::BerdyOptions *arg1 = (iDynTree::BerdyOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("BerdyOptions_includeAllNetExternalWrenchesAsDynamicVariables_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__BerdyOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdyOptions_includeAllNetExternalWrenchesAsDynamicVariables_get" "', argument " "1"" of type '" "iDynTree::BerdyOptions *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::BerdyOptions * >(argp1);
  result = (bool) ((arg1)->includeAllNetExternalWrenchesAsDynamicVariables);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdyOptions_includeAllJointAccelerationsAsSensors_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::BerdyOptions *arg1 = (iDynTree::BerdyOptions *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("BerdyOptions_includeAllJointAccelerationsAsSensors_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__BerdyOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdyOptions_includeAllJointAccelerationsAsSensors_set" "', argument " "1"" of type '" "iDynTree::BerdyOptions *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::BerdyOptions * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BerdyOptions_includeAllJointAccelerationsAsSensors_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->includeAllJointAccelerationsAsSensors = arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdyOptions_includeAllJointAccelerationsAsSensors_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::BerdyOptions *arg1 = (iDynTree::BerdyOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("BerdyOptions_includeAllJointAccelerationsAsSensors_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__BerdyOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdyOptions_includeAllJointAccelerationsAsSensors_get" "', argument " "1"" of type '" "iDynTree::BerdyOptions *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::BerdyOptions * >(argp1);
  result = (bool) ((arg1)->includeAllJointAccelerationsAsSensors);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdyOptions_includeAllJointTorquesAsSensors_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::BerdyOptions *arg1 = (iDynTree::BerdyOptions *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("BerdyOptions_includeAllJointTorquesAsSensors_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__BerdyOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdyOptions_includeAllJointTorquesAsSensors_set" "', argument " "1"" of type '" "iDynTree::BerdyOptions *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::BerdyOptions * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BerdyOptions_includeAllJointTorquesAsSensors_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->includeAllJointTorquesAsSensors = arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdyOptions_includeAllJointTorquesAsSensors_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::BerdyOptions *arg1 = (iDynTree::BerdyOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("BerdyOptions_includeAllJointTorquesAsSensors_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__BerdyOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdyOptions_includeAllJointTorquesAsSensors_get" "', argument " "1"" of type '" "iDynTree::BerdyOptions *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::BerdyOptions * >(argp1);
  result = (bool) ((arg1)->includeAllJointTorquesAsSensors);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdyOptions_includeAllNetExternalWrenchesAsSensors_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::BerdyOptions *arg1 = (iDynTree::BerdyOptions *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("BerdyOptions_includeAllNetExternalWrenchesAsSensors_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__BerdyOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdyOptions_includeAllNetExternalWrenchesAsSensors_set" "', argument " "1"" of type '" "iDynTree::BerdyOptions *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::BerdyOptions * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BerdyOptions_includeAllNetExternalWrenchesAsSensors_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->includeAllNetExternalWrenchesAsSensors = arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdyOptions_includeAllNetExternalWrenchesAsSensors_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::BerdyOptions *arg1 = (iDynTree::BerdyOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("BerdyOptions_includeAllNetExternalWrenchesAsSensors_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__BerdyOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdyOptions_includeAllNetExternalWrenchesAsSensors_get" "', argument " "1"" of type '" "iDynTree::BerdyOptions *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::BerdyOptions * >(argp1);
  result = (bool) ((arg1)->includeAllNetExternalWrenchesAsSensors);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdyOptions_includeFixedBaseExternalWrench_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::BerdyOptions *arg1 = (iDynTree::BerdyOptions *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("BerdyOptions_includeFixedBaseExternalWrench_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__BerdyOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdyOptions_includeFixedBaseExternalWrench_set" "', argument " "1"" of type '" "iDynTree::BerdyOptions *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::BerdyOptions * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BerdyOptions_includeFixedBaseExternalWrench_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->includeFixedBaseExternalWrench = arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdyOptions_includeFixedBaseExternalWrench_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::BerdyOptions *arg1 = (iDynTree::BerdyOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("BerdyOptions_includeFixedBaseExternalWrench_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__BerdyOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdyOptions_includeFixedBaseExternalWrench_get" "', argument " "1"" of type '" "iDynTree::BerdyOptions *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::BerdyOptions * >(argp1);
  result = (bool) ((arg1)->includeFixedBaseExternalWrench);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdyOptions_jointOnWhichTheInternalWrenchIsMeasured_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::BerdyOptions *arg1 = (iDynTree::BerdyOptions *) 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = (std::vector< std::string,std::allocator< std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("BerdyOptions_jointOnWhichTheInternalWrenchIsMeasured_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__BerdyOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdyOptions_jointOnWhichTheInternalWrenchIsMeasured_set" "', argument " "1"" of type '" "iDynTree::BerdyOptions *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::BerdyOptions * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BerdyOptions_jointOnWhichTheInternalWrenchIsMeasured_set" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::string,std::allocator< std::string > > * >(argp2);
  if (arg1) (arg1)->jointOnWhichTheInternalWrenchIsMeasured = *arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdyOptions_jointOnWhichTheInternalWrenchIsMeasured_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::BerdyOptions *arg1 = (iDynTree::BerdyOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< std::string,std::allocator< std::string > > *result = 0 ;
  
  if (!SWIG_check_num_args("BerdyOptions_jointOnWhichTheInternalWrenchIsMeasured_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__BerdyOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdyOptions_jointOnWhichTheInternalWrenchIsMeasured_get" "', argument " "1"" of type '" "iDynTree::BerdyOptions *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::BerdyOptions * >(argp1);
  result = (std::vector< std::string,std::allocator< std::string > > *)& ((arg1)->jointOnWhichTheInternalWrenchIsMeasured);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdyOptions_baseLink_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::BerdyOptions *arg1 = (iDynTree::BerdyOptions *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("BerdyOptions_baseLink_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__BerdyOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdyOptions_baseLink_set" "', argument " "1"" of type '" "iDynTree::BerdyOptions *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::BerdyOptions * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BerdyOptions_baseLink_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BerdyOptions_baseLink_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->baseLink = *arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_BerdyOptions_baseLink_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::BerdyOptions *arg1 = (iDynTree::BerdyOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string *result = 0 ;
  
  if (!SWIG_check_num_args("BerdyOptions_baseLink_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__BerdyOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdyOptions_baseLink_get" "', argument " "1"" of type '" "iDynTree::BerdyOptions *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::BerdyOptions * >(argp1);
  result = (std::string *) & ((arg1)->baseLink);
  _out = SWIG_From_std_string(static_cast< std::string >(*result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdyOptions_checkConsistency(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::BerdyOptions *arg1 = (iDynTree::BerdyOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("BerdyOptions_checkConsistency",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__BerdyOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdyOptions_checkConsistency" "', argument " "1"" of type '" "iDynTree::BerdyOptions *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::BerdyOptions * >(argp1);
  result = (bool)(arg1)->checkConsistency();
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_BerdyOptions(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::BerdyOptions *arg1 = (iDynTree::BerdyOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_BerdyOptions",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__BerdyOptions, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BerdyOptions" "', argument " "1"" of type '" "iDynTree::BerdyOptions *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::BerdyOptions * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdySensor_type_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::BerdySensor *arg1 = (iDynTree::BerdySensor *) 0 ;
  iDynTree::BerdySensorTypes arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("BerdySensor_type_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__BerdySensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdySensor_type_set" "', argument " "1"" of type '" "iDynTree::BerdySensor *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::BerdySensor * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BerdySensor_type_set" "', argument " "2"" of type '" "iDynTree::BerdySensorTypes""'");
  } 
  arg2 = static_cast< iDynTree::BerdySensorTypes >(val2);
  if (arg1) (arg1)->type = arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdySensor_type_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::BerdySensor *arg1 = (iDynTree::BerdySensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::BerdySensorTypes result;
  
  if (!SWIG_check_num_args("BerdySensor_type_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__BerdySensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdySensor_type_get" "', argument " "1"" of type '" "iDynTree::BerdySensor *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::BerdySensor * >(argp1);
  result = (iDynTree::BerdySensorTypes) ((arg1)->type);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdySensor_id_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::BerdySensor *arg1 = (iDynTree::BerdySensor *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("BerdySensor_id_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__BerdySensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdySensor_id_set" "', argument " "1"" of type '" "iDynTree::BerdySensor *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::BerdySensor * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BerdySensor_id_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BerdySensor_id_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->id = *arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_BerdySensor_id_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::BerdySensor *arg1 = (iDynTree::BerdySensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string *result = 0 ;
  
  if (!SWIG_check_num_args("BerdySensor_id_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__BerdySensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdySensor_id_get" "', argument " "1"" of type '" "iDynTree::BerdySensor *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::BerdySensor * >(argp1);
  result = (std::string *) & ((arg1)->id);
  _out = SWIG_From_std_string(static_cast< std::string >(*result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdySensor_range_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::BerdySensor *arg1 = (iDynTree::BerdySensor *) 0 ;
  iDynTree::IndexRange *arg2 = (iDynTree::IndexRange *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("BerdySensor_range_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__BerdySensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdySensor_range_set" "', argument " "1"" of type '" "iDynTree::BerdySensor *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::BerdySensor * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_iDynTree__IndexRange, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BerdySensor_range_set" "', argument " "2"" of type '" "iDynTree::IndexRange *""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::IndexRange * >(argp2);
  if (arg1) (arg1)->range = *arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdySensor_range_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::BerdySensor *arg1 = (iDynTree::BerdySensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::IndexRange *result = 0 ;
  
  if (!SWIG_check_num_args("BerdySensor_range_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__BerdySensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdySensor_range_get" "', argument " "1"" of type '" "iDynTree::BerdySensor *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::BerdySensor * >(argp1);
  result = (iDynTree::IndexRange *)& ((arg1)->range);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__IndexRange, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdySensor_eq(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::BerdySensor *arg1 = (iDynTree::BerdySensor *) 0 ;
  iDynTree::BerdySensor *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("BerdySensor_eq",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__BerdySensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdySensor_eq" "', argument " "1"" of type '" "iDynTree::BerdySensor const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::BerdySensor * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__BerdySensor,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BerdySensor_eq" "', argument " "2"" of type '" "iDynTree::BerdySensor const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BerdySensor_eq" "', argument " "2"" of type '" "iDynTree::BerdySensor const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::BerdySensor * >(argp2);
  result = (bool)((iDynTree::BerdySensor const *)arg1)->operator ==((iDynTree::BerdySensor const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdySensor_lt(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::BerdySensor *arg1 = (iDynTree::BerdySensor *) 0 ;
  iDynTree::BerdySensor *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("BerdySensor_lt",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__BerdySensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdySensor_lt" "', argument " "1"" of type '" "iDynTree::BerdySensor const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::BerdySensor * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__BerdySensor,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BerdySensor_lt" "', argument " "2"" of type '" "iDynTree::BerdySensor const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BerdySensor_lt" "', argument " "2"" of type '" "iDynTree::BerdySensor const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::BerdySensor * >(argp2);
  result = (bool)((iDynTree::BerdySensor const *)arg1)->operator <((iDynTree::BerdySensor const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_BerdySensor(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::BerdySensor *result = 0 ;
  
  if (!SWIG_check_num_args("new_BerdySensor",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::BerdySensor *)new iDynTree::BerdySensor();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__BerdySensor, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_BerdySensor(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::BerdySensor *arg1 = (iDynTree::BerdySensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_BerdySensor",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__BerdySensor, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BerdySensor" "', argument " "1"" of type '" "iDynTree::BerdySensor *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::BerdySensor * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdyDynamicVariable_type_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::BerdyDynamicVariable *arg1 = (iDynTree::BerdyDynamicVariable *) 0 ;
  iDynTree::BerdyDynamicVariablesTypes arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("BerdyDynamicVariable_type_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__BerdyDynamicVariable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdyDynamicVariable_type_set" "', argument " "1"" of type '" "iDynTree::BerdyDynamicVariable *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::BerdyDynamicVariable * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BerdyDynamicVariable_type_set" "', argument " "2"" of type '" "iDynTree::BerdyDynamicVariablesTypes""'");
  } 
  arg2 = static_cast< iDynTree::BerdyDynamicVariablesTypes >(val2);
  if (arg1) (arg1)->type = arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdyDynamicVariable_type_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::BerdyDynamicVariable *arg1 = (iDynTree::BerdyDynamicVariable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::BerdyDynamicVariablesTypes result;
  
  if (!SWIG_check_num_args("BerdyDynamicVariable_type_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__BerdyDynamicVariable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdyDynamicVariable_type_get" "', argument " "1"" of type '" "iDynTree::BerdyDynamicVariable *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::BerdyDynamicVariable * >(argp1);
  result = (iDynTree::BerdyDynamicVariablesTypes) ((arg1)->type);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdyDynamicVariable_id_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::BerdyDynamicVariable *arg1 = (iDynTree::BerdyDynamicVariable *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("BerdyDynamicVariable_id_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__BerdyDynamicVariable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdyDynamicVariable_id_set" "', argument " "1"" of type '" "iDynTree::BerdyDynamicVariable *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::BerdyDynamicVariable * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BerdyDynamicVariable_id_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BerdyDynamicVariable_id_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->id = *arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_BerdyDynamicVariable_id_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::BerdyDynamicVariable *arg1 = (iDynTree::BerdyDynamicVariable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string *result = 0 ;
  
  if (!SWIG_check_num_args("BerdyDynamicVariable_id_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__BerdyDynamicVariable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdyDynamicVariable_id_get" "', argument " "1"" of type '" "iDynTree::BerdyDynamicVariable *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::BerdyDynamicVariable * >(argp1);
  result = (std::string *) & ((arg1)->id);
  _out = SWIG_From_std_string(static_cast< std::string >(*result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdyDynamicVariable_range_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::BerdyDynamicVariable *arg1 = (iDynTree::BerdyDynamicVariable *) 0 ;
  iDynTree::IndexRange *arg2 = (iDynTree::IndexRange *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("BerdyDynamicVariable_range_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__BerdyDynamicVariable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdyDynamicVariable_range_set" "', argument " "1"" of type '" "iDynTree::BerdyDynamicVariable *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::BerdyDynamicVariable * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_iDynTree__IndexRange, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BerdyDynamicVariable_range_set" "', argument " "2"" of type '" "iDynTree::IndexRange *""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::IndexRange * >(argp2);
  if (arg1) (arg1)->range = *arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdyDynamicVariable_range_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::BerdyDynamicVariable *arg1 = (iDynTree::BerdyDynamicVariable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::IndexRange *result = 0 ;
  
  if (!SWIG_check_num_args("BerdyDynamicVariable_range_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__BerdyDynamicVariable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdyDynamicVariable_range_get" "', argument " "1"" of type '" "iDynTree::BerdyDynamicVariable *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::BerdyDynamicVariable * >(argp1);
  result = (iDynTree::IndexRange *)& ((arg1)->range);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__IndexRange, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdyDynamicVariable_eq(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::BerdyDynamicVariable *arg1 = (iDynTree::BerdyDynamicVariable *) 0 ;
  iDynTree::BerdyDynamicVariable *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("BerdyDynamicVariable_eq",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__BerdyDynamicVariable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdyDynamicVariable_eq" "', argument " "1"" of type '" "iDynTree::BerdyDynamicVariable const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::BerdyDynamicVariable * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__BerdyDynamicVariable,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BerdyDynamicVariable_eq" "', argument " "2"" of type '" "iDynTree::BerdyDynamicVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BerdyDynamicVariable_eq" "', argument " "2"" of type '" "iDynTree::BerdyDynamicVariable const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::BerdyDynamicVariable * >(argp2);
  result = (bool)((iDynTree::BerdyDynamicVariable const *)arg1)->operator ==((iDynTree::BerdyDynamicVariable const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdyDynamicVariable_lt(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::BerdyDynamicVariable *arg1 = (iDynTree::BerdyDynamicVariable *) 0 ;
  iDynTree::BerdyDynamicVariable *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("BerdyDynamicVariable_lt",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__BerdyDynamicVariable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdyDynamicVariable_lt" "', argument " "1"" of type '" "iDynTree::BerdyDynamicVariable const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::BerdyDynamicVariable * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__BerdyDynamicVariable,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BerdyDynamicVariable_lt" "', argument " "2"" of type '" "iDynTree::BerdyDynamicVariable const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BerdyDynamicVariable_lt" "', argument " "2"" of type '" "iDynTree::BerdyDynamicVariable const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::BerdyDynamicVariable * >(argp2);
  result = (bool)((iDynTree::BerdyDynamicVariable const *)arg1)->operator <((iDynTree::BerdyDynamicVariable const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_BerdyDynamicVariable(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::BerdyDynamicVariable *result = 0 ;
  
  if (!SWIG_check_num_args("new_BerdyDynamicVariable",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::BerdyDynamicVariable *)new iDynTree::BerdyDynamicVariable();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__BerdyDynamicVariable, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_BerdyDynamicVariable(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::BerdyDynamicVariable *arg1 = (iDynTree::BerdyDynamicVariable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_BerdyDynamicVariable",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__BerdyDynamicVariable, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BerdyDynamicVariable" "', argument " "1"" of type '" "iDynTree::BerdyDynamicVariable *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::BerdyDynamicVariable * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_BerdyHelper(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::BerdyHelper *result = 0 ;
  
  if (!SWIG_check_num_args("new_BerdyHelper",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::BerdyHelper *)new iDynTree::BerdyHelper();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__BerdyHelper, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdyHelper_model__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::BerdyHelper *arg1 = (iDynTree::BerdyHelper *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Model *result = 0 ;
  
  if (!SWIG_check_num_args("BerdyHelper_model",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__BerdyHelper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdyHelper_model" "', argument " "1"" of type '" "iDynTree::BerdyHelper *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::BerdyHelper * >(argp1);
  result = (iDynTree::Model *) &(arg1)->model();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Model, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdyHelper_sensors__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::BerdyHelper *arg1 = (iDynTree::BerdyHelper *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::SensorsList *result = 0 ;
  
  if (!SWIG_check_num_args("BerdyHelper_sensors",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__BerdyHelper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdyHelper_sensors" "', argument " "1"" of type '" "iDynTree::BerdyHelper *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::BerdyHelper * >(argp1);
  result = (iDynTree::SensorsList *) &(arg1)->sensors();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SensorsList, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdyHelper_dynamicTraversal(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::BerdyHelper *arg1 = (iDynTree::BerdyHelper *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Traversal *result = 0 ;
  
  if (!SWIG_check_num_args("BerdyHelper_dynamicTraversal",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__BerdyHelper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdyHelper_dynamicTraversal" "', argument " "1"" of type '" "iDynTree::BerdyHelper *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::BerdyHelper * >(argp1);
  result = (iDynTree::Traversal *) &(arg1)->dynamicTraversal();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Traversal, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdyHelper_model__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::BerdyHelper *arg1 = (iDynTree::BerdyHelper *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Model *result = 0 ;
  
  if (!SWIG_check_num_args("BerdyHelper_model",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__BerdyHelper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdyHelper_model" "', argument " "1"" of type '" "iDynTree::BerdyHelper const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::BerdyHelper * >(argp1);
  result = (iDynTree::Model *) &((iDynTree::BerdyHelper const *)arg1)->model();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Model, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdyHelper_model(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__BerdyHelper, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_BerdyHelper_model__SWIG_0(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__BerdyHelper, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_BerdyHelper_model__SWIG_1(resc,resv,argc,argv);
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'BerdyHelper_model'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::BerdyHelper::model()\n"
    "    iDynTree::BerdyHelper::model() const\n");
  return 1;
}


int _wrap_BerdyHelper_sensors__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::BerdyHelper *arg1 = (iDynTree::BerdyHelper *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::SensorsList *result = 0 ;
  
  if (!SWIG_check_num_args("BerdyHelper_sensors",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__BerdyHelper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdyHelper_sensors" "', argument " "1"" of type '" "iDynTree::BerdyHelper const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::BerdyHelper * >(argp1);
  result = (iDynTree::SensorsList *) &((iDynTree::BerdyHelper const *)arg1)->sensors();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SensorsList, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdyHelper_sensors(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__BerdyHelper, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_BerdyHelper_sensors__SWIG_0(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__BerdyHelper, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_BerdyHelper_sensors__SWIG_1(resc,resv,argc,argv);
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'BerdyHelper_sensors'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::BerdyHelper::sensors()\n"
    "    iDynTree::BerdyHelper::sensors() const\n");
  return 1;
}


int _wrap_BerdyHelper_init__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::BerdyHelper *arg1 = (iDynTree::BerdyHelper *) 0 ;
  iDynTree::Model *arg2 = 0 ;
  iDynTree::SensorsList *arg3 = 0 ;
  iDynTree::BerdyOptions arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("BerdyHelper_init",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__BerdyHelper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdyHelper_init" "', argument " "1"" of type '" "iDynTree::BerdyHelper *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::BerdyHelper * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BerdyHelper_init" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BerdyHelper_init" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Model * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__SensorsList,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BerdyHelper_init" "', argument " "3"" of type '" "iDynTree::SensorsList const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BerdyHelper_init" "', argument " "3"" of type '" "iDynTree::SensorsList const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::SensorsList * >(argp3);
  {
    res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__BerdyOptions,  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "BerdyHelper_init" "', argument " "4"" of type '" "iDynTree::BerdyOptions const""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BerdyHelper_init" "', argument " "4"" of type '" "iDynTree::BerdyOptions const""'");
    } else {
      arg4 = *(reinterpret_cast< iDynTree::BerdyOptions * >(argp4));
    }
  }
  result = (bool)(arg1)->init((iDynTree::Model const &)*arg2,(iDynTree::SensorsList const &)*arg3,arg4);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdyHelper_init__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::BerdyHelper *arg1 = (iDynTree::BerdyHelper *) 0 ;
  iDynTree::Model *arg2 = 0 ;
  iDynTree::SensorsList *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("BerdyHelper_init",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__BerdyHelper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdyHelper_init" "', argument " "1"" of type '" "iDynTree::BerdyHelper *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::BerdyHelper * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BerdyHelper_init" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BerdyHelper_init" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Model * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__SensorsList,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BerdyHelper_init" "', argument " "3"" of type '" "iDynTree::SensorsList const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BerdyHelper_init" "', argument " "3"" of type '" "iDynTree::SensorsList const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::SensorsList * >(argp3);
  result = (bool)(arg1)->init((iDynTree::Model const &)*arg2,(iDynTree::SensorsList const &)*arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdyHelper_init(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__BerdyHelper, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Model, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_iDynTree__SensorsList, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_BerdyHelper_init__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__BerdyHelper, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Model, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_iDynTree__SensorsList, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_iDynTree__BerdyOptions, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_BerdyHelper_init__SWIG_0(resc,resv,argc,argv);
          }
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'BerdyHelper_init'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::BerdyHelper::init(iDynTree::Model const &,iDynTree::SensorsList const &,iDynTree::BerdyOptions const)\n"
    "    iDynTree::BerdyHelper::init(iDynTree::Model const &,iDynTree::SensorsList const &)\n");
  return 1;
}


int _wrap_BerdyHelper_getOptions(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::BerdyHelper *arg1 = (iDynTree::BerdyHelper *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::BerdyOptions result;
  
  if (!SWIG_check_num_args("BerdyHelper_getOptions",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__BerdyHelper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdyHelper_getOptions" "', argument " "1"" of type '" "iDynTree::BerdyHelper const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::BerdyHelper * >(argp1);
  result = ((iDynTree::BerdyHelper const *)arg1)->getOptions();
  _out = SWIG_NewPointerObj((new iDynTree::BerdyOptions(static_cast< const iDynTree::BerdyOptions& >(result))), SWIGTYPE_p_iDynTree__BerdyOptions, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdyHelper_getNrOfDynamicVariables(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::BerdyHelper *arg1 = (iDynTree::BerdyHelper *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  size_t result;
  
  if (!SWIG_check_num_args("BerdyHelper_getNrOfDynamicVariables",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__BerdyHelper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdyHelper_getNrOfDynamicVariables" "', argument " "1"" of type '" "iDynTree::BerdyHelper const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::BerdyHelper * >(argp1);
  result = ((iDynTree::BerdyHelper const *)arg1)->getNrOfDynamicVariables();
  _out = SWIG_From_size_t(static_cast< size_t >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdyHelper_getNrOfDynamicEquations(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::BerdyHelper *arg1 = (iDynTree::BerdyHelper *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  size_t result;
  
  if (!SWIG_check_num_args("BerdyHelper_getNrOfDynamicEquations",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__BerdyHelper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdyHelper_getNrOfDynamicEquations" "', argument " "1"" of type '" "iDynTree::BerdyHelper const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::BerdyHelper * >(argp1);
  result = ((iDynTree::BerdyHelper const *)arg1)->getNrOfDynamicEquations();
  _out = SWIG_From_size_t(static_cast< size_t >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdyHelper_getNrOfSensorsMeasurements(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::BerdyHelper *arg1 = (iDynTree::BerdyHelper *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  size_t result;
  
  if (!SWIG_check_num_args("BerdyHelper_getNrOfSensorsMeasurements",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__BerdyHelper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdyHelper_getNrOfSensorsMeasurements" "', argument " "1"" of type '" "iDynTree::BerdyHelper const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::BerdyHelper * >(argp1);
  result = ((iDynTree::BerdyHelper const *)arg1)->getNrOfSensorsMeasurements();
  _out = SWIG_From_size_t(static_cast< size_t >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdyHelper_resizeAndZeroBerdyMatrices__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::BerdyHelper *arg1 = (iDynTree::BerdyHelper *) 0 ;
  iDynTree::SparseMatrix *arg2 = 0 ;
  iDynTree::VectorDynSize *arg3 = 0 ;
  iDynTree::SparseMatrix *arg4 = 0 ;
  iDynTree::VectorDynSize *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("BerdyHelper_resizeAndZeroBerdyMatrices",argc,5,5,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__BerdyHelper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdyHelper_resizeAndZeroBerdyMatrices" "', argument " "1"" of type '" "iDynTree::BerdyHelper *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::BerdyHelper * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SparseMatrix,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BerdyHelper_resizeAndZeroBerdyMatrices" "', argument " "2"" of type '" "iDynTree::SparseMatrix &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BerdyHelper_resizeAndZeroBerdyMatrices" "', argument " "2"" of type '" "iDynTree::SparseMatrix &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SparseMatrix * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BerdyHelper_resizeAndZeroBerdyMatrices" "', argument " "3"" of type '" "iDynTree::VectorDynSize &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BerdyHelper_resizeAndZeroBerdyMatrices" "', argument " "3"" of type '" "iDynTree::VectorDynSize &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::VectorDynSize * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__SparseMatrix,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "BerdyHelper_resizeAndZeroBerdyMatrices" "', argument " "4"" of type '" "iDynTree::SparseMatrix &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BerdyHelper_resizeAndZeroBerdyMatrices" "', argument " "4"" of type '" "iDynTree::SparseMatrix &""'"); 
  }
  arg4 = reinterpret_cast< iDynTree::SparseMatrix * >(argp4);
  res5 = SWIG_ConvertPtr(argv[4], &argp5, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "BerdyHelper_resizeAndZeroBerdyMatrices" "', argument " "5"" of type '" "iDynTree::VectorDynSize &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BerdyHelper_resizeAndZeroBerdyMatrices" "', argument " "5"" of type '" "iDynTree::VectorDynSize &""'"); 
  }
  arg5 = reinterpret_cast< iDynTree::VectorDynSize * >(argp5);
  result = (bool)(arg1)->resizeAndZeroBerdyMatrices(*arg2,*arg3,*arg4,*arg5);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdyHelper_resizeAndZeroBerdyMatrices__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::BerdyHelper *arg1 = (iDynTree::BerdyHelper *) 0 ;
  iDynTree::MatrixDynSize *arg2 = 0 ;
  iDynTree::VectorDynSize *arg3 = 0 ;
  iDynTree::MatrixDynSize *arg4 = 0 ;
  iDynTree::VectorDynSize *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("BerdyHelper_resizeAndZeroBerdyMatrices",argc,5,5,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__BerdyHelper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdyHelper_resizeAndZeroBerdyMatrices" "', argument " "1"" of type '" "iDynTree::BerdyHelper *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::BerdyHelper * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__MatrixDynSize,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BerdyHelper_resizeAndZeroBerdyMatrices" "', argument " "2"" of type '" "iDynTree::MatrixDynSize &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BerdyHelper_resizeAndZeroBerdyMatrices" "', argument " "2"" of type '" "iDynTree::MatrixDynSize &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::MatrixDynSize * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BerdyHelper_resizeAndZeroBerdyMatrices" "', argument " "3"" of type '" "iDynTree::VectorDynSize &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BerdyHelper_resizeAndZeroBerdyMatrices" "', argument " "3"" of type '" "iDynTree::VectorDynSize &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::VectorDynSize * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__MatrixDynSize,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "BerdyHelper_resizeAndZeroBerdyMatrices" "', argument " "4"" of type '" "iDynTree::MatrixDynSize &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BerdyHelper_resizeAndZeroBerdyMatrices" "', argument " "4"" of type '" "iDynTree::MatrixDynSize &""'"); 
  }
  arg4 = reinterpret_cast< iDynTree::MatrixDynSize * >(argp4);
  res5 = SWIG_ConvertPtr(argv[4], &argp5, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "BerdyHelper_resizeAndZeroBerdyMatrices" "', argument " "5"" of type '" "iDynTree::VectorDynSize &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BerdyHelper_resizeAndZeroBerdyMatrices" "', argument " "5"" of type '" "iDynTree::VectorDynSize &""'"); 
  }
  arg5 = reinterpret_cast< iDynTree::VectorDynSize * >(argp5);
  result = (bool)(arg1)->resizeAndZeroBerdyMatrices(*arg2,*arg3,*arg4,*arg5);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdyHelper_resizeAndZeroBerdyMatrices(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__BerdyHelper, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__SparseMatrix, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_iDynTree__VectorDynSize, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_iDynTree__SparseMatrix, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_iDynTree__VectorDynSize, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_BerdyHelper_resizeAndZeroBerdyMatrices__SWIG_0(resc,resv,argc,argv);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__BerdyHelper, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__MatrixDynSize, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_iDynTree__VectorDynSize, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_iDynTree__MatrixDynSize, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_iDynTree__VectorDynSize, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_BerdyHelper_resizeAndZeroBerdyMatrices__SWIG_1(resc,resv,argc,argv);
            }
          }
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'BerdyHelper_resizeAndZeroBerdyMatrices'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::BerdyHelper::resizeAndZeroBerdyMatrices(iDynTree::SparseMatrix &,iDynTree::VectorDynSize &,iDynTree::SparseMatrix &,iDynTree::VectorDynSize &)\n"
    "    iDynTree::BerdyHelper::resizeAndZeroBerdyMatrices(iDynTree::MatrixDynSize &,iDynTree::VectorDynSize &,iDynTree::MatrixDynSize &,iDynTree::VectorDynSize &)\n");
  return 1;
}


int _wrap_BerdyHelper_getBerdyMatrices__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::BerdyHelper *arg1 = (iDynTree::BerdyHelper *) 0 ;
  iDynTree::SparseMatrix *arg2 = 0 ;
  iDynTree::VectorDynSize *arg3 = 0 ;
  iDynTree::SparseMatrix *arg4 = 0 ;
  iDynTree::VectorDynSize *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("BerdyHelper_getBerdyMatrices",argc,5,5,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__BerdyHelper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdyHelper_getBerdyMatrices" "', argument " "1"" of type '" "iDynTree::BerdyHelper *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::BerdyHelper * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SparseMatrix,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BerdyHelper_getBerdyMatrices" "', argument " "2"" of type '" "iDynTree::SparseMatrix &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BerdyHelper_getBerdyMatrices" "', argument " "2"" of type '" "iDynTree::SparseMatrix &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SparseMatrix * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BerdyHelper_getBerdyMatrices" "', argument " "3"" of type '" "iDynTree::VectorDynSize &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BerdyHelper_getBerdyMatrices" "', argument " "3"" of type '" "iDynTree::VectorDynSize &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::VectorDynSize * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__SparseMatrix,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "BerdyHelper_getBerdyMatrices" "', argument " "4"" of type '" "iDynTree::SparseMatrix &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BerdyHelper_getBerdyMatrices" "', argument " "4"" of type '" "iDynTree::SparseMatrix &""'"); 
  }
  arg4 = reinterpret_cast< iDynTree::SparseMatrix * >(argp4);
  res5 = SWIG_ConvertPtr(argv[4], &argp5, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "BerdyHelper_getBerdyMatrices" "', argument " "5"" of type '" "iDynTree::VectorDynSize &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BerdyHelper_getBerdyMatrices" "', argument " "5"" of type '" "iDynTree::VectorDynSize &""'"); 
  }
  arg5 = reinterpret_cast< iDynTree::VectorDynSize * >(argp5);
  result = (bool)(arg1)->getBerdyMatrices(*arg2,*arg3,*arg4,*arg5);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdyHelper_getBerdyMatrices__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::BerdyHelper *arg1 = (iDynTree::BerdyHelper *) 0 ;
  iDynTree::MatrixDynSize *arg2 = 0 ;
  iDynTree::VectorDynSize *arg3 = 0 ;
  iDynTree::MatrixDynSize *arg4 = 0 ;
  iDynTree::VectorDynSize *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("BerdyHelper_getBerdyMatrices",argc,5,5,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__BerdyHelper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdyHelper_getBerdyMatrices" "', argument " "1"" of type '" "iDynTree::BerdyHelper *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::BerdyHelper * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__MatrixDynSize,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BerdyHelper_getBerdyMatrices" "', argument " "2"" of type '" "iDynTree::MatrixDynSize &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BerdyHelper_getBerdyMatrices" "', argument " "2"" of type '" "iDynTree::MatrixDynSize &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::MatrixDynSize * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BerdyHelper_getBerdyMatrices" "', argument " "3"" of type '" "iDynTree::VectorDynSize &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BerdyHelper_getBerdyMatrices" "', argument " "3"" of type '" "iDynTree::VectorDynSize &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::VectorDynSize * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__MatrixDynSize,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "BerdyHelper_getBerdyMatrices" "', argument " "4"" of type '" "iDynTree::MatrixDynSize &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BerdyHelper_getBerdyMatrices" "', argument " "4"" of type '" "iDynTree::MatrixDynSize &""'"); 
  }
  arg4 = reinterpret_cast< iDynTree::MatrixDynSize * >(argp4);
  res5 = SWIG_ConvertPtr(argv[4], &argp5, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "BerdyHelper_getBerdyMatrices" "', argument " "5"" of type '" "iDynTree::VectorDynSize &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BerdyHelper_getBerdyMatrices" "', argument " "5"" of type '" "iDynTree::VectorDynSize &""'"); 
  }
  arg5 = reinterpret_cast< iDynTree::VectorDynSize * >(argp5);
  result = (bool)(arg1)->getBerdyMatrices(*arg2,*arg3,*arg4,*arg5);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdyHelper_getBerdyMatrices(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__BerdyHelper, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__SparseMatrix, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_iDynTree__VectorDynSize, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_iDynTree__SparseMatrix, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_iDynTree__VectorDynSize, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_BerdyHelper_getBerdyMatrices__SWIG_0(resc,resv,argc,argv);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__BerdyHelper, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__MatrixDynSize, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_iDynTree__VectorDynSize, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_iDynTree__MatrixDynSize, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_iDynTree__VectorDynSize, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_BerdyHelper_getBerdyMatrices__SWIG_1(resc,resv,argc,argv);
            }
          }
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'BerdyHelper_getBerdyMatrices'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::BerdyHelper::getBerdyMatrices(iDynTree::SparseMatrix &,iDynTree::VectorDynSize &,iDynTree::SparseMatrix &,iDynTree::VectorDynSize &)\n"
    "    iDynTree::BerdyHelper::getBerdyMatrices(iDynTree::MatrixDynSize &,iDynTree::VectorDynSize &,iDynTree::MatrixDynSize &,iDynTree::VectorDynSize &)\n");
  return 1;
}


int _wrap_BerdyHelper_getSensorsOrdering(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::BerdyHelper *arg1 = (iDynTree::BerdyHelper *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< iDynTree::BerdySensor,std::allocator< iDynTree::BerdySensor > > *result = 0 ;
  
  if (!SWIG_check_num_args("BerdyHelper_getSensorsOrdering",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__BerdyHelper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdyHelper_getSensorsOrdering" "', argument " "1"" of type '" "iDynTree::BerdyHelper const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::BerdyHelper * >(argp1);
  result = (std::vector< iDynTree::BerdySensor,std::allocator< iDynTree::BerdySensor > > *) &((iDynTree::BerdyHelper const *)arg1)->getSensorsOrdering();
  _out = swig::from(static_cast< std::vector< iDynTree::BerdySensor,std::allocator< iDynTree::BerdySensor > > >(*result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdyHelper_getDynamicVariablesOrdering(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::BerdyHelper *arg1 = (iDynTree::BerdyHelper *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< iDynTree::BerdyDynamicVariable,std::allocator< iDynTree::BerdyDynamicVariable > > *result = 0 ;
  
  if (!SWIG_check_num_args("BerdyHelper_getDynamicVariablesOrdering",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__BerdyHelper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdyHelper_getDynamicVariablesOrdering" "', argument " "1"" of type '" "iDynTree::BerdyHelper const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::BerdyHelper * >(argp1);
  result = (std::vector< iDynTree::BerdyDynamicVariable,std::allocator< iDynTree::BerdyDynamicVariable > > *) &((iDynTree::BerdyHelper const *)arg1)->getDynamicVariablesOrdering();
  _out = swig::from(static_cast< std::vector< iDynTree::BerdyDynamicVariable,std::allocator< iDynTree::BerdyDynamicVariable > > >(*result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdyHelper_serializeDynamicVariables(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::BerdyHelper *arg1 = (iDynTree::BerdyHelper *) 0 ;
  iDynTree::LinkProperAccArray *arg2 = 0 ;
  iDynTree::LinkNetTotalWrenchesWithoutGravity *arg3 = 0 ;
  iDynTree::LinkNetExternalWrenches *arg4 = 0 ;
  iDynTree::LinkInternalWrenches *arg5 = 0 ;
  iDynTree::JointDOFsDoubleArray *arg6 = 0 ;
  iDynTree::JointDOFsDoubleArray *arg7 = 0 ;
  iDynTree::VectorDynSize *arg8 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("BerdyHelper_serializeDynamicVariables",argc,8,8,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__BerdyHelper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdyHelper_serializeDynamicVariables" "', argument " "1"" of type '" "iDynTree::BerdyHelper *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::BerdyHelper * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__LinkAccArray,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BerdyHelper_serializeDynamicVariables" "', argument " "2"" of type '" "iDynTree::LinkProperAccArray &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BerdyHelper_serializeDynamicVariables" "', argument " "2"" of type '" "iDynTree::LinkProperAccArray &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::LinkProperAccArray * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__LinkWrenches,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BerdyHelper_serializeDynamicVariables" "', argument " "3"" of type '" "iDynTree::LinkNetTotalWrenchesWithoutGravity &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BerdyHelper_serializeDynamicVariables" "', argument " "3"" of type '" "iDynTree::LinkNetTotalWrenchesWithoutGravity &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::LinkNetTotalWrenchesWithoutGravity * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__LinkWrenches,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "BerdyHelper_serializeDynamicVariables" "', argument " "4"" of type '" "iDynTree::LinkNetExternalWrenches &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BerdyHelper_serializeDynamicVariables" "', argument " "4"" of type '" "iDynTree::LinkNetExternalWrenches &""'"); 
  }
  arg4 = reinterpret_cast< iDynTree::LinkNetExternalWrenches * >(argp4);
  res5 = SWIG_ConvertPtr(argv[4], &argp5, SWIGTYPE_p_iDynTree__LinkWrenches,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "BerdyHelper_serializeDynamicVariables" "', argument " "5"" of type '" "iDynTree::LinkInternalWrenches &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BerdyHelper_serializeDynamicVariables" "', argument " "5"" of type '" "iDynTree::LinkInternalWrenches &""'"); 
  }
  arg5 = reinterpret_cast< iDynTree::LinkInternalWrenches * >(argp5);
  res6 = SWIG_ConvertPtr(argv[5], &argp6, SWIGTYPE_p_iDynTree__JointDOFsDoubleArray,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "BerdyHelper_serializeDynamicVariables" "', argument " "6"" of type '" "iDynTree::JointDOFsDoubleArray &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BerdyHelper_serializeDynamicVariables" "', argument " "6"" of type '" "iDynTree::JointDOFsDoubleArray &""'"); 
  }
  arg6 = reinterpret_cast< iDynTree::JointDOFsDoubleArray * >(argp6);
  res7 = SWIG_ConvertPtr(argv[6], &argp7, SWIGTYPE_p_iDynTree__JointDOFsDoubleArray,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "BerdyHelper_serializeDynamicVariables" "', argument " "7"" of type '" "iDynTree::JointDOFsDoubleArray &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BerdyHelper_serializeDynamicVariables" "', argument " "7"" of type '" "iDynTree::JointDOFsDoubleArray &""'"); 
  }
  arg7 = reinterpret_cast< iDynTree::JointDOFsDoubleArray * >(argp7);
  res8 = SWIG_ConvertPtr(argv[7], &argp8, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "BerdyHelper_serializeDynamicVariables" "', argument " "8"" of type '" "iDynTree::VectorDynSize &""'"); 
  }
  if (!argp8) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BerdyHelper_serializeDynamicVariables" "', argument " "8"" of type '" "iDynTree::VectorDynSize &""'"); 
  }
  arg8 = reinterpret_cast< iDynTree::VectorDynSize * >(argp8);
  result = (bool)(arg1)->serializeDynamicVariables(*arg2,*arg3,*arg4,*arg5,*arg6,*arg7,*arg8);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdyHelper_serializeSensorVariables(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::BerdyHelper *arg1 = (iDynTree::BerdyHelper *) 0 ;
  iDynTree::SensorsMeasurements *arg2 = 0 ;
  iDynTree::LinkNetExternalWrenches *arg3 = 0 ;
  iDynTree::JointDOFsDoubleArray *arg4 = 0 ;
  iDynTree::JointDOFsDoubleArray *arg5 = 0 ;
  iDynTree::LinkInternalWrenches *arg6 = 0 ;
  iDynTree::VectorDynSize *arg7 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("BerdyHelper_serializeSensorVariables",argc,7,7,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__BerdyHelper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdyHelper_serializeSensorVariables" "', argument " "1"" of type '" "iDynTree::BerdyHelper *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::BerdyHelper * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SensorsMeasurements,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BerdyHelper_serializeSensorVariables" "', argument " "2"" of type '" "iDynTree::SensorsMeasurements &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BerdyHelper_serializeSensorVariables" "', argument " "2"" of type '" "iDynTree::SensorsMeasurements &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SensorsMeasurements * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__LinkWrenches,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BerdyHelper_serializeSensorVariables" "', argument " "3"" of type '" "iDynTree::LinkNetExternalWrenches &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BerdyHelper_serializeSensorVariables" "', argument " "3"" of type '" "iDynTree::LinkNetExternalWrenches &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::LinkNetExternalWrenches * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__JointDOFsDoubleArray,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "BerdyHelper_serializeSensorVariables" "', argument " "4"" of type '" "iDynTree::JointDOFsDoubleArray &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BerdyHelper_serializeSensorVariables" "', argument " "4"" of type '" "iDynTree::JointDOFsDoubleArray &""'"); 
  }
  arg4 = reinterpret_cast< iDynTree::JointDOFsDoubleArray * >(argp4);
  res5 = SWIG_ConvertPtr(argv[4], &argp5, SWIGTYPE_p_iDynTree__JointDOFsDoubleArray,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "BerdyHelper_serializeSensorVariables" "', argument " "5"" of type '" "iDynTree::JointDOFsDoubleArray &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BerdyHelper_serializeSensorVariables" "', argument " "5"" of type '" "iDynTree::JointDOFsDoubleArray &""'"); 
  }
  arg5 = reinterpret_cast< iDynTree::JointDOFsDoubleArray * >(argp5);
  res6 = SWIG_ConvertPtr(argv[5], &argp6, SWIGTYPE_p_iDynTree__LinkWrenches,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "BerdyHelper_serializeSensorVariables" "', argument " "6"" of type '" "iDynTree::LinkInternalWrenches &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BerdyHelper_serializeSensorVariables" "', argument " "6"" of type '" "iDynTree::LinkInternalWrenches &""'"); 
  }
  arg6 = reinterpret_cast< iDynTree::LinkInternalWrenches * >(argp6);
  res7 = SWIG_ConvertPtr(argv[6], &argp7, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "BerdyHelper_serializeSensorVariables" "', argument " "7"" of type '" "iDynTree::VectorDynSize &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BerdyHelper_serializeSensorVariables" "', argument " "7"" of type '" "iDynTree::VectorDynSize &""'"); 
  }
  arg7 = reinterpret_cast< iDynTree::VectorDynSize * >(argp7);
  result = (bool)(arg1)->serializeSensorVariables(*arg2,*arg3,*arg4,*arg5,*arg6,*arg7);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdyHelper_serializeDynamicVariablesComputedFromFixedBaseRNEA(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::BerdyHelper *arg1 = (iDynTree::BerdyHelper *) 0 ;
  iDynTree::JointDOFsDoubleArray *arg2 = 0 ;
  iDynTree::LinkNetExternalWrenches *arg3 = 0 ;
  iDynTree::VectorDynSize *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("BerdyHelper_serializeDynamicVariablesComputedFromFixedBaseRNEA",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__BerdyHelper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdyHelper_serializeDynamicVariablesComputedFromFixedBaseRNEA" "', argument " "1"" of type '" "iDynTree::BerdyHelper *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::BerdyHelper * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__JointDOFsDoubleArray,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BerdyHelper_serializeDynamicVariablesComputedFromFixedBaseRNEA" "', argument " "2"" of type '" "iDynTree::JointDOFsDoubleArray &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BerdyHelper_serializeDynamicVariablesComputedFromFixedBaseRNEA" "', argument " "2"" of type '" "iDynTree::JointDOFsDoubleArray &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::JointDOFsDoubleArray * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__LinkWrenches,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BerdyHelper_serializeDynamicVariablesComputedFromFixedBaseRNEA" "', argument " "3"" of type '" "iDynTree::LinkNetExternalWrenches &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BerdyHelper_serializeDynamicVariablesComputedFromFixedBaseRNEA" "', argument " "3"" of type '" "iDynTree::LinkNetExternalWrenches &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::LinkNetExternalWrenches * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "BerdyHelper_serializeDynamicVariablesComputedFromFixedBaseRNEA" "', argument " "4"" of type '" "iDynTree::VectorDynSize &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BerdyHelper_serializeDynamicVariablesComputedFromFixedBaseRNEA" "', argument " "4"" of type '" "iDynTree::VectorDynSize &""'"); 
  }
  arg4 = reinterpret_cast< iDynTree::VectorDynSize * >(argp4);
  result = (bool)(arg1)->serializeDynamicVariablesComputedFromFixedBaseRNEA(*arg2,*arg3,*arg4);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdyHelper_updateKinematicsFromFloatingBase(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::BerdyHelper *arg1 = (iDynTree::BerdyHelper *) 0 ;
  iDynTree::JointPosDoubleArray *arg2 = 0 ;
  iDynTree::JointDOFsDoubleArray *arg3 = 0 ;
  iDynTree::FrameIndex *arg4 = 0 ;
  iDynTree::Vector3 *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  iDynTree::FrameIndex temp4 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("BerdyHelper_updateKinematicsFromFloatingBase",argc,5,5,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__BerdyHelper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdyHelper_updateKinematicsFromFloatingBase" "', argument " "1"" of type '" "iDynTree::BerdyHelper *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::BerdyHelper * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__JointPosDoubleArray,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BerdyHelper_updateKinematicsFromFloatingBase" "', argument " "2"" of type '" "iDynTree::JointPosDoubleArray const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BerdyHelper_updateKinematicsFromFloatingBase" "', argument " "2"" of type '" "iDynTree::JointPosDoubleArray const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::JointPosDoubleArray * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__JointDOFsDoubleArray,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BerdyHelper_updateKinematicsFromFloatingBase" "', argument " "3"" of type '" "iDynTree::JointDOFsDoubleArray const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BerdyHelper_updateKinematicsFromFloatingBase" "', argument " "3"" of type '" "iDynTree::JointDOFsDoubleArray const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::JointDOFsDoubleArray * >(argp3);
  ecode4 = SWIG_AsVal_int(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "BerdyHelper_updateKinematicsFromFloatingBase" "', argument " "4"" of type '" "iDynTree::FrameIndex""'");
  } 
  temp4 = static_cast< iDynTree::FrameIndex >(val4);
  arg4 = &temp4;
  res5 = SWIG_ConvertPtr(argv[4], &argp5, SWIGTYPE_p_iDynTree__VectorFixSizeT_3_t,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "BerdyHelper_updateKinematicsFromFloatingBase" "', argument " "5"" of type '" "iDynTree::Vector3 const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BerdyHelper_updateKinematicsFromFloatingBase" "', argument " "5"" of type '" "iDynTree::Vector3 const &""'"); 
  }
  arg5 = reinterpret_cast< iDynTree::Vector3 * >(argp5);
  result = (bool)(arg1)->updateKinematicsFromFloatingBase((iDynTree::JointPosDoubleArray const &)*arg2,(iDynTree::JointDOFsDoubleArray const &)*arg3,(iDynTree::FrameIndex const &)*arg4,(iDynTree::Vector3 const &)*arg5);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdyHelper_updateKinematicsFromFixedBase(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::BerdyHelper *arg1 = (iDynTree::BerdyHelper *) 0 ;
  iDynTree::JointPosDoubleArray *arg2 = 0 ;
  iDynTree::JointDOFsDoubleArray *arg3 = 0 ;
  iDynTree::FrameIndex *arg4 = 0 ;
  iDynTree::Vector3 *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  iDynTree::FrameIndex temp4 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("BerdyHelper_updateKinematicsFromFixedBase",argc,5,5,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__BerdyHelper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdyHelper_updateKinematicsFromFixedBase" "', argument " "1"" of type '" "iDynTree::BerdyHelper *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::BerdyHelper * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__JointPosDoubleArray,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BerdyHelper_updateKinematicsFromFixedBase" "', argument " "2"" of type '" "iDynTree::JointPosDoubleArray const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BerdyHelper_updateKinematicsFromFixedBase" "', argument " "2"" of type '" "iDynTree::JointPosDoubleArray const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::JointPosDoubleArray * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__JointDOFsDoubleArray,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BerdyHelper_updateKinematicsFromFixedBase" "', argument " "3"" of type '" "iDynTree::JointDOFsDoubleArray const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BerdyHelper_updateKinematicsFromFixedBase" "', argument " "3"" of type '" "iDynTree::JointDOFsDoubleArray const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::JointDOFsDoubleArray * >(argp3);
  ecode4 = SWIG_AsVal_int(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "BerdyHelper_updateKinematicsFromFixedBase" "', argument " "4"" of type '" "iDynTree::FrameIndex""'");
  } 
  temp4 = static_cast< iDynTree::FrameIndex >(val4);
  arg4 = &temp4;
  res5 = SWIG_ConvertPtr(argv[4], &argp5, SWIGTYPE_p_iDynTree__VectorFixSizeT_3_t,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "BerdyHelper_updateKinematicsFromFixedBase" "', argument " "5"" of type '" "iDynTree::Vector3 const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BerdyHelper_updateKinematicsFromFixedBase" "', argument " "5"" of type '" "iDynTree::Vector3 const &""'"); 
  }
  arg5 = reinterpret_cast< iDynTree::Vector3 * >(argp5);
  result = (bool)(arg1)->updateKinematicsFromFixedBase((iDynTree::JointPosDoubleArray const &)*arg2,(iDynTree::JointDOFsDoubleArray const &)*arg3,(iDynTree::FrameIndex const &)*arg4,(iDynTree::Vector3 const &)*arg5);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_BerdyHelper_updateKinematicsFromTraversalFixedBase(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::BerdyHelper *arg1 = (iDynTree::BerdyHelper *) 0 ;
  iDynTree::JointPosDoubleArray *arg2 = 0 ;
  iDynTree::JointDOFsDoubleArray *arg3 = 0 ;
  iDynTree::Vector3 *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("BerdyHelper_updateKinematicsFromTraversalFixedBase",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__BerdyHelper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BerdyHelper_updateKinematicsFromTraversalFixedBase" "', argument " "1"" of type '" "iDynTree::BerdyHelper *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::BerdyHelper * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__JointPosDoubleArray,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BerdyHelper_updateKinematicsFromTraversalFixedBase" "', argument " "2"" of type '" "iDynTree::JointPosDoubleArray const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BerdyHelper_updateKinematicsFromTraversalFixedBase" "', argument " "2"" of type '" "iDynTree::JointPosDoubleArray const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::JointPosDoubleArray * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__JointDOFsDoubleArray,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BerdyHelper_updateKinematicsFromTraversalFixedBase" "', argument " "3"" of type '" "iDynTree::JointDOFsDoubleArray const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BerdyHelper_updateKinematicsFromTraversalFixedBase" "', argument " "3"" of type '" "iDynTree::JointDOFsDoubleArray const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::JointDOFsDoubleArray * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__VectorFixSizeT_3_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "BerdyHelper_updateKinematicsFromTraversalFixedBase" "', argument " "4"" of type '" "iDynTree::Vector3 const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BerdyHelper_updateKinematicsFromTraversalFixedBase" "', argument " "4"" of type '" "iDynTree::Vector3 const &""'"); 
  }
  arg4 = reinterpret_cast< iDynTree::Vector3 * >(argp4);
  result = (bool)(arg1)->updateKinematicsFromTraversalFixedBase((iDynTree::JointPosDoubleArray const &)*arg2,(iDynTree::JointDOFsDoubleArray const &)*arg3,(iDynTree::Vector3 const &)*arg4);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_BerdyHelper(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::BerdyHelper *arg1 = (iDynTree::BerdyHelper *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_BerdyHelper",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__BerdyHelper, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BerdyHelper" "', argument " "1"" of type '" "iDynTree::BerdyHelper *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::BerdyHelper * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsRegressorParameter_category_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorParameter *arg1 = (iDynTree::Regressors::DynamicsRegressorParameter *) 0 ;
  iDynTree::Regressors::DynamicsRegressorParameterCategory arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("DynamicsRegressorParameter_category_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorParameter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorParameter_category_set" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorParameter *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorParameter * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DynamicsRegressorParameter_category_set" "', argument " "2"" of type '" "iDynTree::Regressors::DynamicsRegressorParameterCategory""'");
  } 
  arg2 = static_cast< iDynTree::Regressors::DynamicsRegressorParameterCategory >(val2);
  if (arg1) (arg1)->category = arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsRegressorParameter_category_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorParameter *arg1 = (iDynTree::Regressors::DynamicsRegressorParameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Regressors::DynamicsRegressorParameterCategory result;
  
  if (!SWIG_check_num_args("DynamicsRegressorParameter_category_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorParameter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorParameter_category_get" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorParameter *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorParameter * >(argp1);
  result = (iDynTree::Regressors::DynamicsRegressorParameterCategory) ((arg1)->category);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsRegressorParameter_elemIndex_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorParameter *arg1 = (iDynTree::Regressors::DynamicsRegressorParameter *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("DynamicsRegressorParameter_elemIndex_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorParameter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorParameter_elemIndex_set" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorParameter *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorParameter * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DynamicsRegressorParameter_elemIndex_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->elemIndex = arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsRegressorParameter_elemIndex_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorParameter *arg1 = (iDynTree::Regressors::DynamicsRegressorParameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("DynamicsRegressorParameter_elemIndex_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorParameter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorParameter_elemIndex_get" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorParameter *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorParameter * >(argp1);
  result = (int) ((arg1)->elemIndex);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsRegressorParameter_type_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorParameter *arg1 = (iDynTree::Regressors::DynamicsRegressorParameter *) 0 ;
  iDynTree::Regressors::DynamicsRegressorParameterType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("DynamicsRegressorParameter_type_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorParameter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorParameter_type_set" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorParameter *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorParameter * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DynamicsRegressorParameter_type_set" "', argument " "2"" of type '" "iDynTree::Regressors::DynamicsRegressorParameterType""'");
  } 
  arg2 = static_cast< iDynTree::Regressors::DynamicsRegressorParameterType >(val2);
  if (arg1) (arg1)->type = arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsRegressorParameter_type_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorParameter *arg1 = (iDynTree::Regressors::DynamicsRegressorParameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Regressors::DynamicsRegressorParameterType result;
  
  if (!SWIG_check_num_args("DynamicsRegressorParameter_type_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorParameter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorParameter_type_get" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorParameter *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorParameter * >(argp1);
  result = (iDynTree::Regressors::DynamicsRegressorParameterType) ((arg1)->type);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsRegressorParameter_lt(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorParameter *arg1 = (iDynTree::Regressors::DynamicsRegressorParameter *) 0 ;
  iDynTree::Regressors::DynamicsRegressorParameter *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("DynamicsRegressorParameter_lt",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorParameter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorParameter_lt" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorParameter const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorParameter * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorParameter,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynamicsRegressorParameter_lt" "', argument " "2"" of type '" "iDynTree::Regressors::DynamicsRegressorParameter const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsRegressorParameter_lt" "', argument " "2"" of type '" "iDynTree::Regressors::DynamicsRegressorParameter const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorParameter * >(argp2);
  result = (bool)((iDynTree::Regressors::DynamicsRegressorParameter const *)arg1)->operator <((iDynTree::Regressors::DynamicsRegressorParameter const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsRegressorParameter_eq(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorParameter *arg1 = (iDynTree::Regressors::DynamicsRegressorParameter *) 0 ;
  iDynTree::Regressors::DynamicsRegressorParameter *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("DynamicsRegressorParameter_eq",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorParameter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorParameter_eq" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorParameter const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorParameter * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorParameter,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynamicsRegressorParameter_eq" "', argument " "2"" of type '" "iDynTree::Regressors::DynamicsRegressorParameter const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsRegressorParameter_eq" "', argument " "2"" of type '" "iDynTree::Regressors::DynamicsRegressorParameter const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorParameter * >(argp2);
  result = (bool)((iDynTree::Regressors::DynamicsRegressorParameter const *)arg1)->operator ==((iDynTree::Regressors::DynamicsRegressorParameter const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsRegressorParameter_ne(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorParameter *arg1 = (iDynTree::Regressors::DynamicsRegressorParameter *) 0 ;
  iDynTree::Regressors::DynamicsRegressorParameter *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("DynamicsRegressorParameter_ne",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorParameter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorParameter_ne" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorParameter const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorParameter * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorParameter,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynamicsRegressorParameter_ne" "', argument " "2"" of type '" "iDynTree::Regressors::DynamicsRegressorParameter const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsRegressorParameter_ne" "', argument " "2"" of type '" "iDynTree::Regressors::DynamicsRegressorParameter const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorParameter * >(argp2);
  result = (bool)((iDynTree::Regressors::DynamicsRegressorParameter const *)arg1)->operator !=((iDynTree::Regressors::DynamicsRegressorParameter const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_DynamicsRegressorParameter(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::Regressors::DynamicsRegressorParameter *result = 0 ;
  
  if (!SWIG_check_num_args("new_DynamicsRegressorParameter",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::Regressors::DynamicsRegressorParameter *)new iDynTree::Regressors::DynamicsRegressorParameter();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorParameter, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_DynamicsRegressorParameter(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorParameter *arg1 = (iDynTree::Regressors::DynamicsRegressorParameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_DynamicsRegressorParameter",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorParameter, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DynamicsRegressorParameter" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorParameter *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorParameter * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsRegressorParametersList_parameters_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorParametersList *arg1 = (iDynTree::Regressors::DynamicsRegressorParametersList *) 0 ;
  std::vector< iDynTree::Regressors::DynamicsRegressorParameter,std::allocator< iDynTree::Regressors::DynamicsRegressorParameter > > *arg2 = (std::vector< iDynTree::Regressors::DynamicsRegressorParameter,std::allocator< iDynTree::Regressors::DynamicsRegressorParameter > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("DynamicsRegressorParametersList_parameters_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorParametersList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorParametersList_parameters_set" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorParametersList *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorParametersList * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_std__vectorT_iDynTree__Regressors__DynamicsRegressorParameter_std__allocatorT_iDynTree__Regressors__DynamicsRegressorParameter_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynamicsRegressorParametersList_parameters_set" "', argument " "2"" of type '" "std::vector< iDynTree::Regressors::DynamicsRegressorParameter,std::allocator< iDynTree::Regressors::DynamicsRegressorParameter > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< iDynTree::Regressors::DynamicsRegressorParameter,std::allocator< iDynTree::Regressors::DynamicsRegressorParameter > > * >(argp2);
  if (arg1) (arg1)->parameters = *arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsRegressorParametersList_parameters_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorParametersList *arg1 = (iDynTree::Regressors::DynamicsRegressorParametersList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< iDynTree::Regressors::DynamicsRegressorParameter,std::allocator< iDynTree::Regressors::DynamicsRegressorParameter > > *result = 0 ;
  
  if (!SWIG_check_num_args("DynamicsRegressorParametersList_parameters_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorParametersList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorParametersList_parameters_get" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorParametersList *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorParametersList * >(argp1);
  result = (std::vector< iDynTree::Regressors::DynamicsRegressorParameter,std::allocator< iDynTree::Regressors::DynamicsRegressorParameter > > *)& ((arg1)->parameters);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_iDynTree__Regressors__DynamicsRegressorParameter_std__allocatorT_iDynTree__Regressors__DynamicsRegressorParameter_t_t, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsRegressorParametersList_getDescriptionOfParameter__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorParametersList *arg1 = (iDynTree::Regressors::DynamicsRegressorParametersList *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("DynamicsRegressorParametersList_getDescriptionOfParameter",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorParametersList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorParametersList_getDescriptionOfParameter" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorParametersList const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorParametersList * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DynamicsRegressorParametersList_getDescriptionOfParameter" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = ((iDynTree::Regressors::DynamicsRegressorParametersList const *)arg1)->getDescriptionOfParameter(arg2);
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsRegressorParametersList_getDescriptionOfParameter__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorParametersList *arg1 = (iDynTree::Regressors::DynamicsRegressorParametersList *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("DynamicsRegressorParametersList_getDescriptionOfParameter",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorParametersList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorParametersList_getDescriptionOfParameter" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorParametersList const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorParametersList * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DynamicsRegressorParametersList_getDescriptionOfParameter" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "DynamicsRegressorParametersList_getDescriptionOfParameter" "', argument " "3"" of type '" "std::string const""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = ((iDynTree::Regressors::DynamicsRegressorParametersList const *)arg1)->getDescriptionOfParameter(arg2,arg3);
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsRegressorParametersList_getDescriptionOfParameter(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorParametersList, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DynamicsRegressorParametersList_getDescriptionOfParameter__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorParametersList, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DynamicsRegressorParametersList_getDescriptionOfParameter__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'DynamicsRegressorParametersList_getDescriptionOfParameter'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::Regressors::DynamicsRegressorParametersList::getDescriptionOfParameter(unsigned int) const\n"
    "    iDynTree::Regressors::DynamicsRegressorParametersList::getDescriptionOfParameter(unsigned int,std::string const) const\n");
  return 1;
}


int _wrap_DynamicsRegressorParametersList_addParam(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorParametersList *arg1 = (iDynTree::Regressors::DynamicsRegressorParametersList *) 0 ;
  iDynTree::Regressors::DynamicsRegressorParameter *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("DynamicsRegressorParametersList_addParam",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorParametersList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorParametersList_addParam" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorParametersList *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorParametersList * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorParameter,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynamicsRegressorParametersList_addParam" "', argument " "2"" of type '" "iDynTree::Regressors::DynamicsRegressorParameter const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsRegressorParametersList_addParam" "', argument " "2"" of type '" "iDynTree::Regressors::DynamicsRegressorParameter const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorParameter * >(argp2);
  result = (bool)(arg1)->addParam((iDynTree::Regressors::DynamicsRegressorParameter const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsRegressorParametersList_addList(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorParametersList *arg1 = (iDynTree::Regressors::DynamicsRegressorParametersList *) 0 ;
  iDynTree::Regressors::DynamicsRegressorParametersList *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("DynamicsRegressorParametersList_addList",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorParametersList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorParametersList_addList" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorParametersList *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorParametersList * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorParametersList,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynamicsRegressorParametersList_addList" "', argument " "2"" of type '" "iDynTree::Regressors::DynamicsRegressorParametersList const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsRegressorParametersList_addList" "', argument " "2"" of type '" "iDynTree::Regressors::DynamicsRegressorParametersList const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorParametersList * >(argp2);
  result = (bool)(arg1)->addList((iDynTree::Regressors::DynamicsRegressorParametersList const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsRegressorParametersList_findParam(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorParametersList *arg1 = (iDynTree::Regressors::DynamicsRegressorParametersList *) 0 ;
  iDynTree::Regressors::DynamicsRegressorParameter *arg2 = 0 ;
  unsigned int *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("DynamicsRegressorParametersList_findParam",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorParametersList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorParametersList_findParam" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorParametersList const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorParametersList * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorParameter,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynamicsRegressorParametersList_findParam" "', argument " "2"" of type '" "iDynTree::Regressors::DynamicsRegressorParameter const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsRegressorParametersList_findParam" "', argument " "2"" of type '" "iDynTree::Regressors::DynamicsRegressorParameter const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorParameter * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_unsigned_int,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DynamicsRegressorParametersList_findParam" "', argument " "3"" of type '" "unsigned int &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsRegressorParametersList_findParam" "', argument " "3"" of type '" "unsigned int &""'"); 
  }
  arg3 = reinterpret_cast< unsigned int * >(argp3);
  result = (bool)((iDynTree::Regressors::DynamicsRegressorParametersList const *)arg1)->findParam((iDynTree::Regressors::DynamicsRegressorParameter const &)*arg2,*arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsRegressorParametersList_getNrOfParameters(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorParametersList *arg1 = (iDynTree::Regressors::DynamicsRegressorParametersList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("DynamicsRegressorParametersList_getNrOfParameters",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorParametersList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorParametersList_getNrOfParameters" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorParametersList const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorParametersList * >(argp1);
  result = (unsigned int)((iDynTree::Regressors::DynamicsRegressorParametersList const *)arg1)->getNrOfParameters();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_DynamicsRegressorParametersList(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::Regressors::DynamicsRegressorParametersList *result = 0 ;
  
  if (!SWIG_check_num_args("new_DynamicsRegressorParametersList",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::Regressors::DynamicsRegressorParametersList *)new iDynTree::Regressors::DynamicsRegressorParametersList();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorParametersList, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_DynamicsRegressorParametersList(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorParametersList *arg1 = (iDynTree::Regressors::DynamicsRegressorParametersList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_DynamicsRegressorParametersList",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorParametersList, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DynamicsRegressorParametersList" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorParametersList *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorParametersList * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_DynamicsRegressorGenerator(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::Regressors::DynamicsRegressorGenerator *result = 0 ;
  
  if (!SWIG_check_num_args("new_DynamicsRegressorGenerator",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::Regressors::DynamicsRegressorGenerator *)new iDynTree::Regressors::DynamicsRegressorGenerator();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_DynamicsRegressorGenerator(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorGenerator *arg1 = (iDynTree::Regressors::DynamicsRegressorGenerator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_DynamicsRegressorGenerator",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DynamicsRegressorGenerator" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorGenerator *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorGenerator * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsRegressorGenerator_loadRobotAndSensorsModelFromFile__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorGenerator *arg1 = (iDynTree::Regressors::DynamicsRegressorGenerator *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("DynamicsRegressorGenerator_loadRobotAndSensorsModelFromFile",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorGenerator_loadRobotAndSensorsModelFromFile" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorGenerator *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorGenerator * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynamicsRegressorGenerator_loadRobotAndSensorsModelFromFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsRegressorGenerator_loadRobotAndSensorsModelFromFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DynamicsRegressorGenerator_loadRobotAndSensorsModelFromFile" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsRegressorGenerator_loadRobotAndSensorsModelFromFile" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  result = (bool)(arg1)->loadRobotAndSensorsModelFromFile((std::string const &)*arg2,(std::string const &)*arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 1;
}


int _wrap_DynamicsRegressorGenerator_loadRobotAndSensorsModelFromFile__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorGenerator *arg1 = (iDynTree::Regressors::DynamicsRegressorGenerator *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("DynamicsRegressorGenerator_loadRobotAndSensorsModelFromFile",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorGenerator_loadRobotAndSensorsModelFromFile" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorGenerator *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorGenerator * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynamicsRegressorGenerator_loadRobotAndSensorsModelFromFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsRegressorGenerator_loadRobotAndSensorsModelFromFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->loadRobotAndSensorsModelFromFile((std::string const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_DynamicsRegressorGenerator_loadRobotAndSensorsModelFromFile(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DynamicsRegressorGenerator_loadRobotAndSensorsModelFromFile__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DynamicsRegressorGenerator_loadRobotAndSensorsModelFromFile__SWIG_0(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'DynamicsRegressorGenerator_loadRobotAndSensorsModelFromFile'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::Regressors::DynamicsRegressorGenerator::loadRobotAndSensorsModelFromFile(std::string const &,std::string const &)\n"
    "    iDynTree::Regressors::DynamicsRegressorGenerator::loadRobotAndSensorsModelFromFile(std::string const &)\n");
  return 1;
}


int _wrap_DynamicsRegressorGenerator_loadRobotAndSensorsModelFromString__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorGenerator *arg1 = (iDynTree::Regressors::DynamicsRegressorGenerator *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("DynamicsRegressorGenerator_loadRobotAndSensorsModelFromString",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorGenerator_loadRobotAndSensorsModelFromString" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorGenerator *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorGenerator * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynamicsRegressorGenerator_loadRobotAndSensorsModelFromString" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsRegressorGenerator_loadRobotAndSensorsModelFromString" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DynamicsRegressorGenerator_loadRobotAndSensorsModelFromString" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsRegressorGenerator_loadRobotAndSensorsModelFromString" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  result = (bool)(arg1)->loadRobotAndSensorsModelFromString((std::string const &)*arg2,(std::string const &)*arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 1;
}


int _wrap_DynamicsRegressorGenerator_loadRobotAndSensorsModelFromString__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorGenerator *arg1 = (iDynTree::Regressors::DynamicsRegressorGenerator *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("DynamicsRegressorGenerator_loadRobotAndSensorsModelFromString",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorGenerator_loadRobotAndSensorsModelFromString" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorGenerator *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorGenerator * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynamicsRegressorGenerator_loadRobotAndSensorsModelFromString" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsRegressorGenerator_loadRobotAndSensorsModelFromString" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->loadRobotAndSensorsModelFromString((std::string const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_DynamicsRegressorGenerator_loadRobotAndSensorsModelFromString(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DynamicsRegressorGenerator_loadRobotAndSensorsModelFromString__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DynamicsRegressorGenerator_loadRobotAndSensorsModelFromString__SWIG_0(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'DynamicsRegressorGenerator_loadRobotAndSensorsModelFromString'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::Regressors::DynamicsRegressorGenerator::loadRobotAndSensorsModelFromString(std::string const &,std::string const &)\n"
    "    iDynTree::Regressors::DynamicsRegressorGenerator::loadRobotAndSensorsModelFromString(std::string const &)\n");
  return 1;
}


int _wrap_DynamicsRegressorGenerator_loadRegressorStructureFromFile(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorGenerator *arg1 = (iDynTree::Regressors::DynamicsRegressorGenerator *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("DynamicsRegressorGenerator_loadRegressorStructureFromFile",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorGenerator_loadRegressorStructureFromFile" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorGenerator *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorGenerator * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynamicsRegressorGenerator_loadRegressorStructureFromFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsRegressorGenerator_loadRegressorStructureFromFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->loadRegressorStructureFromFile((std::string const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_DynamicsRegressorGenerator_loadRegressorStructureFromString(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorGenerator *arg1 = (iDynTree::Regressors::DynamicsRegressorGenerator *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("DynamicsRegressorGenerator_loadRegressorStructureFromString",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorGenerator_loadRegressorStructureFromString" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorGenerator *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorGenerator * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynamicsRegressorGenerator_loadRegressorStructureFromString" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsRegressorGenerator_loadRegressorStructureFromString" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->loadRegressorStructureFromString((std::string const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_DynamicsRegressorGenerator_isValid(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorGenerator *arg1 = (iDynTree::Regressors::DynamicsRegressorGenerator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("DynamicsRegressorGenerator_isValid",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorGenerator_isValid" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorGenerator *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorGenerator * >(argp1);
  result = (bool)(arg1)->isValid();
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsRegressorGenerator_getNrOfParameters(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorGenerator *arg1 = (iDynTree::Regressors::DynamicsRegressorGenerator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("DynamicsRegressorGenerator_getNrOfParameters",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorGenerator_getNrOfParameters" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorGenerator const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorGenerator * >(argp1);
  result = (unsigned int)((iDynTree::Regressors::DynamicsRegressorGenerator const *)arg1)->getNrOfParameters();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsRegressorGenerator_getNrOfOutputs(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorGenerator *arg1 = (iDynTree::Regressors::DynamicsRegressorGenerator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("DynamicsRegressorGenerator_getNrOfOutputs",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorGenerator_getNrOfOutputs" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorGenerator const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorGenerator * >(argp1);
  result = (unsigned int)((iDynTree::Regressors::DynamicsRegressorGenerator const *)arg1)->getNrOfOutputs();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsRegressorGenerator_getNrOfDegreesOfFreedom(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorGenerator *arg1 = (iDynTree::Regressors::DynamicsRegressorGenerator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("DynamicsRegressorGenerator_getNrOfDegreesOfFreedom",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorGenerator_getNrOfDegreesOfFreedom" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorGenerator const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorGenerator * >(argp1);
  result = (unsigned int)((iDynTree::Regressors::DynamicsRegressorGenerator const *)arg1)->getNrOfDegreesOfFreedom();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsRegressorGenerator_getDescriptionOfParameter__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorGenerator *arg1 = (iDynTree::Regressors::DynamicsRegressorGenerator *) 0 ;
  int arg2 ;
  bool arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("DynamicsRegressorGenerator_getDescriptionOfParameter",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorGenerator_getDescriptionOfParameter" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorGenerator *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorGenerator * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DynamicsRegressorGenerator_getDescriptionOfParameter" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_bool(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DynamicsRegressorGenerator_getDescriptionOfParameter" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_double(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DynamicsRegressorGenerator_getDescriptionOfParameter" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  result = (arg1)->getDescriptionOfParameter(arg2,arg3,arg4);
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsRegressorGenerator_getDescriptionOfParameter__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorGenerator *arg1 = (iDynTree::Regressors::DynamicsRegressorGenerator *) 0 ;
  int arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("DynamicsRegressorGenerator_getDescriptionOfParameter",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorGenerator_getDescriptionOfParameter" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorGenerator *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorGenerator * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DynamicsRegressorGenerator_getDescriptionOfParameter" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_bool(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DynamicsRegressorGenerator_getDescriptionOfParameter" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (arg1)->getDescriptionOfParameter(arg2,arg3);
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsRegressorGenerator_getDescriptionOfParameter__SWIG_2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorGenerator *arg1 = (iDynTree::Regressors::DynamicsRegressorGenerator *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("DynamicsRegressorGenerator_getDescriptionOfParameter",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorGenerator_getDescriptionOfParameter" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorGenerator *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorGenerator * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DynamicsRegressorGenerator_getDescriptionOfParameter" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (arg1)->getDescriptionOfParameter(arg2);
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsRegressorGenerator_getDescriptionOfParameter(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DynamicsRegressorGenerator_getDescriptionOfParameter__SWIG_2(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_DynamicsRegressorGenerator_getDescriptionOfParameter__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_DynamicsRegressorGenerator_getDescriptionOfParameter__SWIG_0(resc,resv,argc,argv);
          }
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'DynamicsRegressorGenerator_getDescriptionOfParameter'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::Regressors::DynamicsRegressorGenerator::getDescriptionOfParameter(int,bool,double)\n"
    "    iDynTree::Regressors::DynamicsRegressorGenerator::getDescriptionOfParameter(int,bool)\n"
    "    iDynTree::Regressors::DynamicsRegressorGenerator::getDescriptionOfParameter(int)\n");
  return 1;
}


int _wrap_DynamicsRegressorGenerator_getDescriptionOfParameters__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorGenerator *arg1 = (iDynTree::Regressors::DynamicsRegressorGenerator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("DynamicsRegressorGenerator_getDescriptionOfParameters",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorGenerator_getDescriptionOfParameters" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorGenerator *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorGenerator * >(argp1);
  result = (arg1)->getDescriptionOfParameters();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsRegressorGenerator_getDescriptionOfParameters__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorGenerator *arg1 = (iDynTree::Regressors::DynamicsRegressorGenerator *) 0 ;
  iDynTree::VectorDynSize *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("DynamicsRegressorGenerator_getDescriptionOfParameters",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorGenerator_getDescriptionOfParameters" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorGenerator *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorGenerator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynamicsRegressorGenerator_getDescriptionOfParameters" "', argument " "2"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsRegressorGenerator_getDescriptionOfParameters" "', argument " "2"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::VectorDynSize * >(argp2);
  result = (arg1)->getDescriptionOfParameters((iDynTree::VectorDynSize const &)*arg2);
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsRegressorGenerator_getDescriptionOfParameters(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_DynamicsRegressorGenerator_getDescriptionOfParameters__SWIG_0(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__VectorDynSize, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DynamicsRegressorGenerator_getDescriptionOfParameters__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'DynamicsRegressorGenerator_getDescriptionOfParameters'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::Regressors::DynamicsRegressorGenerator::getDescriptionOfParameters()\n"
    "    iDynTree::Regressors::DynamicsRegressorGenerator::getDescriptionOfParameters(iDynTree::VectorDynSize const &)\n");
  return 1;
}


int _wrap_DynamicsRegressorGenerator_getDescriptionOfOutput(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorGenerator *arg1 = (iDynTree::Regressors::DynamicsRegressorGenerator *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("DynamicsRegressorGenerator_getDescriptionOfOutput",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorGenerator_getDescriptionOfOutput" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorGenerator *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorGenerator * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DynamicsRegressorGenerator_getDescriptionOfOutput" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (arg1)->getDescriptionOfOutput(arg2);
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsRegressorGenerator_getDescriptionOfOutputs(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorGenerator *arg1 = (iDynTree::Regressors::DynamicsRegressorGenerator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("DynamicsRegressorGenerator_getDescriptionOfOutputs",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorGenerator_getDescriptionOfOutputs" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorGenerator *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorGenerator * >(argp1);
  result = (arg1)->getDescriptionOfOutputs();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsRegressorGenerator_getDescriptionOfDegreeOfFreedom(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorGenerator *arg1 = (iDynTree::Regressors::DynamicsRegressorGenerator *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("DynamicsRegressorGenerator_getDescriptionOfDegreeOfFreedom",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorGenerator_getDescriptionOfDegreeOfFreedom" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorGenerator *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorGenerator * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DynamicsRegressorGenerator_getDescriptionOfDegreeOfFreedom" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (arg1)->getDescriptionOfDegreeOfFreedom(arg2);
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsRegressorGenerator_getDescriptionOfDegreesOfFreedom(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorGenerator *arg1 = (iDynTree::Regressors::DynamicsRegressorGenerator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("DynamicsRegressorGenerator_getDescriptionOfDegreesOfFreedom",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorGenerator_getDescriptionOfDegreesOfFreedom" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorGenerator *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorGenerator * >(argp1);
  result = (arg1)->getDescriptionOfDegreesOfFreedom();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsRegressorGenerator_getDescriptionOfLink(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorGenerator *arg1 = (iDynTree::Regressors::DynamicsRegressorGenerator *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("DynamicsRegressorGenerator_getDescriptionOfLink",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorGenerator_getDescriptionOfLink" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorGenerator *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorGenerator * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DynamicsRegressorGenerator_getDescriptionOfLink" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (arg1)->getDescriptionOfLink(arg2);
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsRegressorGenerator_getDescriptionOfLinks(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorGenerator *arg1 = (iDynTree::Regressors::DynamicsRegressorGenerator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("DynamicsRegressorGenerator_getDescriptionOfLinks",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorGenerator_getDescriptionOfLinks" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorGenerator *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorGenerator * >(argp1);
  result = (arg1)->getDescriptionOfLinks();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsRegressorGenerator_getNrOfLinks(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorGenerator *arg1 = (iDynTree::Regressors::DynamicsRegressorGenerator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("DynamicsRegressorGenerator_getNrOfLinks",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorGenerator_getNrOfLinks" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorGenerator const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorGenerator * >(argp1);
  result = (unsigned int)((iDynTree::Regressors::DynamicsRegressorGenerator const *)arg1)->getNrOfLinks();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsRegressorGenerator_getNrOfFakeLinks(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorGenerator *arg1 = (iDynTree::Regressors::DynamicsRegressorGenerator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("DynamicsRegressorGenerator_getNrOfFakeLinks",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorGenerator_getNrOfFakeLinks" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorGenerator const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorGenerator * >(argp1);
  result = (unsigned int)((iDynTree::Regressors::DynamicsRegressorGenerator const *)arg1)->getNrOfFakeLinks();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsRegressorGenerator_getBaseLinkName(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorGenerator *arg1 = (iDynTree::Regressors::DynamicsRegressorGenerator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("DynamicsRegressorGenerator_getBaseLinkName",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorGenerator_getBaseLinkName" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorGenerator *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorGenerator * >(argp1);
  result = (arg1)->getBaseLinkName();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsRegressorGenerator_getSensorsModel(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorGenerator *arg1 = (iDynTree::Regressors::DynamicsRegressorGenerator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::SensorsList *result = 0 ;
  
  if (!SWIG_check_num_args("DynamicsRegressorGenerator_getSensorsModel",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorGenerator_getSensorsModel" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorGenerator const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorGenerator * >(argp1);
  result = (iDynTree::SensorsList *) &((iDynTree::Regressors::DynamicsRegressorGenerator const *)arg1)->getSensorsModel();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SensorsList, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsRegressorGenerator_setRobotState__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorGenerator *arg1 = (iDynTree::Regressors::DynamicsRegressorGenerator *) 0 ;
  iDynTree::VectorDynSize *arg2 = 0 ;
  iDynTree::VectorDynSize *arg3 = 0 ;
  iDynTree::VectorDynSize *arg4 = 0 ;
  iDynTree::Transform *arg5 = 0 ;
  iDynTree::Twist *arg6 = 0 ;
  iDynTree::Twist *arg7 = 0 ;
  iDynTree::Twist *arg8 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  void *argp8 ;
  int res8 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("DynamicsRegressorGenerator_setRobotState",argc,8,8,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorGenerator_setRobotState" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorGenerator *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorGenerator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynamicsRegressorGenerator_setRobotState" "', argument " "2"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsRegressorGenerator_setRobotState" "', argument " "2"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::VectorDynSize * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DynamicsRegressorGenerator_setRobotState" "', argument " "3"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsRegressorGenerator_setRobotState" "', argument " "3"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::VectorDynSize * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DynamicsRegressorGenerator_setRobotState" "', argument " "4"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsRegressorGenerator_setRobotState" "', argument " "4"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  arg4 = reinterpret_cast< iDynTree::VectorDynSize * >(argp4);
  res5 = SWIG_ConvertPtr(argv[4], &argp5, SWIGTYPE_p_iDynTree__Transform,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "DynamicsRegressorGenerator_setRobotState" "', argument " "5"" of type '" "iDynTree::Transform const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsRegressorGenerator_setRobotState" "', argument " "5"" of type '" "iDynTree::Transform const &""'"); 
  }
  arg5 = reinterpret_cast< iDynTree::Transform * >(argp5);
  res6 = SWIG_ConvertPtr(argv[5], &argp6, SWIGTYPE_p_iDynTree__Twist,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "DynamicsRegressorGenerator_setRobotState" "', argument " "6"" of type '" "iDynTree::Twist const &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsRegressorGenerator_setRobotState" "', argument " "6"" of type '" "iDynTree::Twist const &""'"); 
  }
  arg6 = reinterpret_cast< iDynTree::Twist * >(argp6);
  res7 = SWIG_ConvertPtr(argv[6], &argp7, SWIGTYPE_p_iDynTree__Twist,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "DynamicsRegressorGenerator_setRobotState" "', argument " "7"" of type '" "iDynTree::Twist const &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsRegressorGenerator_setRobotState" "', argument " "7"" of type '" "iDynTree::Twist const &""'"); 
  }
  arg7 = reinterpret_cast< iDynTree::Twist * >(argp7);
  res8 = SWIG_ConvertPtr(argv[7], &argp8, SWIGTYPE_p_iDynTree__Twist,  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "DynamicsRegressorGenerator_setRobotState" "', argument " "8"" of type '" "iDynTree::Twist const &""'"); 
  }
  if (!argp8) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsRegressorGenerator_setRobotState" "', argument " "8"" of type '" "iDynTree::Twist const &""'"); 
  }
  arg8 = reinterpret_cast< iDynTree::Twist * >(argp8);
  result = (bool)(arg1)->setRobotState((iDynTree::VectorDynSize const &)*arg2,(iDynTree::VectorDynSize const &)*arg3,(iDynTree::VectorDynSize const &)*arg4,(iDynTree::Transform const &)*arg5,(iDynTree::Twist const &)*arg6,(iDynTree::Twist const &)*arg7,(iDynTree::Twist const &)*arg8);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsRegressorGenerator_setRobotState__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorGenerator *arg1 = (iDynTree::Regressors::DynamicsRegressorGenerator *) 0 ;
  iDynTree::VectorDynSize *arg2 = 0 ;
  iDynTree::VectorDynSize *arg3 = 0 ;
  iDynTree::VectorDynSize *arg4 = 0 ;
  iDynTree::Twist *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("DynamicsRegressorGenerator_setRobotState",argc,5,5,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorGenerator_setRobotState" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorGenerator *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorGenerator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynamicsRegressorGenerator_setRobotState" "', argument " "2"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsRegressorGenerator_setRobotState" "', argument " "2"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::VectorDynSize * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DynamicsRegressorGenerator_setRobotState" "', argument " "3"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsRegressorGenerator_setRobotState" "', argument " "3"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::VectorDynSize * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DynamicsRegressorGenerator_setRobotState" "', argument " "4"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsRegressorGenerator_setRobotState" "', argument " "4"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  arg4 = reinterpret_cast< iDynTree::VectorDynSize * >(argp4);
  res5 = SWIG_ConvertPtr(argv[4], &argp5, SWIGTYPE_p_iDynTree__Twist,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "DynamicsRegressorGenerator_setRobotState" "', argument " "5"" of type '" "iDynTree::Twist const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsRegressorGenerator_setRobotState" "', argument " "5"" of type '" "iDynTree::Twist const &""'"); 
  }
  arg5 = reinterpret_cast< iDynTree::Twist * >(argp5);
  result = (bool)(arg1)->setRobotState((iDynTree::VectorDynSize const &)*arg2,(iDynTree::VectorDynSize const &)*arg3,(iDynTree::VectorDynSize const &)*arg4,(iDynTree::Twist const &)*arg5);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsRegressorGenerator_setRobotState(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__VectorDynSize, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_iDynTree__VectorDynSize, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_iDynTree__VectorDynSize, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_iDynTree__Twist, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_DynamicsRegressorGenerator_setRobotState__SWIG_1(resc,resv,argc,argv);
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__VectorDynSize, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_iDynTree__VectorDynSize, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_iDynTree__VectorDynSize, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_iDynTree__Transform, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_iDynTree__Twist, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_iDynTree__Twist, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[7], &vptr, SWIGTYPE_p_iDynTree__Twist, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_DynamicsRegressorGenerator_setRobotState__SWIG_0(resc,resv,argc,argv);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'DynamicsRegressorGenerator_setRobotState'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::Regressors::DynamicsRegressorGenerator::setRobotState(iDynTree::VectorDynSize const &,iDynTree::VectorDynSize const &,iDynTree::VectorDynSize const &,iDynTree::Transform const &,iDynTree::Twist const &,iDynTree::Twist const &,iDynTree::Twist const &)\n"
    "    iDynTree::Regressors::DynamicsRegressorGenerator::setRobotState(iDynTree::VectorDynSize const &,iDynTree::VectorDynSize const &,iDynTree::VectorDynSize const &,iDynTree::Twist const &)\n");
  return 1;
}


int _wrap_DynamicsRegressorGenerator_getSensorsMeasurements(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorGenerator *arg1 = (iDynTree::Regressors::DynamicsRegressorGenerator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::SensorsMeasurements *result = 0 ;
  
  if (!SWIG_check_num_args("DynamicsRegressorGenerator_getSensorsMeasurements",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorGenerator_getSensorsMeasurements" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorGenerator *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorGenerator * >(argp1);
  result = (iDynTree::SensorsMeasurements *) &(arg1)->getSensorsMeasurements();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SensorsMeasurements, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsRegressorGenerator_setTorqueSensorMeasurement__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorGenerator *arg1 = (iDynTree::Regressors::DynamicsRegressorGenerator *) 0 ;
  int arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("DynamicsRegressorGenerator_setTorqueSensorMeasurement",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorGenerator_setTorqueSensorMeasurement" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorGenerator *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorGenerator * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DynamicsRegressorGenerator_setTorqueSensorMeasurement" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DynamicsRegressorGenerator_setTorqueSensorMeasurement" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (int)(arg1)->setTorqueSensorMeasurement(arg2,arg3);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsRegressorGenerator_setTorqueSensorMeasurement__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorGenerator *arg1 = (iDynTree::Regressors::DynamicsRegressorGenerator *) 0 ;
  iDynTree::VectorDynSize *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("DynamicsRegressorGenerator_setTorqueSensorMeasurement",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorGenerator_setTorqueSensorMeasurement" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorGenerator *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorGenerator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynamicsRegressorGenerator_setTorqueSensorMeasurement" "', argument " "2"" of type '" "iDynTree::VectorDynSize &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsRegressorGenerator_setTorqueSensorMeasurement" "', argument " "2"" of type '" "iDynTree::VectorDynSize &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::VectorDynSize * >(argp2);
  result = (int)(arg1)->setTorqueSensorMeasurement(*arg2);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsRegressorGenerator_setTorqueSensorMeasurement(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__VectorDynSize, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DynamicsRegressorGenerator_setTorqueSensorMeasurement__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_DynamicsRegressorGenerator_setTorqueSensorMeasurement__SWIG_0(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'DynamicsRegressorGenerator_setTorqueSensorMeasurement'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::Regressors::DynamicsRegressorGenerator::setTorqueSensorMeasurement(int const,double const)\n"
    "    iDynTree::Regressors::DynamicsRegressorGenerator::setTorqueSensorMeasurement(iDynTree::VectorDynSize &)\n");
  return 1;
}


int _wrap_DynamicsRegressorGenerator_computeRegressor(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorGenerator *arg1 = (iDynTree::Regressors::DynamicsRegressorGenerator *) 0 ;
  iDynTree::MatrixDynSize *arg2 = 0 ;
  iDynTree::VectorDynSize *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("DynamicsRegressorGenerator_computeRegressor",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorGenerator_computeRegressor" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorGenerator *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorGenerator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__MatrixDynSize,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynamicsRegressorGenerator_computeRegressor" "', argument " "2"" of type '" "iDynTree::MatrixDynSize &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsRegressorGenerator_computeRegressor" "', argument " "2"" of type '" "iDynTree::MatrixDynSize &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::MatrixDynSize * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DynamicsRegressorGenerator_computeRegressor" "', argument " "3"" of type '" "iDynTree::VectorDynSize &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsRegressorGenerator_computeRegressor" "', argument " "3"" of type '" "iDynTree::VectorDynSize &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::VectorDynSize * >(argp3);
  result = (bool)(arg1)->computeRegressor(*arg2,*arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsRegressorGenerator_getModelParameters(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorGenerator *arg1 = (iDynTree::Regressors::DynamicsRegressorGenerator *) 0 ;
  iDynTree::VectorDynSize *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("DynamicsRegressorGenerator_getModelParameters",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorGenerator_getModelParameters" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorGenerator *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorGenerator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynamicsRegressorGenerator_getModelParameters" "', argument " "2"" of type '" "iDynTree::VectorDynSize &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsRegressorGenerator_getModelParameters" "', argument " "2"" of type '" "iDynTree::VectorDynSize &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::VectorDynSize * >(argp2);
  result = (bool)(arg1)->getModelParameters(*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsRegressorGenerator_computeFloatingBaseIdentifiableSubspace(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorGenerator *arg1 = (iDynTree::Regressors::DynamicsRegressorGenerator *) 0 ;
  iDynTree::MatrixDynSize *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("DynamicsRegressorGenerator_computeFloatingBaseIdentifiableSubspace",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorGenerator_computeFloatingBaseIdentifiableSubspace" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorGenerator *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorGenerator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__MatrixDynSize,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynamicsRegressorGenerator_computeFloatingBaseIdentifiableSubspace" "', argument " "2"" of type '" "iDynTree::MatrixDynSize &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsRegressorGenerator_computeFloatingBaseIdentifiableSubspace" "', argument " "2"" of type '" "iDynTree::MatrixDynSize &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::MatrixDynSize * >(argp2);
  result = (bool)(arg1)->computeFloatingBaseIdentifiableSubspace(*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsRegressorGenerator_computeFixedBaseIdentifiableSubspace(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorGenerator *arg1 = (iDynTree::Regressors::DynamicsRegressorGenerator *) 0 ;
  iDynTree::MatrixDynSize *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("DynamicsRegressorGenerator_computeFixedBaseIdentifiableSubspace",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorGenerator_computeFixedBaseIdentifiableSubspace" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorGenerator *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorGenerator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__MatrixDynSize,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynamicsRegressorGenerator_computeFixedBaseIdentifiableSubspace" "', argument " "2"" of type '" "iDynTree::MatrixDynSize &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsRegressorGenerator_computeFixedBaseIdentifiableSubspace" "', argument " "2"" of type '" "iDynTree::MatrixDynSize &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::MatrixDynSize * >(argp2);
  result = (bool)(arg1)->computeFixedBaseIdentifiableSubspace(*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsRegressorGenerator_generate_random_regressors__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorGenerator *arg1 = (iDynTree::Regressors::DynamicsRegressorGenerator *) 0 ;
  iDynTree::MatrixDynSize *arg2 = 0 ;
  bool arg3 ;
  bool arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("DynamicsRegressorGenerator_generate_random_regressors",argc,5,5,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorGenerator_generate_random_regressors" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorGenerator *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorGenerator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__MatrixDynSize,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynamicsRegressorGenerator_generate_random_regressors" "', argument " "2"" of type '" "iDynTree::MatrixDynSize &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsRegressorGenerator_generate_random_regressors" "', argument " "2"" of type '" "iDynTree::MatrixDynSize &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::MatrixDynSize * >(argp2);
  ecode3 = SWIG_AsVal_bool(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DynamicsRegressorGenerator_generate_random_regressors" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_bool(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DynamicsRegressorGenerator_generate_random_regressors" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  ecode5 = SWIG_AsVal_int(argv[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "DynamicsRegressorGenerator_generate_random_regressors" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  result = (int)(arg1)->generate_random_regressors(*arg2,arg3,arg4,arg5);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsRegressorGenerator_generate_random_regressors__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorGenerator *arg1 = (iDynTree::Regressors::DynamicsRegressorGenerator *) 0 ;
  iDynTree::MatrixDynSize *arg2 = 0 ;
  bool arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("DynamicsRegressorGenerator_generate_random_regressors",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorGenerator_generate_random_regressors" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorGenerator *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorGenerator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__MatrixDynSize,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynamicsRegressorGenerator_generate_random_regressors" "', argument " "2"" of type '" "iDynTree::MatrixDynSize &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsRegressorGenerator_generate_random_regressors" "', argument " "2"" of type '" "iDynTree::MatrixDynSize &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::MatrixDynSize * >(argp2);
  ecode3 = SWIG_AsVal_bool(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DynamicsRegressorGenerator_generate_random_regressors" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_bool(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DynamicsRegressorGenerator_generate_random_regressors" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  result = (int)(arg1)->generate_random_regressors(*arg2,arg3,arg4);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsRegressorGenerator_generate_random_regressors__SWIG_2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorGenerator *arg1 = (iDynTree::Regressors::DynamicsRegressorGenerator *) 0 ;
  iDynTree::MatrixDynSize *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("DynamicsRegressorGenerator_generate_random_regressors",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorGenerator_generate_random_regressors" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorGenerator *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorGenerator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__MatrixDynSize,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynamicsRegressorGenerator_generate_random_regressors" "', argument " "2"" of type '" "iDynTree::MatrixDynSize &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsRegressorGenerator_generate_random_regressors" "', argument " "2"" of type '" "iDynTree::MatrixDynSize &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::MatrixDynSize * >(argp2);
  ecode3 = SWIG_AsVal_bool(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DynamicsRegressorGenerator_generate_random_regressors" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (int)(arg1)->generate_random_regressors(*arg2,arg3);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsRegressorGenerator_generate_random_regressors__SWIG_3(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorGenerator *arg1 = (iDynTree::Regressors::DynamicsRegressorGenerator *) 0 ;
  iDynTree::MatrixDynSize *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("DynamicsRegressorGenerator_generate_random_regressors",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorGenerator_generate_random_regressors" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorGenerator *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorGenerator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__MatrixDynSize,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynamicsRegressorGenerator_generate_random_regressors" "', argument " "2"" of type '" "iDynTree::MatrixDynSize &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsRegressorGenerator_generate_random_regressors" "', argument " "2"" of type '" "iDynTree::MatrixDynSize &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::MatrixDynSize * >(argp2);
  result = (int)(arg1)->generate_random_regressors(*arg2);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsRegressorGenerator_generate_random_regressors(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__MatrixDynSize, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DynamicsRegressorGenerator_generate_random_regressors__SWIG_3(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__MatrixDynSize, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_DynamicsRegressorGenerator_generate_random_regressors__SWIG_2(resc,resv,argc,argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__MatrixDynSize, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_DynamicsRegressorGenerator_generate_random_regressors__SWIG_1(resc,resv,argc,argv);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__MatrixDynSize, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_DynamicsRegressorGenerator_generate_random_regressors__SWIG_0(resc,resv,argc,argv);
            }
          }
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'DynamicsRegressorGenerator_generate_random_regressors'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::Regressors::DynamicsRegressorGenerator::generate_random_regressors(iDynTree::MatrixDynSize &,bool const,bool const,int)\n"
    "    iDynTree::Regressors::DynamicsRegressorGenerator::generate_random_regressors(iDynTree::MatrixDynSize &,bool const,bool const)\n"
    "    iDynTree::Regressors::DynamicsRegressorGenerator::generate_random_regressors(iDynTree::MatrixDynSize &,bool const)\n"
    "    iDynTree::Regressors::DynamicsRegressorGenerator::generate_random_regressors(iDynTree::MatrixDynSize &)\n");
  return 1;
}


int _wrap_new_KinDynComputations(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::KinDynComputations *result = 0 ;
  
  if (!SWIG_check_num_args("new_KinDynComputations",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::KinDynComputations *)new iDynTree::KinDynComputations();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__KinDynComputations, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_KinDynComputations(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::KinDynComputations *arg1 = (iDynTree::KinDynComputations *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_KinDynComputations",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__KinDynComputations, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_KinDynComputations" "', argument " "1"" of type '" "iDynTree::KinDynComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::KinDynComputations * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_KinDynComputations_loadRobotModel(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::KinDynComputations *arg1 = (iDynTree::KinDynComputations *) 0 ;
  iDynTree::Model *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("KinDynComputations_loadRobotModel",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__KinDynComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KinDynComputations_loadRobotModel" "', argument " "1"" of type '" "iDynTree::KinDynComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::KinDynComputations * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KinDynComputations_loadRobotModel" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KinDynComputations_loadRobotModel" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Model * >(argp2);
  result = (bool)(arg1)->loadRobotModel((iDynTree::Model const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_KinDynComputations_loadRobotModelFromFile__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::KinDynComputations *arg1 = (iDynTree::KinDynComputations *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("KinDynComputations_loadRobotModelFromFile",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__KinDynComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KinDynComputations_loadRobotModelFromFile" "', argument " "1"" of type '" "iDynTree::KinDynComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::KinDynComputations * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KinDynComputations_loadRobotModelFromFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KinDynComputations_loadRobotModelFromFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "KinDynComputations_loadRobotModelFromFile" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KinDynComputations_loadRobotModelFromFile" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  result = (bool)(arg1)->loadRobotModelFromFile((std::string const &)*arg2,(std::string const &)*arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 1;
}


int _wrap_KinDynComputations_loadRobotModelFromFile__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::KinDynComputations *arg1 = (iDynTree::KinDynComputations *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("KinDynComputations_loadRobotModelFromFile",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__KinDynComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KinDynComputations_loadRobotModelFromFile" "', argument " "1"" of type '" "iDynTree::KinDynComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::KinDynComputations * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KinDynComputations_loadRobotModelFromFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KinDynComputations_loadRobotModelFromFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->loadRobotModelFromFile((std::string const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_KinDynComputations_loadRobotModelFromFile(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__KinDynComputations, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_KinDynComputations_loadRobotModelFromFile__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__KinDynComputations, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_KinDynComputations_loadRobotModelFromFile__SWIG_0(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'KinDynComputations_loadRobotModelFromFile'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::KinDynComputations::loadRobotModelFromFile(std::string const &,std::string const &)\n"
    "    iDynTree::KinDynComputations::loadRobotModelFromFile(std::string const &)\n");
  return 1;
}


int _wrap_KinDynComputations_loadRobotModelFromString__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::KinDynComputations *arg1 = (iDynTree::KinDynComputations *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("KinDynComputations_loadRobotModelFromString",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__KinDynComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KinDynComputations_loadRobotModelFromString" "', argument " "1"" of type '" "iDynTree::KinDynComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::KinDynComputations * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KinDynComputations_loadRobotModelFromString" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KinDynComputations_loadRobotModelFromString" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "KinDynComputations_loadRobotModelFromString" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KinDynComputations_loadRobotModelFromString" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  result = (bool)(arg1)->loadRobotModelFromString((std::string const &)*arg2,(std::string const &)*arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 1;
}


int _wrap_KinDynComputations_loadRobotModelFromString__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::KinDynComputations *arg1 = (iDynTree::KinDynComputations *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("KinDynComputations_loadRobotModelFromString",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__KinDynComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KinDynComputations_loadRobotModelFromString" "', argument " "1"" of type '" "iDynTree::KinDynComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::KinDynComputations * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KinDynComputations_loadRobotModelFromString" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KinDynComputations_loadRobotModelFromString" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->loadRobotModelFromString((std::string const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_KinDynComputations_loadRobotModelFromString(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__KinDynComputations, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_KinDynComputations_loadRobotModelFromString__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__KinDynComputations, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_KinDynComputations_loadRobotModelFromString__SWIG_0(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'KinDynComputations_loadRobotModelFromString'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::KinDynComputations::loadRobotModelFromString(std::string const &,std::string const &)\n"
    "    iDynTree::KinDynComputations::loadRobotModelFromString(std::string const &)\n");
  return 1;
}


int _wrap_KinDynComputations_isValid(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::KinDynComputations *arg1 = (iDynTree::KinDynComputations *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("KinDynComputations_isValid",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__KinDynComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KinDynComputations_isValid" "', argument " "1"" of type '" "iDynTree::KinDynComputations const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::KinDynComputations * >(argp1);
  result = (bool)((iDynTree::KinDynComputations const *)arg1)->isValid();
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_KinDynComputations_setFrameVelocityRepresentation(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::KinDynComputations *arg1 = (iDynTree::KinDynComputations *) 0 ;
  iDynTree::FrameVelocityRepresentation arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("KinDynComputations_setFrameVelocityRepresentation",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__KinDynComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KinDynComputations_setFrameVelocityRepresentation" "', argument " "1"" of type '" "iDynTree::KinDynComputations const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::KinDynComputations * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "KinDynComputations_setFrameVelocityRepresentation" "', argument " "2"" of type '" "iDynTree::FrameVelocityRepresentation""'");
  } 
  arg2 = static_cast< iDynTree::FrameVelocityRepresentation >(val2);
  result = (bool)((iDynTree::KinDynComputations const *)arg1)->setFrameVelocityRepresentation(arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_KinDynComputations_getFrameVelocityRepresentation(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::KinDynComputations *arg1 = (iDynTree::KinDynComputations *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::FrameVelocityRepresentation result;
  
  if (!SWIG_check_num_args("KinDynComputations_getFrameVelocityRepresentation",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__KinDynComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KinDynComputations_getFrameVelocityRepresentation" "', argument " "1"" of type '" "iDynTree::KinDynComputations const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::KinDynComputations * >(argp1);
  result = (iDynTree::FrameVelocityRepresentation)((iDynTree::KinDynComputations const *)arg1)->getFrameVelocityRepresentation();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_KinDynComputations_getNrOfDegreesOfFreedom(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::KinDynComputations *arg1 = (iDynTree::KinDynComputations *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("KinDynComputations_getNrOfDegreesOfFreedom",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__KinDynComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KinDynComputations_getNrOfDegreesOfFreedom" "', argument " "1"" of type '" "iDynTree::KinDynComputations const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::KinDynComputations * >(argp1);
  result = (unsigned int)((iDynTree::KinDynComputations const *)arg1)->getNrOfDegreesOfFreedom();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_KinDynComputations_getDescriptionOfDegreeOfFreedom(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::KinDynComputations *arg1 = (iDynTree::KinDynComputations *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("KinDynComputations_getDescriptionOfDegreeOfFreedom",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__KinDynComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KinDynComputations_getDescriptionOfDegreeOfFreedom" "', argument " "1"" of type '" "iDynTree::KinDynComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::KinDynComputations * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "KinDynComputations_getDescriptionOfDegreeOfFreedom" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (arg1)->getDescriptionOfDegreeOfFreedom(arg2);
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_KinDynComputations_getDescriptionOfDegreesOfFreedom(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::KinDynComputations *arg1 = (iDynTree::KinDynComputations *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("KinDynComputations_getDescriptionOfDegreesOfFreedom",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__KinDynComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KinDynComputations_getDescriptionOfDegreesOfFreedom" "', argument " "1"" of type '" "iDynTree::KinDynComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::KinDynComputations * >(argp1);
  result = (arg1)->getDescriptionOfDegreesOfFreedom();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_KinDynComputations_getNrOfLinks(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::KinDynComputations *arg1 = (iDynTree::KinDynComputations *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("KinDynComputations_getNrOfLinks",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__KinDynComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KinDynComputations_getNrOfLinks" "', argument " "1"" of type '" "iDynTree::KinDynComputations const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::KinDynComputations * >(argp1);
  result = (unsigned int)((iDynTree::KinDynComputations const *)arg1)->getNrOfLinks();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_KinDynComputations_getNrOfFrames(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::KinDynComputations *arg1 = (iDynTree::KinDynComputations *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("KinDynComputations_getNrOfFrames",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__KinDynComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KinDynComputations_getNrOfFrames" "', argument " "1"" of type '" "iDynTree::KinDynComputations const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::KinDynComputations * >(argp1);
  result = (unsigned int)((iDynTree::KinDynComputations const *)arg1)->getNrOfFrames();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_KinDynComputations_getFloatingBase(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::KinDynComputations *arg1 = (iDynTree::KinDynComputations *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("KinDynComputations_getFloatingBase",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__KinDynComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KinDynComputations_getFloatingBase" "', argument " "1"" of type '" "iDynTree::KinDynComputations const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::KinDynComputations * >(argp1);
  result = ((iDynTree::KinDynComputations const *)arg1)->getFloatingBase();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_KinDynComputations_setFloatingBase(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::KinDynComputations *arg1 = (iDynTree::KinDynComputations *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("KinDynComputations_setFloatingBase",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__KinDynComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KinDynComputations_setFloatingBase" "', argument " "1"" of type '" "iDynTree::KinDynComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::KinDynComputations * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KinDynComputations_setFloatingBase" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KinDynComputations_setFloatingBase" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->setFloatingBase((std::string const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_KinDynComputations_model(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::KinDynComputations *arg1 = (iDynTree::KinDynComputations *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Model *result = 0 ;
  
  if (!SWIG_check_num_args("KinDynComputations_model",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__KinDynComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KinDynComputations_model" "', argument " "1"" of type '" "iDynTree::KinDynComputations const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::KinDynComputations * >(argp1);
  result = (iDynTree::Model *) &((iDynTree::KinDynComputations const *)arg1)->model();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Model, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_KinDynComputations_getRobotModel(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::KinDynComputations *arg1 = (iDynTree::KinDynComputations *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Model *result = 0 ;
  
  if (!SWIG_check_num_args("KinDynComputations_getRobotModel",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__KinDynComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KinDynComputations_getRobotModel" "', argument " "1"" of type '" "iDynTree::KinDynComputations const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::KinDynComputations * >(argp1);
  result = (iDynTree::Model *) &((iDynTree::KinDynComputations const *)arg1)->getRobotModel();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Model, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_KinDynComputations_setJointPos(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::KinDynComputations *arg1 = (iDynTree::KinDynComputations *) 0 ;
  iDynTree::VectorDynSize *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("KinDynComputations_setJointPos",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__KinDynComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KinDynComputations_setJointPos" "', argument " "1"" of type '" "iDynTree::KinDynComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::KinDynComputations * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KinDynComputations_setJointPos" "', argument " "2"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KinDynComputations_setJointPos" "', argument " "2"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::VectorDynSize * >(argp2);
  result = (bool)(arg1)->setJointPos((iDynTree::VectorDynSize const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_KinDynComputations_setRobotState__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::KinDynComputations *arg1 = (iDynTree::KinDynComputations *) 0 ;
  iDynTree::Transform *arg2 = 0 ;
  iDynTree::VectorDynSize *arg3 = 0 ;
  iDynTree::Twist *arg4 = 0 ;
  iDynTree::VectorDynSize *arg5 = 0 ;
  iDynTree::Vector3 *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("KinDynComputations_setRobotState",argc,6,6,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__KinDynComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KinDynComputations_setRobotState" "', argument " "1"" of type '" "iDynTree::KinDynComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::KinDynComputations * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Transform,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KinDynComputations_setRobotState" "', argument " "2"" of type '" "iDynTree::Transform const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KinDynComputations_setRobotState" "', argument " "2"" of type '" "iDynTree::Transform const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Transform * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "KinDynComputations_setRobotState" "', argument " "3"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KinDynComputations_setRobotState" "', argument " "3"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::VectorDynSize * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__Twist,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "KinDynComputations_setRobotState" "', argument " "4"" of type '" "iDynTree::Twist const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KinDynComputations_setRobotState" "', argument " "4"" of type '" "iDynTree::Twist const &""'"); 
  }
  arg4 = reinterpret_cast< iDynTree::Twist * >(argp4);
  res5 = SWIG_ConvertPtr(argv[4], &argp5, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "KinDynComputations_setRobotState" "', argument " "5"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KinDynComputations_setRobotState" "', argument " "5"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  arg5 = reinterpret_cast< iDynTree::VectorDynSize * >(argp5);
  res6 = SWIG_ConvertPtr(argv[5], &argp6, SWIGTYPE_p_iDynTree__VectorFixSizeT_3_t,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "KinDynComputations_setRobotState" "', argument " "6"" of type '" "iDynTree::Vector3 const &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KinDynComputations_setRobotState" "', argument " "6"" of type '" "iDynTree::Vector3 const &""'"); 
  }
  arg6 = reinterpret_cast< iDynTree::Vector3 * >(argp6);
  result = (bool)(arg1)->setRobotState((iDynTree::Transform const &)*arg2,(iDynTree::VectorDynSize const &)*arg3,(iDynTree::Twist const &)*arg4,(iDynTree::VectorDynSize const &)*arg5,(iDynTree::Vector3 const &)*arg6);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_KinDynComputations_setRobotState__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::KinDynComputations *arg1 = (iDynTree::KinDynComputations *) 0 ;
  iDynTree::VectorDynSize *arg2 = 0 ;
  iDynTree::VectorDynSize *arg3 = 0 ;
  iDynTree::Vector3 *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("KinDynComputations_setRobotState",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__KinDynComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KinDynComputations_setRobotState" "', argument " "1"" of type '" "iDynTree::KinDynComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::KinDynComputations * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KinDynComputations_setRobotState" "', argument " "2"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KinDynComputations_setRobotState" "', argument " "2"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::VectorDynSize * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "KinDynComputations_setRobotState" "', argument " "3"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KinDynComputations_setRobotState" "', argument " "3"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::VectorDynSize * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__VectorFixSizeT_3_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "KinDynComputations_setRobotState" "', argument " "4"" of type '" "iDynTree::Vector3 const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KinDynComputations_setRobotState" "', argument " "4"" of type '" "iDynTree::Vector3 const &""'"); 
  }
  arg4 = reinterpret_cast< iDynTree::Vector3 * >(argp4);
  result = (bool)(arg1)->setRobotState((iDynTree::VectorDynSize const &)*arg2,(iDynTree::VectorDynSize const &)*arg3,(iDynTree::Vector3 const &)*arg4);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_KinDynComputations_setRobotState(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__KinDynComputations, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__VectorDynSize, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_iDynTree__VectorDynSize, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_iDynTree__VectorFixSizeT_3_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_KinDynComputations_setRobotState__SWIG_1(resc,resv,argc,argv);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__KinDynComputations, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Transform, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_iDynTree__VectorDynSize, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_iDynTree__Twist, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_iDynTree__VectorDynSize, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_iDynTree__VectorFixSizeT_3_t, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_KinDynComputations_setRobotState__SWIG_0(resc,resv,argc,argv);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'KinDynComputations_setRobotState'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::KinDynComputations::setRobotState(iDynTree::Transform const &,iDynTree::VectorDynSize const &,iDynTree::Twist const &,iDynTree::VectorDynSize const &,iDynTree::Vector3 const &)\n"
    "    iDynTree::KinDynComputations::setRobotState(iDynTree::VectorDynSize const &,iDynTree::VectorDynSize const &,iDynTree::Vector3 const &)\n");
  return 1;
}


int _wrap_KinDynComputations_getRobotState__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::KinDynComputations *arg1 = (iDynTree::KinDynComputations *) 0 ;
  iDynTree::Transform *arg2 = 0 ;
  iDynTree::VectorDynSize *arg3 = 0 ;
  iDynTree::Twist *arg4 = 0 ;
  iDynTree::VectorDynSize *arg5 = 0 ;
  iDynTree::Vector3 *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("KinDynComputations_getRobotState",argc,6,6,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__KinDynComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KinDynComputations_getRobotState" "', argument " "1"" of type '" "iDynTree::KinDynComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::KinDynComputations * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Transform,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KinDynComputations_getRobotState" "', argument " "2"" of type '" "iDynTree::Transform &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KinDynComputations_getRobotState" "', argument " "2"" of type '" "iDynTree::Transform &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Transform * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "KinDynComputations_getRobotState" "', argument " "3"" of type '" "iDynTree::VectorDynSize &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KinDynComputations_getRobotState" "', argument " "3"" of type '" "iDynTree::VectorDynSize &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::VectorDynSize * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__Twist,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "KinDynComputations_getRobotState" "', argument " "4"" of type '" "iDynTree::Twist &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KinDynComputations_getRobotState" "', argument " "4"" of type '" "iDynTree::Twist &""'"); 
  }
  arg4 = reinterpret_cast< iDynTree::Twist * >(argp4);
  res5 = SWIG_ConvertPtr(argv[4], &argp5, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "KinDynComputations_getRobotState" "', argument " "5"" of type '" "iDynTree::VectorDynSize &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KinDynComputations_getRobotState" "', argument " "5"" of type '" "iDynTree::VectorDynSize &""'"); 
  }
  arg5 = reinterpret_cast< iDynTree::VectorDynSize * >(argp5);
  res6 = SWIG_ConvertPtr(argv[5], &argp6, SWIGTYPE_p_iDynTree__VectorFixSizeT_3_t,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "KinDynComputations_getRobotState" "', argument " "6"" of type '" "iDynTree::Vector3 &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KinDynComputations_getRobotState" "', argument " "6"" of type '" "iDynTree::Vector3 &""'"); 
  }
  arg6 = reinterpret_cast< iDynTree::Vector3 * >(argp6);
  (arg1)->getRobotState(*arg2,*arg3,*arg4,*arg5,*arg6);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_KinDynComputations_getRobotState__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::KinDynComputations *arg1 = (iDynTree::KinDynComputations *) 0 ;
  iDynTree::VectorDynSize *arg2 = 0 ;
  iDynTree::VectorDynSize *arg3 = 0 ;
  iDynTree::Vector3 *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("KinDynComputations_getRobotState",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__KinDynComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KinDynComputations_getRobotState" "', argument " "1"" of type '" "iDynTree::KinDynComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::KinDynComputations * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KinDynComputations_getRobotState" "', argument " "2"" of type '" "iDynTree::VectorDynSize &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KinDynComputations_getRobotState" "', argument " "2"" of type '" "iDynTree::VectorDynSize &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::VectorDynSize * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "KinDynComputations_getRobotState" "', argument " "3"" of type '" "iDynTree::VectorDynSize &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KinDynComputations_getRobotState" "', argument " "3"" of type '" "iDynTree::VectorDynSize &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::VectorDynSize * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__VectorFixSizeT_3_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "KinDynComputations_getRobotState" "', argument " "4"" of type '" "iDynTree::Vector3 &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KinDynComputations_getRobotState" "', argument " "4"" of type '" "iDynTree::Vector3 &""'"); 
  }
  arg4 = reinterpret_cast< iDynTree::Vector3 * >(argp4);
  (arg1)->getRobotState(*arg2,*arg3,*arg4);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_KinDynComputations_getRobotState(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__KinDynComputations, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__VectorDynSize, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_iDynTree__VectorDynSize, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_iDynTree__VectorFixSizeT_3_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_KinDynComputations_getRobotState__SWIG_1(resc,resv,argc,argv);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__KinDynComputations, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Transform, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_iDynTree__VectorDynSize, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_iDynTree__Twist, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_iDynTree__VectorDynSize, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_iDynTree__VectorFixSizeT_3_t, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_KinDynComputations_getRobotState__SWIG_0(resc,resv,argc,argv);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'KinDynComputations_getRobotState'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::KinDynComputations::getRobotState(iDynTree::Transform &,iDynTree::VectorDynSize &,iDynTree::Twist &,iDynTree::VectorDynSize &,iDynTree::Vector3 &)\n"
    "    iDynTree::KinDynComputations::getRobotState(iDynTree::VectorDynSize &,iDynTree::VectorDynSize &,iDynTree::Vector3 &)\n");
  return 1;
}


int _wrap_KinDynComputations_getWorldBaseTransform(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::KinDynComputations *arg1 = (iDynTree::KinDynComputations *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Transform result;
  
  if (!SWIG_check_num_args("KinDynComputations_getWorldBaseTransform",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__KinDynComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KinDynComputations_getWorldBaseTransform" "', argument " "1"" of type '" "iDynTree::KinDynComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::KinDynComputations * >(argp1);
  result = (arg1)->getWorldBaseTransform();
  _out = SWIG_NewPointerObj((new iDynTree::Transform(static_cast< const iDynTree::Transform& >(result))), SWIGTYPE_p_iDynTree__Transform, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_KinDynComputations_getBaseTwist(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::KinDynComputations *arg1 = (iDynTree::KinDynComputations *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Twist result;
  
  if (!SWIG_check_num_args("KinDynComputations_getBaseTwist",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__KinDynComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KinDynComputations_getBaseTwist" "', argument " "1"" of type '" "iDynTree::KinDynComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::KinDynComputations * >(argp1);
  result = (arg1)->getBaseTwist();
  _out = SWIG_NewPointerObj((new iDynTree::Twist(static_cast< const iDynTree::Twist& >(result))), SWIGTYPE_p_iDynTree__Twist, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_KinDynComputations_getJointPos(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::KinDynComputations *arg1 = (iDynTree::KinDynComputations *) 0 ;
  iDynTree::VectorDynSize *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("KinDynComputations_getJointPos",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__KinDynComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KinDynComputations_getJointPos" "', argument " "1"" of type '" "iDynTree::KinDynComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::KinDynComputations * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KinDynComputations_getJointPos" "', argument " "2"" of type '" "iDynTree::VectorDynSize &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KinDynComputations_getJointPos" "', argument " "2"" of type '" "iDynTree::VectorDynSize &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::VectorDynSize * >(argp2);
  result = (bool)(arg1)->getJointPos(*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_KinDynComputations_getJointVel(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::KinDynComputations *arg1 = (iDynTree::KinDynComputations *) 0 ;
  iDynTree::VectorDynSize *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("KinDynComputations_getJointVel",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__KinDynComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KinDynComputations_getJointVel" "', argument " "1"" of type '" "iDynTree::KinDynComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::KinDynComputations * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KinDynComputations_getJointVel" "', argument " "2"" of type '" "iDynTree::VectorDynSize &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KinDynComputations_getJointVel" "', argument " "2"" of type '" "iDynTree::VectorDynSize &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::VectorDynSize * >(argp2);
  result = (bool)(arg1)->getJointVel(*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_KinDynComputations_getModelVel(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::KinDynComputations *arg1 = (iDynTree::KinDynComputations *) 0 ;
  iDynTree::VectorDynSize *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("KinDynComputations_getModelVel",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__KinDynComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KinDynComputations_getModelVel" "', argument " "1"" of type '" "iDynTree::KinDynComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::KinDynComputations * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KinDynComputations_getModelVel" "', argument " "2"" of type '" "iDynTree::VectorDynSize &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KinDynComputations_getModelVel" "', argument " "2"" of type '" "iDynTree::VectorDynSize &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::VectorDynSize * >(argp2);
  result = (bool)(arg1)->getModelVel(*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_KinDynComputations_getFrameIndex(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::KinDynComputations *arg1 = (iDynTree::KinDynComputations *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("KinDynComputations_getFrameIndex",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__KinDynComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KinDynComputations_getFrameIndex" "', argument " "1"" of type '" "iDynTree::KinDynComputations const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::KinDynComputations * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KinDynComputations_getFrameIndex" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KinDynComputations_getFrameIndex" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (int)((iDynTree::KinDynComputations const *)arg1)->getFrameIndex((std::string const &)*arg2);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_KinDynComputations_getFrameName(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::KinDynComputations *arg1 = (iDynTree::KinDynComputations *) 0 ;
  iDynTree::FrameIndex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("KinDynComputations_getFrameName",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__KinDynComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KinDynComputations_getFrameName" "', argument " "1"" of type '" "iDynTree::KinDynComputations const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::KinDynComputations * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "KinDynComputations_getFrameName" "', argument " "2"" of type '" "iDynTree::FrameIndex""'");
  } 
  arg2 = static_cast< iDynTree::FrameIndex >(val2);
  result = ((iDynTree::KinDynComputations const *)arg1)->getFrameName(arg2);
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_KinDynComputations_getWorldTransform__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::KinDynComputations *arg1 = (iDynTree::KinDynComputations *) 0 ;
  iDynTree::FrameIndex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::Transform result;
  
  if (!SWIG_check_num_args("KinDynComputations_getWorldTransform",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__KinDynComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KinDynComputations_getWorldTransform" "', argument " "1"" of type '" "iDynTree::KinDynComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::KinDynComputations * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "KinDynComputations_getWorldTransform" "', argument " "2"" of type '" "iDynTree::FrameIndex""'");
  } 
  arg2 = static_cast< iDynTree::FrameIndex >(val2);
  result = (arg1)->getWorldTransform(arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Transform(static_cast< const iDynTree::Transform& >(result))), SWIGTYPE_p_iDynTree__Transform, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_KinDynComputations_getWorldTransform__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::KinDynComputations *arg1 = (iDynTree::KinDynComputations *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Transform result;
  
  if (!SWIG_check_num_args("KinDynComputations_getWorldTransform",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__KinDynComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KinDynComputations_getWorldTransform" "', argument " "1"" of type '" "iDynTree::KinDynComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::KinDynComputations * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "KinDynComputations_getWorldTransform" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (arg1)->getWorldTransform(arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Transform(static_cast< const iDynTree::Transform& >(result))), SWIGTYPE_p_iDynTree__Transform, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_KinDynComputations_getWorldTransform(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__KinDynComputations, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_KinDynComputations_getWorldTransform__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__KinDynComputations, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_KinDynComputations_getWorldTransform__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'KinDynComputations_getWorldTransform'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::KinDynComputations::getWorldTransform(iDynTree::FrameIndex const)\n"
    "    iDynTree::KinDynComputations::getWorldTransform(std::string)\n");
  return 1;
}


int _wrap_KinDynComputations_getRelativeTransform__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::KinDynComputations *arg1 = (iDynTree::KinDynComputations *) 0 ;
  iDynTree::FrameIndex arg2 ;
  iDynTree::FrameIndex arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  iDynTree::Transform result;
  
  if (!SWIG_check_num_args("KinDynComputations_getRelativeTransform",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__KinDynComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KinDynComputations_getRelativeTransform" "', argument " "1"" of type '" "iDynTree::KinDynComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::KinDynComputations * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "KinDynComputations_getRelativeTransform" "', argument " "2"" of type '" "iDynTree::FrameIndex""'");
  } 
  arg2 = static_cast< iDynTree::FrameIndex >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "KinDynComputations_getRelativeTransform" "', argument " "3"" of type '" "iDynTree::FrameIndex""'");
  } 
  arg3 = static_cast< iDynTree::FrameIndex >(val3);
  result = (arg1)->getRelativeTransform(arg2,arg3);
  _out = SWIG_NewPointerObj((new iDynTree::Transform(static_cast< const iDynTree::Transform& >(result))), SWIGTYPE_p_iDynTree__Transform, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_KinDynComputations_getRelativeTransformExplicit(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::KinDynComputations *arg1 = (iDynTree::KinDynComputations *) 0 ;
  iDynTree::FrameIndex arg2 ;
  iDynTree::FrameIndex arg3 ;
  iDynTree::FrameIndex arg4 ;
  iDynTree::FrameIndex arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  mxArray * _out;
  iDynTree::Transform result;
  
  if (!SWIG_check_num_args("KinDynComputations_getRelativeTransformExplicit",argc,5,5,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__KinDynComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KinDynComputations_getRelativeTransformExplicit" "', argument " "1"" of type '" "iDynTree::KinDynComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::KinDynComputations * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "KinDynComputations_getRelativeTransformExplicit" "', argument " "2"" of type '" "iDynTree::FrameIndex""'");
  } 
  arg2 = static_cast< iDynTree::FrameIndex >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "KinDynComputations_getRelativeTransformExplicit" "', argument " "3"" of type '" "iDynTree::FrameIndex""'");
  } 
  arg3 = static_cast< iDynTree::FrameIndex >(val3);
  ecode4 = SWIG_AsVal_int(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "KinDynComputations_getRelativeTransformExplicit" "', argument " "4"" of type '" "iDynTree::FrameIndex""'");
  } 
  arg4 = static_cast< iDynTree::FrameIndex >(val4);
  ecode5 = SWIG_AsVal_int(argv[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "KinDynComputations_getRelativeTransformExplicit" "', argument " "5"" of type '" "iDynTree::FrameIndex""'");
  } 
  arg5 = static_cast< iDynTree::FrameIndex >(val5);
  result = (arg1)->getRelativeTransformExplicit(arg2,arg3,arg4,arg5);
  _out = SWIG_NewPointerObj((new iDynTree::Transform(static_cast< const iDynTree::Transform& >(result))), SWIGTYPE_p_iDynTree__Transform, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_KinDynComputations_getRelativeTransform__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::KinDynComputations *arg1 = (iDynTree::KinDynComputations *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  mxArray * _out;
  iDynTree::Transform result;
  
  if (!SWIG_check_num_args("KinDynComputations_getRelativeTransform",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__KinDynComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KinDynComputations_getRelativeTransform" "', argument " "1"" of type '" "iDynTree::KinDynComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::KinDynComputations * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KinDynComputations_getRelativeTransform" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KinDynComputations_getRelativeTransform" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "KinDynComputations_getRelativeTransform" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KinDynComputations_getRelativeTransform" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->getRelativeTransform((std::string const &)*arg2,(std::string const &)*arg3);
  _out = SWIG_NewPointerObj((new iDynTree::Transform(static_cast< const iDynTree::Transform& >(result))), SWIGTYPE_p_iDynTree__Transform, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 1;
}


int _wrap_KinDynComputations_getRelativeTransform(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__KinDynComputations, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_KinDynComputations_getRelativeTransform__SWIG_0(resc,resv,argc,argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__KinDynComputations, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_KinDynComputations_getRelativeTransform__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'KinDynComputations_getRelativeTransform'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::KinDynComputations::getRelativeTransform(iDynTree::FrameIndex const,iDynTree::FrameIndex const)\n"
    "    iDynTree::KinDynComputations::getRelativeTransform(std::string const &,std::string const &)\n");
  return 1;
}


int _wrap_KinDynComputations_getFrameVel__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::KinDynComputations *arg1 = (iDynTree::KinDynComputations *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  iDynTree::Twist result;
  
  if (!SWIG_check_num_args("KinDynComputations_getFrameVel",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__KinDynComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KinDynComputations_getFrameVel" "', argument " "1"" of type '" "iDynTree::KinDynComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::KinDynComputations * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KinDynComputations_getFrameVel" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KinDynComputations_getFrameVel" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->getFrameVel((std::string const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Twist(static_cast< const iDynTree::Twist& >(result))), SWIGTYPE_p_iDynTree__Twist, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_KinDynComputations_getFrameVel__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::KinDynComputations *arg1 = (iDynTree::KinDynComputations *) 0 ;
  iDynTree::FrameIndex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::Twist result;
  
  if (!SWIG_check_num_args("KinDynComputations_getFrameVel",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__KinDynComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KinDynComputations_getFrameVel" "', argument " "1"" of type '" "iDynTree::KinDynComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::KinDynComputations * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "KinDynComputations_getFrameVel" "', argument " "2"" of type '" "iDynTree::FrameIndex""'");
  } 
  arg2 = static_cast< iDynTree::FrameIndex >(val2);
  result = (arg1)->getFrameVel(arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Twist(static_cast< const iDynTree::Twist& >(result))), SWIGTYPE_p_iDynTree__Twist, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_KinDynComputations_getFrameVel(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__KinDynComputations, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_KinDynComputations_getFrameVel__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__KinDynComputations, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_KinDynComputations_getFrameVel__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'KinDynComputations_getFrameVel'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::KinDynComputations::getFrameVel(std::string const &)\n"
    "    iDynTree::KinDynComputations::getFrameVel(iDynTree::FrameIndex const)\n");
  return 1;
}


int _wrap_KinDynComputations_getFrameFreeFloatingJacobian__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::KinDynComputations *arg1 = (iDynTree::KinDynComputations *) 0 ;
  std::string *arg2 = 0 ;
  iDynTree::MatrixDynSize *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("KinDynComputations_getFrameFreeFloatingJacobian",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__KinDynComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KinDynComputations_getFrameFreeFloatingJacobian" "', argument " "1"" of type '" "iDynTree::KinDynComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::KinDynComputations * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KinDynComputations_getFrameFreeFloatingJacobian" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KinDynComputations_getFrameFreeFloatingJacobian" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__MatrixDynSize,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "KinDynComputations_getFrameFreeFloatingJacobian" "', argument " "3"" of type '" "iDynTree::MatrixDynSize &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KinDynComputations_getFrameFreeFloatingJacobian" "', argument " "3"" of type '" "iDynTree::MatrixDynSize &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::MatrixDynSize * >(argp3);
  result = (bool)(arg1)->getFrameFreeFloatingJacobian((std::string const &)*arg2,*arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_KinDynComputations_getFrameFreeFloatingJacobian__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::KinDynComputations *arg1 = (iDynTree::KinDynComputations *) 0 ;
  iDynTree::FrameIndex arg2 ;
  iDynTree::MatrixDynSize *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("KinDynComputations_getFrameFreeFloatingJacobian",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__KinDynComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KinDynComputations_getFrameFreeFloatingJacobian" "', argument " "1"" of type '" "iDynTree::KinDynComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::KinDynComputations * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "KinDynComputations_getFrameFreeFloatingJacobian" "', argument " "2"" of type '" "iDynTree::FrameIndex""'");
  } 
  arg2 = static_cast< iDynTree::FrameIndex >(val2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__MatrixDynSize,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "KinDynComputations_getFrameFreeFloatingJacobian" "', argument " "3"" of type '" "iDynTree::MatrixDynSize &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KinDynComputations_getFrameFreeFloatingJacobian" "', argument " "3"" of type '" "iDynTree::MatrixDynSize &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::MatrixDynSize * >(argp3);
  result = (bool)(arg1)->getFrameFreeFloatingJacobian(arg2,*arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_KinDynComputations_getFrameFreeFloatingJacobian(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__KinDynComputations, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_iDynTree__MatrixDynSize, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_KinDynComputations_getFrameFreeFloatingJacobian__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__KinDynComputations, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_iDynTree__MatrixDynSize, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_KinDynComputations_getFrameFreeFloatingJacobian__SWIG_0(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'KinDynComputations_getFrameFreeFloatingJacobian'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::KinDynComputations::getFrameFreeFloatingJacobian(std::string const &,iDynTree::MatrixDynSize &)\n"
    "    iDynTree::KinDynComputations::getFrameFreeFloatingJacobian(iDynTree::FrameIndex const,iDynTree::MatrixDynSize &)\n");
  return 1;
}


int _wrap_KinDynComputations_getRelativeJacobian(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::KinDynComputations *arg1 = (iDynTree::KinDynComputations *) 0 ;
  iDynTree::FrameIndex arg2 ;
  iDynTree::FrameIndex arg3 ;
  iDynTree::MatrixDynSize *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("KinDynComputations_getRelativeJacobian",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__KinDynComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KinDynComputations_getRelativeJacobian" "', argument " "1"" of type '" "iDynTree::KinDynComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::KinDynComputations * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "KinDynComputations_getRelativeJacobian" "', argument " "2"" of type '" "iDynTree::FrameIndex""'");
  } 
  arg2 = static_cast< iDynTree::FrameIndex >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "KinDynComputations_getRelativeJacobian" "', argument " "3"" of type '" "iDynTree::FrameIndex""'");
  } 
  arg3 = static_cast< iDynTree::FrameIndex >(val3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__MatrixDynSize,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "KinDynComputations_getRelativeJacobian" "', argument " "4"" of type '" "iDynTree::MatrixDynSize &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KinDynComputations_getRelativeJacobian" "', argument " "4"" of type '" "iDynTree::MatrixDynSize &""'"); 
  }
  arg4 = reinterpret_cast< iDynTree::MatrixDynSize * >(argp4);
  result = (bool)(arg1)->getRelativeJacobian(arg2,arg3,*arg4);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_KinDynComputations_getRelativeJacobianExplicit(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::KinDynComputations *arg1 = (iDynTree::KinDynComputations *) 0 ;
  iDynTree::FrameIndex arg2 ;
  iDynTree::FrameIndex arg3 ;
  iDynTree::FrameIndex arg4 ;
  iDynTree::FrameIndex arg5 ;
  iDynTree::MatrixDynSize *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("KinDynComputations_getRelativeJacobianExplicit",argc,6,6,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__KinDynComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KinDynComputations_getRelativeJacobianExplicit" "', argument " "1"" of type '" "iDynTree::KinDynComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::KinDynComputations * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "KinDynComputations_getRelativeJacobianExplicit" "', argument " "2"" of type '" "iDynTree::FrameIndex""'");
  } 
  arg2 = static_cast< iDynTree::FrameIndex >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "KinDynComputations_getRelativeJacobianExplicit" "', argument " "3"" of type '" "iDynTree::FrameIndex""'");
  } 
  arg3 = static_cast< iDynTree::FrameIndex >(val3);
  ecode4 = SWIG_AsVal_int(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "KinDynComputations_getRelativeJacobianExplicit" "', argument " "4"" of type '" "iDynTree::FrameIndex""'");
  } 
  arg4 = static_cast< iDynTree::FrameIndex >(val4);
  ecode5 = SWIG_AsVal_int(argv[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "KinDynComputations_getRelativeJacobianExplicit" "', argument " "5"" of type '" "iDynTree::FrameIndex""'");
  } 
  arg5 = static_cast< iDynTree::FrameIndex >(val5);
  res6 = SWIG_ConvertPtr(argv[5], &argp6, SWIGTYPE_p_iDynTree__MatrixDynSize,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "KinDynComputations_getRelativeJacobianExplicit" "', argument " "6"" of type '" "iDynTree::MatrixDynSize &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KinDynComputations_getRelativeJacobianExplicit" "', argument " "6"" of type '" "iDynTree::MatrixDynSize &""'"); 
  }
  arg6 = reinterpret_cast< iDynTree::MatrixDynSize * >(argp6);
  result = (bool)(arg1)->getRelativeJacobianExplicit(arg2,arg3,arg4,arg5,*arg6);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_KinDynComputations_getFrameBiasAcc__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::KinDynComputations *arg1 = (iDynTree::KinDynComputations *) 0 ;
  iDynTree::FrameIndex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::Vector6 result;
  
  if (!SWIG_check_num_args("KinDynComputations_getFrameBiasAcc",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__KinDynComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KinDynComputations_getFrameBiasAcc" "', argument " "1"" of type '" "iDynTree::KinDynComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::KinDynComputations * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "KinDynComputations_getFrameBiasAcc" "', argument " "2"" of type '" "iDynTree::FrameIndex""'");
  } 
  arg2 = static_cast< iDynTree::FrameIndex >(val2);
  result = (arg1)->getFrameBiasAcc(arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Vector6(static_cast< const iDynTree::Vector6& >(result))), SWIGTYPE_p_iDynTree__VectorFixSizeT_6_t, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_KinDynComputations_getFrameBiasAcc__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::KinDynComputations *arg1 = (iDynTree::KinDynComputations *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  iDynTree::Vector6 result;
  
  if (!SWIG_check_num_args("KinDynComputations_getFrameBiasAcc",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__KinDynComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KinDynComputations_getFrameBiasAcc" "', argument " "1"" of type '" "iDynTree::KinDynComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::KinDynComputations * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KinDynComputations_getFrameBiasAcc" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KinDynComputations_getFrameBiasAcc" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->getFrameBiasAcc((std::string const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Vector6(static_cast< const iDynTree::Vector6& >(result))), SWIGTYPE_p_iDynTree__VectorFixSizeT_6_t, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_KinDynComputations_getFrameBiasAcc(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__KinDynComputations, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_KinDynComputations_getFrameBiasAcc__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__KinDynComputations, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_KinDynComputations_getFrameBiasAcc__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'KinDynComputations_getFrameBiasAcc'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::KinDynComputations::getFrameBiasAcc(iDynTree::FrameIndex const)\n"
    "    iDynTree::KinDynComputations::getFrameBiasAcc(std::string const &)\n");
  return 1;
}


int _wrap_KinDynComputations_getCenterOfMassPosition(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::KinDynComputations *arg1 = (iDynTree::KinDynComputations *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Position result;
  
  if (!SWIG_check_num_args("KinDynComputations_getCenterOfMassPosition",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__KinDynComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KinDynComputations_getCenterOfMassPosition" "', argument " "1"" of type '" "iDynTree::KinDynComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::KinDynComputations * >(argp1);
  result = (arg1)->getCenterOfMassPosition();
  _out = SWIG_NewPointerObj((new iDynTree::Position(static_cast< const iDynTree::Position& >(result))), SWIGTYPE_p_iDynTree__Position, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_KinDynComputations_getCenterOfMassVelocity(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::KinDynComputations *arg1 = (iDynTree::KinDynComputations *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Vector3 result;
  
  if (!SWIG_check_num_args("KinDynComputations_getCenterOfMassVelocity",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__KinDynComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KinDynComputations_getCenterOfMassVelocity" "', argument " "1"" of type '" "iDynTree::KinDynComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::KinDynComputations * >(argp1);
  result = (arg1)->getCenterOfMassVelocity();
  _out = SWIG_NewPointerObj((new iDynTree::Vector3(static_cast< const iDynTree::Vector3& >(result))), SWIGTYPE_p_iDynTree__VectorFixSizeT_3_t, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_KinDynComputations_getCenterOfMassJacobian(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::KinDynComputations *arg1 = (iDynTree::KinDynComputations *) 0 ;
  iDynTree::MatrixDynSize *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("KinDynComputations_getCenterOfMassJacobian",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__KinDynComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KinDynComputations_getCenterOfMassJacobian" "', argument " "1"" of type '" "iDynTree::KinDynComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::KinDynComputations * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__MatrixDynSize,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KinDynComputations_getCenterOfMassJacobian" "', argument " "2"" of type '" "iDynTree::MatrixDynSize &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KinDynComputations_getCenterOfMassJacobian" "', argument " "2"" of type '" "iDynTree::MatrixDynSize &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::MatrixDynSize * >(argp2);
  result = (bool)(arg1)->getCenterOfMassJacobian(*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_KinDynComputations_getCenterOfMassBiasAcc(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::KinDynComputations *arg1 = (iDynTree::KinDynComputations *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Vector3 result;
  
  if (!SWIG_check_num_args("KinDynComputations_getCenterOfMassBiasAcc",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__KinDynComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KinDynComputations_getCenterOfMassBiasAcc" "', argument " "1"" of type '" "iDynTree::KinDynComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::KinDynComputations * >(argp1);
  result = (arg1)->getCenterOfMassBiasAcc();
  _out = SWIG_NewPointerObj((new iDynTree::Vector3(static_cast< const iDynTree::Vector3& >(result))), SWIGTYPE_p_iDynTree__VectorFixSizeT_3_t, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_KinDynComputations_getAverageVelocity(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::KinDynComputations *arg1 = (iDynTree::KinDynComputations *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Twist result;
  
  if (!SWIG_check_num_args("KinDynComputations_getAverageVelocity",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__KinDynComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KinDynComputations_getAverageVelocity" "', argument " "1"" of type '" "iDynTree::KinDynComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::KinDynComputations * >(argp1);
  result = (arg1)->getAverageVelocity();
  _out = SWIG_NewPointerObj((new iDynTree::Twist(static_cast< const iDynTree::Twist& >(result))), SWIGTYPE_p_iDynTree__Twist, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_KinDynComputations_getAverageVelocityJacobian(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::KinDynComputations *arg1 = (iDynTree::KinDynComputations *) 0 ;
  iDynTree::MatrixDynSize *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("KinDynComputations_getAverageVelocityJacobian",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__KinDynComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KinDynComputations_getAverageVelocityJacobian" "', argument " "1"" of type '" "iDynTree::KinDynComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::KinDynComputations * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__MatrixDynSize,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KinDynComputations_getAverageVelocityJacobian" "', argument " "2"" of type '" "iDynTree::MatrixDynSize &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KinDynComputations_getAverageVelocityJacobian" "', argument " "2"" of type '" "iDynTree::MatrixDynSize &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::MatrixDynSize * >(argp2);
  result = (bool)(arg1)->getAverageVelocityJacobian(*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_KinDynComputations_getCentroidalAverageVelocity(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::KinDynComputations *arg1 = (iDynTree::KinDynComputations *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Twist result;
  
  if (!SWIG_check_num_args("KinDynComputations_getCentroidalAverageVelocity",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__KinDynComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KinDynComputations_getCentroidalAverageVelocity" "', argument " "1"" of type '" "iDynTree::KinDynComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::KinDynComputations * >(argp1);
  result = (arg1)->getCentroidalAverageVelocity();
  _out = SWIG_NewPointerObj((new iDynTree::Twist(static_cast< const iDynTree::Twist& >(result))), SWIGTYPE_p_iDynTree__Twist, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_KinDynComputations_getCentroidalAverageVelocityJacobian(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::KinDynComputations *arg1 = (iDynTree::KinDynComputations *) 0 ;
  iDynTree::MatrixDynSize *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("KinDynComputations_getCentroidalAverageVelocityJacobian",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__KinDynComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KinDynComputations_getCentroidalAverageVelocityJacobian" "', argument " "1"" of type '" "iDynTree::KinDynComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::KinDynComputations * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__MatrixDynSize,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KinDynComputations_getCentroidalAverageVelocityJacobian" "', argument " "2"" of type '" "iDynTree::MatrixDynSize &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KinDynComputations_getCentroidalAverageVelocityJacobian" "', argument " "2"" of type '" "iDynTree::MatrixDynSize &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::MatrixDynSize * >(argp2);
  result = (bool)(arg1)->getCentroidalAverageVelocityJacobian(*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_KinDynComputations_getLinearAngularMomentum(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::KinDynComputations *arg1 = (iDynTree::KinDynComputations *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::SpatialMomentum result;
  
  if (!SWIG_check_num_args("KinDynComputations_getLinearAngularMomentum",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__KinDynComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KinDynComputations_getLinearAngularMomentum" "', argument " "1"" of type '" "iDynTree::KinDynComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::KinDynComputations * >(argp1);
  result = (arg1)->getLinearAngularMomentum();
  _out = SWIG_NewPointerObj((new iDynTree::SpatialMomentum(static_cast< const iDynTree::SpatialMomentum& >(result))), SWIGTYPE_p_iDynTree__SpatialMomentum, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_KinDynComputations_getLinearAngularMomentumJacobian(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::KinDynComputations *arg1 = (iDynTree::KinDynComputations *) 0 ;
  iDynTree::MatrixDynSize *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("KinDynComputations_getLinearAngularMomentumJacobian",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__KinDynComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KinDynComputations_getLinearAngularMomentumJacobian" "', argument " "1"" of type '" "iDynTree::KinDynComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::KinDynComputations * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__MatrixDynSize,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KinDynComputations_getLinearAngularMomentumJacobian" "', argument " "2"" of type '" "iDynTree::MatrixDynSize &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KinDynComputations_getLinearAngularMomentumJacobian" "', argument " "2"" of type '" "iDynTree::MatrixDynSize &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::MatrixDynSize * >(argp2);
  result = (bool)(arg1)->getLinearAngularMomentumJacobian(*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_KinDynComputations_getCentroidalTotalMomentum(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::KinDynComputations *arg1 = (iDynTree::KinDynComputations *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::SpatialMomentum result;
  
  if (!SWIG_check_num_args("KinDynComputations_getCentroidalTotalMomentum",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__KinDynComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KinDynComputations_getCentroidalTotalMomentum" "', argument " "1"" of type '" "iDynTree::KinDynComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::KinDynComputations * >(argp1);
  result = (arg1)->getCentroidalTotalMomentum();
  _out = SWIG_NewPointerObj((new iDynTree::SpatialMomentum(static_cast< const iDynTree::SpatialMomentum& >(result))), SWIGTYPE_p_iDynTree__SpatialMomentum, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_KinDynComputations_getFreeFloatingMassMatrix(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::KinDynComputations *arg1 = (iDynTree::KinDynComputations *) 0 ;
  iDynTree::MatrixDynSize *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("KinDynComputations_getFreeFloatingMassMatrix",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__KinDynComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KinDynComputations_getFreeFloatingMassMatrix" "', argument " "1"" of type '" "iDynTree::KinDynComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::KinDynComputations * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__MatrixDynSize,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KinDynComputations_getFreeFloatingMassMatrix" "', argument " "2"" of type '" "iDynTree::MatrixDynSize &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KinDynComputations_getFreeFloatingMassMatrix" "', argument " "2"" of type '" "iDynTree::MatrixDynSize &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::MatrixDynSize * >(argp2);
  result = (bool)(arg1)->getFreeFloatingMassMatrix(*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_KinDynComputations_inverseDynamics(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::KinDynComputations *arg1 = (iDynTree::KinDynComputations *) 0 ;
  iDynTree::Vector6 *arg2 = 0 ;
  iDynTree::VectorDynSize *arg3 = 0 ;
  iDynTree::LinkNetExternalWrenches *arg4 = 0 ;
  iDynTree::FreeFloatingGeneralizedTorques *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("KinDynComputations_inverseDynamics",argc,5,5,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__KinDynComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KinDynComputations_inverseDynamics" "', argument " "1"" of type '" "iDynTree::KinDynComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::KinDynComputations * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__VectorFixSizeT_6_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KinDynComputations_inverseDynamics" "', argument " "2"" of type '" "iDynTree::Vector6 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KinDynComputations_inverseDynamics" "', argument " "2"" of type '" "iDynTree::Vector6 const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Vector6 * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "KinDynComputations_inverseDynamics" "', argument " "3"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KinDynComputations_inverseDynamics" "', argument " "3"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::VectorDynSize * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__LinkWrenches,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "KinDynComputations_inverseDynamics" "', argument " "4"" of type '" "iDynTree::LinkNetExternalWrenches const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KinDynComputations_inverseDynamics" "', argument " "4"" of type '" "iDynTree::LinkNetExternalWrenches const &""'"); 
  }
  arg4 = reinterpret_cast< iDynTree::LinkNetExternalWrenches * >(argp4);
  res5 = SWIG_ConvertPtr(argv[4], &argp5, SWIGTYPE_p_iDynTree__FreeFloatingGeneralizedTorques,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "KinDynComputations_inverseDynamics" "', argument " "5"" of type '" "iDynTree::FreeFloatingGeneralizedTorques &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KinDynComputations_inverseDynamics" "', argument " "5"" of type '" "iDynTree::FreeFloatingGeneralizedTorques &""'"); 
  }
  arg5 = reinterpret_cast< iDynTree::FreeFloatingGeneralizedTorques * >(argp5);
  result = (bool)(arg1)->inverseDynamics((iDynTree::Vector6 const &)*arg2,(iDynTree::VectorDynSize const &)*arg3,(iDynTree::LinkNetExternalWrenches const &)*arg4,*arg5);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_KinDynComputations_generalizedBiasForces(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::KinDynComputations *arg1 = (iDynTree::KinDynComputations *) 0 ;
  iDynTree::FreeFloatingGeneralizedTorques *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("KinDynComputations_generalizedBiasForces",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__KinDynComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KinDynComputations_generalizedBiasForces" "', argument " "1"" of type '" "iDynTree::KinDynComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::KinDynComputations * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__FreeFloatingGeneralizedTorques,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KinDynComputations_generalizedBiasForces" "', argument " "2"" of type '" "iDynTree::FreeFloatingGeneralizedTorques &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KinDynComputations_generalizedBiasForces" "', argument " "2"" of type '" "iDynTree::FreeFloatingGeneralizedTorques &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::FreeFloatingGeneralizedTorques * >(argp2);
  result = (bool)(arg1)->generalizedBiasForces(*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_KinDynComputations_generalizedGravityForces(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::KinDynComputations *arg1 = (iDynTree::KinDynComputations *) 0 ;
  iDynTree::FreeFloatingGeneralizedTorques *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("KinDynComputations_generalizedGravityForces",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__KinDynComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KinDynComputations_generalizedGravityForces" "', argument " "1"" of type '" "iDynTree::KinDynComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::KinDynComputations * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__FreeFloatingGeneralizedTorques,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KinDynComputations_generalizedGravityForces" "', argument " "2"" of type '" "iDynTree::FreeFloatingGeneralizedTorques &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KinDynComputations_generalizedGravityForces" "', argument " "2"" of type '" "iDynTree::FreeFloatingGeneralizedTorques &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::FreeFloatingGeneralizedTorques * >(argp2);
  result = (bool)(arg1)->generalizedGravityForces(*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_ICamera(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ICamera *arg1 = (iDynTree::ICamera *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_ICamera",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ICamera, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ICamera" "', argument " "1"" of type '" "iDynTree::ICamera *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ICamera * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ICamera_setPosition(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ICamera *arg1 = (iDynTree::ICamera *) 0 ;
  iDynTree::Position *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("ICamera_setPosition",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ICamera, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ICamera_setPosition" "', argument " "1"" of type '" "iDynTree::ICamera *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ICamera * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Position,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ICamera_setPosition" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ICamera_setPosition" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Position * >(argp2);
  (arg1)->setPosition((iDynTree::Position const &)*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ICamera_setTarget(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ICamera *arg1 = (iDynTree::ICamera *) 0 ;
  iDynTree::Position *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("ICamera_setTarget",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ICamera, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ICamera_setTarget" "', argument " "1"" of type '" "iDynTree::ICamera *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ICamera * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Position,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ICamera_setTarget" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ICamera_setTarget" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Position * >(argp2);
  (arg1)->setTarget((iDynTree::Position const &)*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ICamera_setUpVector(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ICamera *arg1 = (iDynTree::ICamera *) 0 ;
  iDynTree::Direction *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("ICamera_setUpVector",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ICamera, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ICamera_setUpVector" "', argument " "1"" of type '" "iDynTree::ICamera *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ICamera * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Direction,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ICamera_setUpVector" "', argument " "2"" of type '" "iDynTree::Direction const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ICamera_setUpVector" "', argument " "2"" of type '" "iDynTree::Direction const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Direction * >(argp2);
  (arg1)->setUpVector((iDynTree::Direction const &)*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ColorViz_r_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ColorViz *arg1 = (iDynTree::ColorViz *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("ColorViz_r_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ColorViz, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ColorViz_r_set" "', argument " "1"" of type '" "iDynTree::ColorViz *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ColorViz * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ColorViz_r_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->r = arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ColorViz_r_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ColorViz *arg1 = (iDynTree::ColorViz *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  float result;
  
  if (!SWIG_check_num_args("ColorViz_r_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ColorViz, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ColorViz_r_get" "', argument " "1"" of type '" "iDynTree::ColorViz *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ColorViz * >(argp1);
  result = (float) ((arg1)->r);
  _out = SWIG_From_float(static_cast< float >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ColorViz_g_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ColorViz *arg1 = (iDynTree::ColorViz *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("ColorViz_g_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ColorViz, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ColorViz_g_set" "', argument " "1"" of type '" "iDynTree::ColorViz *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ColorViz * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ColorViz_g_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->g = arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ColorViz_g_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ColorViz *arg1 = (iDynTree::ColorViz *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  float result;
  
  if (!SWIG_check_num_args("ColorViz_g_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ColorViz, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ColorViz_g_get" "', argument " "1"" of type '" "iDynTree::ColorViz *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ColorViz * >(argp1);
  result = (float) ((arg1)->g);
  _out = SWIG_From_float(static_cast< float >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ColorViz_b_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ColorViz *arg1 = (iDynTree::ColorViz *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("ColorViz_b_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ColorViz, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ColorViz_b_set" "', argument " "1"" of type '" "iDynTree::ColorViz *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ColorViz * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ColorViz_b_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->b = arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ColorViz_b_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ColorViz *arg1 = (iDynTree::ColorViz *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  float result;
  
  if (!SWIG_check_num_args("ColorViz_b_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ColorViz, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ColorViz_b_get" "', argument " "1"" of type '" "iDynTree::ColorViz *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ColorViz * >(argp1);
  result = (float) ((arg1)->b);
  _out = SWIG_From_float(static_cast< float >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ColorViz_a_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ColorViz *arg1 = (iDynTree::ColorViz *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("ColorViz_a_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ColorViz, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ColorViz_a_set" "', argument " "1"" of type '" "iDynTree::ColorViz *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ColorViz * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ColorViz_a_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->a = arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ColorViz_a_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ColorViz *arg1 = (iDynTree::ColorViz *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  float result;
  
  if (!SWIG_check_num_args("ColorViz_a_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ColorViz, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ColorViz_a_get" "', argument " "1"" of type '" "iDynTree::ColorViz *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ColorViz * >(argp1);
  result = (float) ((arg1)->a);
  _out = SWIG_From_float(static_cast< float >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_ColorViz__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::ColorViz *result = 0 ;
  
  if (!SWIG_check_num_args("new_ColorViz",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::ColorViz *)new iDynTree::ColorViz();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__ColorViz, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_ColorViz__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  mxArray * _out;
  iDynTree::ColorViz *result = 0 ;
  
  if (!SWIG_check_num_args("new_ColorViz",argc,4,4,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_float(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ColorViz" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  ecode2 = SWIG_AsVal_float(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ColorViz" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ColorViz" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_float(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ColorViz" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  result = (iDynTree::ColorViz *)new iDynTree::ColorViz(arg1,arg2,arg3,arg4);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__ColorViz, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_ColorViz__SWIG_2(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Vector4 *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::ColorViz *result = 0 ;
  
  if (!SWIG_check_num_args("new_ColorViz",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__VectorFixSizeT_4_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ColorViz" "', argument " "1"" of type '" "iDynTree::Vector4 const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ColorViz" "', argument " "1"" of type '" "iDynTree::Vector4 const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Vector4 * >(argp1);
  result = (iDynTree::ColorViz *)new iDynTree::ColorViz((iDynTree::Vector4 const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__ColorViz, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_ColorViz(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_ColorViz__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__VectorFixSizeT_4_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ColorViz__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_ColorViz__SWIG_1(resc,resv,argc,argv);
          }
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_ColorViz'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::ColorViz::ColorViz()\n"
    "    iDynTree::ColorViz::ColorViz(float,float,float,float)\n"
    "    iDynTree::ColorViz::ColorViz(iDynTree::Vector4 const &)\n");
  return 1;
}


int _wrap_delete_ColorViz(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ColorViz *arg1 = (iDynTree::ColorViz *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_ColorViz",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ColorViz, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ColorViz" "', argument " "1"" of type '" "iDynTree::ColorViz *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ColorViz * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_ILight(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ILight *arg1 = (iDynTree::ILight *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_ILight",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ILight, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ILight" "', argument " "1"" of type '" "iDynTree::ILight *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ILight * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ILight_getName(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ILight *arg1 = (iDynTree::ILight *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string *result = 0 ;
  
  if (!SWIG_check_num_args("ILight_getName",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ILight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ILight_getName" "', argument " "1"" of type '" "iDynTree::ILight const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ILight * >(argp1);
  result = (std::string *) &((iDynTree::ILight const *)arg1)->getName();
  _out = SWIG_From_std_string(static_cast< std::string >(*result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ILight_setType(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ILight *arg1 = (iDynTree::ILight *) 0 ;
  iDynTree::LightType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("ILight_setType",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ILight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ILight_setType" "', argument " "1"" of type '" "iDynTree::ILight *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ILight * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ILight_setType" "', argument " "2"" of type '" "iDynTree::LightType""'");
  } 
  arg2 = static_cast< iDynTree::LightType >(val2);
  (arg1)->setType(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ILight_getType(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ILight *arg1 = (iDynTree::ILight *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::LightType result;
  
  if (!SWIG_check_num_args("ILight_getType",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ILight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ILight_getType" "', argument " "1"" of type '" "iDynTree::ILight *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ILight * >(argp1);
  result = (iDynTree::LightType)(arg1)->getType();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ILight_setPosition(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ILight *arg1 = (iDynTree::ILight *) 0 ;
  iDynTree::Position *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("ILight_setPosition",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ILight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ILight_setPosition" "', argument " "1"" of type '" "iDynTree::ILight *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ILight * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Position,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ILight_setPosition" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ILight_setPosition" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Position * >(argp2);
  (arg1)->setPosition((iDynTree::Position const &)*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ILight_getPosition(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ILight *arg1 = (iDynTree::ILight *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Position result;
  
  if (!SWIG_check_num_args("ILight_getPosition",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ILight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ILight_getPosition" "', argument " "1"" of type '" "iDynTree::ILight *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ILight * >(argp1);
  result = (arg1)->getPosition();
  _out = SWIG_NewPointerObj((new iDynTree::Position(static_cast< const iDynTree::Position& >(result))), SWIGTYPE_p_iDynTree__Position, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ILight_setDirection(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ILight *arg1 = (iDynTree::ILight *) 0 ;
  iDynTree::Direction *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("ILight_setDirection",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ILight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ILight_setDirection" "', argument " "1"" of type '" "iDynTree::ILight *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ILight * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Direction,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ILight_setDirection" "', argument " "2"" of type '" "iDynTree::Direction const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ILight_setDirection" "', argument " "2"" of type '" "iDynTree::Direction const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Direction * >(argp2);
  (arg1)->setDirection((iDynTree::Direction const &)*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ILight_getDirection(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ILight *arg1 = (iDynTree::ILight *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Direction result;
  
  if (!SWIG_check_num_args("ILight_getDirection",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ILight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ILight_getDirection" "', argument " "1"" of type '" "iDynTree::ILight *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ILight * >(argp1);
  result = (arg1)->getDirection();
  _out = SWIG_NewPointerObj((new iDynTree::Direction(static_cast< const iDynTree::Direction& >(result))), SWIGTYPE_p_iDynTree__Direction, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ILight_setAmbientColor(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ILight *arg1 = (iDynTree::ILight *) 0 ;
  iDynTree::ColorViz *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("ILight_setAmbientColor",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ILight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ILight_setAmbientColor" "', argument " "1"" of type '" "iDynTree::ILight *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ILight * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__ColorViz,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ILight_setAmbientColor" "', argument " "2"" of type '" "iDynTree::ColorViz const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ILight_setAmbientColor" "', argument " "2"" of type '" "iDynTree::ColorViz const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::ColorViz * >(argp2);
  (arg1)->setAmbientColor((iDynTree::ColorViz const &)*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ILight_getAmbientColor(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ILight *arg1 = (iDynTree::ILight *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::ColorViz result;
  
  if (!SWIG_check_num_args("ILight_getAmbientColor",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ILight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ILight_getAmbientColor" "', argument " "1"" of type '" "iDynTree::ILight *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ILight * >(argp1);
  result = (arg1)->getAmbientColor();
  _out = SWIG_NewPointerObj((new iDynTree::ColorViz(static_cast< const iDynTree::ColorViz& >(result))), SWIGTYPE_p_iDynTree__ColorViz, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ILight_setSpecularColor(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ILight *arg1 = (iDynTree::ILight *) 0 ;
  iDynTree::ColorViz *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("ILight_setSpecularColor",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ILight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ILight_setSpecularColor" "', argument " "1"" of type '" "iDynTree::ILight *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ILight * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__ColorViz,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ILight_setSpecularColor" "', argument " "2"" of type '" "iDynTree::ColorViz const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ILight_setSpecularColor" "', argument " "2"" of type '" "iDynTree::ColorViz const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::ColorViz * >(argp2);
  (arg1)->setSpecularColor((iDynTree::ColorViz const &)*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ILight_getSpecularColor(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ILight *arg1 = (iDynTree::ILight *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::ColorViz result;
  
  if (!SWIG_check_num_args("ILight_getSpecularColor",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ILight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ILight_getSpecularColor" "', argument " "1"" of type '" "iDynTree::ILight *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ILight * >(argp1);
  result = (arg1)->getSpecularColor();
  _out = SWIG_NewPointerObj((new iDynTree::ColorViz(static_cast< const iDynTree::ColorViz& >(result))), SWIGTYPE_p_iDynTree__ColorViz, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ILight_setDiffuseColor(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ILight *arg1 = (iDynTree::ILight *) 0 ;
  iDynTree::ColorViz *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("ILight_setDiffuseColor",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ILight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ILight_setDiffuseColor" "', argument " "1"" of type '" "iDynTree::ILight *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ILight * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__ColorViz,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ILight_setDiffuseColor" "', argument " "2"" of type '" "iDynTree::ColorViz const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ILight_setDiffuseColor" "', argument " "2"" of type '" "iDynTree::ColorViz const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::ColorViz * >(argp2);
  (arg1)->setDiffuseColor((iDynTree::ColorViz const &)*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ILight_getDiffuseColor(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ILight *arg1 = (iDynTree::ILight *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::ColorViz result;
  
  if (!SWIG_check_num_args("ILight_getDiffuseColor",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ILight, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ILight_getDiffuseColor" "', argument " "1"" of type '" "iDynTree::ILight *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ILight * >(argp1);
  result = (arg1)->getDiffuseColor();
  _out = SWIG_NewPointerObj((new iDynTree::ColorViz(static_cast< const iDynTree::ColorViz& >(result))), SWIGTYPE_p_iDynTree__ColorViz, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_IEnvironment(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IEnvironment *arg1 = (iDynTree::IEnvironment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_IEnvironment",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IEnvironment, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IEnvironment" "', argument " "1"" of type '" "iDynTree::IEnvironment *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IEnvironment * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_IEnvironment_getElements(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IEnvironment *arg1 = (iDynTree::IEnvironment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!SWIG_check_num_args("IEnvironment_getElements",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IEnvironment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IEnvironment_getElements" "', argument " "1"" of type '" "iDynTree::IEnvironment *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IEnvironment * >(argp1);
  result = (arg1)->getElements();
  _out = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_IEnvironment_setElementVisibility(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IEnvironment *arg1 = (iDynTree::IEnvironment *) 0 ;
  std::string arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("IEnvironment_setElementVisibility",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IEnvironment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IEnvironment_setElementVisibility" "', argument " "1"" of type '" "iDynTree::IEnvironment *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IEnvironment * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "IEnvironment_setElementVisibility" "', argument " "2"" of type '" "std::string const""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode3 = SWIG_AsVal_bool(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IEnvironment_setElementVisibility" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (bool)(arg1)->setElementVisibility(arg2,arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_IEnvironment_setBackgroundColor(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IEnvironment *arg1 = (iDynTree::IEnvironment *) 0 ;
  iDynTree::ColorViz *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("IEnvironment_setBackgroundColor",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IEnvironment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IEnvironment_setBackgroundColor" "', argument " "1"" of type '" "iDynTree::IEnvironment *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IEnvironment * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__ColorViz,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IEnvironment_setBackgroundColor" "', argument " "2"" of type '" "iDynTree::ColorViz const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IEnvironment_setBackgroundColor" "', argument " "2"" of type '" "iDynTree::ColorViz const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::ColorViz * >(argp2);
  (arg1)->setBackgroundColor((iDynTree::ColorViz const &)*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_IEnvironment_setAmbientLight(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IEnvironment *arg1 = (iDynTree::IEnvironment *) 0 ;
  iDynTree::ColorViz *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("IEnvironment_setAmbientLight",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IEnvironment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IEnvironment_setAmbientLight" "', argument " "1"" of type '" "iDynTree::IEnvironment *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IEnvironment * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__ColorViz,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IEnvironment_setAmbientLight" "', argument " "2"" of type '" "iDynTree::ColorViz const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IEnvironment_setAmbientLight" "', argument " "2"" of type '" "iDynTree::ColorViz const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::ColorViz * >(argp2);
  (arg1)->setAmbientLight((iDynTree::ColorViz const &)*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_IEnvironment_getLights(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IEnvironment *arg1 = (iDynTree::IEnvironment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!SWIG_check_num_args("IEnvironment_getLights",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IEnvironment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IEnvironment_getLights" "', argument " "1"" of type '" "iDynTree::IEnvironment *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IEnvironment * >(argp1);
  result = (arg1)->getLights();
  _out = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_IEnvironment_addLight(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IEnvironment *arg1 = (iDynTree::IEnvironment *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("IEnvironment_addLight",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IEnvironment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IEnvironment_addLight" "', argument " "1"" of type '" "iDynTree::IEnvironment *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IEnvironment * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IEnvironment_addLight" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IEnvironment_addLight" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->addLight((std::string const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_IEnvironment_lightViz(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IEnvironment *arg1 = (iDynTree::IEnvironment *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  iDynTree::ILight *result = 0 ;
  
  if (!SWIG_check_num_args("IEnvironment_lightViz",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IEnvironment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IEnvironment_lightViz" "', argument " "1"" of type '" "iDynTree::IEnvironment *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IEnvironment * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IEnvironment_lightViz" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IEnvironment_lightViz" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (iDynTree::ILight *) &(arg1)->lightViz((std::string const &)*arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__ILight, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_IEnvironment_removeLight(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IEnvironment *arg1 = (iDynTree::IEnvironment *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("IEnvironment_removeLight",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IEnvironment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IEnvironment_removeLight" "', argument " "1"" of type '" "iDynTree::IEnvironment *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IEnvironment * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IEnvironment_removeLight" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IEnvironment_removeLight" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->removeLight((std::string const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_delete_IJetsVisualization(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IJetsVisualization *arg1 = (iDynTree::IJetsVisualization *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_IJetsVisualization",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IJetsVisualization, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IJetsVisualization" "', argument " "1"" of type '" "iDynTree::IJetsVisualization *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IJetsVisualization * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_IJetsVisualization_setJetsFrames(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IJetsVisualization *arg1 = (iDynTree::IJetsVisualization *) 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("IJetsVisualization_setJetsFrames",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IJetsVisualization, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IJetsVisualization_setJetsFrames" "', argument " "1"" of type '" "iDynTree::IJetsVisualization *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IJetsVisualization * >(argp1);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IJetsVisualization_setJetsFrames" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IJetsVisualization_setJetsFrames" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->setJetsFrames((std::vector< std::string,std::allocator< std::string > > const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_IJetsVisualization_getNrOfJets(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IJetsVisualization *arg1 = (iDynTree::IJetsVisualization *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  size_t result;
  
  if (!SWIG_check_num_args("IJetsVisualization_getNrOfJets",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IJetsVisualization, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IJetsVisualization_getNrOfJets" "', argument " "1"" of type '" "iDynTree::IJetsVisualization const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IJetsVisualization * >(argp1);
  result = ((iDynTree::IJetsVisualization const *)arg1)->getNrOfJets();
  _out = SWIG_From_size_t(static_cast< size_t >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_IJetsVisualization_getJetDirection(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IJetsVisualization *arg1 = (iDynTree::IJetsVisualization *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::Direction result;
  
  if (!SWIG_check_num_args("IJetsVisualization_getJetDirection",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IJetsVisualization, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IJetsVisualization_getJetDirection" "', argument " "1"" of type '" "iDynTree::IJetsVisualization const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IJetsVisualization * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IJetsVisualization_getJetDirection" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = ((iDynTree::IJetsVisualization const *)arg1)->getJetDirection(arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Direction(static_cast< const iDynTree::Direction& >(result))), SWIGTYPE_p_iDynTree__Direction, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_IJetsVisualization_setJetDirection(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IJetsVisualization *arg1 = (iDynTree::IJetsVisualization *) 0 ;
  int arg2 ;
  iDynTree::Direction *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("IJetsVisualization_setJetDirection",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IJetsVisualization, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IJetsVisualization_setJetDirection" "', argument " "1"" of type '" "iDynTree::IJetsVisualization *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IJetsVisualization * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IJetsVisualization_setJetDirection" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__Direction,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IJetsVisualization_setJetDirection" "', argument " "3"" of type '" "iDynTree::Direction const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IJetsVisualization_setJetDirection" "', argument " "3"" of type '" "iDynTree::Direction const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::Direction * >(argp3);
  result = (bool)(arg1)->setJetDirection(arg2,(iDynTree::Direction const &)*arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_IJetsVisualization_setJetColor(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IJetsVisualization *arg1 = (iDynTree::IJetsVisualization *) 0 ;
  int arg2 ;
  iDynTree::ColorViz *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("IJetsVisualization_setJetColor",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IJetsVisualization, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IJetsVisualization_setJetColor" "', argument " "1"" of type '" "iDynTree::IJetsVisualization *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IJetsVisualization * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IJetsVisualization_setJetColor" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__ColorViz,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IJetsVisualization_setJetColor" "', argument " "3"" of type '" "iDynTree::ColorViz const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IJetsVisualization_setJetColor" "', argument " "3"" of type '" "iDynTree::ColorViz const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::ColorViz * >(argp3);
  result = (bool)(arg1)->setJetColor(arg2,(iDynTree::ColorViz const &)*arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_IJetsVisualization_setJetsDimensions(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IJetsVisualization *arg1 = (iDynTree::IJetsVisualization *) 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  double temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  double temp4 ;
  double val4 ;
  int ecode4 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("IJetsVisualization_setJetsDimensions",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IJetsVisualization, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IJetsVisualization_setJetsDimensions" "', argument " "1"" of type '" "iDynTree::IJetsVisualization *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IJetsVisualization * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IJetsVisualization_setJetsDimensions" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IJetsVisualization_setJetsDimensions" "', argument " "3"" of type '" "double""'");
  } 
  temp3 = static_cast< double >(val3);
  arg3 = &temp3;
  ecode4 = SWIG_AsVal_double(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IJetsVisualization_setJetsDimensions" "', argument " "4"" of type '" "double""'");
  } 
  temp4 = static_cast< double >(val4);
  arg4 = &temp4;
  result = (bool)(arg1)->setJetsDimensions((double const &)*arg2,(double const &)*arg3,(double const &)*arg4);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_IJetsVisualization_setJetsIntensity(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IJetsVisualization *arg1 = (iDynTree::IJetsVisualization *) 0 ;
  iDynTree::VectorDynSize *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("IJetsVisualization_setJetsIntensity",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IJetsVisualization, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IJetsVisualization_setJetsIntensity" "', argument " "1"" of type '" "iDynTree::IJetsVisualization *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IJetsVisualization * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IJetsVisualization_setJetsIntensity" "', argument " "2"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IJetsVisualization_setJetsIntensity" "', argument " "2"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::VectorDynSize * >(argp2);
  result = (bool)(arg1)->setJetsIntensity((iDynTree::VectorDynSize const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_IModelVisualization(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IModelVisualization *arg1 = (iDynTree::IModelVisualization *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_IModelVisualization",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IModelVisualization, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IModelVisualization" "', argument " "1"" of type '" "iDynTree::IModelVisualization *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IModelVisualization * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_IModelVisualization_setPositions(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IModelVisualization *arg1 = (iDynTree::IModelVisualization *) 0 ;
  iDynTree::Transform *arg2 = 0 ;
  iDynTree::VectorDynSize *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("IModelVisualization_setPositions",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IModelVisualization, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IModelVisualization_setPositions" "', argument " "1"" of type '" "iDynTree::IModelVisualization *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IModelVisualization * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Transform,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IModelVisualization_setPositions" "', argument " "2"" of type '" "iDynTree::Transform const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IModelVisualization_setPositions" "', argument " "2"" of type '" "iDynTree::Transform const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Transform * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IModelVisualization_setPositions" "', argument " "3"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IModelVisualization_setPositions" "', argument " "3"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::VectorDynSize * >(argp3);
  result = (bool)(arg1)->setPositions((iDynTree::Transform const &)*arg2,(iDynTree::VectorDynSize const &)*arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_IModelVisualization_setLinkPositions(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IModelVisualization *arg1 = (iDynTree::IModelVisualization *) 0 ;
  iDynTree::LinkPositions *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("IModelVisualization_setLinkPositions",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IModelVisualization, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IModelVisualization_setLinkPositions" "', argument " "1"" of type '" "iDynTree::IModelVisualization *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IModelVisualization * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__LinkPositions,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IModelVisualization_setLinkPositions" "', argument " "2"" of type '" "iDynTree::LinkPositions const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IModelVisualization_setLinkPositions" "', argument " "2"" of type '" "iDynTree::LinkPositions const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::LinkPositions * >(argp2);
  result = (bool)(arg1)->setLinkPositions((iDynTree::LinkPositions const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_IModelVisualization_model(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IModelVisualization *arg1 = (iDynTree::IModelVisualization *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Model *result = 0 ;
  
  if (!SWIG_check_num_args("IModelVisualization_model",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IModelVisualization, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IModelVisualization_model" "', argument " "1"" of type '" "iDynTree::IModelVisualization *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IModelVisualization * >(argp1);
  result = (iDynTree::Model *) &(arg1)->model();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Model, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_IModelVisualization_getInstanceName(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IModelVisualization *arg1 = (iDynTree::IModelVisualization *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("IModelVisualization_getInstanceName",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IModelVisualization, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IModelVisualization_getInstanceName" "', argument " "1"" of type '" "iDynTree::IModelVisualization *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IModelVisualization * >(argp1);
  result = (arg1)->getInstanceName();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_IModelVisualization_setModelVisibility(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IModelVisualization *arg1 = (iDynTree::IModelVisualization *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("IModelVisualization_setModelVisibility",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IModelVisualization, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IModelVisualization_setModelVisibility" "', argument " "1"" of type '" "iDynTree::IModelVisualization *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IModelVisualization * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IModelVisualization_setModelVisibility" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->setModelVisibility(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_IModelVisualization_setModelColor(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IModelVisualization *arg1 = (iDynTree::IModelVisualization *) 0 ;
  iDynTree::ColorViz *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("IModelVisualization_setModelColor",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IModelVisualization, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IModelVisualization_setModelColor" "', argument " "1"" of type '" "iDynTree::IModelVisualization *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IModelVisualization * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__ColorViz,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IModelVisualization_setModelColor" "', argument " "2"" of type '" "iDynTree::ColorViz const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IModelVisualization_setModelColor" "', argument " "2"" of type '" "iDynTree::ColorViz const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::ColorViz * >(argp2);
  (arg1)->setModelColor((iDynTree::ColorViz const &)*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_IModelVisualization_resetModelColor(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IModelVisualization *arg1 = (iDynTree::IModelVisualization *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("IModelVisualization_resetModelColor",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IModelVisualization, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IModelVisualization_resetModelColor" "', argument " "1"" of type '" "iDynTree::IModelVisualization *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IModelVisualization * >(argp1);
  (arg1)->resetModelColor();
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_IModelVisualization_getLinkNames(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IModelVisualization *arg1 = (iDynTree::IModelVisualization *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!SWIG_check_num_args("IModelVisualization_getLinkNames",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IModelVisualization, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IModelVisualization_getLinkNames" "', argument " "1"" of type '" "iDynTree::IModelVisualization *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IModelVisualization * >(argp1);
  result = (arg1)->getLinkNames();
  _out = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_IModelVisualization_setLinkVisibility(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IModelVisualization *arg1 = (iDynTree::IModelVisualization *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("IModelVisualization_setLinkVisibility",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IModelVisualization, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IModelVisualization_setLinkVisibility" "', argument " "1"" of type '" "iDynTree::IModelVisualization *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IModelVisualization * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IModelVisualization_setLinkVisibility" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IModelVisualization_setLinkVisibility" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_bool(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IModelVisualization_setLinkVisibility" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (bool)(arg1)->setLinkVisibility((std::string const &)*arg2,arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_IModelVisualization_getFeatures(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IModelVisualization *arg1 = (iDynTree::IModelVisualization *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!SWIG_check_num_args("IModelVisualization_getFeatures",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IModelVisualization, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IModelVisualization_getFeatures" "', argument " "1"" of type '" "iDynTree::IModelVisualization *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IModelVisualization * >(argp1);
  result = (arg1)->getFeatures();
  _out = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_IModelVisualization_setFeatureVisibility(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IModelVisualization *arg1 = (iDynTree::IModelVisualization *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("IModelVisualization_setFeatureVisibility",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IModelVisualization, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IModelVisualization_setFeatureVisibility" "', argument " "1"" of type '" "iDynTree::IModelVisualization *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IModelVisualization * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IModelVisualization_setFeatureVisibility" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IModelVisualization_setFeatureVisibility" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_bool(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IModelVisualization_setFeatureVisibility" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (bool)(arg1)->setFeatureVisibility((std::string const &)*arg2,arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_IModelVisualization_jets(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IModelVisualization *arg1 = (iDynTree::IModelVisualization *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::IJetsVisualization *result = 0 ;
  
  if (!SWIG_check_num_args("IModelVisualization_jets",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IModelVisualization, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IModelVisualization_jets" "', argument " "1"" of type '" "iDynTree::IModelVisualization *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IModelVisualization * >(argp1);
  result = (iDynTree::IJetsVisualization *) &(arg1)->jets();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__IJetsVisualization, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_VisualizerOptions_verbose_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VisualizerOptions *arg1 = (iDynTree::VisualizerOptions *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("VisualizerOptions_verbose_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VisualizerOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VisualizerOptions_verbose_set" "', argument " "1"" of type '" "iDynTree::VisualizerOptions *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VisualizerOptions * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VisualizerOptions_verbose_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->verbose = arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_VisualizerOptions_verbose_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VisualizerOptions *arg1 = (iDynTree::VisualizerOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("VisualizerOptions_verbose_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VisualizerOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VisualizerOptions_verbose_get" "', argument " "1"" of type '" "iDynTree::VisualizerOptions *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VisualizerOptions * >(argp1);
  result = (bool) ((arg1)->verbose);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_VisualizerOptions_winWidth_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VisualizerOptions *arg1 = (iDynTree::VisualizerOptions *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("VisualizerOptions_winWidth_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VisualizerOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VisualizerOptions_winWidth_set" "', argument " "1"" of type '" "iDynTree::VisualizerOptions *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VisualizerOptions * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VisualizerOptions_winWidth_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->winWidth = arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_VisualizerOptions_winWidth_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VisualizerOptions *arg1 = (iDynTree::VisualizerOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("VisualizerOptions_winWidth_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VisualizerOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VisualizerOptions_winWidth_get" "', argument " "1"" of type '" "iDynTree::VisualizerOptions *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VisualizerOptions * >(argp1);
  result = (int) ((arg1)->winWidth);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_VisualizerOptions_winHeight_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VisualizerOptions *arg1 = (iDynTree::VisualizerOptions *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("VisualizerOptions_winHeight_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VisualizerOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VisualizerOptions_winHeight_set" "', argument " "1"" of type '" "iDynTree::VisualizerOptions *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VisualizerOptions * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VisualizerOptions_winHeight_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->winHeight = arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_VisualizerOptions_winHeight_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VisualizerOptions *arg1 = (iDynTree::VisualizerOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("VisualizerOptions_winHeight_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VisualizerOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VisualizerOptions_winHeight_get" "', argument " "1"" of type '" "iDynTree::VisualizerOptions *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VisualizerOptions * >(argp1);
  result = (int) ((arg1)->winHeight);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_VisualizerOptions_rootFrameArrowsDimension_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VisualizerOptions *arg1 = (iDynTree::VisualizerOptions *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("VisualizerOptions_rootFrameArrowsDimension_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VisualizerOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VisualizerOptions_rootFrameArrowsDimension_set" "', argument " "1"" of type '" "iDynTree::VisualizerOptions *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VisualizerOptions * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VisualizerOptions_rootFrameArrowsDimension_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->rootFrameArrowsDimension = arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_VisualizerOptions_rootFrameArrowsDimension_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VisualizerOptions *arg1 = (iDynTree::VisualizerOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("VisualizerOptions_rootFrameArrowsDimension_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VisualizerOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VisualizerOptions_rootFrameArrowsDimension_get" "', argument " "1"" of type '" "iDynTree::VisualizerOptions *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VisualizerOptions * >(argp1);
  result = (double) ((arg1)->rootFrameArrowsDimension);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_VisualizerOptions(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::VisualizerOptions *result = 0 ;
  
  if (!SWIG_check_num_args("new_VisualizerOptions",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::VisualizerOptions *)new iDynTree::VisualizerOptions();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__VisualizerOptions, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_VisualizerOptions(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VisualizerOptions *arg1 = (iDynTree::VisualizerOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_VisualizerOptions",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VisualizerOptions, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VisualizerOptions" "', argument " "1"" of type '" "iDynTree::VisualizerOptions *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VisualizerOptions * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Visualizer(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::Visualizer *result = 0 ;
  
  if (!SWIG_check_num_args("new_Visualizer",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::Visualizer *)new iDynTree::Visualizer();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Visualizer, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_Visualizer(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Visualizer *arg1 = (iDynTree::Visualizer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_Visualizer",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Visualizer, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Visualizer" "', argument " "1"" of type '" "iDynTree::Visualizer *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Visualizer * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Visualizer_init__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Visualizer *arg1 = (iDynTree::Visualizer *) 0 ;
  iDynTree::VisualizerOptions arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("Visualizer_init",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Visualizer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Visualizer_init" "', argument " "1"" of type '" "iDynTree::Visualizer *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Visualizer * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__VisualizerOptions,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Visualizer_init" "', argument " "2"" of type '" "iDynTree::VisualizerOptions const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Visualizer_init" "', argument " "2"" of type '" "iDynTree::VisualizerOptions const""'");
    } else {
      arg2 = *(reinterpret_cast< iDynTree::VisualizerOptions * >(argp2));
    }
  }
  result = (bool)(arg1)->init(arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Visualizer_init__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Visualizer *arg1 = (iDynTree::Visualizer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("Visualizer_init",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Visualizer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Visualizer_init" "', argument " "1"" of type '" "iDynTree::Visualizer *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Visualizer * >(argp1);
  result = (bool)(arg1)->init();
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Visualizer_init(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Visualizer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Visualizer_init__SWIG_1(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Visualizer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__VisualizerOptions, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Visualizer_init__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Visualizer_init'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::Visualizer::init(iDynTree::VisualizerOptions const)\n"
    "    iDynTree::Visualizer::init()\n");
  return 1;
}


int _wrap_Visualizer_getNrOfVisualizedModels(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Visualizer *arg1 = (iDynTree::Visualizer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  size_t result;
  
  if (!SWIG_check_num_args("Visualizer_getNrOfVisualizedModels",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Visualizer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Visualizer_getNrOfVisualizedModels" "', argument " "1"" of type '" "iDynTree::Visualizer *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Visualizer * >(argp1);
  result = (arg1)->getNrOfVisualizedModels();
  _out = SWIG_From_size_t(static_cast< size_t >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Visualizer_getModelInstanceName(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Visualizer *arg1 = (iDynTree::Visualizer *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("Visualizer_getModelInstanceName",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Visualizer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Visualizer_getModelInstanceName" "', argument " "1"" of type '" "iDynTree::Visualizer *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Visualizer * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Visualizer_getModelInstanceName" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (arg1)->getModelInstanceName(arg2);
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Visualizer_getModelInstanceIndex(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Visualizer *arg1 = (iDynTree::Visualizer *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("Visualizer_getModelInstanceIndex",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Visualizer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Visualizer_getModelInstanceIndex" "', argument " "1"" of type '" "iDynTree::Visualizer *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Visualizer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Visualizer_getModelInstanceIndex" "', argument " "2"" of type '" "std::string const""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (int)(arg1)->getModelInstanceIndex(arg2);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Visualizer_addModel(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Visualizer *arg1 = (iDynTree::Visualizer *) 0 ;
  iDynTree::Model *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("Visualizer_addModel",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Visualizer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Visualizer_addModel" "', argument " "1"" of type '" "iDynTree::Visualizer *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Visualizer * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Visualizer_addModel" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Visualizer_addModel" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Model * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Visualizer_addModel" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Visualizer_addModel" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  result = (bool)(arg1)->addModel((iDynTree::Model const &)*arg2,(std::string const &)*arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 0;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 1;
}


int _wrap_Visualizer_modelViz__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Visualizer *arg1 = (iDynTree::Visualizer *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::IModelVisualization *result = 0 ;
  
  if (!SWIG_check_num_args("Visualizer_modelViz",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Visualizer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Visualizer_modelViz" "', argument " "1"" of type '" "iDynTree::Visualizer *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Visualizer * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Visualizer_modelViz" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (iDynTree::IModelVisualization *) &(arg1)->modelViz(arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__IModelVisualization, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Visualizer_modelViz__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Visualizer *arg1 = (iDynTree::Visualizer *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  iDynTree::IModelVisualization *result = 0 ;
  
  if (!SWIG_check_num_args("Visualizer_modelViz",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Visualizer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Visualizer_modelViz" "', argument " "1"" of type '" "iDynTree::Visualizer *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Visualizer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Visualizer_modelViz" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Visualizer_modelViz" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (iDynTree::IModelVisualization *) &(arg1)->modelViz((std::string const &)*arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__IModelVisualization, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_Visualizer_modelViz(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Visualizer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Visualizer_modelViz__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Visualizer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Visualizer_modelViz__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Visualizer_modelViz'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::Visualizer::modelViz(size_t)\n"
    "    iDynTree::Visualizer::modelViz(std::string const &)\n");
  return 1;
}


int _wrap_Visualizer_camera(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Visualizer *arg1 = (iDynTree::Visualizer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::ICamera *result = 0 ;
  
  if (!SWIG_check_num_args("Visualizer_camera",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Visualizer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Visualizer_camera" "', argument " "1"" of type '" "iDynTree::Visualizer *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Visualizer * >(argp1);
  result = (iDynTree::ICamera *) &(arg1)->camera();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__ICamera, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Visualizer_enviroment(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Visualizer *arg1 = (iDynTree::Visualizer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::IEnvironment *result = 0 ;
  
  if (!SWIG_check_num_args("Visualizer_enviroment",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Visualizer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Visualizer_enviroment" "', argument " "1"" of type '" "iDynTree::Visualizer *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Visualizer * >(argp1);
  result = (iDynTree::IEnvironment *) &(arg1)->enviroment();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__IEnvironment, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Visualizer_run(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Visualizer *arg1 = (iDynTree::Visualizer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("Visualizer_run",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Visualizer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Visualizer_run" "', argument " "1"" of type '" "iDynTree::Visualizer *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Visualizer * >(argp1);
  result = (bool)(arg1)->run();
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Visualizer_draw(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Visualizer *arg1 = (iDynTree::Visualizer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Visualizer_draw",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Visualizer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Visualizer_draw" "', argument " "1"" of type '" "iDynTree::Visualizer *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Visualizer * >(argp1);
  (arg1)->draw();
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Visualizer_drawToFile__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Visualizer *arg1 = (iDynTree::Visualizer *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("Visualizer_drawToFile",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Visualizer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Visualizer_drawToFile" "', argument " "1"" of type '" "iDynTree::Visualizer *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Visualizer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Visualizer_drawToFile" "', argument " "2"" of type '" "std::string const""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (bool)(arg1)->drawToFile(arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Visualizer_drawToFile__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Visualizer *arg1 = (iDynTree::Visualizer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("Visualizer_drawToFile",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Visualizer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Visualizer_drawToFile" "', argument " "1"" of type '" "iDynTree::Visualizer *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Visualizer * >(argp1);
  result = (bool)(arg1)->drawToFile();
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Visualizer_drawToFile(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Visualizer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Visualizer_drawToFile__SWIG_1(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Visualizer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Visualizer_drawToFile__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Visualizer_drawToFile'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::Visualizer::drawToFile(std::string const)\n"
    "    iDynTree::Visualizer::drawToFile()\n");
  return 1;
}


int _wrap_Visualizer_close(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Visualizer *arg1 = (iDynTree::Visualizer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Visualizer_close",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Visualizer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Visualizer_close" "', argument " "1"" of type '" "iDynTree::Visualizer *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Visualizer * >(argp1);
  (arg1)->close();
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_DynamicsComputations(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::HighLevel::DynamicsComputations *result = 0 ;
  
  if (!SWIG_check_num_args("new_DynamicsComputations",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (iDynTree::HighLevel::DynamicsComputations *)new iDynTree::HighLevel::DynamicsComputations();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_DynamicsComputations(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::HighLevel::DynamicsComputations *arg1 = (iDynTree::HighLevel::DynamicsComputations *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_DynamicsComputations",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DynamicsComputations" "', argument " "1"" of type '" "iDynTree::HighLevel::DynamicsComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::HighLevel::DynamicsComputations * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsComputations_loadRobotModelFromFile__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::HighLevel::DynamicsComputations *arg1 = (iDynTree::HighLevel::DynamicsComputations *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("DynamicsComputations_loadRobotModelFromFile",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsComputations_loadRobotModelFromFile" "', argument " "1"" of type '" "iDynTree::HighLevel::DynamicsComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::HighLevel::DynamicsComputations * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynamicsComputations_loadRobotModelFromFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsComputations_loadRobotModelFromFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DynamicsComputations_loadRobotModelFromFile" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsComputations_loadRobotModelFromFile" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  result = (bool)(arg1)->loadRobotModelFromFile((std::string const &)*arg2,(std::string const &)*arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 1;
}


int _wrap_DynamicsComputations_loadRobotModelFromFile__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::HighLevel::DynamicsComputations *arg1 = (iDynTree::HighLevel::DynamicsComputations *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("DynamicsComputations_loadRobotModelFromFile",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsComputations_loadRobotModelFromFile" "', argument " "1"" of type '" "iDynTree::HighLevel::DynamicsComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::HighLevel::DynamicsComputations * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynamicsComputations_loadRobotModelFromFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsComputations_loadRobotModelFromFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->loadRobotModelFromFile((std::string const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_DynamicsComputations_loadRobotModelFromFile(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DynamicsComputations_loadRobotModelFromFile__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DynamicsComputations_loadRobotModelFromFile__SWIG_0(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'DynamicsComputations_loadRobotModelFromFile'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::HighLevel::DynamicsComputations::loadRobotModelFromFile(std::string const &,std::string const &)\n"
    "    iDynTree::HighLevel::DynamicsComputations::loadRobotModelFromFile(std::string const &)\n");
  return 1;
}


int _wrap_DynamicsComputations_loadRobotModelFromString__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::HighLevel::DynamicsComputations *arg1 = (iDynTree::HighLevel::DynamicsComputations *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("DynamicsComputations_loadRobotModelFromString",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsComputations_loadRobotModelFromString" "', argument " "1"" of type '" "iDynTree::HighLevel::DynamicsComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::HighLevel::DynamicsComputations * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynamicsComputations_loadRobotModelFromString" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsComputations_loadRobotModelFromString" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DynamicsComputations_loadRobotModelFromString" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsComputations_loadRobotModelFromString" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  result = (bool)(arg1)->loadRobotModelFromString((std::string const &)*arg2,(std::string const &)*arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 1;
}


int _wrap_DynamicsComputations_loadRobotModelFromString__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::HighLevel::DynamicsComputations *arg1 = (iDynTree::HighLevel::DynamicsComputations *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("DynamicsComputations_loadRobotModelFromString",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsComputations_loadRobotModelFromString" "', argument " "1"" of type '" "iDynTree::HighLevel::DynamicsComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::HighLevel::DynamicsComputations * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynamicsComputations_loadRobotModelFromString" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsComputations_loadRobotModelFromString" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->loadRobotModelFromString((std::string const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_DynamicsComputations_loadRobotModelFromString(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DynamicsComputations_loadRobotModelFromString__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DynamicsComputations_loadRobotModelFromString__SWIG_0(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'DynamicsComputations_loadRobotModelFromString'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::HighLevel::DynamicsComputations::loadRobotModelFromString(std::string const &,std::string const &)\n"
    "    iDynTree::HighLevel::DynamicsComputations::loadRobotModelFromString(std::string const &)\n");
  return 1;
}


int _wrap_DynamicsComputations_isValid(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::HighLevel::DynamicsComputations *arg1 = (iDynTree::HighLevel::DynamicsComputations *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("DynamicsComputations_isValid",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsComputations_isValid" "', argument " "1"" of type '" "iDynTree::HighLevel::DynamicsComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::HighLevel::DynamicsComputations * >(argp1);
  result = (bool)(arg1)->isValid();
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsComputations_getNrOfDegreesOfFreedom(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::HighLevel::DynamicsComputations *arg1 = (iDynTree::HighLevel::DynamicsComputations *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("DynamicsComputations_getNrOfDegreesOfFreedom",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsComputations_getNrOfDegreesOfFreedom" "', argument " "1"" of type '" "iDynTree::HighLevel::DynamicsComputations const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::HighLevel::DynamicsComputations * >(argp1);
  result = (unsigned int)((iDynTree::HighLevel::DynamicsComputations const *)arg1)->getNrOfDegreesOfFreedom();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsComputations_getDescriptionOfDegreeOfFreedom(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::HighLevel::DynamicsComputations *arg1 = (iDynTree::HighLevel::DynamicsComputations *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("DynamicsComputations_getDescriptionOfDegreeOfFreedom",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsComputations_getDescriptionOfDegreeOfFreedom" "', argument " "1"" of type '" "iDynTree::HighLevel::DynamicsComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::HighLevel::DynamicsComputations * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DynamicsComputations_getDescriptionOfDegreeOfFreedom" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (arg1)->getDescriptionOfDegreeOfFreedom(arg2);
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsComputations_getDescriptionOfDegreesOfFreedom(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::HighLevel::DynamicsComputations *arg1 = (iDynTree::HighLevel::DynamicsComputations *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("DynamicsComputations_getDescriptionOfDegreesOfFreedom",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsComputations_getDescriptionOfDegreesOfFreedom" "', argument " "1"" of type '" "iDynTree::HighLevel::DynamicsComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::HighLevel::DynamicsComputations * >(argp1);
  result = (arg1)->getDescriptionOfDegreesOfFreedom();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsComputations_getNrOfLinks(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::HighLevel::DynamicsComputations *arg1 = (iDynTree::HighLevel::DynamicsComputations *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("DynamicsComputations_getNrOfLinks",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsComputations_getNrOfLinks" "', argument " "1"" of type '" "iDynTree::HighLevel::DynamicsComputations const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::HighLevel::DynamicsComputations * >(argp1);
  result = (unsigned int)((iDynTree::HighLevel::DynamicsComputations const *)arg1)->getNrOfLinks();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsComputations_getNrOfFrames(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::HighLevel::DynamicsComputations *arg1 = (iDynTree::HighLevel::DynamicsComputations *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("DynamicsComputations_getNrOfFrames",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsComputations_getNrOfFrames" "', argument " "1"" of type '" "iDynTree::HighLevel::DynamicsComputations const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::HighLevel::DynamicsComputations * >(argp1);
  result = (unsigned int)((iDynTree::HighLevel::DynamicsComputations const *)arg1)->getNrOfFrames();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsComputations_getFloatingBase(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::HighLevel::DynamicsComputations *arg1 = (iDynTree::HighLevel::DynamicsComputations *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("DynamicsComputations_getFloatingBase",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsComputations_getFloatingBase" "', argument " "1"" of type '" "iDynTree::HighLevel::DynamicsComputations const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::HighLevel::DynamicsComputations * >(argp1);
  result = ((iDynTree::HighLevel::DynamicsComputations const *)arg1)->getFloatingBase();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsComputations_setFloatingBase(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::HighLevel::DynamicsComputations *arg1 = (iDynTree::HighLevel::DynamicsComputations *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("DynamicsComputations_setFloatingBase",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsComputations_setFloatingBase" "', argument " "1"" of type '" "iDynTree::HighLevel::DynamicsComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::HighLevel::DynamicsComputations * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynamicsComputations_setFloatingBase" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsComputations_setFloatingBase" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->setFloatingBase((std::string const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_DynamicsComputations_setRobotState__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::HighLevel::DynamicsComputations *arg1 = (iDynTree::HighLevel::DynamicsComputations *) 0 ;
  iDynTree::VectorDynSize *arg2 = 0 ;
  iDynTree::VectorDynSize *arg3 = 0 ;
  iDynTree::VectorDynSize *arg4 = 0 ;
  iDynTree::Transform *arg5 = 0 ;
  iDynTree::Twist *arg6 = 0 ;
  iDynTree::ClassicalAcc *arg7 = 0 ;
  iDynTree::SpatialAcc *arg8 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  void *argp8 ;
  int res8 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("DynamicsComputations_setRobotState",argc,8,8,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsComputations_setRobotState" "', argument " "1"" of type '" "iDynTree::HighLevel::DynamicsComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::HighLevel::DynamicsComputations * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynamicsComputations_setRobotState" "', argument " "2"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsComputations_setRobotState" "', argument " "2"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::VectorDynSize * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DynamicsComputations_setRobotState" "', argument " "3"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsComputations_setRobotState" "', argument " "3"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::VectorDynSize * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DynamicsComputations_setRobotState" "', argument " "4"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsComputations_setRobotState" "', argument " "4"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  arg4 = reinterpret_cast< iDynTree::VectorDynSize * >(argp4);
  res5 = SWIG_ConvertPtr(argv[4], &argp5, SWIGTYPE_p_iDynTree__Transform,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "DynamicsComputations_setRobotState" "', argument " "5"" of type '" "iDynTree::Transform const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsComputations_setRobotState" "', argument " "5"" of type '" "iDynTree::Transform const &""'"); 
  }
  arg5 = reinterpret_cast< iDynTree::Transform * >(argp5);
  res6 = SWIG_ConvertPtr(argv[5], &argp6, SWIGTYPE_p_iDynTree__Twist,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "DynamicsComputations_setRobotState" "', argument " "6"" of type '" "iDynTree::Twist const &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsComputations_setRobotState" "', argument " "6"" of type '" "iDynTree::Twist const &""'"); 
  }
  arg6 = reinterpret_cast< iDynTree::Twist * >(argp6);
  res7 = SWIG_ConvertPtr(argv[6], &argp7, SWIGTYPE_p_iDynTree__ClassicalAcc,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "DynamicsComputations_setRobotState" "', argument " "7"" of type '" "iDynTree::ClassicalAcc const &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsComputations_setRobotState" "', argument " "7"" of type '" "iDynTree::ClassicalAcc const &""'"); 
  }
  arg7 = reinterpret_cast< iDynTree::ClassicalAcc * >(argp7);
  res8 = SWIG_ConvertPtr(argv[7], &argp8, SWIGTYPE_p_iDynTree__SpatialAcc,  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "DynamicsComputations_setRobotState" "', argument " "8"" of type '" "iDynTree::SpatialAcc const &""'"); 
  }
  if (!argp8) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsComputations_setRobotState" "', argument " "8"" of type '" "iDynTree::SpatialAcc const &""'"); 
  }
  arg8 = reinterpret_cast< iDynTree::SpatialAcc * >(argp8);
  result = (bool)(arg1)->setRobotState((iDynTree::VectorDynSize const &)*arg2,(iDynTree::VectorDynSize const &)*arg3,(iDynTree::VectorDynSize const &)*arg4,(iDynTree::Transform const &)*arg5,(iDynTree::Twist const &)*arg6,(iDynTree::ClassicalAcc const &)*arg7,(iDynTree::SpatialAcc const &)*arg8);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsComputations_setRobotState__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::HighLevel::DynamicsComputations *arg1 = (iDynTree::HighLevel::DynamicsComputations *) 0 ;
  iDynTree::VectorDynSize *arg2 = 0 ;
  iDynTree::VectorDynSize *arg3 = 0 ;
  iDynTree::VectorDynSize *arg4 = 0 ;
  iDynTree::SpatialAcc *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("DynamicsComputations_setRobotState",argc,5,5,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsComputations_setRobotState" "', argument " "1"" of type '" "iDynTree::HighLevel::DynamicsComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::HighLevel::DynamicsComputations * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynamicsComputations_setRobotState" "', argument " "2"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsComputations_setRobotState" "', argument " "2"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::VectorDynSize * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DynamicsComputations_setRobotState" "', argument " "3"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsComputations_setRobotState" "', argument " "3"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::VectorDynSize * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DynamicsComputations_setRobotState" "', argument " "4"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsComputations_setRobotState" "', argument " "4"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  arg4 = reinterpret_cast< iDynTree::VectorDynSize * >(argp4);
  res5 = SWIG_ConvertPtr(argv[4], &argp5, SWIGTYPE_p_iDynTree__SpatialAcc,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "DynamicsComputations_setRobotState" "', argument " "5"" of type '" "iDynTree::SpatialAcc const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsComputations_setRobotState" "', argument " "5"" of type '" "iDynTree::SpatialAcc const &""'"); 
  }
  arg5 = reinterpret_cast< iDynTree::SpatialAcc * >(argp5);
  result = (bool)(arg1)->setRobotState((iDynTree::VectorDynSize const &)*arg2,(iDynTree::VectorDynSize const &)*arg3,(iDynTree::VectorDynSize const &)*arg4,(iDynTree::SpatialAcc const &)*arg5);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsComputations_setRobotState(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__VectorDynSize, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_iDynTree__VectorDynSize, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_iDynTree__VectorDynSize, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_iDynTree__SpatialAcc, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_DynamicsComputations_setRobotState__SWIG_1(resc,resv,argc,argv);
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__VectorDynSize, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_iDynTree__VectorDynSize, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_iDynTree__VectorDynSize, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_iDynTree__Transform, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_iDynTree__Twist, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_iDynTree__ClassicalAcc, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[7], &vptr, SWIGTYPE_p_iDynTree__SpatialAcc, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_DynamicsComputations_setRobotState__SWIG_0(resc,resv,argc,argv);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'DynamicsComputations_setRobotState'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::HighLevel::DynamicsComputations::setRobotState(iDynTree::VectorDynSize const &,iDynTree::VectorDynSize const &,iDynTree::VectorDynSize const &,iDynTree::Transform const &,iDynTree::Twist const &,iDynTree::ClassicalAcc const &,iDynTree::SpatialAcc const &)\n"
    "    iDynTree::HighLevel::DynamicsComputations::setRobotState(iDynTree::VectorDynSize const &,iDynTree::VectorDynSize const &,iDynTree::VectorDynSize const &,iDynTree::SpatialAcc const &)\n");
  return 1;
}


int _wrap_DynamicsComputations_getWorldBaseTransform(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::HighLevel::DynamicsComputations *arg1 = (iDynTree::HighLevel::DynamicsComputations *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Transform result;
  
  if (!SWIG_check_num_args("DynamicsComputations_getWorldBaseTransform",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsComputations_getWorldBaseTransform" "', argument " "1"" of type '" "iDynTree::HighLevel::DynamicsComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::HighLevel::DynamicsComputations * >(argp1);
  result = (arg1)->getWorldBaseTransform();
  _out = SWIG_NewPointerObj((new iDynTree::Transform(static_cast< const iDynTree::Transform& >(result))), SWIGTYPE_p_iDynTree__Transform, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsComputations_getBaseTwist(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::HighLevel::DynamicsComputations *arg1 = (iDynTree::HighLevel::DynamicsComputations *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Twist result;
  
  if (!SWIG_check_num_args("DynamicsComputations_getBaseTwist",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsComputations_getBaseTwist" "', argument " "1"" of type '" "iDynTree::HighLevel::DynamicsComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::HighLevel::DynamicsComputations * >(argp1);
  result = (arg1)->getBaseTwist();
  _out = SWIG_NewPointerObj((new iDynTree::Twist(static_cast< const iDynTree::Twist& >(result))), SWIGTYPE_p_iDynTree__Twist, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsComputations_getJointPos(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::HighLevel::DynamicsComputations *arg1 = (iDynTree::HighLevel::DynamicsComputations *) 0 ;
  iDynTree::VectorDynSize *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("DynamicsComputations_getJointPos",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsComputations_getJointPos" "', argument " "1"" of type '" "iDynTree::HighLevel::DynamicsComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::HighLevel::DynamicsComputations * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynamicsComputations_getJointPos" "', argument " "2"" of type '" "iDynTree::VectorDynSize &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsComputations_getJointPos" "', argument " "2"" of type '" "iDynTree::VectorDynSize &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::VectorDynSize * >(argp2);
  result = (bool)(arg1)->getJointPos(*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsComputations_getJointVel(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::HighLevel::DynamicsComputations *arg1 = (iDynTree::HighLevel::DynamicsComputations *) 0 ;
  iDynTree::VectorDynSize *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("DynamicsComputations_getJointVel",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsComputations_getJointVel" "', argument " "1"" of type '" "iDynTree::HighLevel::DynamicsComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::HighLevel::DynamicsComputations * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynamicsComputations_getJointVel" "', argument " "2"" of type '" "iDynTree::VectorDynSize &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsComputations_getJointVel" "', argument " "2"" of type '" "iDynTree::VectorDynSize &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::VectorDynSize * >(argp2);
  result = (bool)(arg1)->getJointVel(*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsComputations_getFrameIndex(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::HighLevel::DynamicsComputations *arg1 = (iDynTree::HighLevel::DynamicsComputations *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("DynamicsComputations_getFrameIndex",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsComputations_getFrameIndex" "', argument " "1"" of type '" "iDynTree::HighLevel::DynamicsComputations const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::HighLevel::DynamicsComputations * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynamicsComputations_getFrameIndex" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsComputations_getFrameIndex" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (int)((iDynTree::HighLevel::DynamicsComputations const *)arg1)->getFrameIndex((std::string const &)*arg2);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_DynamicsComputations_getFrameName(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::HighLevel::DynamicsComputations *arg1 = (iDynTree::HighLevel::DynamicsComputations *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("DynamicsComputations_getFrameName",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsComputations_getFrameName" "', argument " "1"" of type '" "iDynTree::HighLevel::DynamicsComputations const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::HighLevel::DynamicsComputations * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DynamicsComputations_getFrameName" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = ((iDynTree::HighLevel::DynamicsComputations const *)arg1)->getFrameName(arg2);
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsComputations_getWorldTransform__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::HighLevel::DynamicsComputations *arg1 = (iDynTree::HighLevel::DynamicsComputations *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::Transform result;
  
  if (!SWIG_check_num_args("DynamicsComputations_getWorldTransform",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsComputations_getWorldTransform" "', argument " "1"" of type '" "iDynTree::HighLevel::DynamicsComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::HighLevel::DynamicsComputations * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DynamicsComputations_getWorldTransform" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (arg1)->getWorldTransform(arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Transform(static_cast< const iDynTree::Transform& >(result))), SWIGTYPE_p_iDynTree__Transform, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsComputations_getWorldTransform__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::HighLevel::DynamicsComputations *arg1 = (iDynTree::HighLevel::DynamicsComputations *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Transform result;
  
  if (!SWIG_check_num_args("DynamicsComputations_getWorldTransform",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsComputations_getWorldTransform" "', argument " "1"" of type '" "iDynTree::HighLevel::DynamicsComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::HighLevel::DynamicsComputations * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "DynamicsComputations_getWorldTransform" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (arg1)->getWorldTransform(arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Transform(static_cast< const iDynTree::Transform& >(result))), SWIGTYPE_p_iDynTree__Transform, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsComputations_getWorldTransform(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DynamicsComputations_getWorldTransform__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DynamicsComputations_getWorldTransform__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'DynamicsComputations_getWorldTransform'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::HighLevel::DynamicsComputations::getWorldTransform(unsigned int)\n"
    "    iDynTree::HighLevel::DynamicsComputations::getWorldTransform(std::string)\n");
  return 1;
}


int _wrap_DynamicsComputations_getRelativeTransform__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::HighLevel::DynamicsComputations *arg1 = (iDynTree::HighLevel::DynamicsComputations *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  iDynTree::Transform result;
  
  if (!SWIG_check_num_args("DynamicsComputations_getRelativeTransform",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsComputations_getRelativeTransform" "', argument " "1"" of type '" "iDynTree::HighLevel::DynamicsComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::HighLevel::DynamicsComputations * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DynamicsComputations_getRelativeTransform" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DynamicsComputations_getRelativeTransform" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  result = (arg1)->getRelativeTransform(arg2,arg3);
  _out = SWIG_NewPointerObj((new iDynTree::Transform(static_cast< const iDynTree::Transform& >(result))), SWIGTYPE_p_iDynTree__Transform, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsComputations_getRelativeTransform__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::HighLevel::DynamicsComputations *arg1 = (iDynTree::HighLevel::DynamicsComputations *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  mxArray * _out;
  iDynTree::Transform result;
  
  if (!SWIG_check_num_args("DynamicsComputations_getRelativeTransform",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsComputations_getRelativeTransform" "', argument " "1"" of type '" "iDynTree::HighLevel::DynamicsComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::HighLevel::DynamicsComputations * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynamicsComputations_getRelativeTransform" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsComputations_getRelativeTransform" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DynamicsComputations_getRelativeTransform" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsComputations_getRelativeTransform" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->getRelativeTransform((std::string const &)*arg2,(std::string const &)*arg3);
  _out = SWIG_NewPointerObj((new iDynTree::Transform(static_cast< const iDynTree::Transform& >(result))), SWIGTYPE_p_iDynTree__Transform, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 1;
}


int _wrap_DynamicsComputations_getRelativeTransform(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_DynamicsComputations_getRelativeTransform__SWIG_0(resc,resv,argc,argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DynamicsComputations_getRelativeTransform__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'DynamicsComputations_getRelativeTransform'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::HighLevel::DynamicsComputations::getRelativeTransform(unsigned int,unsigned int)\n"
    "    iDynTree::HighLevel::DynamicsComputations::getRelativeTransform(std::string const &,std::string const &)\n");
  return 1;
}


int _wrap_DynamicsComputations_getFrameTwist__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::HighLevel::DynamicsComputations *arg1 = (iDynTree::HighLevel::DynamicsComputations *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  iDynTree::Twist result;
  
  if (!SWIG_check_num_args("DynamicsComputations_getFrameTwist",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsComputations_getFrameTwist" "', argument " "1"" of type '" "iDynTree::HighLevel::DynamicsComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::HighLevel::DynamicsComputations * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynamicsComputations_getFrameTwist" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsComputations_getFrameTwist" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->getFrameTwist((std::string const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Twist(static_cast< const iDynTree::Twist& >(result))), SWIGTYPE_p_iDynTree__Twist, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_DynamicsComputations_getFrameTwist__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::HighLevel::DynamicsComputations *arg1 = (iDynTree::HighLevel::DynamicsComputations *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::Twist result;
  
  if (!SWIG_check_num_args("DynamicsComputations_getFrameTwist",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsComputations_getFrameTwist" "', argument " "1"" of type '" "iDynTree::HighLevel::DynamicsComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::HighLevel::DynamicsComputations * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DynamicsComputations_getFrameTwist" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (arg1)->getFrameTwist(arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Twist(static_cast< const iDynTree::Twist& >(result))), SWIGTYPE_p_iDynTree__Twist, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsComputations_getFrameTwist(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DynamicsComputations_getFrameTwist__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DynamicsComputations_getFrameTwist__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'DynamicsComputations_getFrameTwist'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::HighLevel::DynamicsComputations::getFrameTwist(std::string const &)\n"
    "    iDynTree::HighLevel::DynamicsComputations::getFrameTwist(int const)\n");
  return 1;
}


int _wrap_DynamicsComputations_getFrameTwistInWorldOrient__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::HighLevel::DynamicsComputations *arg1 = (iDynTree::HighLevel::DynamicsComputations *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  iDynTree::Twist result;
  
  if (!SWIG_check_num_args("DynamicsComputations_getFrameTwistInWorldOrient",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsComputations_getFrameTwistInWorldOrient" "', argument " "1"" of type '" "iDynTree::HighLevel::DynamicsComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::HighLevel::DynamicsComputations * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynamicsComputations_getFrameTwistInWorldOrient" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsComputations_getFrameTwistInWorldOrient" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->getFrameTwistInWorldOrient((std::string const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Twist(static_cast< const iDynTree::Twist& >(result))), SWIGTYPE_p_iDynTree__Twist, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_DynamicsComputations_getFrameTwistInWorldOrient__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::HighLevel::DynamicsComputations *arg1 = (iDynTree::HighLevel::DynamicsComputations *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::Twist result;
  
  if (!SWIG_check_num_args("DynamicsComputations_getFrameTwistInWorldOrient",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsComputations_getFrameTwistInWorldOrient" "', argument " "1"" of type '" "iDynTree::HighLevel::DynamicsComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::HighLevel::DynamicsComputations * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DynamicsComputations_getFrameTwistInWorldOrient" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (arg1)->getFrameTwistInWorldOrient(arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Twist(static_cast< const iDynTree::Twist& >(result))), SWIGTYPE_p_iDynTree__Twist, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsComputations_getFrameTwistInWorldOrient(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DynamicsComputations_getFrameTwistInWorldOrient__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DynamicsComputations_getFrameTwistInWorldOrient__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'DynamicsComputations_getFrameTwistInWorldOrient'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::HighLevel::DynamicsComputations::getFrameTwistInWorldOrient(std::string const &)\n"
    "    iDynTree::HighLevel::DynamicsComputations::getFrameTwistInWorldOrient(int const)\n");
  return 1;
}


int _wrap_DynamicsComputations_getFrameProperSpatialAcceleration__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::HighLevel::DynamicsComputations *arg1 = (iDynTree::HighLevel::DynamicsComputations *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  iDynTree::SpatialAcc result;
  
  if (!SWIG_check_num_args("DynamicsComputations_getFrameProperSpatialAcceleration",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsComputations_getFrameProperSpatialAcceleration" "', argument " "1"" of type '" "iDynTree::HighLevel::DynamicsComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::HighLevel::DynamicsComputations * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynamicsComputations_getFrameProperSpatialAcceleration" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsComputations_getFrameProperSpatialAcceleration" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->getFrameProperSpatialAcceleration((std::string const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialAcc(static_cast< const iDynTree::SpatialAcc& >(result))), SWIGTYPE_p_iDynTree__SpatialAcc, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_DynamicsComputations_getFrameProperSpatialAcceleration__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::HighLevel::DynamicsComputations *arg1 = (iDynTree::HighLevel::DynamicsComputations *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialAcc result;
  
  if (!SWIG_check_num_args("DynamicsComputations_getFrameProperSpatialAcceleration",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsComputations_getFrameProperSpatialAcceleration" "', argument " "1"" of type '" "iDynTree::HighLevel::DynamicsComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::HighLevel::DynamicsComputations * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DynamicsComputations_getFrameProperSpatialAcceleration" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (arg1)->getFrameProperSpatialAcceleration(arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialAcc(static_cast< const iDynTree::SpatialAcc& >(result))), SWIGTYPE_p_iDynTree__SpatialAcc, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsComputations_getFrameProperSpatialAcceleration(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DynamicsComputations_getFrameProperSpatialAcceleration__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DynamicsComputations_getFrameProperSpatialAcceleration__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'DynamicsComputations_getFrameProperSpatialAcceleration'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::HighLevel::DynamicsComputations::getFrameProperSpatialAcceleration(std::string const &)\n"
    "    iDynTree::HighLevel::DynamicsComputations::getFrameProperSpatialAcceleration(int const)\n");
  return 1;
}


int _wrap_DynamicsComputations_getLinkIndex(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::HighLevel::DynamicsComputations *arg1 = (iDynTree::HighLevel::DynamicsComputations *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("DynamicsComputations_getLinkIndex",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsComputations_getLinkIndex" "', argument " "1"" of type '" "iDynTree::HighLevel::DynamicsComputations const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::HighLevel::DynamicsComputations * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynamicsComputations_getLinkIndex" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsComputations_getLinkIndex" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (int)((iDynTree::HighLevel::DynamicsComputations const *)arg1)->getLinkIndex((std::string const &)*arg2);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_DynamicsComputations_getLinkInertia__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::HighLevel::DynamicsComputations *arg1 = (iDynTree::HighLevel::DynamicsComputations *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialInertia result;
  
  if (!SWIG_check_num_args("DynamicsComputations_getLinkInertia",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsComputations_getLinkInertia" "', argument " "1"" of type '" "iDynTree::HighLevel::DynamicsComputations const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::HighLevel::DynamicsComputations * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DynamicsComputations_getLinkInertia" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = ((iDynTree::HighLevel::DynamicsComputations const *)arg1)->getLinkInertia(arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialInertia(static_cast< const iDynTree::SpatialInertia& >(result))), SWIGTYPE_p_iDynTree__SpatialInertia, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsComputations_getLinkInertia__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::HighLevel::DynamicsComputations *arg1 = (iDynTree::HighLevel::DynamicsComputations *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  iDynTree::SpatialInertia result;
  
  if (!SWIG_check_num_args("DynamicsComputations_getLinkInertia",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsComputations_getLinkInertia" "', argument " "1"" of type '" "iDynTree::HighLevel::DynamicsComputations const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::HighLevel::DynamicsComputations * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynamicsComputations_getLinkInertia" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsComputations_getLinkInertia" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = ((iDynTree::HighLevel::DynamicsComputations const *)arg1)->getLinkInertia((std::string const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialInertia(static_cast< const iDynTree::SpatialInertia& >(result))), SWIGTYPE_p_iDynTree__SpatialInertia, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_DynamicsComputations_getLinkInertia(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DynamicsComputations_getLinkInertia__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DynamicsComputations_getLinkInertia__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'DynamicsComputations_getLinkInertia'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::HighLevel::DynamicsComputations::getLinkInertia(unsigned int const) const\n"
    "    iDynTree::HighLevel::DynamicsComputations::getLinkInertia(std::string const &) const\n");
  return 1;
}


int _wrap_DynamicsComputations_getJointIndex(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::HighLevel::DynamicsComputations *arg1 = (iDynTree::HighLevel::DynamicsComputations *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("DynamicsComputations_getJointIndex",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsComputations_getJointIndex" "', argument " "1"" of type '" "iDynTree::HighLevel::DynamicsComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::HighLevel::DynamicsComputations * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynamicsComputations_getJointIndex" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsComputations_getJointIndex" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (int)(arg1)->getJointIndex((std::string const &)*arg2);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_DynamicsComputations_getJointName(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::HighLevel::DynamicsComputations *arg1 = (iDynTree::HighLevel::DynamicsComputations *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("DynamicsComputations_getJointName",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsComputations_getJointName" "', argument " "1"" of type '" "iDynTree::HighLevel::DynamicsComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::HighLevel::DynamicsComputations * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DynamicsComputations_getJointName" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (arg1)->getJointName(arg2);
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsComputations_getJointLimits__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::HighLevel::DynamicsComputations *arg1 = (iDynTree::HighLevel::DynamicsComputations *) 0 ;
  std::string *arg2 = 0 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("DynamicsComputations_getJointLimits",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsComputations_getJointLimits" "', argument " "1"" of type '" "iDynTree::HighLevel::DynamicsComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::HighLevel::DynamicsComputations * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynamicsComputations_getJointLimits" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsComputations_getJointLimits" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DynamicsComputations_getJointLimits" "', argument " "3"" of type '" "double &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsComputations_getJointLimits" "', argument " "3"" of type '" "double &""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DynamicsComputations_getJointLimits" "', argument " "4"" of type '" "double &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsComputations_getJointLimits" "', argument " "4"" of type '" "double &""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  result = (bool)(arg1)->getJointLimits((std::string const &)*arg2,*arg3,*arg4);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_DynamicsComputations_getJointLimits__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::HighLevel::DynamicsComputations *arg1 = (iDynTree::HighLevel::DynamicsComputations *) 0 ;
  int *arg2 = 0 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("DynamicsComputations_getJointLimits",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsComputations_getJointLimits" "', argument " "1"" of type '" "iDynTree::HighLevel::DynamicsComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::HighLevel::DynamicsComputations * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DynamicsComputations_getJointLimits" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DynamicsComputations_getJointLimits" "', argument " "3"" of type '" "double &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsComputations_getJointLimits" "', argument " "3"" of type '" "double &""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DynamicsComputations_getJointLimits" "', argument " "4"" of type '" "double &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsComputations_getJointLimits" "', argument " "4"" of type '" "double &""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  result = (bool)(arg1)->getJointLimits((int const &)*arg2,*arg3,*arg4);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsComputations_getJointLimits(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_double, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_double, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_DynamicsComputations_getJointLimits__SWIG_1(resc,resv,argc,argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_double, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_double, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_DynamicsComputations_getJointLimits__SWIG_0(resc,resv,argc,argv);
          }
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'DynamicsComputations_getJointLimits'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::HighLevel::DynamicsComputations::getJointLimits(std::string const &,double &,double &)\n"
    "    iDynTree::HighLevel::DynamicsComputations::getJointLimits(int const &,double &,double &)\n");
  return 1;
}


int _wrap_DynamicsComputations_inverseDynamics(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::HighLevel::DynamicsComputations *arg1 = (iDynTree::HighLevel::DynamicsComputations *) 0 ;
  iDynTree::VectorDynSize *arg2 = 0 ;
  iDynTree::Wrench *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("DynamicsComputations_inverseDynamics",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsComputations_inverseDynamics" "', argument " "1"" of type '" "iDynTree::HighLevel::DynamicsComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::HighLevel::DynamicsComputations * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynamicsComputations_inverseDynamics" "', argument " "2"" of type '" "iDynTree::VectorDynSize &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsComputations_inverseDynamics" "', argument " "2"" of type '" "iDynTree::VectorDynSize &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::VectorDynSize * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__Wrench,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DynamicsComputations_inverseDynamics" "', argument " "3"" of type '" "iDynTree::Wrench &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsComputations_inverseDynamics" "', argument " "3"" of type '" "iDynTree::Wrench &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::Wrench * >(argp3);
  result = (bool)(arg1)->inverseDynamics(*arg2,*arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsComputations_getFreeFloatingMassMatrix(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::HighLevel::DynamicsComputations *arg1 = (iDynTree::HighLevel::DynamicsComputations *) 0 ;
  iDynTree::MatrixDynSize *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("DynamicsComputations_getFreeFloatingMassMatrix",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsComputations_getFreeFloatingMassMatrix" "', argument " "1"" of type '" "iDynTree::HighLevel::DynamicsComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::HighLevel::DynamicsComputations * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__MatrixDynSize,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynamicsComputations_getFreeFloatingMassMatrix" "', argument " "2"" of type '" "iDynTree::MatrixDynSize &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsComputations_getFreeFloatingMassMatrix" "', argument " "2"" of type '" "iDynTree::MatrixDynSize &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::MatrixDynSize * >(argp2);
  result = (bool)(arg1)->getFreeFloatingMassMatrix(*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsComputations_getFrameJacobian__SWIG_0(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::HighLevel::DynamicsComputations *arg1 = (iDynTree::HighLevel::DynamicsComputations *) 0 ;
  std::string *arg2 = 0 ;
  iDynTree::MatrixDynSize *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("DynamicsComputations_getFrameJacobian",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsComputations_getFrameJacobian" "', argument " "1"" of type '" "iDynTree::HighLevel::DynamicsComputations const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::HighLevel::DynamicsComputations * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynamicsComputations_getFrameJacobian" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsComputations_getFrameJacobian" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__MatrixDynSize,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DynamicsComputations_getFrameJacobian" "', argument " "3"" of type '" "iDynTree::MatrixDynSize &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsComputations_getFrameJacobian" "', argument " "3"" of type '" "iDynTree::MatrixDynSize &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::MatrixDynSize * >(argp3);
  result = (bool)((iDynTree::HighLevel::DynamicsComputations const *)arg1)->getFrameJacobian((std::string const &)*arg2,*arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_DynamicsComputations_getFrameJacobian__SWIG_1(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::HighLevel::DynamicsComputations *arg1 = (iDynTree::HighLevel::DynamicsComputations *) 0 ;
  unsigned int *arg2 = 0 ;
  iDynTree::MatrixDynSize *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("DynamicsComputations_getFrameJacobian",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsComputations_getFrameJacobian" "', argument " "1"" of type '" "iDynTree::HighLevel::DynamicsComputations const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::HighLevel::DynamicsComputations * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DynamicsComputations_getFrameJacobian" "', argument " "2"" of type '" "unsigned int""'");
  } 
  temp2 = static_cast< unsigned int >(val2);
  arg2 = &temp2;
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__MatrixDynSize,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DynamicsComputations_getFrameJacobian" "', argument " "3"" of type '" "iDynTree::MatrixDynSize &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsComputations_getFrameJacobian" "', argument " "3"" of type '" "iDynTree::MatrixDynSize &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::MatrixDynSize * >(argp3);
  result = (bool)((iDynTree::HighLevel::DynamicsComputations const *)arg1)->getFrameJacobian((unsigned int const &)*arg2,*arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsComputations_getFrameJacobian(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_iDynTree__MatrixDynSize, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DynamicsComputations_getFrameJacobian__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_iDynTree__MatrixDynSize, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DynamicsComputations_getFrameJacobian__SWIG_0(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'DynamicsComputations_getFrameJacobian'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::HighLevel::DynamicsComputations::getFrameJacobian(std::string const &,iDynTree::MatrixDynSize &) const\n"
    "    iDynTree::HighLevel::DynamicsComputations::getFrameJacobian(unsigned int const &,iDynTree::MatrixDynSize &) const\n");
  return 1;
}


int _wrap_DynamicsComputations_getDynamicsRegressor(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::HighLevel::DynamicsComputations *arg1 = (iDynTree::HighLevel::DynamicsComputations *) 0 ;
  iDynTree::MatrixDynSize *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("DynamicsComputations_getDynamicsRegressor",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsComputations_getDynamicsRegressor" "', argument " "1"" of type '" "iDynTree::HighLevel::DynamicsComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::HighLevel::DynamicsComputations * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__MatrixDynSize,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynamicsComputations_getDynamicsRegressor" "', argument " "2"" of type '" "iDynTree::MatrixDynSize &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsComputations_getDynamicsRegressor" "', argument " "2"" of type '" "iDynTree::MatrixDynSize &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::MatrixDynSize * >(argp2);
  result = (bool)(arg1)->getDynamicsRegressor(*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsComputations_getModelDynamicsParameters(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::HighLevel::DynamicsComputations *arg1 = (iDynTree::HighLevel::DynamicsComputations *) 0 ;
  iDynTree::VectorDynSize *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("DynamicsComputations_getModelDynamicsParameters",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsComputations_getModelDynamicsParameters" "', argument " "1"" of type '" "iDynTree::HighLevel::DynamicsComputations const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::HighLevel::DynamicsComputations * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynamicsComputations_getModelDynamicsParameters" "', argument " "2"" of type '" "iDynTree::VectorDynSize &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsComputations_getModelDynamicsParameters" "', argument " "2"" of type '" "iDynTree::VectorDynSize &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::VectorDynSize * >(argp2);
  result = (bool)((iDynTree::HighLevel::DynamicsComputations const *)arg1)->getModelDynamicsParameters(*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsComputations_getCenterOfMass(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::HighLevel::DynamicsComputations *arg1 = (iDynTree::HighLevel::DynamicsComputations *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Position result;
  
  if (!SWIG_check_num_args("DynamicsComputations_getCenterOfMass",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsComputations_getCenterOfMass" "', argument " "1"" of type '" "iDynTree::HighLevel::DynamicsComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::HighLevel::DynamicsComputations * >(argp1);
  result = (arg1)->getCenterOfMass();
  _out = SWIG_NewPointerObj((new iDynTree::Position(static_cast< const iDynTree::Position& >(result))), SWIGTYPE_p_iDynTree__Position, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsComputations_getCenterOfMassJacobian(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::HighLevel::DynamicsComputations *arg1 = (iDynTree::HighLevel::DynamicsComputations *) 0 ;
  iDynTree::MatrixDynSize *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("DynamicsComputations_getCenterOfMassJacobian",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsComputations_getCenterOfMassJacobian" "', argument " "1"" of type '" "iDynTree::HighLevel::DynamicsComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::HighLevel::DynamicsComputations * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__MatrixDynSize,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynamicsComputations_getCenterOfMassJacobian" "', argument " "2"" of type '" "iDynTree::MatrixDynSize &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsComputations_getCenterOfMassJacobian" "', argument " "2"" of type '" "iDynTree::MatrixDynSize &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::MatrixDynSize * >(argp2);
  result = (bool)(arg1)->getCenterOfMassJacobian(*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}



/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_iDynTree__ClassicalAccTo_p_iDynTree__VectorFixSizeT_6_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::VectorFixSize< 6 > *)  ((iDynTree::ClassicalAcc *) x));
}
static void *_p_iDynTree__RotationTo_p_iDynTree__RotationRaw(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::RotationRaw *)  ((iDynTree::Rotation *) x));
}
static void *_p_iDynTree__PositionTo_p_iDynTree__PositionRaw(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::PositionRaw *)  ((iDynTree::Position *) x));
}
static void *_p_iDynTree__LinearForceVector3SemanticsTo_p_iDynTree__ForceVector3SemanticsT_iDynTree__LinearForceVector3Semantics_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics > *)  ((iDynTree::LinearForceVector3Semantics *) x));
}
static void *_p_iDynTree__RevoluteJointTo_p_iDynTree__MovableJointImplT_1_1_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::MovableJointImpl< 1,1 > *)  ((iDynTree::RevoluteJoint *) x));
}
static void *_p_iDynTree__DirectionTo_p_iDynTree__VectorFixSizeT_3_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::VectorFixSize< 3 > *)  ((iDynTree::Direction *) x));
}
static void *_p_iDynTree__ForceVector3T_iDynTree__LinearForceVector3_tTo_p_iDynTree__VectorFixSizeT_3_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::VectorFixSize< 3 > *) (iDynTree::GeomVector3< iDynTree::LinearForceVector3 > *) ((iDynTree::ForceVector3< iDynTree::LinearForceVector3 > *) x));
}
static void *_p_iDynTree__GeomVector3T_iDynTree__AngularForceVector3_tTo_p_iDynTree__VectorFixSizeT_3_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::VectorFixSize< 3 > *)  ((iDynTree::GeomVector3< iDynTree::AngularForceVector3 > *) x));
}
static void *_p_iDynTree__GeomVector3T_iDynTree__LinearMotionVector3_tTo_p_iDynTree__VectorFixSizeT_3_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::VectorFixSize< 3 > *)  ((iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > *) x));
}
static void *_p_iDynTree__PositionRawTo_p_iDynTree__VectorFixSizeT_3_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::VectorFixSize< 3 > *)  ((iDynTree::PositionRaw *) x));
}
static void *_p_iDynTree__PositionTo_p_iDynTree__VectorFixSizeT_3_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::VectorFixSize< 3 > *) (iDynTree::PositionRaw *) ((iDynTree::Position *) x));
}
static void *_p_iDynTree__AngularForceVector3To_p_iDynTree__VectorFixSizeT_3_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::VectorFixSize< 3 > *) (iDynTree::GeomVector3< iDynTree::AngularForceVector3 > *)(iDynTree::ForceVector3< iDynTree::AngularForceVector3 > *) ((iDynTree::AngularForceVector3 *) x));
}
static void *_p_iDynTree__LinearForceVector3To_p_iDynTree__VectorFixSizeT_3_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::VectorFixSize< 3 > *) (iDynTree::GeomVector3< iDynTree::LinearForceVector3 > *)(iDynTree::ForceVector3< iDynTree::LinearForceVector3 > *) ((iDynTree::LinearForceVector3 *) x));
}
static void *_p_iDynTree__AngularMotionVector3To_p_iDynTree__VectorFixSizeT_3_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::VectorFixSize< 3 > *) (iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > *)(iDynTree::MotionVector3< iDynTree::AngularMotionVector3 > *) ((iDynTree::AngularMotionVector3 *) x));
}
static void *_p_iDynTree__LinearMotionVector3To_p_iDynTree__VectorFixSizeT_3_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::VectorFixSize< 3 > *) (iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > *)(iDynTree::MotionVector3< iDynTree::LinearMotionVector3 > *) ((iDynTree::LinearMotionVector3 *) x));
}
static void *_p_iDynTree__MotionVector3T_iDynTree__AngularMotionVector3_tTo_p_iDynTree__VectorFixSizeT_3_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::VectorFixSize< 3 > *) (iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > *) ((iDynTree::MotionVector3< iDynTree::AngularMotionVector3 > *) x));
}
static void *_p_iDynTree__ForceVector3T_iDynTree__AngularForceVector3_tTo_p_iDynTree__VectorFixSizeT_3_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::VectorFixSize< 3 > *) (iDynTree::GeomVector3< iDynTree::AngularForceVector3 > *) ((iDynTree::ForceVector3< iDynTree::AngularForceVector3 > *) x));
}
static void *_p_iDynTree__MotionVector3T_iDynTree__LinearMotionVector3_tTo_p_iDynTree__VectorFixSizeT_3_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::VectorFixSize< 3 > *) (iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > *) ((iDynTree::MotionVector3< iDynTree::LinearMotionVector3 > *) x));
}
static void *_p_iDynTree__GeomVector3T_iDynTree__AngularMotionVector3_tTo_p_iDynTree__VectorFixSizeT_3_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::VectorFixSize< 3 > *)  ((iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > *) x));
}
static void *_p_iDynTree__GeomVector3T_iDynTree__LinearForceVector3_tTo_p_iDynTree__VectorFixSizeT_3_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::VectorFixSize< 3 > *)  ((iDynTree::GeomVector3< iDynTree::LinearForceVector3 > *) x));
}
static void *_p_iDynTree__FrameFreeFloatingJacobianTo_p_iDynTree__MatrixDynSize(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::MatrixDynSize *)  ((iDynTree::FrameFreeFloatingJacobian *) x));
}
static void *_p_iDynTree__MomentumFreeFloatingJacobianTo_p_iDynTree__MatrixDynSize(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::MatrixDynSize *)  ((iDynTree::MomentumFreeFloatingJacobian *) x));
}
static void *_p_iDynTree__FreeFloatingMassMatrixTo_p_iDynTree__MatrixDynSize(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::MatrixDynSize *)  ((iDynTree::FreeFloatingMassMatrix *) x));
}
static void *_p_iDynTree__JointPosDoubleArrayTo_p_iDynTree__VectorDynSize(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::VectorDynSize *)  ((iDynTree::JointPosDoubleArray *) x));
}
static void *_p_iDynTree__JointDOFsDoubleArrayTo_p_iDynTree__VectorDynSize(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::VectorDynSize *)  ((iDynTree::JointDOFsDoubleArray *) x));
}
static void *_p_iDynTree__WrenchTo_p_iDynTree__SpatialVectorT_iDynTree__SpatialForceVector_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::SpatialVector< iDynTree::SpatialForceVector > *) (iDynTree::SpatialForceVector *) ((iDynTree::Wrench *) x));
}
static void *_p_iDynTree__SpatialForceVectorTo_p_iDynTree__SpatialVectorT_iDynTree__SpatialForceVector_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::SpatialVector< iDynTree::SpatialForceVector > *)  ((iDynTree::SpatialForceVector *) x));
}
static void *_p_iDynTree__SpatialMomentumTo_p_iDynTree__SpatialVectorT_iDynTree__SpatialForceVector_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::SpatialVector< iDynTree::SpatialForceVector > *) (iDynTree::SpatialForceVector *) ((iDynTree::SpatialMomentum *) x));
}
static void *_p_iDynTree__MotionVector3T_iDynTree__AngularMotionVector3_tTo_p_iDynTree__GeomVector3T_iDynTree__AngularMotionVector3_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > *)  ((iDynTree::MotionVector3< iDynTree::AngularMotionVector3 > *) x));
}
static void *_p_iDynTree__AngularMotionVector3To_p_iDynTree__GeomVector3T_iDynTree__AngularMotionVector3_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > *) (iDynTree::MotionVector3< iDynTree::AngularMotionVector3 > *) ((iDynTree::AngularMotionVector3 *) x));
}
static void *_p_iDynTree__AngularForceVector3To_p_iDynTree__ForceVector3T_iDynTree__AngularForceVector3_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::ForceVector3< iDynTree::AngularForceVector3 > *)  ((iDynTree::AngularForceVector3 *) x));
}
static void *_p_iDynTree__SixAxisForceTorqueSensorTo_p_iDynTree__JointSensor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::JointSensor *)  ((iDynTree::SixAxisForceTorqueSensor *) x));
}
static void *_p_iDynTree__JointSensorTo_p_iDynTree__Sensor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::Sensor *)  ((iDynTree::JointSensor *) x));
}
static void *_p_iDynTree__AccelerometerSensorTo_p_iDynTree__Sensor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::Sensor *) (iDynTree::LinkSensor *) ((iDynTree::AccelerometerSensor *) x));
}
static void *_p_iDynTree__LinkSensorTo_p_iDynTree__Sensor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::Sensor *)  ((iDynTree::LinkSensor *) x));
}
static void *_p_iDynTree__SixAxisForceTorqueSensorTo_p_iDynTree__Sensor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::Sensor *) (iDynTree::JointSensor *) ((iDynTree::SixAxisForceTorqueSensor *) x));
}
static void *_p_iDynTree__GyroscopeSensorTo_p_iDynTree__Sensor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::Sensor *) (iDynTree::LinkSensor *) ((iDynTree::GyroscopeSensor *) x));
}
static void *_p_iDynTree__BoxTo_p_iDynTree__SolidShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::SolidShape *)  ((iDynTree::Box *) x));
}
static void *_p_iDynTree__ExternalMeshTo_p_iDynTree__SolidShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::SolidShape *)  ((iDynTree::ExternalMesh *) x));
}
static void *_p_iDynTree__SphereTo_p_iDynTree__SolidShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::SolidShape *)  ((iDynTree::Sphere *) x));
}
static void *_p_iDynTree__CylinderTo_p_iDynTree__SolidShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::SolidShape *)  ((iDynTree::Cylinder *) x));
}
static void *_p_iDynTree__SpatialInertiaTo_p_iDynTree__SpatialInertiaRaw(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::SpatialInertiaRaw *)  ((iDynTree::SpatialInertia *) x));
}
static void *_p_iDynTree__ForceVector3SemanticsT_iDynTree__AngularForceVector3Semantics_tTo_p_iDynTree__GeomVector3SemanticsT_iDynTree__AngularForceVector3Semantics_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > *)  ((iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics > *) x));
}
static void *_p_iDynTree__AngularForceVector3SemanticsTo_p_iDynTree__GeomVector3SemanticsT_iDynTree__AngularForceVector3Semantics_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > *) (iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics > *) ((iDynTree::AngularForceVector3Semantics *) x));
}
static void *_p_iDynTree__AngularMotionVector3SemanticsTo_p_iDynTree__GeomVector3SemanticsT_iDynTree__AngularMotionVector3Semantics_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > *)  ((iDynTree::AngularMotionVector3Semantics *) x));
}
static void *_p_iDynTree__LinearForceVector3To_p_iDynTree__ForceVector3T_iDynTree__LinearForceVector3_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::ForceVector3< iDynTree::LinearForceVector3 > *)  ((iDynTree::LinearForceVector3 *) x));
}
static void *_p_iDynTree__ForceVector3T_iDynTree__AngularForceVector3_tTo_p_iDynTree__GeomVector3T_iDynTree__AngularForceVector3_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::GeomVector3< iDynTree::AngularForceVector3 > *)  ((iDynTree::ForceVector3< iDynTree::AngularForceVector3 > *) x));
}
static void *_p_iDynTree__AngularForceVector3To_p_iDynTree__GeomVector3T_iDynTree__AngularForceVector3_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::GeomVector3< iDynTree::AngularForceVector3 > *) (iDynTree::ForceVector3< iDynTree::AngularForceVector3 > *) ((iDynTree::AngularForceVector3 *) x));
}
static void *_p_iDynTree__AccelerometerSensorTo_p_iDynTree__LinkSensor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::LinkSensor *)  ((iDynTree::AccelerometerSensor *) x));
}
static void *_p_iDynTree__GyroscopeSensorTo_p_iDynTree__LinkSensor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::LinkSensor *)  ((iDynTree::GyroscopeSensor *) x));
}
static void *_p_iDynTree__TwistTo_p_iDynTree__SpatialMotionVector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::SpatialMotionVector *)  ((iDynTree::Twist *) x));
}
static void *_p_iDynTree__SpatialAccTo_p_iDynTree__SpatialMotionVector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::SpatialMotionVector *)  ((iDynTree::SpatialAcc *) x));
}
static void *_p_iDynTree__WrenchTo_p_iDynTree__SpatialForceVector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::SpatialForceVector *)  ((iDynTree::Wrench *) x));
}
static void *_p_iDynTree__SpatialMomentumTo_p_iDynTree__SpatialForceVector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::SpatialForceVector *)  ((iDynTree::SpatialMomentum *) x));
}
static void *_p_iDynTree__LinearForceVector3SemanticsTo_p_iDynTree__GeomVector3SemanticsT_iDynTree__LinearForceVector3Semantics_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > *) (iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics > *) ((iDynTree::LinearForceVector3Semantics *) x));
}
static void *_p_iDynTree__ForceVector3SemanticsT_iDynTree__LinearForceVector3Semantics_tTo_p_iDynTree__GeomVector3SemanticsT_iDynTree__LinearForceVector3Semantics_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > *)  ((iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics > *) x));
}
static void *_p_iDynTree__LinearMotionVector3SemanticsTo_p_iDynTree__GeomVector3SemanticsT_iDynTree__LinearMotionVector3Semantics_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > *)  ((iDynTree::LinearMotionVector3Semantics *) x));
}
static void *_p_iDynTree__RotationalInertiaRawTo_p_iDynTree__MatrixFixSizeT_3_3_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::MatrixFixSize< 3,3 > *)  ((iDynTree::RotationalInertiaRaw *) x));
}
static void *_p_iDynTree__RotationRawTo_p_iDynTree__MatrixFixSizeT_3_3_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::MatrixFixSize< 3,3 > *)  ((iDynTree::RotationRaw *) x));
}
static void *_p_iDynTree__RotationTo_p_iDynTree__MatrixFixSizeT_3_3_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::MatrixFixSize< 3,3 > *) (iDynTree::RotationRaw *) ((iDynTree::Rotation *) x));
}
static void *_p_iDynTree__MovableJointImplT_1_1_tTo_p_iDynTree__IJoint(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::IJoint *)  ((iDynTree::MovableJointImpl< 1,1 > *) x));
}
static void *_p_iDynTree__RevoluteJointTo_p_iDynTree__IJoint(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::IJoint *) (iDynTree::MovableJointImpl< 1,1 > *) ((iDynTree::RevoluteJoint *) x));
}
static void *_p_iDynTree__MovableJointImplT_6_6_tTo_p_iDynTree__IJoint(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::IJoint *)  ((iDynTree::MovableJointImpl< 6,6 > *) x));
}
static void *_p_iDynTree__MovableJointImplT_5_5_tTo_p_iDynTree__IJoint(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::IJoint *)  ((iDynTree::MovableJointImpl< 5,5 > *) x));
}
static void *_p_iDynTree__MovableJointImplT_4_4_tTo_p_iDynTree__IJoint(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::IJoint *)  ((iDynTree::MovableJointImpl< 4,4 > *) x));
}
static void *_p_iDynTree__FixedJointTo_p_iDynTree__IJoint(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::IJoint *)  ((iDynTree::FixedJoint *) x));
}
static void *_p_iDynTree__MovableJointImplT_3_3_tTo_p_iDynTree__IJoint(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::IJoint *)  ((iDynTree::MovableJointImpl< 3,3 > *) x));
}
static void *_p_iDynTree__MovableJointImplT_2_2_tTo_p_iDynTree__IJoint(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::IJoint *)  ((iDynTree::MovableJointImpl< 2,2 > *) x));
}
static void *_p_iDynTree__LinearMotionVector3To_p_iDynTree__MotionVector3T_iDynTree__LinearMotionVector3_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::MotionVector3< iDynTree::LinearMotionVector3 > *)  ((iDynTree::LinearMotionVector3 *) x));
}
static void *_p_iDynTree__AngularForceVector3SemanticsTo_p_iDynTree__ForceVector3SemanticsT_iDynTree__AngularForceVector3Semantics_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics > *)  ((iDynTree::AngularForceVector3Semantics *) x));
}
static void *_p_iDynTree__ForceVector3T_iDynTree__LinearForceVector3_tTo_p_iDynTree__GeomVector3T_iDynTree__LinearForceVector3_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::GeomVector3< iDynTree::LinearForceVector3 > *)  ((iDynTree::ForceVector3< iDynTree::LinearForceVector3 > *) x));
}
static void *_p_iDynTree__LinearForceVector3To_p_iDynTree__GeomVector3T_iDynTree__LinearForceVector3_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::GeomVector3< iDynTree::LinearForceVector3 > *) (iDynTree::ForceVector3< iDynTree::LinearForceVector3 > *) ((iDynTree::LinearForceVector3 *) x));
}
static void *_p_iDynTree__MotionVector3T_iDynTree__LinearMotionVector3_tTo_p_iDynTree__GeomVector3T_iDynTree__LinearMotionVector3_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > *)  ((iDynTree::MotionVector3< iDynTree::LinearMotionVector3 > *) x));
}
static void *_p_iDynTree__LinearMotionVector3To_p_iDynTree__GeomVector3T_iDynTree__LinearMotionVector3_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > *) (iDynTree::MotionVector3< iDynTree::LinearMotionVector3 > *) ((iDynTree::LinearMotionVector3 *) x));
}
static void *_p_iDynTree__SpatialMotionVectorTo_p_iDynTree__SpatialVectorT_iDynTree__SpatialMotionVector_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *)  ((iDynTree::SpatialMotionVector *) x));
}
static void *_p_iDynTree__TwistTo_p_iDynTree__SpatialVectorT_iDynTree__SpatialMotionVector_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *) (iDynTree::SpatialMotionVector *) ((iDynTree::Twist *) x));
}
static void *_p_iDynTree__SpatialAccTo_p_iDynTree__SpatialVectorT_iDynTree__SpatialMotionVector_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *) (iDynTree::SpatialMotionVector *) ((iDynTree::SpatialAcc *) x));
}
static void *_p_iDynTree__AngularMotionVector3To_p_iDynTree__MotionVector3T_iDynTree__AngularMotionVector3_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::MotionVector3< iDynTree::AngularMotionVector3 > *)  ((iDynTree::AngularMotionVector3 *) x));
}
static swig_type_info _swigt__p_AngularVector3T = {"_p_AngularVector3T", "AngularVector3T *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_AngularVector3Type = {"_p_AngularVector3Type", "AngularVector3Type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DerivByAngularMotion = {"_p_DerivByAngularMotion", "DerivByAngularMotion *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DerivByLinearMotion = {"_p_DerivByLinearMotion", "DerivByLinearMotion *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DualSpace = {"_p_DualSpace", "DualSpace *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DualVectorT = {"_p_DualVectorT", "DualVectorT *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LinearVector3T = {"_p_LinearVector3T", "LinearVector3T *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LinearVector3Type = {"_p_LinearVector3Type", "LinearVector3Type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MotionCrossAngF = {"_p_MotionCrossAngF", "MotionCrossAngF *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MotionCrossAngM = {"_p_MotionCrossAngM", "MotionCrossAngM *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MotionCrossLinF = {"_p_MotionCrossLinF", "MotionCrossLinF *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MotionCrossLinM = {"_p_MotionCrossLinM", "MotionCrossLinM *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MotionForceSemanticsT = {"_p_MotionForceSemanticsT", "MotionForceSemanticsT *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MotionForceTbase = {"_p_MotionForceTbase", "MotionForceTbase *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SemanticsType = {"_p_SemanticsType", "SemanticsType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Traits = {"_p_Traits", "Traits *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Type = {"_p_Type", "Type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_allocator_type = {"_p_allocator_type", "allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_const_iterator = {"_p_const_iterator", "const_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_const_typed_iterator = {"_p_const_typed_iterator", "const_typed_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_iDynTree__AccelerometerSensor = {"_p_iDynTree__AccelerometerSensor", "iDynTree::AccelerometerSensor *", 0, 0, (void*)"iDynTree.AccelerometerSensor", 0};
static swig_type_info _swigt__p_iDynTree__AngularForceVector3 = {"_p_iDynTree__AngularForceVector3", "iDynTree::SpatialForceVector::AngularVector3T *|iDynTree::MotionForce_traits< iDynTree::AngularMotionVector3 >::DualSpace *|iDynTree::AngularForceVector3 *|iDynTree::MotionVector3< iDynTree::LinearMotionVector3 >::MotionCrossLinF *|iDynTree::AngMomentum *|iDynTree::SpatialVector< iDynTree::SpatialForceVector >::AngularVector3T *|iDynTree::MotionVector3< iDynTree::AngularMotionVector3 >::MotionCrossAngF *|iDynTree::Torque *", 0, 0, (void*)"iDynTree.AngularForceVector3", 0};
static swig_type_info _swigt__p_iDynTree__AngularForceVector3Semantics = {"_p_iDynTree__AngularForceVector3Semantics", "iDynTree::DualMotionForceSemanticsT< iDynTree::AngularMotionVector3Semantics >::Type *|iDynTree::AngularForceVector3Semantics *|iDynTree::GeomVector3< iDynTree::AngularForceVector3 >::MotionForceSemanticsT *", 0, 0, (void*)"iDynTree.AngularForceVector3Semantics", 0};
static swig_type_info _swigt__p_iDynTree__AngularMotionVector3 = {"_p_iDynTree__AngularMotionVector3", "iDynTree::SpatialMotionVector::AngularVector3T *|iDynTree::AngularMotionVector3 *|iDynTree::AngVelocity *|iDynTree::MotionVector3< iDynTree::LinearMotionVector3 >::MotionCrossLinM *|iDynTree::AngAcceleration *|iDynTree::SpatialVector< iDynTree::SpatialMotionVector >::AngularVector3T *|iDynTree::MotionVector3< iDynTree::AngularMotionVector3 >::MotionCrossAngM *|iDynTree::MotionForce_traits< iDynTree::AngularForceVector3 >::DualSpace *", 0, 0, (void*)"iDynTree.AngularMotionVector3", 0};
static swig_type_info _swigt__p_iDynTree__AngularMotionVector3Semantics = {"_p_iDynTree__AngularMotionVector3Semantics", "iDynTree::DualMotionForceSemanticsT< iDynTree::AngularForceVector3Semantics >::Type *|iDynTree::AngularMotionVector3Semantics *|iDynTree::GeomVector3< iDynTree::AngularMotionVector3 >::MotionForceSemanticsT *", 0, 0, (void*)"iDynTree.AngularMotionVector3Semantics", 0};
static swig_type_info _swigt__p_iDynTree__ArticulatedBodyAlgorithmInternalBuffers = {"_p_iDynTree__ArticulatedBodyAlgorithmInternalBuffers", "iDynTree::ArticulatedBodyAlgorithmInternalBuffers *", 0, 0, (void*)"iDynTree.ArticulatedBodyAlgorithmInternalBuffers", 0};
static swig_type_info _swigt__p_iDynTree__ArticulatedBodyInertia = {"_p_iDynTree__ArticulatedBodyInertia", "iDynTree::ArticulatedBodyInertia *", 0, 0, (void*)"iDynTree.ArticulatedBodyInertia", 0};
static swig_type_info _swigt__p_iDynTree__Axis = {"_p_iDynTree__Axis", "iDynTree::Axis *", 0, 0, (void*)"iDynTree.Axis", 0};
static swig_type_info _swigt__p_iDynTree__BerdyDynamicVariable = {"_p_iDynTree__BerdyDynamicVariable", "std::vector< iDynTree::BerdyDynamicVariable >::value_type *|iDynTree::BerdyDynamicVariable *", 0, 0, (void*)"iDynTree.BerdyDynamicVariable", 0};
static swig_type_info _swigt__p_iDynTree__BerdyHelper = {"_p_iDynTree__BerdyHelper", "iDynTree::BerdyHelper *", 0, 0, (void*)"iDynTree.BerdyHelper", 0};
static swig_type_info _swigt__p_iDynTree__BerdyOptions = {"_p_iDynTree__BerdyOptions", "iDynTree::BerdyOptions *", 0, 0, (void*)"iDynTree.BerdyOptions", 0};
static swig_type_info _swigt__p_iDynTree__BerdySensor = {"_p_iDynTree__BerdySensor", "std::vector< iDynTree::BerdySensor >::value_type *|iDynTree::BerdySensor *", 0, 0, (void*)"iDynTree.BerdySensor", 0};
static swig_type_info _swigt__p_iDynTree__Box = {"_p_iDynTree__Box", "iDynTree::Box *", 0, 0, (void*)"iDynTree.Box", 0};
static swig_type_info _swigt__p_iDynTree__ClassicalAcc = {"_p_iDynTree__ClassicalAcc", "iDynTree::ClassicalAcc *", 0, 0, (void*)"iDynTree.ClassicalAcc", 0};
static swig_type_info _swigt__p_iDynTree__ColorViz = {"_p_iDynTree__ColorViz", "iDynTree::ColorViz *", 0, 0, (void*)"iDynTree.ColorViz", 0};
static swig_type_info _swigt__p_iDynTree__ContactWrench = {"_p_iDynTree__ContactWrench", "iDynTree::ContactWrench *", 0, 0, (void*)"iDynTree.ContactWrench", 0};
static swig_type_info _swigt__p_iDynTree__Cylinder = {"_p_iDynTree__Cylinder", "iDynTree::Cylinder *", 0, 0, (void*)"iDynTree.Cylinder", 0};
static swig_type_info _swigt__p_iDynTree__DOFSpatialForceArray = {"_p_iDynTree__DOFSpatialForceArray", "iDynTree::DOFSpatialForceArray *", 0, 0, (void*)"iDynTree.DOFSpatialForceArray", 0};
static swig_type_info _swigt__p_iDynTree__DOFSpatialMotionArray = {"_p_iDynTree__DOFSpatialMotionArray", "iDynTree::DOFSpatialMotionArray *", 0, 0, (void*)"iDynTree.DOFSpatialMotionArray", 0};
static swig_type_info _swigt__p_iDynTree__Direction = {"_p_iDynTree__Direction", "iDynTree::Direction *", 0, 0, (void*)"iDynTree.Direction", 0};
static swig_type_info _swigt__p_iDynTree__Dummy = {"_p_iDynTree__Dummy", "iDynTree::Dummy *", 0, 0, (void*)"iDynTree.Dummy", 0};
static swig_type_info _swigt__p_iDynTree__ExtWrenchesAndJointTorquesEstimator = {"_p_iDynTree__ExtWrenchesAndJointTorquesEstimator", "iDynTree::ExtWrenchesAndJointTorquesEstimator *", 0, 0, (void*)"iDynTree.ExtWrenchesAndJointTorquesEstimator", 0};
static swig_type_info _swigt__p_iDynTree__ExternalMesh = {"_p_iDynTree__ExternalMesh", "iDynTree::ExternalMesh *", 0, 0, (void*)"iDynTree.ExternalMesh", 0};
static swig_type_info _swigt__p_iDynTree__FixedJoint = {"_p_iDynTree__FixedJoint", "iDynTree::FixedJoint *", 0, 0, (void*)"iDynTree.FixedJoint", 0};
static swig_type_info _swigt__p_iDynTree__ForceVector3SemanticsT_iDynTree__AngularForceVector3Semantics_t = {"_p_iDynTree__ForceVector3SemanticsT_iDynTree__AngularForceVector3Semantics_t", "iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics > *", 0, 0, (void*)"iDynTree.ForceVector3Semantics__AngularForceVector3Semantics", 0};
static swig_type_info _swigt__p_iDynTree__ForceVector3SemanticsT_iDynTree__LinearForceVector3Semantics_t = {"_p_iDynTree__ForceVector3SemanticsT_iDynTree__LinearForceVector3Semantics_t", "iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics > *", 0, 0, (void*)"iDynTree.ForceVector3Semantics__LinearForceVector3Semantics", 0};
static swig_type_info _swigt__p_iDynTree__ForceVector3T_iDynTree__AngularForceVector3_t = {"_p_iDynTree__ForceVector3T_iDynTree__AngularForceVector3_t", "iDynTree::ForceVector3< iDynTree::AngularForceVector3 > *", 0, 0, (void*)"iDynTree.ForceVector3__AngularForceVector3", 0};
static swig_type_info _swigt__p_iDynTree__ForceVector3T_iDynTree__LinearForceVector3_t = {"_p_iDynTree__ForceVector3T_iDynTree__LinearForceVector3_t", "iDynTree::ForceVector3< iDynTree::LinearForceVector3 > *", 0, 0, (void*)"iDynTree.ForceVector3__LinearForceVector3", 0};
static swig_type_info _swigt__p_iDynTree__FrameFreeFloatingJacobian = {"_p_iDynTree__FrameFreeFloatingJacobian", "iDynTree::FrameFreeFloatingJacobian *", 0, 0, (void*)"iDynTree.FrameFreeFloatingJacobian", 0};
static swig_type_info _swigt__p_iDynTree__FreeFloatingAcc = {"_p_iDynTree__FreeFloatingAcc", "iDynTree::FreeFloatingAcc *", 0, 0, (void*)"iDynTree.FreeFloatingAcc", 0};
static swig_type_info _swigt__p_iDynTree__FreeFloatingGeneralizedTorques = {"_p_iDynTree__FreeFloatingGeneralizedTorques", "iDynTree::FreeFloatingGeneralizedTorques *", 0, 0, (void*)"iDynTree.FreeFloatingGeneralizedTorques", 0};
static swig_type_info _swigt__p_iDynTree__FreeFloatingMassMatrix = {"_p_iDynTree__FreeFloatingMassMatrix", "iDynTree::FreeFloatingMassMatrix *", 0, 0, (void*)"iDynTree.FreeFloatingMassMatrix", 0};
static swig_type_info _swigt__p_iDynTree__FreeFloatingPos = {"_p_iDynTree__FreeFloatingPos", "iDynTree::FreeFloatingPos *", 0, 0, (void*)"iDynTree.FreeFloatingPos", 0};
static swig_type_info _swigt__p_iDynTree__FreeFloatingVel = {"_p_iDynTree__FreeFloatingVel", "iDynTree::FreeFloatingVel *", 0, 0, (void*)"iDynTree.FreeFloatingVel", 0};
static swig_type_info _swigt__p_iDynTree__GeomVector3SemanticsT_iDynTree__AngularForceVector3Semantics_t = {"_p_iDynTree__GeomVector3SemanticsT_iDynTree__AngularForceVector3Semantics_t", "iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > *", 0, 0, (void*)"iDynTree.GeomVector3Semantics__AngularForceVector3Semantics", 0};
static swig_type_info _swigt__p_iDynTree__GeomVector3SemanticsT_iDynTree__AngularMotionVector3Semantics_t = {"_p_iDynTree__GeomVector3SemanticsT_iDynTree__AngularMotionVector3Semantics_t", "iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > *", 0, 0, (void*)"iDynTree.GeomVector3Semantics__AngularMotionVector3Semantics", 0};
static swig_type_info _swigt__p_iDynTree__GeomVector3SemanticsT_iDynTree__LinearForceVector3Semantics_t = {"_p_iDynTree__GeomVector3SemanticsT_iDynTree__LinearForceVector3Semantics_t", "iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > *", 0, 0, (void*)"iDynTree.GeomVector3Semantics__LinearForceVector3Semantics", 0};
static swig_type_info _swigt__p_iDynTree__GeomVector3SemanticsT_iDynTree__LinearMotionVector3Semantics_t = {"_p_iDynTree__GeomVector3SemanticsT_iDynTree__LinearMotionVector3Semantics_t", "iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > *", 0, 0, (void*)"iDynTree.GeomVector3Semantics__LinearMotionVector3Semantics", 0};
static swig_type_info _swigt__p_iDynTree__GeomVector3T_iDynTree__AngularForceVector3_t = {"_p_iDynTree__GeomVector3T_iDynTree__AngularForceVector3_t", "iDynTree::GeomVector3< iDynTree::AngularForceVector3 > *|iDynTree::GeomVector3< iDynTree::AngularForceVector3 >::MotionForceTbase *", 0, 0, (void*)"iDynTree.GeomVector3__AngularForceVector3", 0};
static swig_type_info _swigt__p_iDynTree__GeomVector3T_iDynTree__AngularMotionVector3_t = {"_p_iDynTree__GeomVector3T_iDynTree__AngularMotionVector3_t", "iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > *|iDynTree::GeomVector3< iDynTree::AngularMotionVector3 >::MotionForceTbase *", 0, 0, (void*)"iDynTree.GeomVector3__AngularMotionVector3", 0};
static swig_type_info _swigt__p_iDynTree__GeomVector3T_iDynTree__LinearForceVector3_t = {"_p_iDynTree__GeomVector3T_iDynTree__LinearForceVector3_t", "iDynTree::GeomVector3< iDynTree::LinearForceVector3 > *|iDynTree::GeomVector3< iDynTree::LinearForceVector3 >::MotionForceTbase *", 0, 0, (void*)"iDynTree.GeomVector3__LinearForceVector3", 0};
static swig_type_info _swigt__p_iDynTree__GeomVector3T_iDynTree__LinearMotionVector3_t = {"_p_iDynTree__GeomVector3T_iDynTree__LinearMotionVector3_t", "iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > *|iDynTree::GeomVector3< iDynTree::LinearMotionVector3 >::MotionForceTbase *", 0, 0, (void*)"iDynTree.GeomVector3__LinearMotionVector3", 0};
static swig_type_info _swigt__p_iDynTree__GyroscopeSensor = {"_p_iDynTree__GyroscopeSensor", "iDynTree::GyroscopeSensor *", 0, 0, (void*)"iDynTree.GyroscopeSensor", 0};
static swig_type_info _swigt__p_iDynTree__HighLevel__DynamicsComputations = {"_p_iDynTree__HighLevel__DynamicsComputations", "iDynTree::HighLevel::DynamicsComputations *", 0, 0, (void*)"iDynTree.DynamicsComputations", 0};
static swig_type_info _swigt__p_iDynTree__ICamera = {"_p_iDynTree__ICamera", "iDynTree::ICamera *", 0, 0, (void*)"iDynTree.ICamera", 0};
static swig_type_info _swigt__p_iDynTree__IEnvironment = {"_p_iDynTree__IEnvironment", "iDynTree::IEnvironment *", 0, 0, (void*)"iDynTree.IEnvironment", 0};
static swig_type_info _swigt__p_iDynTree__IJetsVisualization = {"_p_iDynTree__IJetsVisualization", "iDynTree::IJetsVisualization *", 0, 0, (void*)"iDynTree.IJetsVisualization", 0};
static swig_type_info _swigt__p_iDynTree__IJoint = {"_p_iDynTree__IJoint", "iDynTree::IJointPtr|iDynTree::IJoint *|iDynTree::IJointConstPtr", 0, 0, (void*)"iDynTree.IJoint", 0};
static swig_type_info _swigt__p_iDynTree__ILight = {"_p_iDynTree__ILight", "iDynTree::ILight *", 0, 0, (void*)"iDynTree.ILight", 0};
static swig_type_info _swigt__p_iDynTree__IModelVisualization = {"_p_iDynTree__IModelVisualization", "iDynTree::IModelVisualization *", 0, 0, (void*)"iDynTree.IModelVisualization", 0};
static swig_type_info _swigt__p_iDynTree__IndexRange = {"_p_iDynTree__IndexRange", "iDynTree::IndexRange *", 0, 0, (void*)"iDynTree.IndexRange", 0};
static swig_type_info _swigt__p_iDynTree__JointDOFsDoubleArray = {"_p_iDynTree__JointDOFsDoubleArray", "iDynTree::JointDOFsDoubleArray *", 0, 0, (void*)"iDynTree.JointDOFsDoubleArray", 0};
static swig_type_info _swigt__p_iDynTree__JointPosDoubleArray = {"_p_iDynTree__JointPosDoubleArray", "iDynTree::JointPosDoubleArray *", 0, 0, (void*)"iDynTree.JointPosDoubleArray", 0};
static swig_type_info _swigt__p_iDynTree__JointSensor = {"_p_iDynTree__JointSensor", "iDynTree::JointSensor *", 0, 0, (void*)"iDynTree.JointSensor", 0};
static swig_type_info _swigt__p_iDynTree__KinDynComputations = {"_p_iDynTree__KinDynComputations", "iDynTree::KinDynComputations *", 0, 0, (void*)"iDynTree.KinDynComputations", 0};
static swig_type_info _swigt__p_iDynTree__LinearForceVector3 = {"_p_iDynTree__LinearForceVector3", "iDynTree::SpatialForceVector::LinearVector3T *|iDynTree::LinearForceVector3 *|iDynTree::MotionVector3< iDynTree::LinearMotionVector3 >::MotionCrossAngF *|iDynTree::MotionForce_traits< iDynTree::LinearMotionVector3 >::DualSpace *|iDynTree::LinMomentum *|iDynTree::SpatialVector< iDynTree::SpatialForceVector >::LinearVector3T *|iDynTree::MotionVector3< iDynTree::AngularMotionVector3 >::MotionCrossLinF *|iDynTree::Force *", 0, 0, (void*)"iDynTree.LinearForceVector3", 0};
static swig_type_info _swigt__p_iDynTree__LinearForceVector3Semantics = {"_p_iDynTree__LinearForceVector3Semantics", "iDynTree::LinearForceVector3Semantics *|iDynTree::GeomVector3< iDynTree::LinearForceVector3 >::MotionForceSemanticsT *|iDynTree::DualMotionForceSemanticsT< iDynTree::LinearMotionVector3Semantics >::Type *", 0, 0, (void*)"iDynTree.LinearForceVector3Semantics", 0};
static swig_type_info _swigt__p_iDynTree__LinearMotionVector3 = {"_p_iDynTree__LinearMotionVector3", "iDynTree::SpatialMotionVector::LinearVector3T *|iDynTree::LinearMotionVector3 *|iDynTree::LinVelocity *|iDynTree::MotionVector3< iDynTree::LinearMotionVector3 >::MotionCrossAngM *|iDynTree::LinAcceleration *|iDynTree::MotionForce_traits< iDynTree::LinearForceVector3 >::DualSpace *|iDynTree::SpatialVector< iDynTree::SpatialMotionVector >::LinearVector3T *|iDynTree::MotionVector3< iDynTree::AngularMotionVector3 >::MotionCrossLinM *", 0, 0, (void*)"iDynTree.LinearMotionVector3", 0};
static swig_type_info _swigt__p_iDynTree__LinearMotionVector3Semantics = {"_p_iDynTree__LinearMotionVector3Semantics", "iDynTree::GeomVector3< iDynTree::LinearMotionVector3 >::MotionForceSemanticsT *|iDynTree::LinearMotionVector3Semantics *|iDynTree::DualMotionForceSemanticsT< iDynTree::LinearForceVector3Semantics >::Type *", 0, 0, (void*)"iDynTree.LinearMotionVector3Semantics", 0};
static swig_type_info _swigt__p_iDynTree__Link = {"_p_iDynTree__Link", "iDynTree::Link *|iDynTree::LinkPtr|iDynTree::LinkConstPtr", 0, 0, (void*)"iDynTree.Link", 0};
static swig_type_info _swigt__p_iDynTree__LinkAccArray = {"_p_iDynTree__LinkAccArray", "iDynTree::LinkAccArray *|iDynTree::LinkProperAccArray *", 0, 0, (void*)"iDynTree.LinkAccArray", 0};
static swig_type_info _swigt__p_iDynTree__LinkArticulatedBodyInertias = {"_p_iDynTree__LinkArticulatedBodyInertias", "iDynTree::LinkArticulatedBodyInertias *", 0, 0, (void*)"iDynTree.LinkArticulatedBodyInertias", 0};
static swig_type_info _swigt__p_iDynTree__LinkContactWrenches = {"_p_iDynTree__LinkContactWrenches", "iDynTree::LinkContactWrenches *", 0, 0, (void*)"iDynTree.LinkContactWrenches", 0};
static swig_type_info _swigt__p_iDynTree__LinkInertias = {"_p_iDynTree__LinkInertias", "iDynTree::LinkInertias *|iDynTree::LinkCompositeRigidBodyInertias *", 0, 0, (void*)"iDynTree.LinkInertias", 0};
static swig_type_info _swigt__p_iDynTree__LinkPositions = {"_p_iDynTree__LinkPositions", "iDynTree::LinkPositions *", 0, 0, (void*)"iDynTree.LinkPositions", 0};
static swig_type_info _swigt__p_iDynTree__LinkSensor = {"_p_iDynTree__LinkSensor", "iDynTree::LinkSensor *", 0, 0, (void*)"iDynTree.LinkSensor", 0};
static swig_type_info _swigt__p_iDynTree__LinkUnknownWrenchContacts = {"_p_iDynTree__LinkUnknownWrenchContacts", "iDynTree::LinkUnknownWrenchContacts *", 0, 0, (void*)"iDynTree.LinkUnknownWrenchContacts", 0};
static swig_type_info _swigt__p_iDynTree__LinkVelArray = {"_p_iDynTree__LinkVelArray", "iDynTree::LinkVelArray *", 0, 0, (void*)"iDynTree.LinkVelArray", 0};
static swig_type_info _swigt__p_iDynTree__LinkWrenches = {"_p_iDynTree__LinkWrenches", "iDynTree::LinkWrenches *|iDynTree::LinkNetExternalWrenches *|iDynTree::LinkInternalWrenches *|iDynTree::LinkNetTotalWrenchesWithoutGravity *", 0, 0, (void*)"iDynTree.LinkWrenches", 0};
static swig_type_info _swigt__p_iDynTree__MatrixDynSize = {"_p_iDynTree__MatrixDynSize", "iDynTree::MatrixDynSize *", 0, 0, (void*)"iDynTree.MatrixDynSize", 0};
static swig_type_info _swigt__p_iDynTree__MatrixFixSizeT_10_16_t = {"_p_iDynTree__MatrixFixSizeT_10_16_t", "iDynTree::MatrixFixSize< 10,16 > *|iDynTree::Matrix10x16 *", 0, 0, (void*)"iDynTree.Matrix10x16", 0};
static swig_type_info _swigt__p_iDynTree__MatrixFixSizeT_1_6_t = {"_p_iDynTree__MatrixFixSizeT_1_6_t", "iDynTree::Matrix1x6 *|iDynTree::MatrixFixSize< 1,6 > *", 0, 0, (void*)"iDynTree.Matrix1x6", 0};
static swig_type_info _swigt__p_iDynTree__MatrixFixSizeT_2_3_t = {"_p_iDynTree__MatrixFixSizeT_2_3_t", "iDynTree::MatrixFixSize< 2,3 > *|iDynTree::Matrix2x3 *", 0, 0, (void*)"iDynTree.Matrix2x3", 0};
static swig_type_info _swigt__p_iDynTree__MatrixFixSizeT_3_3_t = {"_p_iDynTree__MatrixFixSizeT_3_3_t", "iDynTree::Matrix3x3 *|iDynTree::MatrixFixSize< 3,3 > *", 0, 0, (void*)"iDynTree.Matrix3x3", 0};
static swig_type_info _swigt__p_iDynTree__MatrixFixSizeT_3_4_t = {"_p_iDynTree__MatrixFixSizeT_3_4_t", "iDynTree::MatrixFixSize< 3,4 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_iDynTree__MatrixFixSizeT_4_3_t = {"_p_iDynTree__MatrixFixSizeT_4_3_t", "iDynTree::MatrixFixSize< 4,3 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_iDynTree__MatrixFixSizeT_4_4_t = {"_p_iDynTree__MatrixFixSizeT_4_4_t", "iDynTree::MatrixFixSize< 4,4 > *|iDynTree::Matrix4x4 *", 0, 0, (void*)"iDynTree.Matrix4x4", 0};
static swig_type_info _swigt__p_iDynTree__MatrixFixSizeT_6_10_t = {"_p_iDynTree__MatrixFixSizeT_6_10_t", "iDynTree::MatrixFixSize< 6,10 > *|iDynTree::Matrix6x10 *", 0, 0, (void*)"iDynTree.Matrix6x10", 0};
static swig_type_info _swigt__p_iDynTree__MatrixFixSizeT_6_1_t = {"_p_iDynTree__MatrixFixSizeT_6_1_t", "iDynTree::MatrixFixSize< 6,1 > *|iDynTree::Matrix6x1 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_iDynTree__MatrixFixSizeT_6_6_t = {"_p_iDynTree__MatrixFixSizeT_6_6_t", "iDynTree::MatrixFixSize< 6,6 > *|iDynTree::Matrix6x6 *", 0, 0, (void*)"iDynTree.Matrix6x6", 0};
static swig_type_info _swigt__p_iDynTree__Model = {"_p_iDynTree__Model", "iDynTree::Model *", 0, 0, (void*)"iDynTree.Model", 0};
static swig_type_info _swigt__p_iDynTree__ModelLoader = {"_p_iDynTree__ModelLoader", "iDynTree::ModelLoader *", 0, 0, (void*)"iDynTree.ModelLoader", 0};
static swig_type_info _swigt__p_iDynTree__ModelSolidShapes = {"_p_iDynTree__ModelSolidShapes", "iDynTree::ModelSolidShapes *", 0, 0, (void*)"iDynTree.ModelSolidShapes", 0};
static swig_type_info _swigt__p_iDynTree__MomentumFreeFloatingJacobian = {"_p_iDynTree__MomentumFreeFloatingJacobian", "iDynTree::MomentumFreeFloatingJacobian *", 0, 0, (void*)"iDynTree.MomentumFreeFloatingJacobian", 0};
static swig_type_info _swigt__p_iDynTree__MotionVector3T_iDynTree__AngularMotionVector3_t = {"_p_iDynTree__MotionVector3T_iDynTree__AngularMotionVector3_t", "iDynTree::MotionVector3< iDynTree::AngularMotionVector3 > *", 0, 0, (void*)"iDynTree.MotionVector3__AngularMotionVector3", 0};
static swig_type_info _swigt__p_iDynTree__MotionVector3T_iDynTree__LinearMotionVector3_t = {"_p_iDynTree__MotionVector3T_iDynTree__LinearMotionVector3_t", "iDynTree::MotionVector3< iDynTree::LinearMotionVector3 > *", 0, 0, (void*)"iDynTree.MotionVector3__LinearMotionVector3", 0};
static swig_type_info _swigt__p_iDynTree__MovableJointImplT_1_1_t = {"_p_iDynTree__MovableJointImplT_1_1_t", "iDynTree::MovableJointImpl< 1,1 > *|iDynTree::MovableJointImpl1 *", 0, 0, (void*)"iDynTree.MovableJointImpl1", 0};
static swig_type_info _swigt__p_iDynTree__MovableJointImplT_2_2_t = {"_p_iDynTree__MovableJointImplT_2_2_t", "iDynTree::MovableJointImpl< 2,2 > *|iDynTree::MovableJointImpl2 *", 0, 0, (void*)"iDynTree.MovableJointImpl2", 0};
static swig_type_info _swigt__p_iDynTree__MovableJointImplT_3_3_t = {"_p_iDynTree__MovableJointImplT_3_3_t", "iDynTree::MovableJointImpl3 *|iDynTree::MovableJointImpl< 3,3 > *", 0, 0, (void*)"iDynTree.MovableJointImpl3", 0};
static swig_type_info _swigt__p_iDynTree__MovableJointImplT_4_4_t = {"_p_iDynTree__MovableJointImplT_4_4_t", "iDynTree::MovableJointImpl4 *|iDynTree::MovableJointImpl< 4,4 > *", 0, 0, (void*)"iDynTree.MovableJointImpl4", 0};
static swig_type_info _swigt__p_iDynTree__MovableJointImplT_5_5_t = {"_p_iDynTree__MovableJointImplT_5_5_t", "iDynTree::MovableJointImpl< 5,5 > *|iDynTree::MovableJointImpl5 *", 0, 0, (void*)"iDynTree.MovableJointImpl5", 0};
static swig_type_info _swigt__p_iDynTree__MovableJointImplT_6_6_t = {"_p_iDynTree__MovableJointImplT_6_6_t", "iDynTree::MovableJointImpl< 6,6 > *|iDynTree::MovableJointImpl6 *", 0, 0, (void*)"iDynTree.MovableJointImpl6", 0};
static swig_type_info _swigt__p_iDynTree__Neighbor = {"_p_iDynTree__Neighbor", "iDynTree::Neighbor *", 0, 0, (void*)"iDynTree.Neighbor", 0};
static swig_type_info _swigt__p_iDynTree__Position = {"_p_iDynTree__Position", "iDynTree::Position *", 0, 0, (void*)"iDynTree.Position", 0};
static swig_type_info _swigt__p_iDynTree__PositionRaw = {"_p_iDynTree__PositionRaw", "iDynTree::PositionRaw *", 0, 0, (void*)"iDynTree.PositionRaw", 0};
static swig_type_info _swigt__p_iDynTree__PositionSemantics = {"_p_iDynTree__PositionSemantics", "iDynTree::PositionSemantics *", 0, 0, (void*)"iDynTree.PositionSemantics", 0};
static swig_type_info _swigt__p_iDynTree__Regressors__DynamicsRegressorGenerator = {"_p_iDynTree__Regressors__DynamicsRegressorGenerator", "iDynTree::Regressors::DynamicsRegressorGenerator *", 0, 0, (void*)"iDynTree.DynamicsRegressorGenerator", 0};
static swig_type_info _swigt__p_iDynTree__Regressors__DynamicsRegressorParameter = {"_p_iDynTree__Regressors__DynamicsRegressorParameter", "iDynTree::Regressors::DynamicsRegressorParameter *", 0, 0, (void*)"iDynTree.DynamicsRegressorParameter", 0};
static swig_type_info _swigt__p_iDynTree__Regressors__DynamicsRegressorParametersList = {"_p_iDynTree__Regressors__DynamicsRegressorParametersList", "iDynTree::Regressors::DynamicsRegressorParametersList *", 0, 0, (void*)"iDynTree.DynamicsRegressorParametersList", 0};
static swig_type_info _swigt__p_iDynTree__RevoluteJoint = {"_p_iDynTree__RevoluteJoint", "iDynTree::RevoluteJoint *", 0, 0, (void*)"iDynTree.RevoluteJoint", 0};
static swig_type_info _swigt__p_iDynTree__RigidBodyInertiaNonLinearParametrization = {"_p_iDynTree__RigidBodyInertiaNonLinearParametrization", "iDynTree::RigidBodyInertiaNonLinearParametrization *", 0, 0, (void*)"iDynTree.RigidBodyInertiaNonLinearParametrization", 0};
static swig_type_info _swigt__p_iDynTree__Rotation = {"_p_iDynTree__Rotation", "iDynTree::Rotation *", 0, 0, (void*)"iDynTree.Rotation", 0};
static swig_type_info _swigt__p_iDynTree__RotationRaw = {"_p_iDynTree__RotationRaw", "iDynTree::RotationRaw *", 0, 0, (void*)"iDynTree.RotationRaw", 0};
static swig_type_info _swigt__p_iDynTree__RotationSemantics = {"_p_iDynTree__RotationSemantics", "iDynTree::RotationSemantics *", 0, 0, (void*)"iDynTree.RotationSemantics", 0};
static swig_type_info _swigt__p_iDynTree__RotationalInertiaRaw = {"_p_iDynTree__RotationalInertiaRaw", "iDynTree::RotationalInertiaRaw *", 0, 0, (void*)"iDynTree.RotationalInertiaRaw", 0};
static swig_type_info _swigt__p_iDynTree__Sensor = {"_p_iDynTree__Sensor", "iDynTree::Sensor *", 0, 0, (void*)"iDynTree.Sensor", 0};
static swig_type_info _swigt__p_iDynTree__SensorsList = {"_p_iDynTree__SensorsList", "iDynTree::SensorsList *", 0, 0, (void*)"iDynTree.SensorsList", 0};
static swig_type_info _swigt__p_iDynTree__SensorsMeasurements = {"_p_iDynTree__SensorsMeasurements", "iDynTree::SensorsMeasurements *", 0, 0, (void*)"iDynTree.SensorsMeasurements", 0};
static swig_type_info _swigt__p_iDynTree__SimpleLeggedOdometry = {"_p_iDynTree__SimpleLeggedOdometry", "iDynTree::SimpleLeggedOdometry *", 0, 0, (void*)"iDynTree.SimpleLeggedOdometry", 0};
static swig_type_info _swigt__p_iDynTree__SixAxisForceTorqueSensor = {"_p_iDynTree__SixAxisForceTorqueSensor", "iDynTree::SixAxisForceTorqueSensor *", 0, 0, (void*)"iDynTree.SixAxisForceTorqueSensor", 0};
static swig_type_info _swigt__p_iDynTree__SolidShape = {"_p_iDynTree__SolidShape", "iDynTree::SolidShape *", 0, 0, (void*)"iDynTree.SolidShape", 0};
static swig_type_info _swigt__p_iDynTree__SparseMatrix = {"_p_iDynTree__SparseMatrix", "iDynTree::SparseMatrix *", 0, 0, (void*)"iDynTree.SparseMatrix", 0};
static swig_type_info _swigt__p_iDynTree__SpatialAcc = {"_p_iDynTree__SpatialAcc", "iDynTree::SpatialAcc *", 0, 0, (void*)"iDynTree.SpatialAcc", 0};
static swig_type_info _swigt__p_iDynTree__SpatialForceVector = {"_p_iDynTree__SpatialForceVector", "iDynTree::SpatialVector< iDynTree::SpatialMotionVector >::DualVectorT *|iDynTree::SpatialForceVector *", 0, 0, (void*)"iDynTree.SpatialForceVector", 0};
static swig_type_info _swigt__p_iDynTree__SpatialInertia = {"_p_iDynTree__SpatialInertia", "iDynTree::SpatialInertia *", 0, 0, (void*)"iDynTree.SpatialInertia", 0};
static swig_type_info _swigt__p_iDynTree__SpatialInertiaRaw = {"_p_iDynTree__SpatialInertiaRaw", "iDynTree::SpatialInertiaRaw *", 0, 0, (void*)"iDynTree.SpatialInertiaRaw", 0};
static swig_type_info _swigt__p_iDynTree__SpatialMomentum = {"_p_iDynTree__SpatialMomentum", "iDynTree::SpatialMomentum *", 0, 0, (void*)"iDynTree.SpatialMomentum", 0};
static swig_type_info _swigt__p_iDynTree__SpatialMotionVector = {"_p_iDynTree__SpatialMotionVector", "iDynTree::SpatialVector< iDynTree::SpatialForceVector >::DualVectorT *|iDynTree::SpatialMotionVector *", 0, 0, (void*)"iDynTree.SpatialMotionVector", 0};
static swig_type_info _swigt__p_iDynTree__SpatialVectorSemanticsT_iDynTree__LinearForceVector3Semantics_iDynTree__AngularForceVector3Semantics_t = {"_p_iDynTree__SpatialVectorSemanticsT_iDynTree__LinearForceVector3Semantics_iDynTree__AngularForceVector3Semantics_t", "iDynTree::SpatialVectorSemantics< iDynTree::LinearForceVector3Semantics,iDynTree::AngularForceVector3Semantics > *", 0, 0, (void*)"iDynTree.SpatialForceVectorSemanticsBase", 0};
static swig_type_info _swigt__p_iDynTree__SpatialVectorSemanticsT_iDynTree__LinearMotionVector3Semantics_iDynTree__AngularMotionVector3Semantics_t = {"_p_iDynTree__SpatialVectorSemanticsT_iDynTree__LinearMotionVector3Semantics_iDynTree__AngularMotionVector3Semantics_t", "iDynTree::SpatialVectorSemantics< iDynTree::LinearMotionVector3Semantics,iDynTree::AngularMotionVector3Semantics > *", 0, 0, (void*)"iDynTree.SpatialMotionVectorSemanticsBase", 0};
static swig_type_info _swigt__p_iDynTree__SpatialVectorT_iDynTree__SpatialForceVector_t = {"_p_iDynTree__SpatialVectorT_iDynTree__SpatialForceVector_t", "iDynTree::SpatialVector< iDynTree::SpatialForceVector > *", 0, 0, (void*)"iDynTree.SpatialForceVectorBase", 0};
static swig_type_info _swigt__p_iDynTree__SpatialVectorT_iDynTree__SpatialMotionVector_t = {"_p_iDynTree__SpatialVectorT_iDynTree__SpatialMotionVector_t", "iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *", 0, 0, (void*)"iDynTree.SpatialMotionVectorBase", 0};
static swig_type_info _swigt__p_iDynTree__Sphere = {"_p_iDynTree__Sphere", "iDynTree::Sphere *", 0, 0, (void*)"iDynTree.Sphere", 0};
static swig_type_info _swigt__p_iDynTree__SubModelDecomposition = {"_p_iDynTree__SubModelDecomposition", "iDynTree::SubModelDecomposition *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_iDynTree__Transform = {"_p_iDynTree__Transform", "iDynTree::Transform *", 0, 0, (void*)"iDynTree.Transform", 0};
static swig_type_info _swigt__p_iDynTree__TransformDerivative = {"_p_iDynTree__TransformDerivative", "iDynTree::TransformDerivative *", 0, 0, (void*)"iDynTree.TransformDerivative", 0};
static swig_type_info _swigt__p_iDynTree__TransformSemantics = {"_p_iDynTree__TransformSemantics", "iDynTree::TransformSemantics *", 0, 0, (void*)"iDynTree.TransformSemantics", 0};
static swig_type_info _swigt__p_iDynTree__Traversal = {"_p_iDynTree__Traversal", "iDynTree::Traversal *", 0, 0, (void*)"iDynTree.Traversal", 0};
static swig_type_info _swigt__p_iDynTree__Triplets = {"_p_iDynTree__Triplets", "iDynTree::Triplets *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_iDynTree__Twist = {"_p_iDynTree__Twist", "iDynTree::Twist *", 0, 0, (void*)"iDynTree.Twist", 0};
static swig_type_info _swigt__p_iDynTree__URDFParserOptions = {"_p_iDynTree__URDFParserOptions", "iDynTree::URDFParserOptions *", 0, 0, (void*)"iDynTree.URDFParserOptions", 0};
static swig_type_info _swigt__p_iDynTree__UnknownWrenchContact = {"_p_iDynTree__UnknownWrenchContact", "iDynTree::UnknownWrenchContact *", 0, 0, (void*)"iDynTree.UnknownWrenchContact", 0};
static swig_type_info _swigt__p_iDynTree__VectorDynSize = {"_p_iDynTree__VectorDynSize", "iDynTree::VectorDynSize *", 0, 0, (void*)"iDynTree.VectorDynSize", 0};
static swig_type_info _swigt__p_iDynTree__VectorFixSizeT_10_t = {"_p_iDynTree__VectorFixSizeT_10_t", "iDynTree::VectorFixSize< 10 > *|iDynTree::Vector10 *", 0, 0, (void*)"iDynTree.Vector10", 0};
static swig_type_info _swigt__p_iDynTree__VectorFixSizeT_16_t = {"_p_iDynTree__VectorFixSizeT_16_t", "iDynTree::Vector16 *|iDynTree::VectorFixSize< 16 > *", 0, 0, (void*)"iDynTree.Vector16", 0};
static swig_type_info _swigt__p_iDynTree__VectorFixSizeT_2_t = {"_p_iDynTree__VectorFixSizeT_2_t", "iDynTree::Vector2 *|iDynTree::VectorFixSize< 2 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_iDynTree__VectorFixSizeT_3_t = {"_p_iDynTree__VectorFixSizeT_3_t", "iDynTree::Vector3 *|iDynTree::VectorFixSize< 3 > *", 0, 0, (void*)"iDynTree.Vector3", 0};
static swig_type_info _swigt__p_iDynTree__VectorFixSizeT_4_t = {"_p_iDynTree__VectorFixSizeT_4_t", "iDynTree::VectorFixSize< 4 > *|iDynTree::Vector4 *", 0, 0, (void*)"iDynTree.Vector4", 0};
static swig_type_info _swigt__p_iDynTree__VectorFixSizeT_6_t = {"_p_iDynTree__VectorFixSizeT_6_t", "iDynTree::Vector6 *|iDynTree::VectorFixSize< 6 > *", 0, 0, (void*)"iDynTree.Vector6", 0};
static swig_type_info _swigt__p_iDynTree__Visualizer = {"_p_iDynTree__Visualizer", "iDynTree::Visualizer *", 0, 0, (void*)"iDynTree.Visualizer", 0};
static swig_type_info _swigt__p_iDynTree__VisualizerOptions = {"_p_iDynTree__VisualizerOptions", "iDynTree::VisualizerOptions *", 0, 0, (void*)"iDynTree.VisualizerOptions", 0};
static swig_type_info _swigt__p_iDynTree__Wrench = {"_p_iDynTree__Wrench", "iDynTree::Wrench *", 0, 0, (void*)"iDynTree.Wrench", 0};
static swig_type_info _swigt__p_iDynTree__estimateExternalWrenchesBuffers = {"_p_iDynTree__estimateExternalWrenchesBuffers", "iDynTree::estimateExternalWrenchesBuffers *", 0, 0, (void*)"iDynTree.estimateExternalWrenchesBuffers", 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *|iDynTree::LinkIndex *|iDynTree::FrameIndex *|iDynTree::TraversalIndex *|iDynTree::JointIndex *|iDynTree::DOFIndex *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_iterator = {"_p_iterator", "iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_iDynTree__BerdyDynamicVariable_t = {"_p_std__allocatorT_iDynTree__BerdyDynamicVariable_t", "std::vector< iDynTree::BerdyDynamicVariable >::allocator_type *|std::allocator< iDynTree::BerdyDynamicVariable > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_iDynTree__BerdySensor_t = {"_p_std__allocatorT_iDynTree__BerdySensor_t", "std::allocator< iDynTree::BerdySensor > *|std::vector< iDynTree::BerdySensor >::allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_std__string_t = {"_p_std__allocatorT_std__string_t", "std::vector< std::string >::allocator_type *|std::allocator< std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_iDynTree__BerdyDynamicVariable_std__allocatorT_iDynTree__BerdyDynamicVariable_t_t = {"_p_std__vectorT_iDynTree__BerdyDynamicVariable_std__allocatorT_iDynTree__BerdyDynamicVariable_t_t", "std::vector< iDynTree::BerdyDynamicVariable,std::allocator< iDynTree::BerdyDynamicVariable > > *|std::vector< iDynTree::BerdyDynamicVariable > *", 0, 0, (void*)"iDynTree.BerdyDynamicVariables", 0};
static swig_type_info _swigt__p_std__vectorT_iDynTree__BerdySensor_std__allocatorT_iDynTree__BerdySensor_t_t = {"_p_std__vectorT_iDynTree__BerdySensor_std__allocatorT_iDynTree__BerdySensor_t_t", "std::vector< iDynTree::BerdySensor > *|std::vector< iDynTree::BerdySensor,std::allocator< iDynTree::BerdySensor > > *", 0, 0, (void*)"iDynTree.BerdySensors", 0};
static swig_type_info _swigt__p_std__vectorT_iDynTree__MatrixDynSize_std__allocatorT_iDynTree__MatrixDynSize_t_t = {"_p_std__vectorT_iDynTree__MatrixDynSize_std__allocatorT_iDynTree__MatrixDynSize_t_t", "std::vector< iDynTree::MatrixDynSize,std::allocator< iDynTree::MatrixDynSize > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_iDynTree__Regressors__DynamicsRegressorParameter_std__allocatorT_iDynTree__Regressors__DynamicsRegressorParameter_t_t = {"_p_std__vectorT_iDynTree__Regressors__DynamicsRegressorParameter_std__allocatorT_iDynTree__Regressors__DynamicsRegressorParameter_t_t", "std::vector< iDynTree::Regressors::DynamicsRegressorParameter,std::allocator< iDynTree::Regressors::DynamicsRegressorParameter > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_iDynTree__VectorDynSize_std__allocatorT_iDynTree__VectorDynSize_t_t = {"_p_std__vectorT_iDynTree__VectorDynSize_std__allocatorT_iDynTree__VectorDynSize_t_t", "std::vector< iDynTree::VectorDynSize,std::allocator< iDynTree::VectorDynSize > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_iDynTree__VectorFixSizeT_6_t_std__allocatorT_iDynTree__VectorFixSizeT_6_t_t_t = {"_p_std__vectorT_iDynTree__VectorFixSizeT_6_t_std__allocatorT_iDynTree__VectorFixSizeT_6_t_t_t", "std::vector< iDynTree::Vector6,std::allocator< iDynTree::Vector6 > > *|std::vector< iDynTree::VectorFixSize< 6 >,std::allocator< iDynTree::VectorFixSize< 6 > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t = {"_p_std__vectorT_std__string_std__allocatorT_std__string_t_t", "std::vector< std::string,std::allocator< std::string > > *|std::vector< std::string > *", 0, 0, (void*)"iDynTree.StringVector", 0};
static swig_type_info _swigt__p_std__vectorT_std__vectorT_iDynTree__SolidShape_p_std__allocatorT_iDynTree__SolidShape_p_t_t_std__allocatorT_std__vectorT_iDynTree__SolidShape_p_std__allocatorT_iDynTree__SolidShape_p_t_t_t_t = {"_p_std__vectorT_std__vectorT_iDynTree__SolidShape_p_std__allocatorT_iDynTree__SolidShape_p_t_t_std__allocatorT_std__vectorT_iDynTree__SolidShape_p_std__allocatorT_iDynTree__SolidShape_p_t_t_t_t", "std::vector< std::vector< iDynTree::SolidShape *,std::allocator< iDynTree::SolidShape * > >,std::allocator< std::vector< iDynTree::SolidShape *,std::allocator< iDynTree::SolidShape * > > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_swig__MatlabSwigIterator = {"_p_swig__MatlabSwigIterator", "swig::MatlabSwigIterator *", 0, 0, (void*)"iDynTree.MatlabSwigIterator", 0};
static swig_type_info _swigt__p_typed_iterator = {"_p_typed_iterator", "typed_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "unsigned int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long = {"_p_unsigned_long", "unsigned long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_AngularVector3T,
  &_swigt__p_AngularVector3Type,
  &_swigt__p_DerivByAngularMotion,
  &_swigt__p_DerivByLinearMotion,
  &_swigt__p_DualSpace,
  &_swigt__p_DualVectorT,
  &_swigt__p_LinearVector3T,
  &_swigt__p_LinearVector3Type,
  &_swigt__p_MotionCrossAngF,
  &_swigt__p_MotionCrossAngM,
  &_swigt__p_MotionCrossLinF,
  &_swigt__p_MotionCrossLinM,
  &_swigt__p_MotionForceSemanticsT,
  &_swigt__p_MotionForceTbase,
  &_swigt__p_SemanticsType,
  &_swigt__p_Traits,
  &_swigt__p_Type,
  &_swigt__p_allocator_type,
  &_swigt__p_char,
  &_swigt__p_const_iterator,
  &_swigt__p_const_typed_iterator,
  &_swigt__p_difference_type,
  &_swigt__p_double,
  &_swigt__p_iDynTree__AccelerometerSensor,
  &_swigt__p_iDynTree__AngularForceVector3,
  &_swigt__p_iDynTree__AngularForceVector3Semantics,
  &_swigt__p_iDynTree__AngularMotionVector3,
  &_swigt__p_iDynTree__AngularMotionVector3Semantics,
  &_swigt__p_iDynTree__ArticulatedBodyAlgorithmInternalBuffers,
  &_swigt__p_iDynTree__ArticulatedBodyInertia,
  &_swigt__p_iDynTree__Axis,
  &_swigt__p_iDynTree__BerdyDynamicVariable,
  &_swigt__p_iDynTree__BerdyHelper,
  &_swigt__p_iDynTree__BerdyOptions,
  &_swigt__p_iDynTree__BerdySensor,
  &_swigt__p_iDynTree__Box,
  &_swigt__p_iDynTree__ClassicalAcc,
  &_swigt__p_iDynTree__ColorViz,
  &_swigt__p_iDynTree__ContactWrench,
  &_swigt__p_iDynTree__Cylinder,
  &_swigt__p_iDynTree__DOFSpatialForceArray,
  &_swigt__p_iDynTree__DOFSpatialMotionArray,
  &_swigt__p_iDynTree__Direction,
  &_swigt__p_iDynTree__Dummy,
  &_swigt__p_iDynTree__ExtWrenchesAndJointTorquesEstimator,
  &_swigt__p_iDynTree__ExternalMesh,
  &_swigt__p_iDynTree__FixedJoint,
  &_swigt__p_iDynTree__ForceVector3SemanticsT_iDynTree__AngularForceVector3Semantics_t,
  &_swigt__p_iDynTree__ForceVector3SemanticsT_iDynTree__LinearForceVector3Semantics_t,
  &_swigt__p_iDynTree__ForceVector3T_iDynTree__AngularForceVector3_t,
  &_swigt__p_iDynTree__ForceVector3T_iDynTree__LinearForceVector3_t,
  &_swigt__p_iDynTree__FrameFreeFloatingJacobian,
  &_swigt__p_iDynTree__FreeFloatingAcc,
  &_swigt__p_iDynTree__FreeFloatingGeneralizedTorques,
  &_swigt__p_iDynTree__FreeFloatingMassMatrix,
  &_swigt__p_iDynTree__FreeFloatingPos,
  &_swigt__p_iDynTree__FreeFloatingVel,
  &_swigt__p_iDynTree__GeomVector3SemanticsT_iDynTree__AngularForceVector3Semantics_t,
  &_swigt__p_iDynTree__GeomVector3SemanticsT_iDynTree__AngularMotionVector3Semantics_t,
  &_swigt__p_iDynTree__GeomVector3SemanticsT_iDynTree__LinearForceVector3Semantics_t,
  &_swigt__p_iDynTree__GeomVector3SemanticsT_iDynTree__LinearMotionVector3Semantics_t,
  &_swigt__p_iDynTree__GeomVector3T_iDynTree__AngularForceVector3_t,
  &_swigt__p_iDynTree__GeomVector3T_iDynTree__AngularMotionVector3_t,
  &_swigt__p_iDynTree__GeomVector3T_iDynTree__LinearForceVector3_t,
  &_swigt__p_iDynTree__GeomVector3T_iDynTree__LinearMotionVector3_t,
  &_swigt__p_iDynTree__GyroscopeSensor,
  &_swigt__p_iDynTree__HighLevel__DynamicsComputations,
  &_swigt__p_iDynTree__ICamera,
  &_swigt__p_iDynTree__IEnvironment,
  &_swigt__p_iDynTree__IJetsVisualization,
  &_swigt__p_iDynTree__IJoint,
  &_swigt__p_iDynTree__ILight,
  &_swigt__p_iDynTree__IModelVisualization,
  &_swigt__p_iDynTree__IndexRange,
  &_swigt__p_iDynTree__JointDOFsDoubleArray,
  &_swigt__p_iDynTree__JointPosDoubleArray,
  &_swigt__p_iDynTree__JointSensor,
  &_swigt__p_iDynTree__KinDynComputations,
  &_swigt__p_iDynTree__LinearForceVector3,
  &_swigt__p_iDynTree__LinearForceVector3Semantics,
  &_swigt__p_iDynTree__LinearMotionVector3,
  &_swigt__p_iDynTree__LinearMotionVector3Semantics,
  &_swigt__p_iDynTree__Link,
  &_swigt__p_iDynTree__LinkAccArray,
  &_swigt__p_iDynTree__LinkArticulatedBodyInertias,
  &_swigt__p_iDynTree__LinkContactWrenches,
  &_swigt__p_iDynTree__LinkInertias,
  &_swigt__p_iDynTree__LinkPositions,
  &_swigt__p_iDynTree__LinkSensor,
  &_swigt__p_iDynTree__LinkUnknownWrenchContacts,
  &_swigt__p_iDynTree__LinkVelArray,
  &_swigt__p_iDynTree__LinkWrenches,
  &_swigt__p_iDynTree__MatrixDynSize,
  &_swigt__p_iDynTree__MatrixFixSizeT_10_16_t,
  &_swigt__p_iDynTree__MatrixFixSizeT_1_6_t,
  &_swigt__p_iDynTree__MatrixFixSizeT_2_3_t,
  &_swigt__p_iDynTree__MatrixFixSizeT_3_3_t,
  &_swigt__p_iDynTree__MatrixFixSizeT_3_4_t,
  &_swigt__p_iDynTree__MatrixFixSizeT_4_3_t,
  &_swigt__p_iDynTree__MatrixFixSizeT_4_4_t,
  &_swigt__p_iDynTree__MatrixFixSizeT_6_10_t,
  &_swigt__p_iDynTree__MatrixFixSizeT_6_1_t,
  &_swigt__p_iDynTree__MatrixFixSizeT_6_6_t,
  &_swigt__p_iDynTree__Model,
  &_swigt__p_iDynTree__ModelLoader,
  &_swigt__p_iDynTree__ModelSolidShapes,
  &_swigt__p_iDynTree__MomentumFreeFloatingJacobian,
  &_swigt__p_iDynTree__MotionVector3T_iDynTree__AngularMotionVector3_t,
  &_swigt__p_iDynTree__MotionVector3T_iDynTree__LinearMotionVector3_t,
  &_swigt__p_iDynTree__MovableJointImplT_1_1_t,
  &_swigt__p_iDynTree__MovableJointImplT_2_2_t,
  &_swigt__p_iDynTree__MovableJointImplT_3_3_t,
  &_swigt__p_iDynTree__MovableJointImplT_4_4_t,
  &_swigt__p_iDynTree__MovableJointImplT_5_5_t,
  &_swigt__p_iDynTree__MovableJointImplT_6_6_t,
  &_swigt__p_iDynTree__Neighbor,
  &_swigt__p_iDynTree__Position,
  &_swigt__p_iDynTree__PositionRaw,
  &_swigt__p_iDynTree__PositionSemantics,
  &_swigt__p_iDynTree__Regressors__DynamicsRegressorGenerator,
  &_swigt__p_iDynTree__Regressors__DynamicsRegressorParameter,
  &_swigt__p_iDynTree__Regressors__DynamicsRegressorParametersList,
  &_swigt__p_iDynTree__RevoluteJoint,
  &_swigt__p_iDynTree__RigidBodyInertiaNonLinearParametrization,
  &_swigt__p_iDynTree__Rotation,
  &_swigt__p_iDynTree__RotationRaw,
  &_swigt__p_iDynTree__RotationSemantics,
  &_swigt__p_iDynTree__RotationalInertiaRaw,
  &_swigt__p_iDynTree__Sensor,
  &_swigt__p_iDynTree__SensorsList,
  &_swigt__p_iDynTree__SensorsMeasurements,
  &_swigt__p_iDynTree__SimpleLeggedOdometry,
  &_swigt__p_iDynTree__SixAxisForceTorqueSensor,
  &_swigt__p_iDynTree__SolidShape,
  &_swigt__p_iDynTree__SparseMatrix,
  &_swigt__p_iDynTree__SpatialAcc,
  &_swigt__p_iDynTree__SpatialForceVector,
  &_swigt__p_iDynTree__SpatialInertia,
  &_swigt__p_iDynTree__SpatialInertiaRaw,
  &_swigt__p_iDynTree__SpatialMomentum,
  &_swigt__p_iDynTree__SpatialMotionVector,
  &_swigt__p_iDynTree__SpatialVectorSemanticsT_iDynTree__LinearForceVector3Semantics_iDynTree__AngularForceVector3Semantics_t,
  &_swigt__p_iDynTree__SpatialVectorSemanticsT_iDynTree__LinearMotionVector3Semantics_iDynTree__AngularMotionVector3Semantics_t,
  &_swigt__p_iDynTree__SpatialVectorT_iDynTree__SpatialForceVector_t,
  &_swigt__p_iDynTree__SpatialVectorT_iDynTree__SpatialMotionVector_t,
  &_swigt__p_iDynTree__Sphere,
  &_swigt__p_iDynTree__SubModelDecomposition,
  &_swigt__p_iDynTree__Transform,
  &_swigt__p_iDynTree__TransformDerivative,
  &_swigt__p_iDynTree__TransformSemantics,
  &_swigt__p_iDynTree__Traversal,
  &_swigt__p_iDynTree__Triplets,
  &_swigt__p_iDynTree__Twist,
  &_swigt__p_iDynTree__URDFParserOptions,
  &_swigt__p_iDynTree__UnknownWrenchContact,
  &_swigt__p_iDynTree__VectorDynSize,
  &_swigt__p_iDynTree__VectorFixSizeT_10_t,
  &_swigt__p_iDynTree__VectorFixSizeT_16_t,
  &_swigt__p_iDynTree__VectorFixSizeT_2_t,
  &_swigt__p_iDynTree__VectorFixSizeT_3_t,
  &_swigt__p_iDynTree__VectorFixSizeT_4_t,
  &_swigt__p_iDynTree__VectorFixSizeT_6_t,
  &_swigt__p_iDynTree__Visualizer,
  &_swigt__p_iDynTree__VisualizerOptions,
  &_swigt__p_iDynTree__Wrench,
  &_swigt__p_iDynTree__estimateExternalWrenchesBuffers,
  &_swigt__p_int,
  &_swigt__p_iterator,
  &_swigt__p_size_type,
  &_swigt__p_std__allocatorT_iDynTree__BerdyDynamicVariable_t,
  &_swigt__p_std__allocatorT_iDynTree__BerdySensor_t,
  &_swigt__p_std__allocatorT_std__string_t,
  &_swigt__p_std__vectorT_iDynTree__BerdyDynamicVariable_std__allocatorT_iDynTree__BerdyDynamicVariable_t_t,
  &_swigt__p_std__vectorT_iDynTree__BerdySensor_std__allocatorT_iDynTree__BerdySensor_t_t,
  &_swigt__p_std__vectorT_iDynTree__MatrixDynSize_std__allocatorT_iDynTree__MatrixDynSize_t_t,
  &_swigt__p_std__vectorT_iDynTree__Regressors__DynamicsRegressorParameter_std__allocatorT_iDynTree__Regressors__DynamicsRegressorParameter_t_t,
  &_swigt__p_std__vectorT_iDynTree__VectorDynSize_std__allocatorT_iDynTree__VectorDynSize_t_t,
  &_swigt__p_std__vectorT_iDynTree__VectorFixSizeT_6_t_std__allocatorT_iDynTree__VectorFixSizeT_6_t_t_t,
  &_swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t,
  &_swigt__p_std__vectorT_std__vectorT_iDynTree__SolidShape_p_std__allocatorT_iDynTree__SolidShape_p_t_t_std__allocatorT_std__vectorT_iDynTree__SolidShape_p_std__allocatorT_iDynTree__SolidShape_p_t_t_t_t,
  &_swigt__p_swig__MatlabSwigIterator,
  &_swigt__p_typed_iterator,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long,
  &_swigt__p_value_type,
};

static swig_cast_info _swigc__p_AngularVector3T[] = {  {&_swigt__p_AngularVector3T, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AngularVector3Type[] = {  {&_swigt__p_AngularVector3Type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DerivByAngularMotion[] = {  {&_swigt__p_DerivByAngularMotion, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DerivByLinearMotion[] = {  {&_swigt__p_DerivByLinearMotion, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DualSpace[] = {  {&_swigt__p_DualSpace, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DualVectorT[] = {  {&_swigt__p_DualVectorT, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LinearVector3T[] = {  {&_swigt__p_LinearVector3T, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LinearVector3Type[] = {  {&_swigt__p_LinearVector3Type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MotionCrossAngF[] = {  {&_swigt__p_MotionCrossAngF, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MotionCrossAngM[] = {  {&_swigt__p_MotionCrossAngM, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MotionCrossLinF[] = {  {&_swigt__p_MotionCrossLinF, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MotionCrossLinM[] = {  {&_swigt__p_MotionCrossLinM, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MotionForceSemanticsT[] = {  {&_swigt__p_MotionForceSemanticsT, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MotionForceTbase[] = {  {&_swigt__p_MotionForceTbase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SemanticsType[] = {  {&_swigt__p_SemanticsType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Traits[] = {  {&_swigt__p_Traits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Type[] = {  {&_swigt__p_Type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_allocator_type[] = {  {&_swigt__p_allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_const_iterator[] = {  {&_swigt__p_const_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_const_typed_iterator[] = {  {&_swigt__p_const_typed_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__AccelerometerSensor[] = {  {&_swigt__p_iDynTree__AccelerometerSensor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__AngularForceVector3[] = {  {&_swigt__p_iDynTree__AngularForceVector3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__AngularForceVector3Semantics[] = {  {&_swigt__p_iDynTree__AngularForceVector3Semantics, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__AngularMotionVector3[] = {  {&_swigt__p_iDynTree__AngularMotionVector3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__AngularMotionVector3Semantics[] = {  {&_swigt__p_iDynTree__AngularMotionVector3Semantics, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__ArticulatedBodyAlgorithmInternalBuffers[] = {  {&_swigt__p_iDynTree__ArticulatedBodyAlgorithmInternalBuffers, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__ArticulatedBodyInertia[] = {  {&_swigt__p_iDynTree__ArticulatedBodyInertia, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__Axis[] = {  {&_swigt__p_iDynTree__Axis, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__BerdyDynamicVariable[] = {  {&_swigt__p_iDynTree__BerdyDynamicVariable, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__BerdyHelper[] = {  {&_swigt__p_iDynTree__BerdyHelper, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__BerdyOptions[] = {  {&_swigt__p_iDynTree__BerdyOptions, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__BerdySensor[] = {  {&_swigt__p_iDynTree__BerdySensor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__Box[] = {  {&_swigt__p_iDynTree__Box, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__ClassicalAcc[] = {  {&_swigt__p_iDynTree__ClassicalAcc, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__ColorViz[] = {  {&_swigt__p_iDynTree__ColorViz, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__ContactWrench[] = {  {&_swigt__p_iDynTree__ContactWrench, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__Cylinder[] = {  {&_swigt__p_iDynTree__Cylinder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__DOFSpatialForceArray[] = {  {&_swigt__p_iDynTree__DOFSpatialForceArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__DOFSpatialMotionArray[] = {  {&_swigt__p_iDynTree__DOFSpatialMotionArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__Direction[] = {  {&_swigt__p_iDynTree__Direction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__Dummy[] = {  {&_swigt__p_iDynTree__Dummy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__ExtWrenchesAndJointTorquesEstimator[] = {  {&_swigt__p_iDynTree__ExtWrenchesAndJointTorquesEstimator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__ExternalMesh[] = {  {&_swigt__p_iDynTree__ExternalMesh, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__FixedJoint[] = {  {&_swigt__p_iDynTree__FixedJoint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__ForceVector3SemanticsT_iDynTree__AngularForceVector3Semantics_t[] = {  {&_swigt__p_iDynTree__ForceVector3SemanticsT_iDynTree__AngularForceVector3Semantics_t, 0, 0, 0},  {&_swigt__p_iDynTree__AngularForceVector3Semantics, _p_iDynTree__AngularForceVector3SemanticsTo_p_iDynTree__ForceVector3SemanticsT_iDynTree__AngularForceVector3Semantics_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__ForceVector3SemanticsT_iDynTree__LinearForceVector3Semantics_t[] = {  {&_swigt__p_iDynTree__ForceVector3SemanticsT_iDynTree__LinearForceVector3Semantics_t, 0, 0, 0},  {&_swigt__p_iDynTree__LinearForceVector3Semantics, _p_iDynTree__LinearForceVector3SemanticsTo_p_iDynTree__ForceVector3SemanticsT_iDynTree__LinearForceVector3Semantics_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__ForceVector3T_iDynTree__AngularForceVector3_t[] = {  {&_swigt__p_iDynTree__ForceVector3T_iDynTree__AngularForceVector3_t, 0, 0, 0},  {&_swigt__p_iDynTree__AngularForceVector3, _p_iDynTree__AngularForceVector3To_p_iDynTree__ForceVector3T_iDynTree__AngularForceVector3_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__ForceVector3T_iDynTree__LinearForceVector3_t[] = {  {&_swigt__p_iDynTree__ForceVector3T_iDynTree__LinearForceVector3_t, 0, 0, 0},  {&_swigt__p_iDynTree__LinearForceVector3, _p_iDynTree__LinearForceVector3To_p_iDynTree__ForceVector3T_iDynTree__LinearForceVector3_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__FrameFreeFloatingJacobian[] = {  {&_swigt__p_iDynTree__FrameFreeFloatingJacobian, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__FreeFloatingAcc[] = {  {&_swigt__p_iDynTree__FreeFloatingAcc, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__FreeFloatingGeneralizedTorques[] = {  {&_swigt__p_iDynTree__FreeFloatingGeneralizedTorques, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__FreeFloatingMassMatrix[] = {  {&_swigt__p_iDynTree__FreeFloatingMassMatrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__FreeFloatingPos[] = {  {&_swigt__p_iDynTree__FreeFloatingPos, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__FreeFloatingVel[] = {  {&_swigt__p_iDynTree__FreeFloatingVel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__GeomVector3SemanticsT_iDynTree__AngularForceVector3Semantics_t[] = {  {&_swigt__p_iDynTree__GeomVector3SemanticsT_iDynTree__AngularForceVector3Semantics_t, 0, 0, 0},  {&_swigt__p_iDynTree__ForceVector3SemanticsT_iDynTree__AngularForceVector3Semantics_t, _p_iDynTree__ForceVector3SemanticsT_iDynTree__AngularForceVector3Semantics_tTo_p_iDynTree__GeomVector3SemanticsT_iDynTree__AngularForceVector3Semantics_t, 0, 0},  {&_swigt__p_iDynTree__AngularForceVector3Semantics, _p_iDynTree__AngularForceVector3SemanticsTo_p_iDynTree__GeomVector3SemanticsT_iDynTree__AngularForceVector3Semantics_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__GeomVector3SemanticsT_iDynTree__AngularMotionVector3Semantics_t[] = {  {&_swigt__p_iDynTree__GeomVector3SemanticsT_iDynTree__AngularMotionVector3Semantics_t, 0, 0, 0},  {&_swigt__p_iDynTree__AngularMotionVector3Semantics, _p_iDynTree__AngularMotionVector3SemanticsTo_p_iDynTree__GeomVector3SemanticsT_iDynTree__AngularMotionVector3Semantics_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__GeomVector3SemanticsT_iDynTree__LinearForceVector3Semantics_t[] = {  {&_swigt__p_iDynTree__GeomVector3SemanticsT_iDynTree__LinearForceVector3Semantics_t, 0, 0, 0},  {&_swigt__p_iDynTree__ForceVector3SemanticsT_iDynTree__LinearForceVector3Semantics_t, _p_iDynTree__ForceVector3SemanticsT_iDynTree__LinearForceVector3Semantics_tTo_p_iDynTree__GeomVector3SemanticsT_iDynTree__LinearForceVector3Semantics_t, 0, 0},  {&_swigt__p_iDynTree__LinearForceVector3Semantics, _p_iDynTree__LinearForceVector3SemanticsTo_p_iDynTree__GeomVector3SemanticsT_iDynTree__LinearForceVector3Semantics_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__GeomVector3SemanticsT_iDynTree__LinearMotionVector3Semantics_t[] = {  {&_swigt__p_iDynTree__GeomVector3SemanticsT_iDynTree__LinearMotionVector3Semantics_t, 0, 0, 0},  {&_swigt__p_iDynTree__LinearMotionVector3Semantics, _p_iDynTree__LinearMotionVector3SemanticsTo_p_iDynTree__GeomVector3SemanticsT_iDynTree__LinearMotionVector3Semantics_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__GeomVector3T_iDynTree__AngularForceVector3_t[] = {  {&_swigt__p_iDynTree__GeomVector3T_iDynTree__AngularForceVector3_t, 0, 0, 0},  {&_swigt__p_iDynTree__ForceVector3T_iDynTree__AngularForceVector3_t, _p_iDynTree__ForceVector3T_iDynTree__AngularForceVector3_tTo_p_iDynTree__GeomVector3T_iDynTree__AngularForceVector3_t, 0, 0},  {&_swigt__p_iDynTree__AngularForceVector3, _p_iDynTree__AngularForceVector3To_p_iDynTree__GeomVector3T_iDynTree__AngularForceVector3_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__GeomVector3T_iDynTree__AngularMotionVector3_t[] = {  {&_swigt__p_iDynTree__MotionVector3T_iDynTree__AngularMotionVector3_t, _p_iDynTree__MotionVector3T_iDynTree__AngularMotionVector3_tTo_p_iDynTree__GeomVector3T_iDynTree__AngularMotionVector3_t, 0, 0},  {&_swigt__p_iDynTree__GeomVector3T_iDynTree__AngularMotionVector3_t, 0, 0, 0},  {&_swigt__p_iDynTree__AngularMotionVector3, _p_iDynTree__AngularMotionVector3To_p_iDynTree__GeomVector3T_iDynTree__AngularMotionVector3_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__GeomVector3T_iDynTree__LinearForceVector3_t[] = {  {&_swigt__p_iDynTree__ForceVector3T_iDynTree__LinearForceVector3_t, _p_iDynTree__ForceVector3T_iDynTree__LinearForceVector3_tTo_p_iDynTree__GeomVector3T_iDynTree__LinearForceVector3_t, 0, 0},  {&_swigt__p_iDynTree__GeomVector3T_iDynTree__LinearForceVector3_t, 0, 0, 0},  {&_swigt__p_iDynTree__LinearForceVector3, _p_iDynTree__LinearForceVector3To_p_iDynTree__GeomVector3T_iDynTree__LinearForceVector3_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__GeomVector3T_iDynTree__LinearMotionVector3_t[] = {  {&_swigt__p_iDynTree__GeomVector3T_iDynTree__LinearMotionVector3_t, 0, 0, 0},  {&_swigt__p_iDynTree__MotionVector3T_iDynTree__LinearMotionVector3_t, _p_iDynTree__MotionVector3T_iDynTree__LinearMotionVector3_tTo_p_iDynTree__GeomVector3T_iDynTree__LinearMotionVector3_t, 0, 0},  {&_swigt__p_iDynTree__LinearMotionVector3, _p_iDynTree__LinearMotionVector3To_p_iDynTree__GeomVector3T_iDynTree__LinearMotionVector3_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__GyroscopeSensor[] = {  {&_swigt__p_iDynTree__GyroscopeSensor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__HighLevel__DynamicsComputations[] = {  {&_swigt__p_iDynTree__HighLevel__DynamicsComputations, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__ICamera[] = {  {&_swigt__p_iDynTree__ICamera, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__IEnvironment[] = {  {&_swigt__p_iDynTree__IEnvironment, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__IJetsVisualization[] = {  {&_swigt__p_iDynTree__IJetsVisualization, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__IJoint[] = {  {&_swigt__p_iDynTree__MovableJointImplT_3_3_t, _p_iDynTree__MovableJointImplT_3_3_tTo_p_iDynTree__IJoint, 0, 0},  {&_swigt__p_iDynTree__RevoluteJoint, _p_iDynTree__RevoluteJointTo_p_iDynTree__IJoint, 0, 0},  {&_swigt__p_iDynTree__MovableJointImplT_2_2_t, _p_iDynTree__MovableJointImplT_2_2_tTo_p_iDynTree__IJoint, 0, 0},  {&_swigt__p_iDynTree__IJoint, 0, 0, 0},  {&_swigt__p_iDynTree__MovableJointImplT_1_1_t, _p_iDynTree__MovableJointImplT_1_1_tTo_p_iDynTree__IJoint, 0, 0},  {&_swigt__p_iDynTree__MovableJointImplT_6_6_t, _p_iDynTree__MovableJointImplT_6_6_tTo_p_iDynTree__IJoint, 0, 0},  {&_swigt__p_iDynTree__MovableJointImplT_5_5_t, _p_iDynTree__MovableJointImplT_5_5_tTo_p_iDynTree__IJoint, 0, 0},  {&_swigt__p_iDynTree__FixedJoint, _p_iDynTree__FixedJointTo_p_iDynTree__IJoint, 0, 0},  {&_swigt__p_iDynTree__MovableJointImplT_4_4_t, _p_iDynTree__MovableJointImplT_4_4_tTo_p_iDynTree__IJoint, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__ILight[] = {  {&_swigt__p_iDynTree__ILight, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__IModelVisualization[] = {  {&_swigt__p_iDynTree__IModelVisualization, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__IndexRange[] = {  {&_swigt__p_iDynTree__IndexRange, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__JointDOFsDoubleArray[] = {  {&_swigt__p_iDynTree__JointDOFsDoubleArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__JointPosDoubleArray[] = {  {&_swigt__p_iDynTree__JointPosDoubleArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__JointSensor[] = {  {&_swigt__p_iDynTree__JointSensor, 0, 0, 0},  {&_swigt__p_iDynTree__SixAxisForceTorqueSensor, _p_iDynTree__SixAxisForceTorqueSensorTo_p_iDynTree__JointSensor, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__KinDynComputations[] = {  {&_swigt__p_iDynTree__KinDynComputations, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__LinearForceVector3[] = {  {&_swigt__p_iDynTree__LinearForceVector3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__LinearForceVector3Semantics[] = {  {&_swigt__p_iDynTree__LinearForceVector3Semantics, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__LinearMotionVector3[] = {  {&_swigt__p_iDynTree__LinearMotionVector3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__LinearMotionVector3Semantics[] = {  {&_swigt__p_iDynTree__LinearMotionVector3Semantics, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__Link[] = {  {&_swigt__p_iDynTree__Link, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__LinkAccArray[] = {  {&_swigt__p_iDynTree__LinkAccArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__LinkArticulatedBodyInertias[] = {  {&_swigt__p_iDynTree__LinkArticulatedBodyInertias, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__LinkContactWrenches[] = {  {&_swigt__p_iDynTree__LinkContactWrenches, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__LinkInertias[] = {  {&_swigt__p_iDynTree__LinkInertias, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__LinkPositions[] = {  {&_swigt__p_iDynTree__LinkPositions, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__LinkSensor[] = {  {&_swigt__p_iDynTree__AccelerometerSensor, _p_iDynTree__AccelerometerSensorTo_p_iDynTree__LinkSensor, 0, 0},  {&_swigt__p_iDynTree__LinkSensor, 0, 0, 0},  {&_swigt__p_iDynTree__GyroscopeSensor, _p_iDynTree__GyroscopeSensorTo_p_iDynTree__LinkSensor, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__LinkUnknownWrenchContacts[] = {  {&_swigt__p_iDynTree__LinkUnknownWrenchContacts, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__LinkVelArray[] = {  {&_swigt__p_iDynTree__LinkVelArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__LinkWrenches[] = {  {&_swigt__p_iDynTree__LinkWrenches, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__MatrixDynSize[] = {  {&_swigt__p_iDynTree__MatrixDynSize, 0, 0, 0},  {&_swigt__p_iDynTree__FrameFreeFloatingJacobian, _p_iDynTree__FrameFreeFloatingJacobianTo_p_iDynTree__MatrixDynSize, 0, 0},  {&_swigt__p_iDynTree__MomentumFreeFloatingJacobian, _p_iDynTree__MomentumFreeFloatingJacobianTo_p_iDynTree__MatrixDynSize, 0, 0},  {&_swigt__p_iDynTree__FreeFloatingMassMatrix, _p_iDynTree__FreeFloatingMassMatrixTo_p_iDynTree__MatrixDynSize, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__MatrixFixSizeT_10_16_t[] = {  {&_swigt__p_iDynTree__MatrixFixSizeT_10_16_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__MatrixFixSizeT_1_6_t[] = {  {&_swigt__p_iDynTree__MatrixFixSizeT_1_6_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__MatrixFixSizeT_2_3_t[] = {  {&_swigt__p_iDynTree__MatrixFixSizeT_2_3_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__MatrixFixSizeT_3_3_t[] = {  {&_swigt__p_iDynTree__MatrixFixSizeT_3_3_t, 0, 0, 0},  {&_swigt__p_iDynTree__RotationalInertiaRaw, _p_iDynTree__RotationalInertiaRawTo_p_iDynTree__MatrixFixSizeT_3_3_t, 0, 0},  {&_swigt__p_iDynTree__RotationRaw, _p_iDynTree__RotationRawTo_p_iDynTree__MatrixFixSizeT_3_3_t, 0, 0},  {&_swigt__p_iDynTree__Rotation, _p_iDynTree__RotationTo_p_iDynTree__MatrixFixSizeT_3_3_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__MatrixFixSizeT_3_4_t[] = {  {&_swigt__p_iDynTree__MatrixFixSizeT_3_4_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__MatrixFixSizeT_4_3_t[] = {  {&_swigt__p_iDynTree__MatrixFixSizeT_4_3_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__MatrixFixSizeT_4_4_t[] = {  {&_swigt__p_iDynTree__MatrixFixSizeT_4_4_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__MatrixFixSizeT_6_10_t[] = {  {&_swigt__p_iDynTree__MatrixFixSizeT_6_10_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__MatrixFixSizeT_6_1_t[] = {  {&_swigt__p_iDynTree__MatrixFixSizeT_6_1_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__MatrixFixSizeT_6_6_t[] = {  {&_swigt__p_iDynTree__MatrixFixSizeT_6_6_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__Model[] = {  {&_swigt__p_iDynTree__Model, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__ModelLoader[] = {  {&_swigt__p_iDynTree__ModelLoader, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__ModelSolidShapes[] = {  {&_swigt__p_iDynTree__ModelSolidShapes, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__MomentumFreeFloatingJacobian[] = {  {&_swigt__p_iDynTree__MomentumFreeFloatingJacobian, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__MotionVector3T_iDynTree__AngularMotionVector3_t[] = {  {&_swigt__p_iDynTree__MotionVector3T_iDynTree__AngularMotionVector3_t, 0, 0, 0},  {&_swigt__p_iDynTree__AngularMotionVector3, _p_iDynTree__AngularMotionVector3To_p_iDynTree__MotionVector3T_iDynTree__AngularMotionVector3_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__MotionVector3T_iDynTree__LinearMotionVector3_t[] = {  {&_swigt__p_iDynTree__MotionVector3T_iDynTree__LinearMotionVector3_t, 0, 0, 0},  {&_swigt__p_iDynTree__LinearMotionVector3, _p_iDynTree__LinearMotionVector3To_p_iDynTree__MotionVector3T_iDynTree__LinearMotionVector3_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__MovableJointImplT_1_1_t[] = {  {&_swigt__p_iDynTree__RevoluteJoint, _p_iDynTree__RevoluteJointTo_p_iDynTree__MovableJointImplT_1_1_t, 0, 0},  {&_swigt__p_iDynTree__MovableJointImplT_1_1_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__MovableJointImplT_2_2_t[] = {  {&_swigt__p_iDynTree__MovableJointImplT_2_2_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__MovableJointImplT_3_3_t[] = {  {&_swigt__p_iDynTree__MovableJointImplT_3_3_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__MovableJointImplT_4_4_t[] = {  {&_swigt__p_iDynTree__MovableJointImplT_4_4_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__MovableJointImplT_5_5_t[] = {  {&_swigt__p_iDynTree__MovableJointImplT_5_5_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__MovableJointImplT_6_6_t[] = {  {&_swigt__p_iDynTree__MovableJointImplT_6_6_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__Neighbor[] = {  {&_swigt__p_iDynTree__Neighbor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__Position[] = {  {&_swigt__p_iDynTree__Position, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__PositionRaw[] = {  {&_swigt__p_iDynTree__Position, _p_iDynTree__PositionTo_p_iDynTree__PositionRaw, 0, 0},  {&_swigt__p_iDynTree__PositionRaw, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__PositionSemantics[] = {  {&_swigt__p_iDynTree__PositionSemantics, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__Regressors__DynamicsRegressorGenerator[] = {  {&_swigt__p_iDynTree__Regressors__DynamicsRegressorGenerator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__Regressors__DynamicsRegressorParameter[] = {  {&_swigt__p_iDynTree__Regressors__DynamicsRegressorParameter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__Regressors__DynamicsRegressorParametersList[] = {  {&_swigt__p_iDynTree__Regressors__DynamicsRegressorParametersList, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__RevoluteJoint[] = {  {&_swigt__p_iDynTree__RevoluteJoint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__RigidBodyInertiaNonLinearParametrization[] = {  {&_swigt__p_iDynTree__RigidBodyInertiaNonLinearParametrization, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__Rotation[] = {  {&_swigt__p_iDynTree__Rotation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__RotationRaw[] = {  {&_swigt__p_iDynTree__RotationRaw, 0, 0, 0},  {&_swigt__p_iDynTree__Rotation, _p_iDynTree__RotationTo_p_iDynTree__RotationRaw, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__RotationSemantics[] = {  {&_swigt__p_iDynTree__RotationSemantics, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__RotationalInertiaRaw[] = {  {&_swigt__p_iDynTree__RotationalInertiaRaw, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__Sensor[] = {  {&_swigt__p_iDynTree__JointSensor, _p_iDynTree__JointSensorTo_p_iDynTree__Sensor, 0, 0},  {&_swigt__p_iDynTree__AccelerometerSensor, _p_iDynTree__AccelerometerSensorTo_p_iDynTree__Sensor, 0, 0},  {&_swigt__p_iDynTree__Sensor, 0, 0, 0},  {&_swigt__p_iDynTree__SixAxisForceTorqueSensor, _p_iDynTree__SixAxisForceTorqueSensorTo_p_iDynTree__Sensor, 0, 0},  {&_swigt__p_iDynTree__LinkSensor, _p_iDynTree__LinkSensorTo_p_iDynTree__Sensor, 0, 0},  {&_swigt__p_iDynTree__GyroscopeSensor, _p_iDynTree__GyroscopeSensorTo_p_iDynTree__Sensor, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__SensorsList[] = {  {&_swigt__p_iDynTree__SensorsList, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__SensorsMeasurements[] = {  {&_swigt__p_iDynTree__SensorsMeasurements, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__SimpleLeggedOdometry[] = {  {&_swigt__p_iDynTree__SimpleLeggedOdometry, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__SixAxisForceTorqueSensor[] = {  {&_swigt__p_iDynTree__SixAxisForceTorqueSensor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__SolidShape[] = {  {&_swigt__p_iDynTree__SolidShape, 0, 0, 0},  {&_swigt__p_iDynTree__ExternalMesh, _p_iDynTree__ExternalMeshTo_p_iDynTree__SolidShape, 0, 0},  {&_swigt__p_iDynTree__Box, _p_iDynTree__BoxTo_p_iDynTree__SolidShape, 0, 0},  {&_swigt__p_iDynTree__Cylinder, _p_iDynTree__CylinderTo_p_iDynTree__SolidShape, 0, 0},  {&_swigt__p_iDynTree__Sphere, _p_iDynTree__SphereTo_p_iDynTree__SolidShape, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__SparseMatrix[] = {  {&_swigt__p_iDynTree__SparseMatrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__SpatialAcc[] = {  {&_swigt__p_iDynTree__SpatialAcc, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__SpatialForceVector[] = {  {&_swigt__p_iDynTree__SpatialForceVector, 0, 0, 0},  {&_swigt__p_iDynTree__Wrench, _p_iDynTree__WrenchTo_p_iDynTree__SpatialForceVector, 0, 0},  {&_swigt__p_iDynTree__SpatialMomentum, _p_iDynTree__SpatialMomentumTo_p_iDynTree__SpatialForceVector, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__SpatialInertia[] = {  {&_swigt__p_iDynTree__SpatialInertia, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__SpatialInertiaRaw[] = {  {&_swigt__p_iDynTree__SpatialInertia, _p_iDynTree__SpatialInertiaTo_p_iDynTree__SpatialInertiaRaw, 0, 0},  {&_swigt__p_iDynTree__SpatialInertiaRaw, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__SpatialMomentum[] = {  {&_swigt__p_iDynTree__SpatialMomentum, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__SpatialMotionVector[] = {  {&_swigt__p_iDynTree__SpatialMotionVector, 0, 0, 0},  {&_swigt__p_iDynTree__Twist, _p_iDynTree__TwistTo_p_iDynTree__SpatialMotionVector, 0, 0},  {&_swigt__p_iDynTree__SpatialAcc, _p_iDynTree__SpatialAccTo_p_iDynTree__SpatialMotionVector, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__SpatialVectorSemanticsT_iDynTree__LinearForceVector3Semantics_iDynTree__AngularForceVector3Semantics_t[] = {  {&_swigt__p_iDynTree__SpatialVectorSemanticsT_iDynTree__LinearForceVector3Semantics_iDynTree__AngularForceVector3Semantics_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__SpatialVectorSemanticsT_iDynTree__LinearMotionVector3Semantics_iDynTree__AngularMotionVector3Semantics_t[] = {  {&_swigt__p_iDynTree__SpatialVectorSemanticsT_iDynTree__LinearMotionVector3Semantics_iDynTree__AngularMotionVector3Semantics_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__SpatialVectorT_iDynTree__SpatialForceVector_t[] = {  {&_swigt__p_iDynTree__Wrench, _p_iDynTree__WrenchTo_p_iDynTree__SpatialVectorT_iDynTree__SpatialForceVector_t, 0, 0},  {&_swigt__p_iDynTree__SpatialForceVector, _p_iDynTree__SpatialForceVectorTo_p_iDynTree__SpatialVectorT_iDynTree__SpatialForceVector_t, 0, 0},  {&_swigt__p_iDynTree__SpatialMomentum, _p_iDynTree__SpatialMomentumTo_p_iDynTree__SpatialVectorT_iDynTree__SpatialForceVector_t, 0, 0},  {&_swigt__p_iDynTree__SpatialVectorT_iDynTree__SpatialForceVector_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__SpatialVectorT_iDynTree__SpatialMotionVector_t[] = {  {&_swigt__p_iDynTree__SpatialMotionVector, _p_iDynTree__SpatialMotionVectorTo_p_iDynTree__SpatialVectorT_iDynTree__SpatialMotionVector_t, 0, 0},  {&_swigt__p_iDynTree__Twist, _p_iDynTree__TwistTo_p_iDynTree__SpatialVectorT_iDynTree__SpatialMotionVector_t, 0, 0},  {&_swigt__p_iDynTree__SpatialVectorT_iDynTree__SpatialMotionVector_t, 0, 0, 0},  {&_swigt__p_iDynTree__SpatialAcc, _p_iDynTree__SpatialAccTo_p_iDynTree__SpatialVectorT_iDynTree__SpatialMotionVector_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__Sphere[] = {  {&_swigt__p_iDynTree__Sphere, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__SubModelDecomposition[] = {  {&_swigt__p_iDynTree__SubModelDecomposition, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__Transform[] = {  {&_swigt__p_iDynTree__Transform, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__TransformDerivative[] = {  {&_swigt__p_iDynTree__TransformDerivative, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__TransformSemantics[] = {  {&_swigt__p_iDynTree__TransformSemantics, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__Traversal[] = {  {&_swigt__p_iDynTree__Traversal, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__Triplets[] = {  {&_swigt__p_iDynTree__Triplets, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__Twist[] = {  {&_swigt__p_iDynTree__Twist, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__URDFParserOptions[] = {  {&_swigt__p_iDynTree__URDFParserOptions, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__UnknownWrenchContact[] = {  {&_swigt__p_iDynTree__UnknownWrenchContact, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__VectorDynSize[] = {  {&_swigt__p_iDynTree__VectorDynSize, 0, 0, 0},  {&_swigt__p_iDynTree__JointPosDoubleArray, _p_iDynTree__JointPosDoubleArrayTo_p_iDynTree__VectorDynSize, 0, 0},  {&_swigt__p_iDynTree__JointDOFsDoubleArray, _p_iDynTree__JointDOFsDoubleArrayTo_p_iDynTree__VectorDynSize, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__VectorFixSizeT_10_t[] = {  {&_swigt__p_iDynTree__VectorFixSizeT_10_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__VectorFixSizeT_16_t[] = {  {&_swigt__p_iDynTree__VectorFixSizeT_16_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__VectorFixSizeT_2_t[] = {  {&_swigt__p_iDynTree__VectorFixSizeT_2_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__VectorFixSizeT_3_t[] = {  {&_swigt__p_iDynTree__ForceVector3T_iDynTree__AngularForceVector3_t, _p_iDynTree__ForceVector3T_iDynTree__AngularForceVector3_tTo_p_iDynTree__VectorFixSizeT_3_t, 0, 0},  {&_swigt__p_iDynTree__Direction, _p_iDynTree__DirectionTo_p_iDynTree__VectorFixSizeT_3_t, 0, 0},  {&_swigt__p_iDynTree__VectorFixSizeT_3_t, 0, 0, 0},  {&_swigt__p_iDynTree__PositionRaw, _p_iDynTree__PositionRawTo_p_iDynTree__VectorFixSizeT_3_t, 0, 0},  {&_swigt__p_iDynTree__MotionVector3T_iDynTree__LinearMotionVector3_t, _p_iDynTree__MotionVector3T_iDynTree__LinearMotionVector3_tTo_p_iDynTree__VectorFixSizeT_3_t, 0, 0},  {&_swigt__p_iDynTree__Position, _p_iDynTree__PositionTo_p_iDynTree__VectorFixSizeT_3_t, 0, 0},  {&_swigt__p_iDynTree__LinearForceVector3, _p_iDynTree__LinearForceVector3To_p_iDynTree__VectorFixSizeT_3_t, 0, 0},  {&_swigt__p_iDynTree__AngularMotionVector3, _p_iDynTree__AngularMotionVector3To_p_iDynTree__VectorFixSizeT_3_t, 0, 0},  {&_swigt__p_iDynTree__LinearMotionVector3, _p_iDynTree__LinearMotionVector3To_p_iDynTree__VectorFixSizeT_3_t, 0, 0},  {&_swigt__p_iDynTree__AngularForceVector3, _p_iDynTree__AngularForceVector3To_p_iDynTree__VectorFixSizeT_3_t, 0, 0},  {&_swigt__p_iDynTree__GeomVector3T_iDynTree__LinearMotionVector3_t, _p_iDynTree__GeomVector3T_iDynTree__LinearMotionVector3_tTo_p_iDynTree__VectorFixSizeT_3_t, 0, 0},  {&_swigt__p_iDynTree__GeomVector3T_iDynTree__AngularMotionVector3_t, _p_iDynTree__GeomVector3T_iDynTree__AngularMotionVector3_tTo_p_iDynTree__VectorFixSizeT_3_t, 0, 0},  {&_swigt__p_iDynTree__GeomVector3T_iDynTree__AngularForceVector3_t, _p_iDynTree__GeomVector3T_iDynTree__AngularForceVector3_tTo_p_iDynTree__VectorFixSizeT_3_t, 0, 0},  {&_swigt__p_iDynTree__MotionVector3T_iDynTree__AngularMotionVector3_t, _p_iDynTree__MotionVector3T_iDynTree__AngularMotionVector3_tTo_p_iDynTree__VectorFixSizeT_3_t, 0, 0},  {&_swigt__p_iDynTree__ForceVector3T_iDynTree__LinearForceVector3_t, _p_iDynTree__ForceVector3T_iDynTree__LinearForceVector3_tTo_p_iDynTree__VectorFixSizeT_3_t, 0, 0},  {&_swigt__p_iDynTree__GeomVector3T_iDynTree__LinearForceVector3_t, _p_iDynTree__GeomVector3T_iDynTree__LinearForceVector3_tTo_p_iDynTree__VectorFixSizeT_3_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__VectorFixSizeT_4_t[] = {  {&_swigt__p_iDynTree__VectorFixSizeT_4_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__VectorFixSizeT_6_t[] = {  {&_swigt__p_iDynTree__ClassicalAcc, _p_iDynTree__ClassicalAccTo_p_iDynTree__VectorFixSizeT_6_t, 0, 0},  {&_swigt__p_iDynTree__VectorFixSizeT_6_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__Visualizer[] = {  {&_swigt__p_iDynTree__Visualizer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__VisualizerOptions[] = {  {&_swigt__p_iDynTree__VisualizerOptions, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__Wrench[] = {  {&_swigt__p_iDynTree__Wrench, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__estimateExternalWrenchesBuffers[] = {  {&_swigt__p_iDynTree__estimateExternalWrenchesBuffers, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iterator[] = {  {&_swigt__p_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_iDynTree__BerdyDynamicVariable_t[] = {  {&_swigt__p_std__allocatorT_iDynTree__BerdyDynamicVariable_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_iDynTree__BerdySensor_t[] = {  {&_swigt__p_std__allocatorT_iDynTree__BerdySensor_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_std__string_t[] = {  {&_swigt__p_std__allocatorT_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_iDynTree__BerdyDynamicVariable_std__allocatorT_iDynTree__BerdyDynamicVariable_t_t[] = {  {&_swigt__p_std__vectorT_iDynTree__BerdyDynamicVariable_std__allocatorT_iDynTree__BerdyDynamicVariable_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_iDynTree__BerdySensor_std__allocatorT_iDynTree__BerdySensor_t_t[] = {  {&_swigt__p_std__vectorT_iDynTree__BerdySensor_std__allocatorT_iDynTree__BerdySensor_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_iDynTree__MatrixDynSize_std__allocatorT_iDynTree__MatrixDynSize_t_t[] = {  {&_swigt__p_std__vectorT_iDynTree__MatrixDynSize_std__allocatorT_iDynTree__MatrixDynSize_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_iDynTree__Regressors__DynamicsRegressorParameter_std__allocatorT_iDynTree__Regressors__DynamicsRegressorParameter_t_t[] = {  {&_swigt__p_std__vectorT_iDynTree__Regressors__DynamicsRegressorParameter_std__allocatorT_iDynTree__Regressors__DynamicsRegressorParameter_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_iDynTree__VectorDynSize_std__allocatorT_iDynTree__VectorDynSize_t_t[] = {  {&_swigt__p_std__vectorT_iDynTree__VectorDynSize_std__allocatorT_iDynTree__VectorDynSize_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_iDynTree__VectorFixSizeT_6_t_std__allocatorT_iDynTree__VectorFixSizeT_6_t_t_t[] = {  {&_swigt__p_std__vectorT_iDynTree__VectorFixSizeT_6_t_std__allocatorT_iDynTree__VectorFixSizeT_6_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__string_std__allocatorT_std__string_t_t[] = {  {&_swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__vectorT_iDynTree__SolidShape_p_std__allocatorT_iDynTree__SolidShape_p_t_t_std__allocatorT_std__vectorT_iDynTree__SolidShape_p_std__allocatorT_iDynTree__SolidShape_p_t_t_t_t[] = {  {&_swigt__p_std__vectorT_std__vectorT_iDynTree__SolidShape_p_std__allocatorT_iDynTree__SolidShape_p_t_t_std__allocatorT_std__vectorT_iDynTree__SolidShape_p_std__allocatorT_iDynTree__SolidShape_p_t_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_swig__MatlabSwigIterator[] = {  {&_swigt__p_swig__MatlabSwigIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_typed_iterator[] = {  {&_swigt__p_typed_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long[] = {  {&_swigt__p_unsigned_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_AngularVector3T,
  _swigc__p_AngularVector3Type,
  _swigc__p_DerivByAngularMotion,
  _swigc__p_DerivByLinearMotion,
  _swigc__p_DualSpace,
  _swigc__p_DualVectorT,
  _swigc__p_LinearVector3T,
  _swigc__p_LinearVector3Type,
  _swigc__p_MotionCrossAngF,
  _swigc__p_MotionCrossAngM,
  _swigc__p_MotionCrossLinF,
  _swigc__p_MotionCrossLinM,
  _swigc__p_MotionForceSemanticsT,
  _swigc__p_MotionForceTbase,
  _swigc__p_SemanticsType,
  _swigc__p_Traits,
  _swigc__p_Type,
  _swigc__p_allocator_type,
  _swigc__p_char,
  _swigc__p_const_iterator,
  _swigc__p_const_typed_iterator,
  _swigc__p_difference_type,
  _swigc__p_double,
  _swigc__p_iDynTree__AccelerometerSensor,
  _swigc__p_iDynTree__AngularForceVector3,
  _swigc__p_iDynTree__AngularForceVector3Semantics,
  _swigc__p_iDynTree__AngularMotionVector3,
  _swigc__p_iDynTree__AngularMotionVector3Semantics,
  _swigc__p_iDynTree__ArticulatedBodyAlgorithmInternalBuffers,
  _swigc__p_iDynTree__ArticulatedBodyInertia,
  _swigc__p_iDynTree__Axis,
  _swigc__p_iDynTree__BerdyDynamicVariable,
  _swigc__p_iDynTree__BerdyHelper,
  _swigc__p_iDynTree__BerdyOptions,
  _swigc__p_iDynTree__BerdySensor,
  _swigc__p_iDynTree__Box,
  _swigc__p_iDynTree__ClassicalAcc,
  _swigc__p_iDynTree__ColorViz,
  _swigc__p_iDynTree__ContactWrench,
  _swigc__p_iDynTree__Cylinder,
  _swigc__p_iDynTree__DOFSpatialForceArray,
  _swigc__p_iDynTree__DOFSpatialMotionArray,
  _swigc__p_iDynTree__Direction,
  _swigc__p_iDynTree__Dummy,
  _swigc__p_iDynTree__ExtWrenchesAndJointTorquesEstimator,
  _swigc__p_iDynTree__ExternalMesh,
  _swigc__p_iDynTree__FixedJoint,
  _swigc__p_iDynTree__ForceVector3SemanticsT_iDynTree__AngularForceVector3Semantics_t,
  _swigc__p_iDynTree__ForceVector3SemanticsT_iDynTree__LinearForceVector3Semantics_t,
  _swigc__p_iDynTree__ForceVector3T_iDynTree__AngularForceVector3_t,
  _swigc__p_iDynTree__ForceVector3T_iDynTree__LinearForceVector3_t,
  _swigc__p_iDynTree__FrameFreeFloatingJacobian,
  _swigc__p_iDynTree__FreeFloatingAcc,
  _swigc__p_iDynTree__FreeFloatingGeneralizedTorques,
  _swigc__p_iDynTree__FreeFloatingMassMatrix,
  _swigc__p_iDynTree__FreeFloatingPos,
  _swigc__p_iDynTree__FreeFloatingVel,
  _swigc__p_iDynTree__GeomVector3SemanticsT_iDynTree__AngularForceVector3Semantics_t,
  _swigc__p_iDynTree__GeomVector3SemanticsT_iDynTree__AngularMotionVector3Semantics_t,
  _swigc__p_iDynTree__GeomVector3SemanticsT_iDynTree__LinearForceVector3Semantics_t,
  _swigc__p_iDynTree__GeomVector3SemanticsT_iDynTree__LinearMotionVector3Semantics_t,
  _swigc__p_iDynTree__GeomVector3T_iDynTree__AngularForceVector3_t,
  _swigc__p_iDynTree__GeomVector3T_iDynTree__AngularMotionVector3_t,
  _swigc__p_iDynTree__GeomVector3T_iDynTree__LinearForceVector3_t,
  _swigc__p_iDynTree__GeomVector3T_iDynTree__LinearMotionVector3_t,
  _swigc__p_iDynTree__GyroscopeSensor,
  _swigc__p_iDynTree__HighLevel__DynamicsComputations,
  _swigc__p_iDynTree__ICamera,
  _swigc__p_iDynTree__IEnvironment,
  _swigc__p_iDynTree__IJetsVisualization,
  _swigc__p_iDynTree__IJoint,
  _swigc__p_iDynTree__ILight,
  _swigc__p_iDynTree__IModelVisualization,
  _swigc__p_iDynTree__IndexRange,
  _swigc__p_iDynTree__JointDOFsDoubleArray,
  _swigc__p_iDynTree__JointPosDoubleArray,
  _swigc__p_iDynTree__JointSensor,
  _swigc__p_iDynTree__KinDynComputations,
  _swigc__p_iDynTree__LinearForceVector3,
  _swigc__p_iDynTree__LinearForceVector3Semantics,
  _swigc__p_iDynTree__LinearMotionVector3,
  _swigc__p_iDynTree__LinearMotionVector3Semantics,
  _swigc__p_iDynTree__Link,
  _swigc__p_iDynTree__LinkAccArray,
  _swigc__p_iDynTree__LinkArticulatedBodyInertias,
  _swigc__p_iDynTree__LinkContactWrenches,
  _swigc__p_iDynTree__LinkInertias,
  _swigc__p_iDynTree__LinkPositions,
  _swigc__p_iDynTree__LinkSensor,
  _swigc__p_iDynTree__LinkUnknownWrenchContacts,
  _swigc__p_iDynTree__LinkVelArray,
  _swigc__p_iDynTree__LinkWrenches,
  _swigc__p_iDynTree__MatrixDynSize,
  _swigc__p_iDynTree__MatrixFixSizeT_10_16_t,
  _swigc__p_iDynTree__MatrixFixSizeT_1_6_t,
  _swigc__p_iDynTree__MatrixFixSizeT_2_3_t,
  _swigc__p_iDynTree__MatrixFixSizeT_3_3_t,
  _swigc__p_iDynTree__MatrixFixSizeT_3_4_t,
  _swigc__p_iDynTree__MatrixFixSizeT_4_3_t,
  _swigc__p_iDynTree__MatrixFixSizeT_4_4_t,
  _swigc__p_iDynTree__MatrixFixSizeT_6_10_t,
  _swigc__p_iDynTree__MatrixFixSizeT_6_1_t,
  _swigc__p_iDynTree__MatrixFixSizeT_6_6_t,
  _swigc__p_iDynTree__Model,
  _swigc__p_iDynTree__ModelLoader,
  _swigc__p_iDynTree__ModelSolidShapes,
  _swigc__p_iDynTree__MomentumFreeFloatingJacobian,
  _swigc__p_iDynTree__MotionVector3T_iDynTree__AngularMotionVector3_t,
  _swigc__p_iDynTree__MotionVector3T_iDynTree__LinearMotionVector3_t,
  _swigc__p_iDynTree__MovableJointImplT_1_1_t,
  _swigc__p_iDynTree__MovableJointImplT_2_2_t,
  _swigc__p_iDynTree__MovableJointImplT_3_3_t,
  _swigc__p_iDynTree__MovableJointImplT_4_4_t,
  _swigc__p_iDynTree__MovableJointImplT_5_5_t,
  _swigc__p_iDynTree__MovableJointImplT_6_6_t,
  _swigc__p_iDynTree__Neighbor,
  _swigc__p_iDynTree__Position,
  _swigc__p_iDynTree__PositionRaw,
  _swigc__p_iDynTree__PositionSemantics,
  _swigc__p_iDynTree__Regressors__DynamicsRegressorGenerator,
  _swigc__p_iDynTree__Regressors__DynamicsRegressorParameter,
  _swigc__p_iDynTree__Regressors__DynamicsRegressorParametersList,
  _swigc__p_iDynTree__RevoluteJoint,
  _swigc__p_iDynTree__RigidBodyInertiaNonLinearParametrization,
  _swigc__p_iDynTree__Rotation,
  _swigc__p_iDynTree__RotationRaw,
  _swigc__p_iDynTree__RotationSemantics,
  _swigc__p_iDynTree__RotationalInertiaRaw,
  _swigc__p_iDynTree__Sensor,
  _swigc__p_iDynTree__SensorsList,
  _swigc__p_iDynTree__SensorsMeasurements,
  _swigc__p_iDynTree__SimpleLeggedOdometry,
  _swigc__p_iDynTree__SixAxisForceTorqueSensor,
  _swigc__p_iDynTree__SolidShape,
  _swigc__p_iDynTree__SparseMatrix,
  _swigc__p_iDynTree__SpatialAcc,
  _swigc__p_iDynTree__SpatialForceVector,
  _swigc__p_iDynTree__SpatialInertia,
  _swigc__p_iDynTree__SpatialInertiaRaw,
  _swigc__p_iDynTree__SpatialMomentum,
  _swigc__p_iDynTree__SpatialMotionVector,
  _swigc__p_iDynTree__SpatialVectorSemanticsT_iDynTree__LinearForceVector3Semantics_iDynTree__AngularForceVector3Semantics_t,
  _swigc__p_iDynTree__SpatialVectorSemanticsT_iDynTree__LinearMotionVector3Semantics_iDynTree__AngularMotionVector3Semantics_t,
  _swigc__p_iDynTree__SpatialVectorT_iDynTree__SpatialForceVector_t,
  _swigc__p_iDynTree__SpatialVectorT_iDynTree__SpatialMotionVector_t,
  _swigc__p_iDynTree__Sphere,
  _swigc__p_iDynTree__SubModelDecomposition,
  _swigc__p_iDynTree__Transform,
  _swigc__p_iDynTree__TransformDerivative,
  _swigc__p_iDynTree__TransformSemantics,
  _swigc__p_iDynTree__Traversal,
  _swigc__p_iDynTree__Triplets,
  _swigc__p_iDynTree__Twist,
  _swigc__p_iDynTree__URDFParserOptions,
  _swigc__p_iDynTree__UnknownWrenchContact,
  _swigc__p_iDynTree__VectorDynSize,
  _swigc__p_iDynTree__VectorFixSizeT_10_t,
  _swigc__p_iDynTree__VectorFixSizeT_16_t,
  _swigc__p_iDynTree__VectorFixSizeT_2_t,
  _swigc__p_iDynTree__VectorFixSizeT_3_t,
  _swigc__p_iDynTree__VectorFixSizeT_4_t,
  _swigc__p_iDynTree__VectorFixSizeT_6_t,
  _swigc__p_iDynTree__Visualizer,
  _swigc__p_iDynTree__VisualizerOptions,
  _swigc__p_iDynTree__Wrench,
  _swigc__p_iDynTree__estimateExternalWrenchesBuffers,
  _swigc__p_int,
  _swigc__p_iterator,
  _swigc__p_size_type,
  _swigc__p_std__allocatorT_iDynTree__BerdyDynamicVariable_t,
  _swigc__p_std__allocatorT_iDynTree__BerdySensor_t,
  _swigc__p_std__allocatorT_std__string_t,
  _swigc__p_std__vectorT_iDynTree__BerdyDynamicVariable_std__allocatorT_iDynTree__BerdyDynamicVariable_t_t,
  _swigc__p_std__vectorT_iDynTree__BerdySensor_std__allocatorT_iDynTree__BerdySensor_t_t,
  _swigc__p_std__vectorT_iDynTree__MatrixDynSize_std__allocatorT_iDynTree__MatrixDynSize_t_t,
  _swigc__p_std__vectorT_iDynTree__Regressors__DynamicsRegressorParameter_std__allocatorT_iDynTree__Regressors__DynamicsRegressorParameter_t_t,
  _swigc__p_std__vectorT_iDynTree__VectorDynSize_std__allocatorT_iDynTree__VectorDynSize_t_t,
  _swigc__p_std__vectorT_iDynTree__VectorFixSizeT_6_t_std__allocatorT_iDynTree__VectorFixSizeT_6_t_t_t,
  _swigc__p_std__vectorT_std__string_std__allocatorT_std__string_t_t,
  _swigc__p_std__vectorT_std__vectorT_iDynTree__SolidShape_p_std__allocatorT_iDynTree__SolidShape_p_t_t_std__allocatorT_std__vectorT_iDynTree__SolidShape_p_std__allocatorT_iDynTree__SolidShape_p_t_t_t_t,
  _swigc__p_swig__MatlabSwigIterator,
  _swigc__p_typed_iterator,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long,
  _swigc__p_value_type,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif


void SWIG_Matlab_LoadModule() {
  /* Only call once */
  static int moduleIsLoaded = 0;
  if (moduleIsLoaded) return;
  moduleIsLoaded = 1;

  /* Prevent unloading this file until MATLAB exits */
  mexLock();

  /* Exit function (called when unloaded) */
  mexAtExit(SWIG_Matlab_ExitFcn);

  /* Load dependent modules and initialize */

SWIG_InitializeModule(0);

}


SWIGINTERN const char* SwigConstantName(int con_id) {
  switch (con_id) {
  case 0: return "SparseMatrix_RowMajor";
  case 1: return "SparseMatrix_ColumnMajor";
  case 2: return "INERTIAL_FIXED_REPRESENTATION";
  case 3: return "BODY_FIXED_REPRESENTATION";
  case 4: return "MIXED_REPRESENTATION";
  case 5: return "SIX_AXIS_FORCE_TORQUE";
  case 6: return "ACCELEROMETER";
  case 7: return "GYROSCOPE";
  case 8: return "FULL_WRENCH";
  case 9: return "PURE_FORCE";
  case 10: return "PURE_FORCE_WITH_KNOWN_DIRECTION";
  case 11: return "NO_UNKNOWNS";
  case 12: return "ORIGINAL_BERDY_FIXED_BASE";
  case 13: return "BERDY_FLOATING_BASE";
  case 14: return "LINK_BODY_PROPER_ACCELERATION";
  case 15: return "NET_INT_AND_EXT_WRENCHES_ON_LINK_WITHOUT_GRAV";
  case 16: return "JOINT_WRENCH";
  case 17: return "DOF_TORQUE";
  case 18: return "NET_EXT_WRENCH";
  case 19: return "DOF_ACCELERATION";
  case 20: return "SIX_AXIS_FORCE_TORQUE_SENSOR";
  case 21: return "ACCELEROMETER_SENSOR";
  case 22: return "GYROSCOPE_SENSOR";
  case 23: return "DOF_ACCELERATION_SENSOR";
  case 24: return "DOF_TORQUE_SENSOR";
  case 25: return "NET_EXT_WRENCH_SENSOR";
  case 26: return "JOINT_WRENCH_SENSOR";
  case 27: return "LINK_PARAM";
  case 28: return "SENSOR_FT_PARAM";
  case 29: return "LINK_MASS";
  case 30: return "LINK_FIRST_MOMENT_OF_MASS_X";
  case 31: return "LINK_FIRST_MOMENT_OF_MASS_Y";
  case 32: return "LINK_FIRST_MOMENT_OF_MASS_Z";
  case 33: return "LINK_MOMENT_OF_INERTIA_XX";
  case 34: return "LINK_MOMENT_OF_INERTIA_XY";
  case 35: return "LINK_MOMENT_OF_INERTIA_XZ";
  case 36: return "LINK_MOMENT_OF_INERTIA_YY";
  case 37: return "LINK_MOMENT_OF_INERTIA_YZ";
  case 38: return "LINK_MOMENT_OF_INERTIA_ZZ";
  case 39: return "SENSOR_FT_OFFSET_FORCE_X";
  case 40: return "SENSOR_FT_OFFSET_FORCE_Y";
  case 41: return "SENSOR_FT_OFFSET_FORCE_Z";
  case 42: return "SENSOR_FT_OFFSET_TORQUE_X";
  case 43: return "SENSOR_FT_OFFSET_TORQUE_Y";
  case 44: return "SENSOR_FT_OFFSET_TORQUE_Z";
  case 45: return "POINT_LIGHT";
  case 46: return "DIRECTIONAL_LIGHT";
  default: return 0;
  }
}

SWIGINTERN int swigConstantName(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc!=1 || !mxIsDouble(*argv) || mxGetNumberOfElements(*argv)!=1) {
    SWIG_Error(SWIG_RuntimeError, "This mex file should only be called from inside the .m files generated by SWIG. The input should be the constant ID.");
    return 1;
  }
  if (resc!=1) {
    SWIG_Error(SWIG_RuntimeError, "The function should have one output.");
    return 1;
  }
  int con_id = (int)mxGetScalar(*argv);
  const char* s = SwigConstantName(con_id);
  if (s==0) {
    SWIG_Error(SWIG_RuntimeError, "No such constant ID.");
    return 1;
  }
  *resv = mxCreateString(s);
  return 0;
}

SWIGINTERN int swigConstant(int SWIGUNUSEDPARM(resc), mxArray *resv[], int argc, mxArray *argv[]) {
  if (--argc < 0 || !mxIsDouble(*argv) || mxGetNumberOfElements(*argv)!=1) {
    SWIG_Error(SWIG_RuntimeError, "This function should only be called from inside the .m files generated by SWIG. First input should be the constant ID .");
    return 1;
  }
  int con_id = (int)mxGetScalar(*argv++);
  switch (con_id) {
  case 0: *resv = SWIG_Matlab_SetConstant(module_ns,"SparseMatrix_RowMajor",SWIG_From_int(static_cast< int >(iDynTree::SparseMatrix::RowMajor)));; break;
  case 1: *resv = SWIG_Matlab_SetConstant(module_ns,"SparseMatrix_ColumnMajor",SWIG_From_int(static_cast< int >(iDynTree::SparseMatrix::ColumnMajor)));; break;
  case 2: *resv = SWIG_Matlab_SetConstant(module_ns,"INERTIAL_FIXED_REPRESENTATION",SWIG_From_int(static_cast< int >(iDynTree::INERTIAL_FIXED_REPRESENTATION)));; break;
  case 3: *resv = SWIG_Matlab_SetConstant(module_ns,"BODY_FIXED_REPRESENTATION",SWIG_From_int(static_cast< int >(iDynTree::BODY_FIXED_REPRESENTATION)));; break;
  case 4: *resv = SWIG_Matlab_SetConstant(module_ns,"MIXED_REPRESENTATION",SWIG_From_int(static_cast< int >(iDynTree::MIXED_REPRESENTATION)));; break;
  case 5: *resv = SWIG_Matlab_SetConstant(module_ns,"SIX_AXIS_FORCE_TORQUE",SWIG_From_int(static_cast< int >(iDynTree::SIX_AXIS_FORCE_TORQUE)));; break;
  case 6: *resv = SWIG_Matlab_SetConstant(module_ns,"ACCELEROMETER",SWIG_From_int(static_cast< int >(iDynTree::ACCELEROMETER)));; break;
  case 7: *resv = SWIG_Matlab_SetConstant(module_ns,"GYROSCOPE",SWIG_From_int(static_cast< int >(iDynTree::GYROSCOPE)));; break;
  case 8: *resv = SWIG_Matlab_SetConstant(module_ns,"FULL_WRENCH",SWIG_From_int(static_cast< int >(iDynTree::FULL_WRENCH)));; break;
  case 9: *resv = SWIG_Matlab_SetConstant(module_ns,"PURE_FORCE",SWIG_From_int(static_cast< int >(iDynTree::PURE_FORCE)));; break;
  case 10: *resv = SWIG_Matlab_SetConstant(module_ns,"PURE_FORCE_WITH_KNOWN_DIRECTION",SWIG_From_int(static_cast< int >(iDynTree::PURE_FORCE_WITH_KNOWN_DIRECTION)));; break;
  case 11: *resv = SWIG_Matlab_SetConstant(module_ns,"NO_UNKNOWNS",SWIG_From_int(static_cast< int >(iDynTree::NO_UNKNOWNS)));; break;
  case 12: *resv = SWIG_Matlab_SetConstant(module_ns,"ORIGINAL_BERDY_FIXED_BASE",SWIG_From_int(static_cast< int >(iDynTree::ORIGINAL_BERDY_FIXED_BASE)));; break;
  case 13: *resv = SWIG_Matlab_SetConstant(module_ns,"BERDY_FLOATING_BASE",SWIG_From_int(static_cast< int >(iDynTree::BERDY_FLOATING_BASE)));; break;
  case 14: *resv = SWIG_Matlab_SetConstant(module_ns,"LINK_BODY_PROPER_ACCELERATION",SWIG_From_int(static_cast< int >(iDynTree::LINK_BODY_PROPER_ACCELERATION)));; break;
  case 15: *resv = SWIG_Matlab_SetConstant(module_ns,"NET_INT_AND_EXT_WRENCHES_ON_LINK_WITHOUT_GRAV",SWIG_From_int(static_cast< int >(iDynTree::NET_INT_AND_EXT_WRENCHES_ON_LINK_WITHOUT_GRAV)));; break;
  case 16: *resv = SWIG_Matlab_SetConstant(module_ns,"JOINT_WRENCH",SWIG_From_int(static_cast< int >(iDynTree::JOINT_WRENCH)));; break;
  case 17: *resv = SWIG_Matlab_SetConstant(module_ns,"DOF_TORQUE",SWIG_From_int(static_cast< int >(iDynTree::DOF_TORQUE)));; break;
  case 18: *resv = SWIG_Matlab_SetConstant(module_ns,"NET_EXT_WRENCH",SWIG_From_int(static_cast< int >(iDynTree::NET_EXT_WRENCH)));; break;
  case 19: *resv = SWIG_Matlab_SetConstant(module_ns,"DOF_ACCELERATION",SWIG_From_int(static_cast< int >(iDynTree::DOF_ACCELERATION)));; break;
  case 20: *resv = SWIG_Matlab_SetConstant(module_ns,"SIX_AXIS_FORCE_TORQUE_SENSOR",SWIG_From_int(static_cast< int >(iDynTree::SIX_AXIS_FORCE_TORQUE_SENSOR)));; break;
  case 21: *resv = SWIG_Matlab_SetConstant(module_ns,"ACCELEROMETER_SENSOR",SWIG_From_int(static_cast< int >(iDynTree::ACCELEROMETER_SENSOR)));; break;
  case 22: *resv = SWIG_Matlab_SetConstant(module_ns,"GYROSCOPE_SENSOR",SWIG_From_int(static_cast< int >(iDynTree::GYROSCOPE_SENSOR)));; break;
  case 23: *resv = SWIG_Matlab_SetConstant(module_ns,"DOF_ACCELERATION_SENSOR",SWIG_From_int(static_cast< int >(iDynTree::DOF_ACCELERATION_SENSOR)));; break;
  case 24: *resv = SWIG_Matlab_SetConstant(module_ns,"DOF_TORQUE_SENSOR",SWIG_From_int(static_cast< int >(iDynTree::DOF_TORQUE_SENSOR)));; break;
  case 25: *resv = SWIG_Matlab_SetConstant(module_ns,"NET_EXT_WRENCH_SENSOR",SWIG_From_int(static_cast< int >(iDynTree::NET_EXT_WRENCH_SENSOR)));; break;
  case 26: *resv = SWIG_Matlab_SetConstant(module_ns,"JOINT_WRENCH_SENSOR",SWIG_From_int(static_cast< int >(iDynTree::JOINT_WRENCH_SENSOR)));; break;
  case 27: *resv = SWIG_Matlab_SetConstant(module_ns,"LINK_PARAM",SWIG_From_int(static_cast< int >(iDynTree::Regressors::LINK_PARAM)));; break;
  case 28: *resv = SWIG_Matlab_SetConstant(module_ns,"SENSOR_FT_PARAM",SWIG_From_int(static_cast< int >(iDynTree::Regressors::SENSOR_FT_PARAM)));; break;
  case 29: *resv = SWIG_Matlab_SetConstant(module_ns,"LINK_MASS",SWIG_From_int(static_cast< int >(iDynTree::Regressors::LINK_MASS)));; break;
  case 30: *resv = SWIG_Matlab_SetConstant(module_ns,"LINK_FIRST_MOMENT_OF_MASS_X",SWIG_From_int(static_cast< int >(iDynTree::Regressors::LINK_FIRST_MOMENT_OF_MASS_X)));; break;
  case 31: *resv = SWIG_Matlab_SetConstant(module_ns,"LINK_FIRST_MOMENT_OF_MASS_Y",SWIG_From_int(static_cast< int >(iDynTree::Regressors::LINK_FIRST_MOMENT_OF_MASS_Y)));; break;
  case 32: *resv = SWIG_Matlab_SetConstant(module_ns,"LINK_FIRST_MOMENT_OF_MASS_Z",SWIG_From_int(static_cast< int >(iDynTree::Regressors::LINK_FIRST_MOMENT_OF_MASS_Z)));; break;
  case 33: *resv = SWIG_Matlab_SetConstant(module_ns,"LINK_MOMENT_OF_INERTIA_XX",SWIG_From_int(static_cast< int >(iDynTree::Regressors::LINK_MOMENT_OF_INERTIA_XX)));; break;
  case 34: *resv = SWIG_Matlab_SetConstant(module_ns,"LINK_MOMENT_OF_INERTIA_XY",SWIG_From_int(static_cast< int >(iDynTree::Regressors::LINK_MOMENT_OF_INERTIA_XY)));; break;
  case 35: *resv = SWIG_Matlab_SetConstant(module_ns,"LINK_MOMENT_OF_INERTIA_XZ",SWIG_From_int(static_cast< int >(iDynTree::Regressors::LINK_MOMENT_OF_INERTIA_XZ)));; break;
  case 36: *resv = SWIG_Matlab_SetConstant(module_ns,"LINK_MOMENT_OF_INERTIA_YY",SWIG_From_int(static_cast< int >(iDynTree::Regressors::LINK_MOMENT_OF_INERTIA_YY)));; break;
  case 37: *resv = SWIG_Matlab_SetConstant(module_ns,"LINK_MOMENT_OF_INERTIA_YZ",SWIG_From_int(static_cast< int >(iDynTree::Regressors::LINK_MOMENT_OF_INERTIA_YZ)));; break;
  case 38: *resv = SWIG_Matlab_SetConstant(module_ns,"LINK_MOMENT_OF_INERTIA_ZZ",SWIG_From_int(static_cast< int >(iDynTree::Regressors::LINK_MOMENT_OF_INERTIA_ZZ)));; break;
  case 39: *resv = SWIG_Matlab_SetConstant(module_ns,"SENSOR_FT_OFFSET_FORCE_X",SWIG_From_int(static_cast< int >(iDynTree::Regressors::SENSOR_FT_OFFSET_FORCE_X)));; break;
  case 40: *resv = SWIG_Matlab_SetConstant(module_ns,"SENSOR_FT_OFFSET_FORCE_Y",SWIG_From_int(static_cast< int >(iDynTree::Regressors::SENSOR_FT_OFFSET_FORCE_Y)));; break;
  case 41: *resv = SWIG_Matlab_SetConstant(module_ns,"SENSOR_FT_OFFSET_FORCE_Z",SWIG_From_int(static_cast< int >(iDynTree::Regressors::SENSOR_FT_OFFSET_FORCE_Z)));; break;
  case 42: *resv = SWIG_Matlab_SetConstant(module_ns,"SENSOR_FT_OFFSET_TORQUE_X",SWIG_From_int(static_cast< int >(iDynTree::Regressors::SENSOR_FT_OFFSET_TORQUE_X)));; break;
  case 43: *resv = SWIG_Matlab_SetConstant(module_ns,"SENSOR_FT_OFFSET_TORQUE_Y",SWIG_From_int(static_cast< int >(iDynTree::Regressors::SENSOR_FT_OFFSET_TORQUE_Y)));; break;
  case 44: *resv = SWIG_Matlab_SetConstant(module_ns,"SENSOR_FT_OFFSET_TORQUE_Z",SWIG_From_int(static_cast< int >(iDynTree::Regressors::SENSOR_FT_OFFSET_TORQUE_Z)));; break;
  case 45: *resv = SWIG_Matlab_SetConstant(module_ns,"POINT_LIGHT",SWIG_From_int(static_cast< int >(iDynTree::POINT_LIGHT)));; break;
  case 46: *resv = SWIG_Matlab_SetConstant(module_ns,"DIRECTIONAL_LIGHT",SWIG_From_int(static_cast< int >(iDynTree::DIRECTIONAL_LIGHT)));; break;
  default:
    SWIG_Error(SWIG_RuntimeError, "No such constant.");
    return 1;
  }
  return 0;
}

SWIGINTERN const char* SwigFunctionName(int fcn_id) {
  switch(fcn_id) {
  case 0: return "swigConstant";
  case 1: return "swigFunctionName";
  case 2: return "swigConstantName";
  case 3: return "swigThis";
  case 4: return "swigTouch";
  case 5: return "delete_MatlabSwigIterator";
  case 6: return "MatlabSwigIterator_value";
  case 7: return "MatlabSwigIterator_incr";
  case 8: return "MatlabSwigIterator_decr";
  case 9: return "MatlabSwigIterator_distance";
  case 10: return "MatlabSwigIterator_equal";
  case 11: return "MatlabSwigIterator_copy";
  case 12: return "MatlabSwigIterator_next";
  case 13: return "MatlabSwigIterator_previous";
  case 14: return "MatlabSwigIterator_advance";
  case 15: return "MatlabSwigIterator_eq";
  case 16: return "MatlabSwigIterator_ne";
  case 17: return "MatlabSwigIterator_TODOincr";
  case 18: return "MatlabSwigIterator_TODOdecr";
  case 19: return "MatlabSwigIterator_plus";
  case 20: return "MatlabSwigIterator_minus";
  case 21: return "StringVector_pop";
  case 22: return "StringVector_brace";
  case 23: return "StringVector_setbrace";
  case 24: return "StringVector_append";
  case 25: return "StringVector_empty";
  case 26: return "StringVector_size";
  case 27: return "StringVector_swap";
  case 28: return "StringVector_begin";
  case 29: return "StringVector_end";
  case 30: return "StringVector_rbegin";
  case 31: return "StringVector_rend";
  case 32: return "StringVector_clear";
  case 33: return "StringVector_get_allocator";
  case 34: return "StringVector_pop_back";
  case 35: return "StringVector_erase";
  case 36: return "new_StringVector";
  case 37: return "StringVector_push_back";
  case 38: return "StringVector_front";
  case 39: return "StringVector_back";
  case 40: return "StringVector_assign";
  case 41: return "StringVector_resize";
  case 42: return "StringVector_insert";
  case 43: return "StringVector_reserve";
  case 44: return "StringVector_capacity";
  case 45: return "delete_StringVector";
  case 46: return "BerdySensors_pop";
  case 47: return "BerdySensors_brace";
  case 48: return "BerdySensors_setbrace";
  case 49: return "BerdySensors_append";
  case 50: return "BerdySensors_empty";
  case 51: return "BerdySensors_size";
  case 52: return "BerdySensors_swap";
  case 53: return "BerdySensors_begin";
  case 54: return "BerdySensors_end";
  case 55: return "BerdySensors_rbegin";
  case 56: return "BerdySensors_rend";
  case 57: return "BerdySensors_clear";
  case 58: return "BerdySensors_get_allocator";
  case 59: return "BerdySensors_pop_back";
  case 60: return "BerdySensors_erase";
  case 61: return "new_BerdySensors";
  case 62: return "BerdySensors_push_back";
  case 63: return "BerdySensors_front";
  case 64: return "BerdySensors_back";
  case 65: return "BerdySensors_assign";
  case 66: return "BerdySensors_resize";
  case 67: return "BerdySensors_insert";
  case 68: return "BerdySensors_reserve";
  case 69: return "BerdySensors_capacity";
  case 70: return "delete_BerdySensors";
  case 71: return "BerdyDynamicVariables_pop";
  case 72: return "BerdyDynamicVariables_brace";
  case 73: return "BerdyDynamicVariables_setbrace";
  case 74: return "BerdyDynamicVariables_append";
  case 75: return "BerdyDynamicVariables_empty";
  case 76: return "BerdyDynamicVariables_size";
  case 77: return "BerdyDynamicVariables_swap";
  case 78: return "BerdyDynamicVariables_begin";
  case 79: return "BerdyDynamicVariables_end";
  case 80: return "BerdyDynamicVariables_rbegin";
  case 81: return "BerdyDynamicVariables_rend";
  case 82: return "BerdyDynamicVariables_clear";
  case 83: return "BerdyDynamicVariables_get_allocator";
  case 84: return "BerdyDynamicVariables_pop_back";
  case 85: return "BerdyDynamicVariables_erase";
  case 86: return "new_BerdyDynamicVariables";
  case 87: return "BerdyDynamicVariables_push_back";
  case 88: return "BerdyDynamicVariables_front";
  case 89: return "BerdyDynamicVariables_back";
  case 90: return "BerdyDynamicVariables_assign";
  case 91: return "BerdyDynamicVariables_resize";
  case 92: return "BerdyDynamicVariables_insert";
  case 93: return "BerdyDynamicVariables_reserve";
  case 94: return "BerdyDynamicVariables_capacity";
  case 95: return "delete_BerdyDynamicVariables";
  case 96: return "IndexRange_offset_get";
  case 97: return "IndexRange_offset_set";
  case 98: return "IndexRange_size_get";
  case 99: return "IndexRange_size_set";
  case 100: return "IndexRange_isValid";
  case 101: return "IndexRange_InvalidRange";
  case 102: return "new_IndexRange";
  case 103: return "delete_IndexRange";
  case 104: return "new_MatrixDynSize";
  case 105: return "delete_MatrixDynSize";
  case 106: return "MatrixDynSize_paren";
  case 107: return "MatrixDynSize_getVal";
  case 108: return "MatrixDynSize_setVal";
  case 109: return "MatrixDynSize_rows";
  case 110: return "MatrixDynSize_cols";
  case 111: return "MatrixDynSize_data";
  case 112: return "MatrixDynSize_zero";
  case 113: return "MatrixDynSize_resize";
  case 114: return "MatrixDynSize_reserve";
  case 115: return "MatrixDynSize_capacity";
  case 116: return "MatrixDynSize_shrink_to_fit";
  case 117: return "MatrixDynSize_fillRowMajorBuffer";
  case 118: return "MatrixDynSize_fillColMajorBuffer";
  case 119: return "MatrixDynSize_toString";
  case 120: return "MatrixDynSize_display";
  case 121: return "MatrixDynSize_toMatlab";
  case 122: return "MatrixDynSize_fromMatlab";
  case 123: return "new_SparseMatrix";
  case 124: return "delete_SparseMatrix";
  case 125: return "SparseMatrix_numberOfNonZeros";
  case 126: return "SparseMatrix_nonZeroElementsForRowAtIndex";
  case 127: return "SparseMatrix_resize";
  case 128: return "SparseMatrix_reserve";
  case 129: return "SparseMatrix_zero";
  case 130: return "SparseMatrix_setFromConstTriplets";
  case 131: return "SparseMatrix_setFromTriplets";
  case 132: return "SparseMatrix_getValue";
  case 133: return "SparseMatrix_setValue";
  case 134: return "SparseMatrix_rows";
  case 135: return "SparseMatrix_columns";
  case 136: return "SparseMatrix_innerIndecesBuffer";
  case 137: return "SparseMatrix_outerIndecesBuffer";
  case 138: return "SparseMatrix_description";
  case 139: return "SparseMatrix_convertFromColumnMajor";
  case 140: return "SparseMatrix_toMatlab";
  case 141: return "SparseMatrix_toMatlabDense";
  case 142: return "SparseMatrix_fromMatlab";
  case 143: return "new_VectorDynSize";
  case 144: return "delete_VectorDynSize";
  case 145: return "VectorDynSize_paren";
  case 146: return "VectorDynSize_getVal";
  case 147: return "VectorDynSize_setVal";
  case 148: return "VectorDynSize_size";
  case 149: return "VectorDynSize_data";
  case 150: return "VectorDynSize_zero";
  case 151: return "VectorDynSize_reserve";
  case 152: return "VectorDynSize_resize";
  case 153: return "VectorDynSize_shrink_to_fit";
  case 154: return "VectorDynSize_capacity";
  case 155: return "VectorDynSize_fillBuffer";
  case 156: return "VectorDynSize_toString";
  case 157: return "VectorDynSize_display";
  case 158: return "VectorDynSize_toMatlab";
  case 159: return "VectorDynSize_fromMatlab";
  case 160: return "new_Matrix1x6";
  case 161: return "Matrix1x6_paren";
  case 162: return "Matrix1x6_getVal";
  case 163: return "Matrix1x6_setVal";
  case 164: return "Matrix1x6_rows";
  case 165: return "Matrix1x6_cols";
  case 166: return "Matrix1x6_data";
  case 167: return "Matrix1x6_zero";
  case 168: return "Matrix1x6_fillRowMajorBuffer";
  case 169: return "Matrix1x6_fillColMajorBuffer";
  case 170: return "Matrix1x6_toString";
  case 171: return "Matrix1x6_display";
  case 172: return "Matrix1x6_toMatlab";
  case 173: return "Matrix1x6_fromMatlab";
  case 174: return "delete_Matrix1x6";
  case 175: return "new_Matrix2x3";
  case 176: return "Matrix2x3_paren";
  case 177: return "Matrix2x3_getVal";
  case 178: return "Matrix2x3_setVal";
  case 179: return "Matrix2x3_rows";
  case 180: return "Matrix2x3_cols";
  case 181: return "Matrix2x3_data";
  case 182: return "Matrix2x3_zero";
  case 183: return "Matrix2x3_fillRowMajorBuffer";
  case 184: return "Matrix2x3_fillColMajorBuffer";
  case 185: return "Matrix2x3_toString";
  case 186: return "Matrix2x3_display";
  case 187: return "Matrix2x3_toMatlab";
  case 188: return "Matrix2x3_fromMatlab";
  case 189: return "delete_Matrix2x3";
  case 190: return "new_Matrix3x3";
  case 191: return "Matrix3x3_paren";
  case 192: return "Matrix3x3_getVal";
  case 193: return "Matrix3x3_setVal";
  case 194: return "Matrix3x3_rows";
  case 195: return "Matrix3x3_cols";
  case 196: return "Matrix3x3_data";
  case 197: return "Matrix3x3_zero";
  case 198: return "Matrix3x3_fillRowMajorBuffer";
  case 199: return "Matrix3x3_fillColMajorBuffer";
  case 200: return "Matrix3x3_toString";
  case 201: return "Matrix3x3_display";
  case 202: return "Matrix3x3_toMatlab";
  case 203: return "Matrix3x3_fromMatlab";
  case 204: return "delete_Matrix3x3";
  case 205: return "new_Matrix4x4";
  case 206: return "Matrix4x4_paren";
  case 207: return "Matrix4x4_getVal";
  case 208: return "Matrix4x4_setVal";
  case 209: return "Matrix4x4_rows";
  case 210: return "Matrix4x4_cols";
  case 211: return "Matrix4x4_data";
  case 212: return "Matrix4x4_zero";
  case 213: return "Matrix4x4_fillRowMajorBuffer";
  case 214: return "Matrix4x4_fillColMajorBuffer";
  case 215: return "Matrix4x4_toString";
  case 216: return "Matrix4x4_display";
  case 217: return "Matrix4x4_toMatlab";
  case 218: return "Matrix4x4_fromMatlab";
  case 219: return "delete_Matrix4x4";
  case 220: return "new_Matrix6x6";
  case 221: return "Matrix6x6_paren";
  case 222: return "Matrix6x6_getVal";
  case 223: return "Matrix6x6_setVal";
  case 224: return "Matrix6x6_rows";
  case 225: return "Matrix6x6_cols";
  case 226: return "Matrix6x6_data";
  case 227: return "Matrix6x6_zero";
  case 228: return "Matrix6x6_fillRowMajorBuffer";
  case 229: return "Matrix6x6_fillColMajorBuffer";
  case 230: return "Matrix6x6_toString";
  case 231: return "Matrix6x6_display";
  case 232: return "Matrix6x6_toMatlab";
  case 233: return "Matrix6x6_fromMatlab";
  case 234: return "delete_Matrix6x6";
  case 235: return "new_Matrix6x10";
  case 236: return "Matrix6x10_paren";
  case 237: return "Matrix6x10_getVal";
  case 238: return "Matrix6x10_setVal";
  case 239: return "Matrix6x10_rows";
  case 240: return "Matrix6x10_cols";
  case 241: return "Matrix6x10_data";
  case 242: return "Matrix6x10_zero";
  case 243: return "Matrix6x10_fillRowMajorBuffer";
  case 244: return "Matrix6x10_fillColMajorBuffer";
  case 245: return "Matrix6x10_toString";
  case 246: return "Matrix6x10_display";
  case 247: return "Matrix6x10_toMatlab";
  case 248: return "Matrix6x10_fromMatlab";
  case 249: return "delete_Matrix6x10";
  case 250: return "new_Matrix10x16";
  case 251: return "Matrix10x16_paren";
  case 252: return "Matrix10x16_getVal";
  case 253: return "Matrix10x16_setVal";
  case 254: return "Matrix10x16_rows";
  case 255: return "Matrix10x16_cols";
  case 256: return "Matrix10x16_data";
  case 257: return "Matrix10x16_zero";
  case 258: return "Matrix10x16_fillRowMajorBuffer";
  case 259: return "Matrix10x16_fillColMajorBuffer";
  case 260: return "Matrix10x16_toString";
  case 261: return "Matrix10x16_display";
  case 262: return "Matrix10x16_toMatlab";
  case 263: return "Matrix10x16_fromMatlab";
  case 264: return "delete_Matrix10x16";
  case 265: return "new_Vector3";
  case 266: return "Vector3_paren";
  case 267: return "Vector3_getVal";
  case 268: return "Vector3_setVal";
  case 269: return "Vector3_size";
  case 270: return "Vector3_data";
  case 271: return "Vector3_zero";
  case 272: return "Vector3_fillBuffer";
  case 273: return "Vector3_toString";
  case 274: return "Vector3_display";
  case 275: return "Vector3_toMatlab";
  case 276: return "Vector3_fromMatlab";
  case 277: return "delete_Vector3";
  case 278: return "new_Vector4";
  case 279: return "Vector4_paren";
  case 280: return "Vector4_getVal";
  case 281: return "Vector4_setVal";
  case 282: return "Vector4_size";
  case 283: return "Vector4_data";
  case 284: return "Vector4_zero";
  case 285: return "Vector4_fillBuffer";
  case 286: return "Vector4_toString";
  case 287: return "Vector4_display";
  case 288: return "Vector4_toMatlab";
  case 289: return "Vector4_fromMatlab";
  case 290: return "delete_Vector4";
  case 291: return "new_Vector6";
  case 292: return "Vector6_paren";
  case 293: return "Vector6_getVal";
  case 294: return "Vector6_setVal";
  case 295: return "Vector6_size";
  case 296: return "Vector6_data";
  case 297: return "Vector6_zero";
  case 298: return "Vector6_fillBuffer";
  case 299: return "Vector6_toString";
  case 300: return "Vector6_display";
  case 301: return "Vector6_toMatlab";
  case 302: return "Vector6_fromMatlab";
  case 303: return "delete_Vector6";
  case 304: return "new_Vector10";
  case 305: return "Vector10_paren";
  case 306: return "Vector10_getVal";
  case 307: return "Vector10_setVal";
  case 308: return "Vector10_size";
  case 309: return "Vector10_data";
  case 310: return "Vector10_zero";
  case 311: return "Vector10_fillBuffer";
  case 312: return "Vector10_toString";
  case 313: return "Vector10_display";
  case 314: return "Vector10_toMatlab";
  case 315: return "Vector10_fromMatlab";
  case 316: return "delete_Vector10";
  case 317: return "new_Vector16";
  case 318: return "Vector16_paren";
  case 319: return "Vector16_getVal";
  case 320: return "Vector16_setVal";
  case 321: return "Vector16_size";
  case 322: return "Vector16_data";
  case 323: return "Vector16_zero";
  case 324: return "Vector16_fillBuffer";
  case 325: return "Vector16_toString";
  case 326: return "Vector16_display";
  case 327: return "Vector16_toMatlab";
  case 328: return "Vector16_fromMatlab";
  case 329: return "delete_Vector16";
  case 330: return "new_PositionRaw";
  case 331: return "PositionRaw_changePoint";
  case 332: return "PositionRaw_changeRefPoint";
  case 333: return "PositionRaw_compose";
  case 334: return "PositionRaw_inverse";
  case 335: return "PositionRaw_changePointOf";
  case 336: return "PositionRaw_toString";
  case 337: return "PositionRaw_display";
  case 338: return "delete_PositionRaw";
  case 339: return "new_PositionSemantics";
  case 340: return "PositionSemantics_setToUnknown";
  case 341: return "PositionSemantics_getPoint";
  case 342: return "PositionSemantics_getBody";
  case 343: return "PositionSemantics_getReferencePoint";
  case 344: return "PositionSemantics_getRefBody";
  case 345: return "PositionSemantics_getCoordinateFrame";
  case 346: return "PositionSemantics_setPoint";
  case 347: return "PositionSemantics_setBody";
  case 348: return "PositionSemantics_setReferencePoint";
  case 349: return "PositionSemantics_setRefBody";
  case 350: return "PositionSemantics_setCoordinateFrame";
  case 351: return "PositionSemantics_changePoint";
  case 352: return "PositionSemantics_changeRefPoint";
  case 353: return "PositionSemantics_compose";
  case 354: return "PositionSemantics_inverse";
  case 355: return "PositionSemantics_toString";
  case 356: return "PositionSemantics_display";
  case 357: return "delete_PositionSemantics";
  case 358: return "new_Position";
  case 359: return "Position_getSemantics";
  case 360: return "Position_changePoint";
  case 361: return "Position_changeRefPoint";
  case 362: return "Position_changeCoordinateFrame";
  case 363: return "Position_compose";
  case 364: return "Position_inverse";
  case 365: return "Position_changePointOf";
  case 366: return "Position_plus";
  case 367: return "Position_minus";
  case 368: return "Position_uminus";
  case 369: return "Position_mtimes";
  case 370: return "Position_toString";
  case 371: return "Position_display";
  case 372: return "Position_Zero";
  case 373: return "delete_Position";
  case 374: return "new_GeomVector3Semantics__LinearMotionVector3Semantics";
  case 375: return "GeomVector3Semantics__LinearMotionVector3Semantics_setToUnknown";
  case 376: return "GeomVector3Semantics__LinearMotionVector3Semantics_getBody";
  case 377: return "GeomVector3Semantics__LinearMotionVector3Semantics_getRefBody";
  case 378: return "GeomVector3Semantics__LinearMotionVector3Semantics_getCoordinateFrame";
  case 379: return "GeomVector3Semantics__LinearMotionVector3Semantics_isUnknown";
  case 380: return "GeomVector3Semantics__LinearMotionVector3Semantics_changeCoordFrame";
  case 381: return "GeomVector3Semantics__LinearMotionVector3Semantics_compose";
  case 382: return "GeomVector3Semantics__LinearMotionVector3Semantics_inverse";
  case 383: return "GeomVector3Semantics__LinearMotionVector3Semantics_dot";
  case 384: return "delete_GeomVector3Semantics__LinearMotionVector3Semantics";
  case 385: return "new_GeomVector3Semantics__AngularMotionVector3Semantics";
  case 386: return "GeomVector3Semantics__AngularMotionVector3Semantics_setToUnknown";
  case 387: return "GeomVector3Semantics__AngularMotionVector3Semantics_getBody";
  case 388: return "GeomVector3Semantics__AngularMotionVector3Semantics_getRefBody";
  case 389: return "GeomVector3Semantics__AngularMotionVector3Semantics_getCoordinateFrame";
  case 390: return "GeomVector3Semantics__AngularMotionVector3Semantics_isUnknown";
  case 391: return "GeomVector3Semantics__AngularMotionVector3Semantics_changeCoordFrame";
  case 392: return "GeomVector3Semantics__AngularMotionVector3Semantics_compose";
  case 393: return "GeomVector3Semantics__AngularMotionVector3Semantics_inverse";
  case 394: return "GeomVector3Semantics__AngularMotionVector3Semantics_dot";
  case 395: return "delete_GeomVector3Semantics__AngularMotionVector3Semantics";
  case 396: return "new_GeomVector3Semantics__LinearForceVector3Semantics";
  case 397: return "GeomVector3Semantics__LinearForceVector3Semantics_setToUnknown";
  case 398: return "GeomVector3Semantics__LinearForceVector3Semantics_getBody";
  case 399: return "GeomVector3Semantics__LinearForceVector3Semantics_getRefBody";
  case 400: return "GeomVector3Semantics__LinearForceVector3Semantics_getCoordinateFrame";
  case 401: return "GeomVector3Semantics__LinearForceVector3Semantics_isUnknown";
  case 402: return "GeomVector3Semantics__LinearForceVector3Semantics_changeCoordFrame";
  case 403: return "GeomVector3Semantics__LinearForceVector3Semantics_compose";
  case 404: return "GeomVector3Semantics__LinearForceVector3Semantics_inverse";
  case 405: return "GeomVector3Semantics__LinearForceVector3Semantics_dot";
  case 406: return "delete_GeomVector3Semantics__LinearForceVector3Semantics";
  case 407: return "new_GeomVector3Semantics__AngularForceVector3Semantics";
  case 408: return "GeomVector3Semantics__AngularForceVector3Semantics_setToUnknown";
  case 409: return "GeomVector3Semantics__AngularForceVector3Semantics_getBody";
  case 410: return "GeomVector3Semantics__AngularForceVector3Semantics_getRefBody";
  case 411: return "GeomVector3Semantics__AngularForceVector3Semantics_getCoordinateFrame";
  case 412: return "GeomVector3Semantics__AngularForceVector3Semantics_isUnknown";
  case 413: return "GeomVector3Semantics__AngularForceVector3Semantics_changeCoordFrame";
  case 414: return "GeomVector3Semantics__AngularForceVector3Semantics_compose";
  case 415: return "GeomVector3Semantics__AngularForceVector3Semantics_inverse";
  case 416: return "GeomVector3Semantics__AngularForceVector3Semantics_dot";
  case 417: return "delete_GeomVector3Semantics__AngularForceVector3Semantics";
  case 418: return "GeomVector3__LinearMotionVector3_semantics_get";
  case 419: return "GeomVector3__LinearMotionVector3_semantics_set";
  case 420: return "new_GeomVector3__LinearMotionVector3";
  case 421: return "GeomVector3__LinearMotionVector3_setSemantics";
  case 422: return "GeomVector3__LinearMotionVector3_changeCoordFrame";
  case 423: return "GeomVector3__LinearMotionVector3_compose";
  case 424: return "GeomVector3__LinearMotionVector3_inverse";
  case 425: return "GeomVector3__LinearMotionVector3_dot";
  case 426: return "GeomVector3__LinearMotionVector3_plus";
  case 427: return "GeomVector3__LinearMotionVector3_minus";
  case 428: return "GeomVector3__LinearMotionVector3_uminus";
  case 429: return "delete_GeomVector3__LinearMotionVector3";
  case 430: return "GeomVector3__AngularMotionVector3_semantics_get";
  case 431: return "GeomVector3__AngularMotionVector3_semantics_set";
  case 432: return "new_GeomVector3__AngularMotionVector3";
  case 433: return "GeomVector3__AngularMotionVector3_setSemantics";
  case 434: return "GeomVector3__AngularMotionVector3_changeCoordFrame";
  case 435: return "GeomVector3__AngularMotionVector3_compose";
  case 436: return "GeomVector3__AngularMotionVector3_inverse";
  case 437: return "GeomVector3__AngularMotionVector3_dot";
  case 438: return "GeomVector3__AngularMotionVector3_plus";
  case 439: return "GeomVector3__AngularMotionVector3_minus";
  case 440: return "GeomVector3__AngularMotionVector3_uminus";
  case 441: return "delete_GeomVector3__AngularMotionVector3";
  case 442: return "GeomVector3__LinearForceVector3_semantics_get";
  case 443: return "GeomVector3__LinearForceVector3_semantics_set";
  case 444: return "new_GeomVector3__LinearForceVector3";
  case 445: return "GeomVector3__LinearForceVector3_setSemantics";
  case 446: return "GeomVector3__LinearForceVector3_changeCoordFrame";
  case 447: return "GeomVector3__LinearForceVector3_compose";
  case 448: return "GeomVector3__LinearForceVector3_inverse";
  case 449: return "GeomVector3__LinearForceVector3_dot";
  case 450: return "GeomVector3__LinearForceVector3_plus";
  case 451: return "GeomVector3__LinearForceVector3_minus";
  case 452: return "GeomVector3__LinearForceVector3_uminus";
  case 453: return "delete_GeomVector3__LinearForceVector3";
  case 454: return "GeomVector3__AngularForceVector3_semantics_get";
  case 455: return "GeomVector3__AngularForceVector3_semantics_set";
  case 456: return "new_GeomVector3__AngularForceVector3";
  case 457: return "GeomVector3__AngularForceVector3_setSemantics";
  case 458: return "GeomVector3__AngularForceVector3_changeCoordFrame";
  case 459: return "GeomVector3__AngularForceVector3_compose";
  case 460: return "GeomVector3__AngularForceVector3_inverse";
  case 461: return "GeomVector3__AngularForceVector3_dot";
  case 462: return "GeomVector3__AngularForceVector3_plus";
  case 463: return "GeomVector3__AngularForceVector3_minus";
  case 464: return "GeomVector3__AngularForceVector3_uminus";
  case 465: return "delete_GeomVector3__AngularForceVector3";
  case 466: return "new_ForceVector3Semantics__LinearForceVector3Semantics";
  case 467: return "ForceVector3Semantics__LinearForceVector3Semantics_compose";
  case 468: return "ForceVector3Semantics__LinearForceVector3Semantics_inverse";
  case 469: return "delete_ForceVector3Semantics__LinearForceVector3Semantics";
  case 470: return "new_ForceVector3Semantics__AngularForceVector3Semantics";
  case 471: return "ForceVector3Semantics__AngularForceVector3Semantics_compose";
  case 472: return "ForceVector3Semantics__AngularForceVector3Semantics_inverse";
  case 473: return "delete_ForceVector3Semantics__AngularForceVector3Semantics";
  case 474: return "new_MotionVector3__LinearMotionVector3";
  case 475: return "MotionVector3__LinearMotionVector3_cross";
  case 476: return "delete_MotionVector3__LinearMotionVector3";
  case 477: return "new_MotionVector3__AngularMotionVector3";
  case 478: return "MotionVector3__AngularMotionVector3_cross";
  case 479: return "delete_MotionVector3__AngularMotionVector3";
  case 480: return "new_ForceVector3__LinearForceVector3";
  case 481: return "delete_ForceVector3__LinearForceVector3";
  case 482: return "new_ForceVector3__AngularForceVector3";
  case 483: return "delete_ForceVector3__AngularForceVector3";
  case 484: return "new_LinearMotionVector3Semantics";
  case 485: return "LinearMotionVector3Semantics_changePoint";
  case 486: return "LinearMotionVector3Semantics_compose";
  case 487: return "delete_LinearMotionVector3Semantics";
  case 488: return "new_LinearMotionVector3";
  case 489: return "LinearMotionVector3_changePoint";
  case 490: return "delete_LinearMotionVector3";
  case 491: return "new_AngularMotionVector3Semantics";
  case 492: return "delete_AngularMotionVector3Semantics";
  case 493: return "new_AngularMotionVector3";
  case 494: return "AngularMotionVector3_exp";
  case 495: return "delete_AngularMotionVector3";
  case 496: return "new_LinearForceVector3Semantics";
  case 497: return "delete_LinearForceVector3Semantics";
  case 498: return "new_LinearForceVector3";
  case 499: return "delete_LinearForceVector3";
  case 500: return "new_AngularForceVector3Semantics";
  case 501: return "AngularForceVector3Semantics_changePoint";
  case 502: return "AngularForceVector3Semantics_compose";
  case 503: return "delete_AngularForceVector3Semantics";
  case 504: return "new_AngularForceVector3";
  case 505: return "AngularForceVector3_changePoint";
  case 506: return "delete_AngularForceVector3";
  case 507: return "new_SpatialMotionVectorSemanticsBase";
  case 508: return "SpatialMotionVectorSemanticsBase_check_linear2angularConsistency";
  case 509: return "SpatialMotionVectorSemanticsBase_toString";
  case 510: return "SpatialMotionVectorSemanticsBase_display";
  case 511: return "delete_SpatialMotionVectorSemanticsBase";
  case 512: return "new_SpatialForceVectorSemanticsBase";
  case 513: return "SpatialForceVectorSemanticsBase_check_linear2angularConsistency";
  case 514: return "SpatialForceVectorSemanticsBase_toString";
  case 515: return "SpatialForceVectorSemanticsBase_display";
  case 516: return "delete_SpatialForceVectorSemanticsBase";
  case 517: return "new_SpatialMotionVectorBase";
  case 518: return "SpatialMotionVectorBase_getLinearVec3";
  case 519: return "SpatialMotionVectorBase_getAngularVec3";
  case 520: return "SpatialMotionVectorBase_setLinearVec3";
  case 521: return "SpatialMotionVectorBase_setAngularVec3";
  case 522: return "SpatialMotionVectorBase_paren";
  case 523: return "SpatialMotionVectorBase_getVal";
  case 524: return "SpatialMotionVectorBase_setVal";
  case 525: return "SpatialMotionVectorBase_size";
  case 526: return "SpatialMotionVectorBase_zero";
  case 527: return "SpatialMotionVectorBase_changePoint";
  case 528: return "SpatialMotionVectorBase_changeCoordFrame";
  case 529: return "SpatialMotionVectorBase_compose";
  case 530: return "SpatialMotionVectorBase_inverse";
  case 531: return "SpatialMotionVectorBase_dot";
  case 532: return "SpatialMotionVectorBase_plus";
  case 533: return "SpatialMotionVectorBase_minus";
  case 534: return "SpatialMotionVectorBase_uminus";
  case 535: return "SpatialMotionVectorBase_Zero";
  case 536: return "SpatialMotionVectorBase_asVector";
  case 537: return "SpatialMotionVectorBase_toString";
  case 538: return "SpatialMotionVectorBase_display";
  case 539: return "SpatialMotionVectorBase_toMatlab";
  case 540: return "SpatialMotionVectorBase_fromMatlab";
  case 541: return "delete_SpatialMotionVectorBase";
  case 542: return "new_SpatialForceVectorBase";
  case 543: return "SpatialForceVectorBase_getLinearVec3";
  case 544: return "SpatialForceVectorBase_getAngularVec3";
  case 545: return "SpatialForceVectorBase_setLinearVec3";
  case 546: return "SpatialForceVectorBase_setAngularVec3";
  case 547: return "SpatialForceVectorBase_paren";
  case 548: return "SpatialForceVectorBase_getVal";
  case 549: return "SpatialForceVectorBase_setVal";
  case 550: return "SpatialForceVectorBase_size";
  case 551: return "SpatialForceVectorBase_zero";
  case 552: return "SpatialForceVectorBase_changePoint";
  case 553: return "SpatialForceVectorBase_changeCoordFrame";
  case 554: return "SpatialForceVectorBase_compose";
  case 555: return "SpatialForceVectorBase_inverse";
  case 556: return "SpatialForceVectorBase_dot";
  case 557: return "SpatialForceVectorBase_plus";
  case 558: return "SpatialForceVectorBase_minus";
  case 559: return "SpatialForceVectorBase_uminus";
  case 560: return "SpatialForceVectorBase_Zero";
  case 561: return "SpatialForceVectorBase_asVector";
  case 562: return "SpatialForceVectorBase_toString";
  case 563: return "SpatialForceVectorBase_display";
  case 564: return "SpatialForceVectorBase_toMatlab";
  case 565: return "SpatialForceVectorBase_fromMatlab";
  case 566: return "delete_SpatialForceVectorBase";
  case 567: return "new_Dummy";
  case 568: return "delete_Dummy";
  case 569: return "new_SpatialMotionVector";
  case 570: return "SpatialMotionVector_mtimes";
  case 571: return "SpatialMotionVector_cross";
  case 572: return "SpatialMotionVector_asCrossProductMatrix";
  case 573: return "SpatialMotionVector_asCrossProductMatrixWrench";
  case 574: return "SpatialMotionVector_exp";
  case 575: return "delete_SpatialMotionVector";
  case 576: return "new_SpatialForceVector";
  case 577: return "delete_SpatialForceVector";
  case 578: return "SpatialForceVector_mtimes";
  case 579: return "new_Twist";
  case 580: return "Twist_plus";
  case 581: return "Twist_minus";
  case 582: return "Twist_uminus";
  case 583: return "Twist_mtimes";
  case 584: return "delete_Twist";
  case 585: return "new_Wrench";
  case 586: return "Wrench_plus";
  case 587: return "Wrench_minus";
  case 588: return "Wrench_uminus";
  case 589: return "delete_Wrench";
  case 590: return "new_SpatialMomentum";
  case 591: return "SpatialMomentum_plus";
  case 592: return "SpatialMomentum_minus";
  case 593: return "SpatialMomentum_uminus";
  case 594: return "delete_SpatialMomentum";
  case 595: return "new_SpatialAcc";
  case 596: return "SpatialAcc_plus";
  case 597: return "SpatialAcc_minus";
  case 598: return "SpatialAcc_uminus";
  case 599: return "delete_SpatialAcc";
  case 600: return "new_ClassicalAcc";
  case 601: return "ClassicalAcc_changeCoordFrame";
  case 602: return "ClassicalAcc_Zero";
  case 603: return "ClassicalAcc_fromSpatial";
  case 604: return "ClassicalAcc_toSpatial";
  case 605: return "delete_ClassicalAcc";
  case 606: return "new_Direction";
  case 607: return "Direction_Normalize";
  case 608: return "Direction_isParallel";
  case 609: return "Direction_isPerpendicular";
  case 610: return "Direction_reverse";
  case 611: return "Direction_toString";
  case 612: return "Direction_display";
  case 613: return "Direction_Default";
  case 614: return "delete_Direction";
  case 615: return "new_Axis";
  case 616: return "Axis_getDirection";
  case 617: return "Axis_getOrigin";
  case 618: return "Axis_setDirection";
  case 619: return "Axis_setOrigin";
  case 620: return "Axis_getRotationTransform";
  case 621: return "Axis_getRotationTransformDerivative";
  case 622: return "Axis_getRotationTwist";
  case 623: return "Axis_getRotationSpatialAcc";
  case 624: return "Axis_getTranslationTransform";
  case 625: return "Axis_getTranslationTransformDerivative";
  case 626: return "Axis_getTranslationTwist";
  case 627: return "Axis_getTranslationSpatialAcc";
  case 628: return "Axis_isParallel";
  case 629: return "Axis_reverse";
  case 630: return "Axis_toString";
  case 631: return "Axis_display";
  case 632: return "delete_Axis";
  case 633: return "new_RotationalInertiaRaw";
  case 634: return "RotationalInertiaRaw_Zero";
  case 635: return "delete_RotationalInertiaRaw";
  case 636: return "new_SpatialInertiaRaw";
  case 637: return "SpatialInertiaRaw_fromRotationalInertiaWrtCenterOfMass";
  case 638: return "SpatialInertiaRaw_getMass";
  case 639: return "SpatialInertiaRaw_getCenterOfMass";
  case 640: return "SpatialInertiaRaw_getRotationalInertiaWrtFrameOrigin";
  case 641: return "SpatialInertiaRaw_getRotationalInertiaWrtCenterOfMass";
  case 642: return "SpatialInertiaRaw_combine";
  case 643: return "SpatialInertiaRaw_multiply";
  case 644: return "SpatialInertiaRaw_zero";
  case 645: return "delete_SpatialInertiaRaw";
  case 646: return "new_SpatialInertia";
  case 647: return "SpatialInertia_combine";
  case 648: return "SpatialInertia_asMatrix";
  case 649: return "SpatialInertia_applyInverse";
  case 650: return "SpatialInertia_getInverse";
  case 651: return "SpatialInertia_plus";
  case 652: return "SpatialInertia_mtimes";
  case 653: return "SpatialInertia_biasWrench";
  case 654: return "SpatialInertia_biasWrenchDerivative";
  case 655: return "SpatialInertia_Zero";
  case 656: return "SpatialInertia_asVector";
  case 657: return "SpatialInertia_fromVector";
  case 658: return "SpatialInertia_isPhysicallyConsistent";
  case 659: return "SpatialInertia_momentumRegressor";
  case 660: return "SpatialInertia_momentumDerivativeRegressor";
  case 661: return "SpatialInertia_momentumDerivativeSlotineLiRegressor";
  case 662: return "delete_SpatialInertia";
  case 663: return "new_ArticulatedBodyInertia";
  case 664: return "ArticulatedBodyInertia_getLinearLinearSubmatrix";
  case 665: return "ArticulatedBodyInertia_getLinearAngularSubmatrix";
  case 666: return "ArticulatedBodyInertia_getAngularAngularSubmatrix";
  case 667: return "ArticulatedBodyInertia_combine";
  case 668: return "ArticulatedBodyInertia_applyInverse";
  case 669: return "ArticulatedBodyInertia_asMatrix";
  case 670: return "ArticulatedBodyInertia_getInverse";
  case 671: return "ArticulatedBodyInertia_plus";
  case 672: return "ArticulatedBodyInertia_minus";
  case 673: return "ArticulatedBodyInertia_mtimes";
  case 674: return "ArticulatedBodyInertia_zero";
  case 675: return "ArticulatedBodyInertia_ABADyadHelper";
  case 676: return "ArticulatedBodyInertia_ABADyadHelperLin";
  case 677: return "delete_ArticulatedBodyInertia";
  case 678: return "RigidBodyInertiaNonLinearParametrization_mass_get";
  case 679: return "RigidBodyInertiaNonLinearParametrization_mass_set";
  case 680: return "RigidBodyInertiaNonLinearParametrization_com_get";
  case 681: return "RigidBodyInertiaNonLinearParametrization_com_set";
  case 682: return "RigidBodyInertiaNonLinearParametrization_link_R_centroidal_get";
  case 683: return "RigidBodyInertiaNonLinearParametrization_link_R_centroidal_set";
  case 684: return "RigidBodyInertiaNonLinearParametrization_centralSecondMomentOfMass_get";
  case 685: return "RigidBodyInertiaNonLinearParametrization_centralSecondMomentOfMass_set";
  case 686: return "RigidBodyInertiaNonLinearParametrization_getLinkCentroidalTransform";
  case 687: return "RigidBodyInertiaNonLinearParametrization_fromRigidBodyInertia";
  case 688: return "RigidBodyInertiaNonLinearParametrization_fromInertialParameters";
  case 689: return "RigidBodyInertiaNonLinearParametrization_toRigidBodyInertia";
  case 690: return "RigidBodyInertiaNonLinearParametrization_isPhysicallyConsistent";
  case 691: return "RigidBodyInertiaNonLinearParametrization_asVectorWithRotationAsVec";
  case 692: return "RigidBodyInertiaNonLinearParametrization_fromVectorWithRotationAsVec";
  case 693: return "RigidBodyInertiaNonLinearParametrization_getGradientWithRotationAsVec";
  case 694: return "new_RigidBodyInertiaNonLinearParametrization";
  case 695: return "delete_RigidBodyInertiaNonLinearParametrization";
  case 696: return "new_RotationRaw";
  case 697: return "RotationRaw_changeOrientFrame";
  case 698: return "RotationRaw_changeRefOrientFrame";
  case 699: return "RotationRaw_compose";
  case 700: return "RotationRaw_inverse2";
  case 701: return "RotationRaw_changeCoordFrameOf";
  case 702: return "RotationRaw_RotX";
  case 703: return "RotationRaw_RotY";
  case 704: return "RotationRaw_RotZ";
  case 705: return "RotationRaw_RPY";
  case 706: return "RotationRaw_Identity";
  case 707: return "RotationRaw_toString";
  case 708: return "RotationRaw_display";
  case 709: return "delete_RotationRaw";
  case 710: return "new_RotationSemantics";
  case 711: return "RotationSemantics_setToUnknown";
  case 712: return "RotationSemantics_getOrientationFrame";
  case 713: return "RotationSemantics_getBody";
  case 714: return "RotationSemantics_getReferenceOrientationFrame";
  case 715: return "RotationSemantics_getRefBody";
  case 716: return "RotationSemantics_getCoordinateFrame";
  case 717: return "RotationSemantics_setOrientationFrame";
  case 718: return "RotationSemantics_setBody";
  case 719: return "RotationSemantics_setReferenceOrientationFrame";
  case 720: return "RotationSemantics_setRefBody";
  case 721: return "RotationSemantics_setCoordinateFrame";
  case 722: return "RotationSemantics_changeOrientFrame";
  case 723: return "RotationSemantics_changeRefOrientFrame";
  case 724: return "RotationSemantics_changeCoordFrameOf";
  case 725: return "RotationSemantics_compose";
  case 726: return "RotationSemantics_inverse2";
  case 727: return "RotationSemantics_toString";
  case 728: return "RotationSemantics_display";
  case 729: return "delete_RotationSemantics";
  case 730: return "new_Rotation";
  case 731: return "Rotation_getSemantics";
  case 732: return "Rotation_changeOrientFrame";
  case 733: return "Rotation_changeRefOrientFrame";
  case 734: return "Rotation_changeCoordinateFrame";
  case 735: return "Rotation_compose";
  case 736: return "Rotation_inverse2";
  case 737: return "Rotation_changeCoordFrameOf";
  case 738: return "Rotation_inverse";
  case 739: return "Rotation_mtimes";
  case 740: return "Rotation_log";
  case 741: return "Rotation_fromQuaternion";
  case 742: return "Rotation_getRPY";
  case 743: return "Rotation_asRPY";
  case 744: return "Rotation_getQuaternion";
  case 745: return "Rotation_asQuaternion";
  case 746: return "Rotation_RotX";
  case 747: return "Rotation_RotY";
  case 748: return "Rotation_RotZ";
  case 749: return "Rotation_RotAxis";
  case 750: return "Rotation_RotAxisDerivative";
  case 751: return "Rotation_RPY";
  case 752: return "Rotation_RPYRightTrivializedDerivative";
  case 753: return "Rotation_RPYRightTrivializedDerivativeInverse";
  case 754: return "Rotation_QuaternionRightTrivializedDerivative";
  case 755: return "Rotation_QuaternionRightTrivializedDerivativeInverse";
  case 756: return "Rotation_Identity";
  case 757: return "Rotation_RotationFromQuaternion";
  case 758: return "Rotation_toString";
  case 759: return "Rotation_display";
  case 760: return "delete_Rotation";
  case 761: return "new_TransformSemantics";
  case 762: return "TransformSemantics_getRotationSemantics";
  case 763: return "TransformSemantics_getPositionSemantics";
  case 764: return "TransformSemantics_setRotationSemantics";
  case 765: return "TransformSemantics_setPositionSemantics";
  case 766: return "TransformSemantics_toString";
  case 767: return "TransformSemantics_display";
  case 768: return "delete_TransformSemantics";
  case 769: return "new_Transform";
  case 770: return "Transform_getSemantics";
  case 771: return "Transform_getRotation";
  case 772: return "Transform_getPosition";
  case 773: return "Transform_setRotation";
  case 774: return "Transform_setPosition";
  case 775: return "Transform_compose";
  case 776: return "Transform_inverse2";
  case 777: return "Transform_inverse";
  case 778: return "Transform_mtimes";
  case 779: return "Transform_Identity";
  case 780: return "Transform_asHomogeneousTransform";
  case 781: return "Transform_asAdjointTransform";
  case 782: return "Transform_asAdjointTransformWrench";
  case 783: return "Transform_log";
  case 784: return "Transform_toString";
  case 785: return "Transform_display";
  case 786: return "delete_Transform";
  case 787: return "new_TransformDerivative";
  case 788: return "delete_TransformDerivative";
  case 789: return "TransformDerivative_getRotationDerivative";
  case 790: return "TransformDerivative_getPositionDerivative";
  case 791: return "TransformDerivative_setRotationDerivative";
  case 792: return "TransformDerivative_setPositionDerivative";
  case 793: return "TransformDerivative_Zero";
  case 794: return "TransformDerivative_asHomogeneousTransformDerivative";
  case 795: return "TransformDerivative_asAdjointTransformDerivative";
  case 796: return "TransformDerivative_asAdjointTransformWrenchDerivative";
  case 797: return "TransformDerivative_mtimes";
  case 798: return "TransformDerivative_derivativeOfInverse";
  case 799: return "TransformDerivative_transform";
  case 800: return "LINK_INVALID_INDEX_get";
  case 801: return "LINK_INVALID_INDEX_set";
  case 802: return "LINK_INVALID_NAME_get";
  case 803: return "LINK_INVALID_NAME_set";
  case 804: return "JOINT_INVALID_INDEX_get";
  case 805: return "JOINT_INVALID_INDEX_set";
  case 806: return "JOINT_INVALID_NAME_get";
  case 807: return "JOINT_INVALID_NAME_set";
  case 808: return "DOF_INVALID_INDEX_get";
  case 809: return "DOF_INVALID_INDEX_set";
  case 810: return "DOF_INVALID_NAME_get";
  case 811: return "DOF_INVALID_NAME_set";
  case 812: return "FRAME_INVALID_INDEX_get";
  case 813: return "FRAME_INVALID_INDEX_set";
  case 814: return "FRAME_INVALID_NAME_get";
  case 815: return "FRAME_INVALID_NAME_set";
  case 816: return "TRAVERSAL_INVALID_INDEX_get";
  case 817: return "TRAVERSAL_INVALID_INDEX_set";
  case 818: return "new_LinkPositions";
  case 819: return "LinkPositions_resize";
  case 820: return "LinkPositions_isConsistent";
  case 821: return "LinkPositions_getNrOfLinks";
  case 822: return "LinkPositions_paren";
  case 823: return "LinkPositions_toString";
  case 824: return "delete_LinkPositions";
  case 825: return "new_LinkWrenches";
  case 826: return "LinkWrenches_resize";
  case 827: return "LinkWrenches_isConsistent";
  case 828: return "LinkWrenches_getNrOfLinks";
  case 829: return "LinkWrenches_paren";
  case 830: return "LinkWrenches_toString";
  case 831: return "LinkWrenches_zero";
  case 832: return "delete_LinkWrenches";
  case 833: return "new_LinkInertias";
  case 834: return "LinkInertias_resize";
  case 835: return "LinkInertias_isConsistent";
  case 836: return "LinkInertias_paren";
  case 837: return "delete_LinkInertias";
  case 838: return "new_LinkArticulatedBodyInertias";
  case 839: return "LinkArticulatedBodyInertias_resize";
  case 840: return "LinkArticulatedBodyInertias_isConsistent";
  case 841: return "LinkArticulatedBodyInertias_paren";
  case 842: return "delete_LinkArticulatedBodyInertias";
  case 843: return "new_LinkVelArray";
  case 844: return "LinkVelArray_resize";
  case 845: return "LinkVelArray_isConsistent";
  case 846: return "LinkVelArray_getNrOfLinks";
  case 847: return "LinkVelArray_paren";
  case 848: return "LinkVelArray_toString";
  case 849: return "delete_LinkVelArray";
  case 850: return "new_LinkAccArray";
  case 851: return "LinkAccArray_resize";
  case 852: return "LinkAccArray_isConsistent";
  case 853: return "LinkAccArray_paren";
  case 854: return "LinkAccArray_getNrOfLinks";
  case 855: return "LinkAccArray_toString";
  case 856: return "delete_LinkAccArray";
  case 857: return "new_Link";
  case 858: return "Link_inertia";
  case 859: return "Link_setInertia";
  case 860: return "Link_getInertia";
  case 861: return "Link_setIndex";
  case 862: return "Link_getIndex";
  case 863: return "delete_Link";
  case 864: return "delete_IJoint";
  case 865: return "IJoint_clone";
  case 866: return "IJoint_getNrOfPosCoords";
  case 867: return "IJoint_getNrOfDOFs";
  case 868: return "IJoint_setAttachedLinks";
  case 869: return "IJoint_setRestTransform";
  case 870: return "IJoint_getFirstAttachedLink";
  case 871: return "IJoint_getSecondAttachedLink";
  case 872: return "IJoint_getRestTransform";
  case 873: return "IJoint_getTransform";
  case 874: return "IJoint_getTransformDerivative";
  case 875: return "IJoint_getMotionSubspaceVector";
  case 876: return "IJoint_computeChildPosVelAcc";
  case 877: return "IJoint_computeChildVelAcc";
  case 878: return "IJoint_computeChildVel";
  case 879: return "IJoint_computeChildAcc";
  case 880: return "IJoint_computeChildBiasAcc";
  case 881: return "IJoint_computeJointTorque";
  case 882: return "IJoint_setIndex";
  case 883: return "IJoint_getIndex";
  case 884: return "IJoint_setPosCoordsOffset";
  case 885: return "IJoint_getPosCoordsOffset";
  case 886: return "IJoint_setDOFsOffset";
  case 887: return "IJoint_getDOFsOffset";
  case 888: return "IJoint_hasPosLimits";
  case 889: return "IJoint_enablePosLimits";
  case 890: return "IJoint_getPosLimits";
  case 891: return "IJoint_getMinPosLimit";
  case 892: return "IJoint_getMaxPosLimit";
  case 893: return "IJoint_setPosLimits";
  case 894: return "IJoint_isRevoluteJoint";
  case 895: return "IJoint_isFixedJoint";
  case 896: return "IJoint_asRevoluteJoint";
  case 897: return "IJoint_asFixedJoint";
  case 898: return "delete_FixedJoint";
  case 899: return "FixedJoint_clone";
  case 900: return "FixedJoint_getNrOfPosCoords";
  case 901: return "FixedJoint_getNrOfDOFs";
  case 902: return "FixedJoint_setAttachedLinks";
  case 903: return "FixedJoint_setRestTransform";
  case 904: return "FixedJoint_getFirstAttachedLink";
  case 905: return "FixedJoint_getSecondAttachedLink";
  case 906: return "FixedJoint_getRestTransform";
  case 907: return "FixedJoint_getTransform";
  case 908: return "FixedJoint_getTransformDerivative";
  case 909: return "FixedJoint_getMotionSubspaceVector";
  case 910: return "FixedJoint_computeChildPosVelAcc";
  case 911: return "FixedJoint_computeChildVelAcc";
  case 912: return "FixedJoint_computeChildVel";
  case 913: return "FixedJoint_computeChildAcc";
  case 914: return "FixedJoint_computeChildBiasAcc";
  case 915: return "FixedJoint_computeJointTorque";
  case 916: return "FixedJoint_setIndex";
  case 917: return "FixedJoint_getIndex";
  case 918: return "FixedJoint_setPosCoordsOffset";
  case 919: return "FixedJoint_getPosCoordsOffset";
  case 920: return "FixedJoint_setDOFsOffset";
  case 921: return "FixedJoint_getDOFsOffset";
  case 922: return "FixedJoint_hasPosLimits";
  case 923: return "FixedJoint_enablePosLimits";
  case 924: return "FixedJoint_getPosLimits";
  case 925: return "FixedJoint_getMinPosLimit";
  case 926: return "FixedJoint_getMaxPosLimit";
  case 927: return "FixedJoint_setPosLimits";
  case 928: return "delete_MovableJointImpl1";
  case 929: return "MovableJointImpl1_getNrOfPosCoords";
  case 930: return "MovableJointImpl1_getNrOfDOFs";
  case 931: return "MovableJointImpl1_setIndex";
  case 932: return "MovableJointImpl1_getIndex";
  case 933: return "MovableJointImpl1_setPosCoordsOffset";
  case 934: return "MovableJointImpl1_getPosCoordsOffset";
  case 935: return "MovableJointImpl1_setDOFsOffset";
  case 936: return "MovableJointImpl1_getDOFsOffset";
  case 937: return "delete_MovableJointImpl2";
  case 938: return "MovableJointImpl2_getNrOfPosCoords";
  case 939: return "MovableJointImpl2_getNrOfDOFs";
  case 940: return "MovableJointImpl2_setIndex";
  case 941: return "MovableJointImpl2_getIndex";
  case 942: return "MovableJointImpl2_setPosCoordsOffset";
  case 943: return "MovableJointImpl2_getPosCoordsOffset";
  case 944: return "MovableJointImpl2_setDOFsOffset";
  case 945: return "MovableJointImpl2_getDOFsOffset";
  case 946: return "delete_MovableJointImpl3";
  case 947: return "MovableJointImpl3_getNrOfPosCoords";
  case 948: return "MovableJointImpl3_getNrOfDOFs";
  case 949: return "MovableJointImpl3_setIndex";
  case 950: return "MovableJointImpl3_getIndex";
  case 951: return "MovableJointImpl3_setPosCoordsOffset";
  case 952: return "MovableJointImpl3_getPosCoordsOffset";
  case 953: return "MovableJointImpl3_setDOFsOffset";
  case 954: return "MovableJointImpl3_getDOFsOffset";
  case 955: return "delete_MovableJointImpl4";
  case 956: return "MovableJointImpl4_getNrOfPosCoords";
  case 957: return "MovableJointImpl4_getNrOfDOFs";
  case 958: return "MovableJointImpl4_setIndex";
  case 959: return "MovableJointImpl4_getIndex";
  case 960: return "MovableJointImpl4_setPosCoordsOffset";
  case 961: return "MovableJointImpl4_getPosCoordsOffset";
  case 962: return "MovableJointImpl4_setDOFsOffset";
  case 963: return "MovableJointImpl4_getDOFsOffset";
  case 964: return "delete_MovableJointImpl5";
  case 965: return "MovableJointImpl5_getNrOfPosCoords";
  case 966: return "MovableJointImpl5_getNrOfDOFs";
  case 967: return "MovableJointImpl5_setIndex";
  case 968: return "MovableJointImpl5_getIndex";
  case 969: return "MovableJointImpl5_setPosCoordsOffset";
  case 970: return "MovableJointImpl5_getPosCoordsOffset";
  case 971: return "MovableJointImpl5_setDOFsOffset";
  case 972: return "MovableJointImpl5_getDOFsOffset";
  case 973: return "delete_MovableJointImpl6";
  case 974: return "MovableJointImpl6_getNrOfPosCoords";
  case 975: return "MovableJointImpl6_getNrOfDOFs";
  case 976: return "MovableJointImpl6_setIndex";
  case 977: return "MovableJointImpl6_getIndex";
  case 978: return "MovableJointImpl6_setPosCoordsOffset";
  case 979: return "MovableJointImpl6_getPosCoordsOffset";
  case 980: return "MovableJointImpl6_setDOFsOffset";
  case 981: return "MovableJointImpl6_getDOFsOffset";
  case 982: return "delete_RevoluteJoint";
  case 983: return "RevoluteJoint_clone";
  case 984: return "RevoluteJoint_setAttachedLinks";
  case 985: return "RevoluteJoint_setRestTransform";
  case 986: return "RevoluteJoint_setAxis";
  case 987: return "RevoluteJoint_getFirstAttachedLink";
  case 988: return "RevoluteJoint_getSecondAttachedLink";
  case 989: return "RevoluteJoint_getAxis";
  case 990: return "RevoluteJoint_getRestTransform";
  case 991: return "RevoluteJoint_getTransform";
  case 992: return "RevoluteJoint_getTransformDerivative";
  case 993: return "RevoluteJoint_getMotionSubspaceVector";
  case 994: return "RevoluteJoint_computeChildPosVelAcc";
  case 995: return "RevoluteJoint_computeChildVel";
  case 996: return "RevoluteJoint_computeChildVelAcc";
  case 997: return "RevoluteJoint_computeChildAcc";
  case 998: return "RevoluteJoint_computeChildBiasAcc";
  case 999: return "RevoluteJoint_computeJointTorque";
  case 1000: return "RevoluteJoint_hasPosLimits";
  case 1001: return "RevoluteJoint_enablePosLimits";
  case 1002: return "RevoluteJoint_getPosLimits";
  case 1003: return "RevoluteJoint_getMinPosLimit";
  case 1004: return "RevoluteJoint_getMaxPosLimit";
  case 1005: return "RevoluteJoint_setPosLimits";
  case 1006: return "new_Traversal";
  case 1007: return "delete_Traversal";
  case 1008: return "Traversal_getNrOfVisitedLinks";
  case 1009: return "Traversal_getLink";
  case 1010: return "Traversal_getBaseLink";
  case 1011: return "Traversal_getParentLink";
  case 1012: return "Traversal_getParentJoint";
  case 1013: return "Traversal_getParentLinkFromLinkIndex";
  case 1014: return "Traversal_getParentJointFromLinkIndex";
  case 1015: return "Traversal_getTraversalIndexFromLinkIndex";
  case 1016: return "Traversal_reset";
  case 1017: return "Traversal_addTraversalBase";
  case 1018: return "Traversal_addTraversalElement";
  case 1019: return "Traversal_isParentOf";
  case 1020: return "Traversal_getChildLinkIndexFromJointIndex";
  case 1021: return "Traversal_toString";
  case 1022: return "delete_SolidShape";
  case 1023: return "SolidShape_clone";
  case 1024: return "SolidShape_name_get";
  case 1025: return "SolidShape_name_set";
  case 1026: return "SolidShape_link_H_geometry_get";
  case 1027: return "SolidShape_link_H_geometry_set";
  case 1028: return "SolidShape_material_get";
  case 1029: return "SolidShape_material_set";
  case 1030: return "SolidShape_isSphere";
  case 1031: return "SolidShape_isBox";
  case 1032: return "SolidShape_isCylinder";
  case 1033: return "SolidShape_isExternalMesh";
  case 1034: return "SolidShape_asSphere";
  case 1035: return "SolidShape_asBox";
  case 1036: return "SolidShape_asCylinder";
  case 1037: return "SolidShape_asExternalMesh";
  case 1038: return "delete_Sphere";
  case 1039: return "Sphere_clone";
  case 1040: return "Sphere_radius_get";
  case 1041: return "Sphere_radius_set";
  case 1042: return "new_Sphere";
  case 1043: return "delete_Box";
  case 1044: return "Box_clone";
  case 1045: return "Box_x_get";
  case 1046: return "Box_x_set";
  case 1047: return "Box_y_get";
  case 1048: return "Box_y_set";
  case 1049: return "Box_z_get";
  case 1050: return "Box_z_set";
  case 1051: return "new_Box";
  case 1052: return "delete_Cylinder";
  case 1053: return "Cylinder_clone";
  case 1054: return "Cylinder_length_get";
  case 1055: return "Cylinder_length_set";
  case 1056: return "Cylinder_radius_get";
  case 1057: return "Cylinder_radius_set";
  case 1058: return "new_Cylinder";
  case 1059: return "delete_ExternalMesh";
  case 1060: return "ExternalMesh_clone";
  case 1061: return "ExternalMesh_filename_get";
  case 1062: return "ExternalMesh_filename_set";
  case 1063: return "ExternalMesh_scale_get";
  case 1064: return "ExternalMesh_scale_set";
  case 1065: return "new_ExternalMesh";
  case 1066: return "new_ModelSolidShapes";
  case 1067: return "ModelSolidShapes_clear";
  case 1068: return "delete_ModelSolidShapes";
  case 1069: return "ModelSolidShapes_resize";
  case 1070: return "ModelSolidShapes_isConsistent";
  case 1071: return "ModelSolidShapes_linkSolidShapes_get";
  case 1072: return "ModelSolidShapes_linkSolidShapes_set";
  case 1073: return "Neighbor_neighborLink_get";
  case 1074: return "Neighbor_neighborLink_set";
  case 1075: return "Neighbor_neighborJoint_get";
  case 1076: return "Neighbor_neighborJoint_set";
  case 1077: return "new_Neighbor";
  case 1078: return "delete_Neighbor";
  case 1079: return "new_Model";
  case 1080: return "Model_copy";
  case 1081: return "delete_Model";
  case 1082: return "Model_getNrOfLinks";
  case 1083: return "Model_getLinkName";
  case 1084: return "Model_getLinkIndex";
  case 1085: return "Model_isValidLinkIndex";
  case 1086: return "Model_getLink";
  case 1087: return "Model_addLink";
  case 1088: return "Model_getNrOfJoints";
  case 1089: return "Model_getJointName";
  case 1090: return "Model_getJointIndex";
  case 1091: return "Model_getJoint";
  case 1092: return "Model_isValidJointIndex";
  case 1093: return "Model_isLinkNameUsed";
  case 1094: return "Model_isJointNameUsed";
  case 1095: return "Model_isFrameNameUsed";
  case 1096: return "Model_addJoint";
  case 1097: return "Model_getNrOfPosCoords";
  case 1098: return "Model_getNrOfDOFs";
  case 1099: return "Model_getNrOfFrames";
  case 1100: return "Model_addAdditionalFrameToLink";
  case 1101: return "Model_getFrameName";
  case 1102: return "Model_getFrameIndex";
  case 1103: return "Model_isValidFrameIndex";
  case 1104: return "Model_getFrameTransform";
  case 1105: return "Model_getFrameLink";
  case 1106: return "Model_getNrOfNeighbors";
  case 1107: return "Model_getNeighbor";
  case 1108: return "Model_setDefaultBaseLink";
  case 1109: return "Model_getDefaultBaseLink";
  case 1110: return "Model_computeFullTreeTraversal";
  case 1111: return "Model_getInertialParameters";
  case 1112: return "Model_updateInertialParameters";
  case 1113: return "Model_visualSolidShapes";
  case 1114: return "Model_collisionSolidShapes";
  case 1115: return "Model_toString";
  case 1116: return "new_JointPosDoubleArray";
  case 1117: return "JointPosDoubleArray_resize";
  case 1118: return "JointPosDoubleArray_isConsistent";
  case 1119: return "delete_JointPosDoubleArray";
  case 1120: return "new_JointDOFsDoubleArray";
  case 1121: return "JointDOFsDoubleArray_resize";
  case 1122: return "JointDOFsDoubleArray_isConsistent";
  case 1123: return "delete_JointDOFsDoubleArray";
  case 1124: return "new_DOFSpatialForceArray";
  case 1125: return "DOFSpatialForceArray_resize";
  case 1126: return "DOFSpatialForceArray_isConsistent";
  case 1127: return "DOFSpatialForceArray_paren";
  case 1128: return "delete_DOFSpatialForceArray";
  case 1129: return "new_DOFSpatialMotionArray";
  case 1130: return "DOFSpatialMotionArray_resize";
  case 1131: return "DOFSpatialMotionArray_isConsistent";
  case 1132: return "DOFSpatialMotionArray_paren";
  case 1133: return "delete_DOFSpatialMotionArray";
  case 1134: return "new_FrameFreeFloatingJacobian";
  case 1135: return "FrameFreeFloatingJacobian_resize";
  case 1136: return "FrameFreeFloatingJacobian_isConsistent";
  case 1137: return "delete_FrameFreeFloatingJacobian";
  case 1138: return "new_MomentumFreeFloatingJacobian";
  case 1139: return "MomentumFreeFloatingJacobian_resize";
  case 1140: return "MomentumFreeFloatingJacobian_isConsistent";
  case 1141: return "delete_MomentumFreeFloatingJacobian";
  case 1142: return "new_FreeFloatingMassMatrix";
  case 1143: return "FreeFloatingMassMatrix_resize";
  case 1144: return "delete_FreeFloatingMassMatrix";
  case 1145: return "new_FreeFloatingPos";
  case 1146: return "FreeFloatingPos_resize";
  case 1147: return "FreeFloatingPos_worldBasePos";
  case 1148: return "FreeFloatingPos_jointPos";
  case 1149: return "FreeFloatingPos_getNrOfPosCoords";
  case 1150: return "delete_FreeFloatingPos";
  case 1151: return "new_FreeFloatingGeneralizedTorques";
  case 1152: return "FreeFloatingGeneralizedTorques_resize";
  case 1153: return "FreeFloatingGeneralizedTorques_baseWrench";
  case 1154: return "FreeFloatingGeneralizedTorques_jointTorques";
  case 1155: return "FreeFloatingGeneralizedTorques_getNrOfDOFs";
  case 1156: return "delete_FreeFloatingGeneralizedTorques";
  case 1157: return "new_FreeFloatingVel";
  case 1158: return "FreeFloatingVel_resize";
  case 1159: return "FreeFloatingVel_baseVel";
  case 1160: return "FreeFloatingVel_jointVel";
  case 1161: return "FreeFloatingVel_getNrOfDOFs";
  case 1162: return "delete_FreeFloatingVel";
  case 1163: return "new_FreeFloatingAcc";
  case 1164: return "FreeFloatingAcc_resize";
  case 1165: return "FreeFloatingAcc_baseAcc";
  case 1166: return "FreeFloatingAcc_jointAcc";
  case 1167: return "FreeFloatingAcc_getNrOfDOFs";
  case 1168: return "delete_FreeFloatingAcc";
  case 1169: return "ContactWrench_contactId";
  case 1170: return "ContactWrench_contactPoint";
  case 1171: return "ContactWrench_contactWrench";
  case 1172: return "new_ContactWrench";
  case 1173: return "delete_ContactWrench";
  case 1174: return "new_LinkContactWrenches";
  case 1175: return "LinkContactWrenches_resize";
  case 1176: return "LinkContactWrenches_getNrOfContactsForLink";
  case 1177: return "LinkContactWrenches_setNrOfContactsForLink";
  case 1178: return "LinkContactWrenches_getNrOfLinks";
  case 1179: return "LinkContactWrenches_contactWrench";
  case 1180: return "LinkContactWrenches_computeNetWrenches";
  case 1181: return "LinkContactWrenches_toString";
  case 1182: return "delete_LinkContactWrenches";
  case 1183: return "_wrap_ForwardPositionKinematics";
  case 1184: return "_wrap_ForwardVelAccKinematics";
  case 1185: return "_wrap_ForwardPosVelAccKinematics";
  case 1186: return "_wrap_ForwardPosVelKinematics";
  case 1187: return "_wrap_ForwardAccKinematics";
  case 1188: return "_wrap_ForwardBiasAccKinematics";
  case 1189: return "_wrap_ComputeLinearAndAngularMomentum";
  case 1190: return "_wrap_ComputeLinearAndAngularMomentumDerivativeBias";
  case 1191: return "_wrap_RNEADynamicPhase";
  case 1192: return "_wrap_CompositeRigidBodyAlgorithm";
  case 1193: return "new_ArticulatedBodyAlgorithmInternalBuffers";
  case 1194: return "ArticulatedBodyAlgorithmInternalBuffers_resize";
  case 1195: return "ArticulatedBodyAlgorithmInternalBuffers_isConsistent";
  case 1196: return "ArticulatedBodyAlgorithmInternalBuffers_S_get";
  case 1197: return "ArticulatedBodyAlgorithmInternalBuffers_S_set";
  case 1198: return "ArticulatedBodyAlgorithmInternalBuffers_U_get";
  case 1199: return "ArticulatedBodyAlgorithmInternalBuffers_U_set";
  case 1200: return "ArticulatedBodyAlgorithmInternalBuffers_D_get";
  case 1201: return "ArticulatedBodyAlgorithmInternalBuffers_D_set";
  case 1202: return "ArticulatedBodyAlgorithmInternalBuffers_u_get";
  case 1203: return "ArticulatedBodyAlgorithmInternalBuffers_u_set";
  case 1204: return "ArticulatedBodyAlgorithmInternalBuffers_linksVel_get";
  case 1205: return "ArticulatedBodyAlgorithmInternalBuffers_linksVel_set";
  case 1206: return "ArticulatedBodyAlgorithmInternalBuffers_linksBiasAcceleration_get";
  case 1207: return "ArticulatedBodyAlgorithmInternalBuffers_linksBiasAcceleration_set";
  case 1208: return "ArticulatedBodyAlgorithmInternalBuffers_linksAccelerations_get";
  case 1209: return "ArticulatedBodyAlgorithmInternalBuffers_linksAccelerations_set";
  case 1210: return "ArticulatedBodyAlgorithmInternalBuffers_linkABIs_get";
  case 1211: return "ArticulatedBodyAlgorithmInternalBuffers_linkABIs_set";
  case 1212: return "ArticulatedBodyAlgorithmInternalBuffers_linksBiasWrench_get";
  case 1213: return "ArticulatedBodyAlgorithmInternalBuffers_linksBiasWrench_set";
  case 1214: return "delete_ArticulatedBodyAlgorithmInternalBuffers";
  case 1215: return "_wrap_ArticulatedBodyAlgorithm";
  case 1216: return "NR_OF_SENSOR_TYPES_get";
  case 1217: return "_wrap_isLinkSensor";
  case 1218: return "_wrap_isJointSensor";
  case 1219: return "_wrap_getSensorTypeSize";
  case 1220: return "delete_Sensor";
  case 1221: return "Sensor_getName";
  case 1222: return "Sensor_getSensorType";
  case 1223: return "Sensor_isValid";
  case 1224: return "Sensor_setName";
  case 1225: return "Sensor_clone";
  case 1226: return "Sensor_updateIndices";
  case 1227: return "Sensor_updateIndeces";
  case 1228: return "delete_JointSensor";
  case 1229: return "JointSensor_getParentJoint";
  case 1230: return "JointSensor_getParentJointIndex";
  case 1231: return "JointSensor_setParentJoint";
  case 1232: return "JointSensor_setParentJointIndex";
  case 1233: return "delete_LinkSensor";
  case 1234: return "LinkSensor_getParentLink";
  case 1235: return "LinkSensor_getParentLinkIndex";
  case 1236: return "LinkSensor_getLinkSensorTransform";
  case 1237: return "LinkSensor_setParentLink";
  case 1238: return "LinkSensor_setParentLinkIndex";
  case 1239: return "LinkSensor_setLinkSensorTransform";
  case 1240: return "new_SensorsList";
  case 1241: return "delete_SensorsList";
  case 1242: return "SensorsList_addSensor";
  case 1243: return "SensorsList_setSerialization";
  case 1244: return "SensorsList_getSerialization";
  case 1245: return "SensorsList_getNrOfSensors";
  case 1246: return "SensorsList_getSensorIndex";
  case 1247: return "SensorsList_getSizeOfAllSensorsMeasurements";
  case 1248: return "SensorsList_getSensor";
  case 1249: return "SensorsList_removeSensor";
  case 1250: return "SensorsList_removeAllSensorsOfType";
  case 1251: return "SensorsList_getSixAxisForceTorqueSensor";
  case 1252: return "SensorsList_getAccelerometerSensor";
  case 1253: return "SensorsList_getGyroscopeSensor";
  case 1254: return "new_SensorsMeasurements";
  case 1255: return "delete_SensorsMeasurements";
  case 1256: return "SensorsMeasurements_setNrOfSensors";
  case 1257: return "SensorsMeasurements_getNrOfSensors";
  case 1258: return "SensorsMeasurements_resize";
  case 1259: return "SensorsMeasurements_toVector";
  case 1260: return "SensorsMeasurements_setMeasurement";
  case 1261: return "SensorsMeasurements_getMeasurement";
  case 1262: return "SensorsMeasurements_getSizeOfAllSensorsMeasurements";
  case 1263: return "new_SixAxisForceTorqueSensor";
  case 1264: return "delete_SixAxisForceTorqueSensor";
  case 1265: return "SixAxisForceTorqueSensor_setName";
  case 1266: return "SixAxisForceTorqueSensor_setFirstLinkSensorTransform";
  case 1267: return "SixAxisForceTorqueSensor_setSecondLinkSensorTransform";
  case 1268: return "SixAxisForceTorqueSensor_getFirstLinkIndex";
  case 1269: return "SixAxisForceTorqueSensor_getSecondLinkIndex";
  case 1270: return "SixAxisForceTorqueSensor_setFirstLinkName";
  case 1271: return "SixAxisForceTorqueSensor_setSecondLinkName";
  case 1272: return "SixAxisForceTorqueSensor_getFirstLinkName";
  case 1273: return "SixAxisForceTorqueSensor_getSecondLinkName";
  case 1274: return "SixAxisForceTorqueSensor_setParentJoint";
  case 1275: return "SixAxisForceTorqueSensor_setParentJointIndex";
  case 1276: return "SixAxisForceTorqueSensor_setAppliedWrenchLink";
  case 1277: return "SixAxisForceTorqueSensor_getName";
  case 1278: return "SixAxisForceTorqueSensor_getSensorType";
  case 1279: return "SixAxisForceTorqueSensor_getParentJoint";
  case 1280: return "SixAxisForceTorqueSensor_getParentJointIndex";
  case 1281: return "SixAxisForceTorqueSensor_isValid";
  case 1282: return "SixAxisForceTorqueSensor_clone";
  case 1283: return "SixAxisForceTorqueSensor_updateIndices";
  case 1284: return "SixAxisForceTorqueSensor_updateIndeces";
  case 1285: return "SixAxisForceTorqueSensor_getAppliedWrenchLink";
  case 1286: return "SixAxisForceTorqueSensor_isLinkAttachedToSensor";
  case 1287: return "SixAxisForceTorqueSensor_getLinkSensorTransform";
  case 1288: return "SixAxisForceTorqueSensor_getWrenchAppliedOnLink";
  case 1289: return "SixAxisForceTorqueSensor_getWrenchAppliedOnLinkMatrix";
  case 1290: return "SixAxisForceTorqueSensor_getWrenchAppliedOnLinkInverseMatrix";
  case 1291: return "SixAxisForceTorqueSensor_predictMeasurement";
  case 1292: return "SixAxisForceTorqueSensor_toString";
  case 1293: return "new_AccelerometerSensor";
  case 1294: return "delete_AccelerometerSensor";
  case 1295: return "AccelerometerSensor_setName";
  case 1296: return "AccelerometerSensor_setLinkSensorTransform";
  case 1297: return "AccelerometerSensor_setParentLink";
  case 1298: return "AccelerometerSensor_setParentLinkIndex";
  case 1299: return "AccelerometerSensor_getName";
  case 1300: return "AccelerometerSensor_getSensorType";
  case 1301: return "AccelerometerSensor_getParentLink";
  case 1302: return "AccelerometerSensor_getParentLinkIndex";
  case 1303: return "AccelerometerSensor_getLinkSensorTransform";
  case 1304: return "AccelerometerSensor_isValid";
  case 1305: return "AccelerometerSensor_clone";
  case 1306: return "AccelerometerSensor_updateIndices";
  case 1307: return "AccelerometerSensor_updateIndeces";
  case 1308: return "AccelerometerSensor_predictMeasurement";
  case 1309: return "new_GyroscopeSensor";
  case 1310: return "delete_GyroscopeSensor";
  case 1311: return "GyroscopeSensor_setName";
  case 1312: return "GyroscopeSensor_setLinkSensorTransform";
  case 1313: return "GyroscopeSensor_setParentLink";
  case 1314: return "GyroscopeSensor_setParentLinkIndex";
  case 1315: return "GyroscopeSensor_getName";
  case 1316: return "GyroscopeSensor_getSensorType";
  case 1317: return "GyroscopeSensor_getParentLink";
  case 1318: return "GyroscopeSensor_getParentLinkIndex";
  case 1319: return "GyroscopeSensor_getLinkSensorTransform";
  case 1320: return "GyroscopeSensor_isValid";
  case 1321: return "GyroscopeSensor_clone";
  case 1322: return "GyroscopeSensor_updateIndices";
  case 1323: return "GyroscopeSensor_updateIndeces";
  case 1324: return "GyroscopeSensor_predictMeasurement";
  case 1325: return "_wrap_predictSensorsMeasurements";
  case 1326: return "_wrap_predictSensorsMeasurementsFromRawBuffers";
  case 1327: return "URDFParserOptions_addSensorFramesAsAdditionalFrames_get";
  case 1328: return "URDFParserOptions_addSensorFramesAsAdditionalFrames_set";
  case 1329: return "URDFParserOptions_originalFilename_get";
  case 1330: return "URDFParserOptions_originalFilename_set";
  case 1331: return "new_URDFParserOptions";
  case 1332: return "delete_URDFParserOptions";
  case 1333: return "_wrap_modelFromURDF";
  case 1334: return "_wrap_modelFromURDFString";
  case 1335: return "_wrap_dofsListFromURDF";
  case 1336: return "_wrap_dofsListFromURDFString";
  case 1337: return "_wrap_sensorsFromURDF";
  case 1338: return "_wrap_sensorsFromURDFString";
  case 1339: return "new_ModelLoader";
  case 1340: return "ModelLoader_loadModelFromString";
  case 1341: return "ModelLoader_loadModelFromFile";
  case 1342: return "ModelLoader_loadReducedModelFromFullModel";
  case 1343: return "ModelLoader_loadReducedModelFromString";
  case 1344: return "ModelLoader_loadReducedModelFromFile";
  case 1345: return "ModelLoader_model";
  case 1346: return "ModelLoader_sensors";
  case 1347: return "ModelLoader_isValid";
  case 1348: return "delete_ModelLoader";
  case 1349: return "new_UnknownWrenchContact";
  case 1350: return "UnknownWrenchContact_unknownType_get";
  case 1351: return "UnknownWrenchContact_unknownType_set";
  case 1352: return "UnknownWrenchContact_contactPoint_get";
  case 1353: return "UnknownWrenchContact_contactPoint_set";
  case 1354: return "UnknownWrenchContact_forceDirection_get";
  case 1355: return "UnknownWrenchContact_forceDirection_set";
  case 1356: return "UnknownWrenchContact_knownWrench_get";
  case 1357: return "UnknownWrenchContact_knownWrench_set";
  case 1358: return "UnknownWrenchContact_contactId_get";
  case 1359: return "UnknownWrenchContact_contactId_set";
  case 1360: return "delete_UnknownWrenchContact";
  case 1361: return "new_LinkUnknownWrenchContacts";
  case 1362: return "LinkUnknownWrenchContacts_clear";
  case 1363: return "LinkUnknownWrenchContacts_resize";
  case 1364: return "LinkUnknownWrenchContacts_getNrOfContactsForLink";
  case 1365: return "LinkUnknownWrenchContacts_setNrOfContactsForLink";
  case 1366: return "LinkUnknownWrenchContacts_addNewContactForLink";
  case 1367: return "LinkUnknownWrenchContacts_addNewContactInFrame";
  case 1368: return "LinkUnknownWrenchContacts_addNewUnknownFullWrenchInFrameOrigin";
  case 1369: return "LinkUnknownWrenchContacts_contactWrench";
  case 1370: return "LinkUnknownWrenchContacts_toString";
  case 1371: return "delete_LinkUnknownWrenchContacts";
  case 1372: return "new_estimateExternalWrenchesBuffers";
  case 1373: return "estimateExternalWrenchesBuffers_resize";
  case 1374: return "estimateExternalWrenchesBuffers_getNrOfSubModels";
  case 1375: return "estimateExternalWrenchesBuffers_getNrOfLinks";
  case 1376: return "estimateExternalWrenchesBuffers_isConsistent";
  case 1377: return "estimateExternalWrenchesBuffers_A_get";
  case 1378: return "estimateExternalWrenchesBuffers_A_set";
  case 1379: return "estimateExternalWrenchesBuffers_x_get";
  case 1380: return "estimateExternalWrenchesBuffers_x_set";
  case 1381: return "estimateExternalWrenchesBuffers_b_get";
  case 1382: return "estimateExternalWrenchesBuffers_b_set";
  case 1383: return "estimateExternalWrenchesBuffers_pinvA_get";
  case 1384: return "estimateExternalWrenchesBuffers_pinvA_set";
  case 1385: return "estimateExternalWrenchesBuffers_b_contacts_subtree_get";
  case 1386: return "estimateExternalWrenchesBuffers_b_contacts_subtree_set";
  case 1387: return "estimateExternalWrenchesBuffers_subModelBase_H_link_get";
  case 1388: return "estimateExternalWrenchesBuffers_subModelBase_H_link_set";
  case 1389: return "delete_estimateExternalWrenchesBuffers";
  case 1390: return "_wrap_estimateExternalWrenchesWithoutInternalFT";
  case 1391: return "_wrap_estimateExternalWrenches";
  case 1392: return "_wrap_dynamicsEstimationForwardVelAccKinematics";
  case 1393: return "_wrap_dynamicsEstimationForwardVelKinematics";
  case 1394: return "_wrap_computeLinkNetWrenchesWithoutGravity";
  case 1395: return "new_ExtWrenchesAndJointTorquesEstimator";
  case 1396: return "delete_ExtWrenchesAndJointTorquesEstimator";
  case 1397: return "ExtWrenchesAndJointTorquesEstimator_setModelAndSensors";
  case 1398: return "ExtWrenchesAndJointTorquesEstimator_loadModelAndSensorsFromFile";
  case 1399: return "ExtWrenchesAndJointTorquesEstimator_loadModelAndSensorsFromFileWithSpecifiedDOFs";
  case 1400: return "ExtWrenchesAndJointTorquesEstimator_model";
  case 1401: return "ExtWrenchesAndJointTorquesEstimator_sensors";
  case 1402: return "ExtWrenchesAndJointTorquesEstimator_submodels";
  case 1403: return "ExtWrenchesAndJointTorquesEstimator_updateKinematicsFromFloatingBase";
  case 1404: return "ExtWrenchesAndJointTorquesEstimator_updateKinematicsFromFixedBase";
  case 1405: return "ExtWrenchesAndJointTorquesEstimator_computeExpectedFTSensorsMeasurements";
  case 1406: return "ExtWrenchesAndJointTorquesEstimator_estimateExtWrenchesAndJointTorques";
  case 1407: return "ExtWrenchesAndJointTorquesEstimator_checkThatTheModelIsStill";
  case 1408: return "ExtWrenchesAndJointTorquesEstimator_estimateLinkNetWrenchesWithoutGravity";
  case 1409: return "new_SimpleLeggedOdometry";
  case 1410: return "delete_SimpleLeggedOdometry";
  case 1411: return "SimpleLeggedOdometry_setModel";
  case 1412: return "SimpleLeggedOdometry_loadModelFromFile";
  case 1413: return "SimpleLeggedOdometry_loadModelFromFileWithSpecifiedDOFs";
  case 1414: return "SimpleLeggedOdometry_model";
  case 1415: return "SimpleLeggedOdometry_updateKinematics";
  case 1416: return "SimpleLeggedOdometry_init";
  case 1417: return "SimpleLeggedOdometry_changeFixedFrame";
  case 1418: return "SimpleLeggedOdometry_getCurrentFixedLink";
  case 1419: return "SimpleLeggedOdometry_getWorldLinkTransform";
  case 1420: return "_wrap_isLinkBerdyDynamicVariable";
  case 1421: return "_wrap_isJointBerdyDynamicVariable";
  case 1422: return "_wrap_isDOFBerdyDynamicVariable";
  case 1423: return "new_BerdyOptions";
  case 1424: return "BerdyOptions_berdyVariant_get";
  case 1425: return "BerdyOptions_berdyVariant_set";
  case 1426: return "BerdyOptions_includeAllNetExternalWrenchesAsDynamicVariables_get";
  case 1427: return "BerdyOptions_includeAllNetExternalWrenchesAsDynamicVariables_set";
  case 1428: return "BerdyOptions_includeAllJointAccelerationsAsSensors_get";
  case 1429: return "BerdyOptions_includeAllJointAccelerationsAsSensors_set";
  case 1430: return "BerdyOptions_includeAllJointTorquesAsSensors_get";
  case 1431: return "BerdyOptions_includeAllJointTorquesAsSensors_set";
  case 1432: return "BerdyOptions_includeAllNetExternalWrenchesAsSensors_get";
  case 1433: return "BerdyOptions_includeAllNetExternalWrenchesAsSensors_set";
  case 1434: return "BerdyOptions_includeFixedBaseExternalWrench_get";
  case 1435: return "BerdyOptions_includeFixedBaseExternalWrench_set";
  case 1436: return "BerdyOptions_jointOnWhichTheInternalWrenchIsMeasured_get";
  case 1437: return "BerdyOptions_jointOnWhichTheInternalWrenchIsMeasured_set";
  case 1438: return "BerdyOptions_baseLink_get";
  case 1439: return "BerdyOptions_baseLink_set";
  case 1440: return "BerdyOptions_checkConsistency";
  case 1441: return "delete_BerdyOptions";
  case 1442: return "BerdySensor_type_get";
  case 1443: return "BerdySensor_type_set";
  case 1444: return "BerdySensor_id_get";
  case 1445: return "BerdySensor_id_set";
  case 1446: return "BerdySensor_range_get";
  case 1447: return "BerdySensor_range_set";
  case 1448: return "BerdySensor_eq";
  case 1449: return "BerdySensor_lt";
  case 1450: return "new_BerdySensor";
  case 1451: return "delete_BerdySensor";
  case 1452: return "BerdyDynamicVariable_type_get";
  case 1453: return "BerdyDynamicVariable_type_set";
  case 1454: return "BerdyDynamicVariable_id_get";
  case 1455: return "BerdyDynamicVariable_id_set";
  case 1456: return "BerdyDynamicVariable_range_get";
  case 1457: return "BerdyDynamicVariable_range_set";
  case 1458: return "BerdyDynamicVariable_eq";
  case 1459: return "BerdyDynamicVariable_lt";
  case 1460: return "new_BerdyDynamicVariable";
  case 1461: return "delete_BerdyDynamicVariable";
  case 1462: return "new_BerdyHelper";
  case 1463: return "BerdyHelper_dynamicTraversal";
  case 1464: return "BerdyHelper_model";
  case 1465: return "BerdyHelper_sensors";
  case 1466: return "BerdyHelper_init";
  case 1467: return "BerdyHelper_getOptions";
  case 1468: return "BerdyHelper_getNrOfDynamicVariables";
  case 1469: return "BerdyHelper_getNrOfDynamicEquations";
  case 1470: return "BerdyHelper_getNrOfSensorsMeasurements";
  case 1471: return "BerdyHelper_resizeAndZeroBerdyMatrices";
  case 1472: return "BerdyHelper_getBerdyMatrices";
  case 1473: return "BerdyHelper_getSensorsOrdering";
  case 1474: return "BerdyHelper_getDynamicVariablesOrdering";
  case 1475: return "BerdyHelper_serializeDynamicVariables";
  case 1476: return "BerdyHelper_serializeSensorVariables";
  case 1477: return "BerdyHelper_serializeDynamicVariablesComputedFromFixedBaseRNEA";
  case 1478: return "BerdyHelper_updateKinematicsFromFloatingBase";
  case 1479: return "BerdyHelper_updateKinematicsFromFixedBase";
  case 1480: return "BerdyHelper_updateKinematicsFromTraversalFixedBase";
  case 1481: return "delete_BerdyHelper";
  case 1482: return "DynamicsRegressorParameter_category_get";
  case 1483: return "DynamicsRegressorParameter_category_set";
  case 1484: return "DynamicsRegressorParameter_elemIndex_get";
  case 1485: return "DynamicsRegressorParameter_elemIndex_set";
  case 1486: return "DynamicsRegressorParameter_type_get";
  case 1487: return "DynamicsRegressorParameter_type_set";
  case 1488: return "DynamicsRegressorParameter_lt";
  case 1489: return "DynamicsRegressorParameter_eq";
  case 1490: return "DynamicsRegressorParameter_ne";
  case 1491: return "new_DynamicsRegressorParameter";
  case 1492: return "delete_DynamicsRegressorParameter";
  case 1493: return "DynamicsRegressorParametersList_parameters_get";
  case 1494: return "DynamicsRegressorParametersList_parameters_set";
  case 1495: return "DynamicsRegressorParametersList_getDescriptionOfParameter";
  case 1496: return "DynamicsRegressorParametersList_addParam";
  case 1497: return "DynamicsRegressorParametersList_addList";
  case 1498: return "DynamicsRegressorParametersList_findParam";
  case 1499: return "DynamicsRegressorParametersList_getNrOfParameters";
  case 1500: return "new_DynamicsRegressorParametersList";
  case 1501: return "delete_DynamicsRegressorParametersList";
  case 1502: return "new_DynamicsRegressorGenerator";
  case 1503: return "delete_DynamicsRegressorGenerator";
  case 1504: return "DynamicsRegressorGenerator_loadRobotAndSensorsModelFromFile";
  case 1505: return "DynamicsRegressorGenerator_loadRobotAndSensorsModelFromString";
  case 1506: return "DynamicsRegressorGenerator_loadRegressorStructureFromFile";
  case 1507: return "DynamicsRegressorGenerator_loadRegressorStructureFromString";
  case 1508: return "DynamicsRegressorGenerator_isValid";
  case 1509: return "DynamicsRegressorGenerator_getNrOfParameters";
  case 1510: return "DynamicsRegressorGenerator_getNrOfOutputs";
  case 1511: return "DynamicsRegressorGenerator_getNrOfDegreesOfFreedom";
  case 1512: return "DynamicsRegressorGenerator_getDescriptionOfParameter";
  case 1513: return "DynamicsRegressorGenerator_getDescriptionOfParameters";
  case 1514: return "DynamicsRegressorGenerator_getDescriptionOfOutput";
  case 1515: return "DynamicsRegressorGenerator_getDescriptionOfOutputs";
  case 1516: return "DynamicsRegressorGenerator_getDescriptionOfDegreeOfFreedom";
  case 1517: return "DynamicsRegressorGenerator_getDescriptionOfDegreesOfFreedom";
  case 1518: return "DynamicsRegressorGenerator_getDescriptionOfLink";
  case 1519: return "DynamicsRegressorGenerator_getDescriptionOfLinks";
  case 1520: return "DynamicsRegressorGenerator_getNrOfLinks";
  case 1521: return "DynamicsRegressorGenerator_getNrOfFakeLinks";
  case 1522: return "DynamicsRegressorGenerator_getBaseLinkName";
  case 1523: return "DynamicsRegressorGenerator_getSensorsModel";
  case 1524: return "DynamicsRegressorGenerator_setRobotState";
  case 1525: return "DynamicsRegressorGenerator_getSensorsMeasurements";
  case 1526: return "DynamicsRegressorGenerator_setTorqueSensorMeasurement";
  case 1527: return "DynamicsRegressorGenerator_computeRegressor";
  case 1528: return "DynamicsRegressorGenerator_getModelParameters";
  case 1529: return "DynamicsRegressorGenerator_computeFloatingBaseIdentifiableSubspace";
  case 1530: return "DynamicsRegressorGenerator_computeFixedBaseIdentifiableSubspace";
  case 1531: return "DynamicsRegressorGenerator_generate_random_regressors";
  case 1532: return "new_KinDynComputations";
  case 1533: return "delete_KinDynComputations";
  case 1534: return "KinDynComputations_loadRobotModel";
  case 1535: return "KinDynComputations_loadRobotModelFromFile";
  case 1536: return "KinDynComputations_loadRobotModelFromString";
  case 1537: return "KinDynComputations_isValid";
  case 1538: return "KinDynComputations_setFrameVelocityRepresentation";
  case 1539: return "KinDynComputations_getFrameVelocityRepresentation";
  case 1540: return "KinDynComputations_getNrOfDegreesOfFreedom";
  case 1541: return "KinDynComputations_getDescriptionOfDegreeOfFreedom";
  case 1542: return "KinDynComputations_getDescriptionOfDegreesOfFreedom";
  case 1543: return "KinDynComputations_getNrOfLinks";
  case 1544: return "KinDynComputations_getNrOfFrames";
  case 1545: return "KinDynComputations_getFloatingBase";
  case 1546: return "KinDynComputations_setFloatingBase";
  case 1547: return "KinDynComputations_model";
  case 1548: return "KinDynComputations_getRobotModel";
  case 1549: return "KinDynComputations_setJointPos";
  case 1550: return "KinDynComputations_setRobotState";
  case 1551: return "KinDynComputations_getRobotState";
  case 1552: return "KinDynComputations_getWorldBaseTransform";
  case 1553: return "KinDynComputations_getBaseTwist";
  case 1554: return "KinDynComputations_getJointPos";
  case 1555: return "KinDynComputations_getJointVel";
  case 1556: return "KinDynComputations_getModelVel";
  case 1557: return "KinDynComputations_getFrameIndex";
  case 1558: return "KinDynComputations_getFrameName";
  case 1559: return "KinDynComputations_getWorldTransform";
  case 1560: return "KinDynComputations_getRelativeTransformExplicit";
  case 1561: return "KinDynComputations_getRelativeTransform";
  case 1562: return "KinDynComputations_getFrameVel";
  case 1563: return "KinDynComputations_getFrameFreeFloatingJacobian";
  case 1564: return "KinDynComputations_getRelativeJacobian";
  case 1565: return "KinDynComputations_getRelativeJacobianExplicit";
  case 1566: return "KinDynComputations_getFrameBiasAcc";
  case 1567: return "KinDynComputations_getCenterOfMassPosition";
  case 1568: return "KinDynComputations_getCenterOfMassVelocity";
  case 1569: return "KinDynComputations_getCenterOfMassJacobian";
  case 1570: return "KinDynComputations_getCenterOfMassBiasAcc";
  case 1571: return "KinDynComputations_getAverageVelocity";
  case 1572: return "KinDynComputations_getAverageVelocityJacobian";
  case 1573: return "KinDynComputations_getCentroidalAverageVelocity";
  case 1574: return "KinDynComputations_getCentroidalAverageVelocityJacobian";
  case 1575: return "KinDynComputations_getLinearAngularMomentum";
  case 1576: return "KinDynComputations_getLinearAngularMomentumJacobian";
  case 1577: return "KinDynComputations_getCentroidalTotalMomentum";
  case 1578: return "KinDynComputations_getFreeFloatingMassMatrix";
  case 1579: return "KinDynComputations_inverseDynamics";
  case 1580: return "KinDynComputations_generalizedBiasForces";
  case 1581: return "KinDynComputations_generalizedGravityForces";
  case 1582: return "delete_ICamera";
  case 1583: return "ICamera_setPosition";
  case 1584: return "ICamera_setTarget";
  case 1585: return "ICamera_setUpVector";
  case 1586: return "ColorViz_r_get";
  case 1587: return "ColorViz_r_set";
  case 1588: return "ColorViz_g_get";
  case 1589: return "ColorViz_g_set";
  case 1590: return "ColorViz_b_get";
  case 1591: return "ColorViz_b_set";
  case 1592: return "ColorViz_a_get";
  case 1593: return "ColorViz_a_set";
  case 1594: return "new_ColorViz";
  case 1595: return "delete_ColorViz";
  case 1596: return "delete_ILight";
  case 1597: return "ILight_getName";
  case 1598: return "ILight_setType";
  case 1599: return "ILight_getType";
  case 1600: return "ILight_setPosition";
  case 1601: return "ILight_getPosition";
  case 1602: return "ILight_setDirection";
  case 1603: return "ILight_getDirection";
  case 1604: return "ILight_setAmbientColor";
  case 1605: return "ILight_getAmbientColor";
  case 1606: return "ILight_setSpecularColor";
  case 1607: return "ILight_getSpecularColor";
  case 1608: return "ILight_setDiffuseColor";
  case 1609: return "ILight_getDiffuseColor";
  case 1610: return "delete_IEnvironment";
  case 1611: return "IEnvironment_getElements";
  case 1612: return "IEnvironment_setElementVisibility";
  case 1613: return "IEnvironment_setBackgroundColor";
  case 1614: return "IEnvironment_setAmbientLight";
  case 1615: return "IEnvironment_getLights";
  case 1616: return "IEnvironment_addLight";
  case 1617: return "IEnvironment_lightViz";
  case 1618: return "IEnvironment_removeLight";
  case 1619: return "delete_IJetsVisualization";
  case 1620: return "IJetsVisualization_setJetsFrames";
  case 1621: return "IJetsVisualization_getNrOfJets";
  case 1622: return "IJetsVisualization_getJetDirection";
  case 1623: return "IJetsVisualization_setJetDirection";
  case 1624: return "IJetsVisualization_setJetColor";
  case 1625: return "IJetsVisualization_setJetsDimensions";
  case 1626: return "IJetsVisualization_setJetsIntensity";
  case 1627: return "delete_IModelVisualization";
  case 1628: return "IModelVisualization_setPositions";
  case 1629: return "IModelVisualization_setLinkPositions";
  case 1630: return "IModelVisualization_model";
  case 1631: return "IModelVisualization_getInstanceName";
  case 1632: return "IModelVisualization_setModelVisibility";
  case 1633: return "IModelVisualization_setModelColor";
  case 1634: return "IModelVisualization_resetModelColor";
  case 1635: return "IModelVisualization_getLinkNames";
  case 1636: return "IModelVisualization_setLinkVisibility";
  case 1637: return "IModelVisualization_getFeatures";
  case 1638: return "IModelVisualization_setFeatureVisibility";
  case 1639: return "IModelVisualization_jets";
  case 1640: return "VisualizerOptions_verbose_get";
  case 1641: return "VisualizerOptions_verbose_set";
  case 1642: return "VisualizerOptions_winWidth_get";
  case 1643: return "VisualizerOptions_winWidth_set";
  case 1644: return "VisualizerOptions_winHeight_get";
  case 1645: return "VisualizerOptions_winHeight_set";
  case 1646: return "VisualizerOptions_rootFrameArrowsDimension_get";
  case 1647: return "VisualizerOptions_rootFrameArrowsDimension_set";
  case 1648: return "new_VisualizerOptions";
  case 1649: return "delete_VisualizerOptions";
  case 1650: return "new_Visualizer";
  case 1651: return "delete_Visualizer";
  case 1652: return "Visualizer_init";
  case 1653: return "Visualizer_getNrOfVisualizedModels";
  case 1654: return "Visualizer_getModelInstanceName";
  case 1655: return "Visualizer_getModelInstanceIndex";
  case 1656: return "Visualizer_addModel";
  case 1657: return "Visualizer_modelViz";
  case 1658: return "Visualizer_camera";
  case 1659: return "Visualizer_enviroment";
  case 1660: return "Visualizer_run";
  case 1661: return "Visualizer_draw";
  case 1662: return "Visualizer_drawToFile";
  case 1663: return "Visualizer_close";
  case 1664: return "new_DynamicsComputations";
  case 1665: return "delete_DynamicsComputations";
  case 1666: return "DynamicsComputations_loadRobotModelFromFile";
  case 1667: return "DynamicsComputations_loadRobotModelFromString";
  case 1668: return "DynamicsComputations_isValid";
  case 1669: return "DynamicsComputations_getNrOfDegreesOfFreedom";
  case 1670: return "DynamicsComputations_getDescriptionOfDegreeOfFreedom";
  case 1671: return "DynamicsComputations_getDescriptionOfDegreesOfFreedom";
  case 1672: return "DynamicsComputations_getNrOfLinks";
  case 1673: return "DynamicsComputations_getNrOfFrames";
  case 1674: return "DynamicsComputations_getFloatingBase";
  case 1675: return "DynamicsComputations_setFloatingBase";
  case 1676: return "DynamicsComputations_setRobotState";
  case 1677: return "DynamicsComputations_getWorldBaseTransform";
  case 1678: return "DynamicsComputations_getBaseTwist";
  case 1679: return "DynamicsComputations_getJointPos";
  case 1680: return "DynamicsComputations_getJointVel";
  case 1681: return "DynamicsComputations_getFrameIndex";
  case 1682: return "DynamicsComputations_getFrameName";
  case 1683: return "DynamicsComputations_getWorldTransform";
  case 1684: return "DynamicsComputations_getRelativeTransform";
  case 1685: return "DynamicsComputations_getFrameTwist";
  case 1686: return "DynamicsComputations_getFrameTwistInWorldOrient";
  case 1687: return "DynamicsComputations_getFrameProperSpatialAcceleration";
  case 1688: return "DynamicsComputations_getLinkIndex";
  case 1689: return "DynamicsComputations_getLinkInertia";
  case 1690: return "DynamicsComputations_getJointIndex";
  case 1691: return "DynamicsComputations_getJointName";
  case 1692: return "DynamicsComputations_getJointLimits";
  case 1693: return "DynamicsComputations_inverseDynamics";
  case 1694: return "DynamicsComputations_getFreeFloatingMassMatrix";
  case 1695: return "DynamicsComputations_getFrameJacobian";
  case 1696: return "DynamicsComputations_getDynamicsRegressor";
  case 1697: return "DynamicsComputations_getModelDynamicsParameters";
  case 1698: return "DynamicsComputations_getCenterOfMass";
  case 1699: return "DynamicsComputations_getCenterOfMassJacobian";
  default: return 0;
  }
}

SWIGINTERN int swigFunctionName(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc!=1 || !mxIsDouble(*argv) || mxGetNumberOfElements(*argv)!=1) {
    SWIG_Error(SWIG_RuntimeError, "This mex file should only be called from inside the .m files generated by SWIG. The input should be the function ID.");
    return 1;
  }
  if (resc!=1) {
    SWIG_Error(SWIG_RuntimeError, "The function should have one output.");
    return 1;
  }
  int fcn_id = (int)mxGetScalar(*argv);
  const char* s = SwigFunctionName(fcn_id);
  if (s==0) {
    SWIG_Error(SWIG_RuntimeError, "No such function ID.");
    return 1;
  }
  *resv = mxCreateString(s);
  return 0;
}

SWIGINTERN int swigThis(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc!=1 || resc!=1) {
    SWIG_Error(SWIG_RuntimeError, "swigThis should have one input and one output.");
    return 1;
  }
  SwigPtr* swig_ptr = SWIG_Matlab_getSwigPtr(argv[0]);
  if (!swig_ptr) {
    SWIG_Error(SWIG_RuntimeError, "The argument should be a SWIG class.");
    return 1;
  }
  resv[0] = mxCreateNumericMatrix(1, 1, mxUINT64_CLASS, mxREAL);
  *(uint64_T *)mxGetData(resv[0]) = (uint64_T)swig_ptr->ptr;
  return 0;
}

SWIGINTERN int swigTouch(int resc, mxArray** SWIGUNUSEDPARM(resv), int argc, mxArray** SWIGUNUSEDPARM(argv)) {
  if (argc!=0 || resc!=0) {
    SWIG_Error(SWIG_RuntimeError, "swigTouch should have no inputs or outputs.");
    return 1;
  }
  return 0;
}

extern "C"
void mexFunction(int resc, mxArray *resv[], int argc, const mxArray *argv[]) {
  /* Initialize module if first call */
  SWIG_Matlab_LoadModule();

  if (--argc < 0 || !mxIsDouble(*argv) || mxGetNumberOfElements(*argv)!=1)
    mexErrMsgTxt("This mex file should only be called from inside the .m files generated by SWIG. First input should be the function ID .");
  int fcn_id = (int)mxGetScalar(*argv++);
  int flag=0;
  switch (fcn_id) {
  case 0: flag=swigConstant(resc,resv,argc,(mxArray**)(argv)); break;
  case 1: flag=swigFunctionName(resc,resv,argc,(mxArray**)(argv)); break;
  case 2: flag=swigConstantName(resc,resv,argc,(mxArray**)(argv)); break;
  case 3: flag=swigThis(resc,resv,argc,(mxArray**)(argv)); break;
  case 4: flag=swigTouch(resc,resv,argc,(mxArray**)(argv)); break;
  case 5: flag=_wrap_delete_MatlabSwigIterator(resc,resv,argc,(mxArray**)(argv)); break;
  case 6: flag=_wrap_MatlabSwigIterator_value(resc,resv,argc,(mxArray**)(argv)); break;
  case 7: flag=_wrap_MatlabSwigIterator_incr(resc,resv,argc,(mxArray**)(argv)); break;
  case 8: flag=_wrap_MatlabSwigIterator_decr(resc,resv,argc,(mxArray**)(argv)); break;
  case 9: flag=_wrap_MatlabSwigIterator_distance(resc,resv,argc,(mxArray**)(argv)); break;
  case 10: flag=_wrap_MatlabSwigIterator_equal(resc,resv,argc,(mxArray**)(argv)); break;
  case 11: flag=_wrap_MatlabSwigIterator_copy(resc,resv,argc,(mxArray**)(argv)); break;
  case 12: flag=_wrap_MatlabSwigIterator_next(resc,resv,argc,(mxArray**)(argv)); break;
  case 13: flag=_wrap_MatlabSwigIterator_previous(resc,resv,argc,(mxArray**)(argv)); break;
  case 14: flag=_wrap_MatlabSwigIterator_advance(resc,resv,argc,(mxArray**)(argv)); break;
  case 15: flag=_wrap_MatlabSwigIterator_eq(resc,resv,argc,(mxArray**)(argv)); break;
  case 16: flag=_wrap_MatlabSwigIterator_ne(resc,resv,argc,(mxArray**)(argv)); break;
  case 17: flag=_wrap_MatlabSwigIterator_TODOincr(resc,resv,argc,(mxArray**)(argv)); break;
  case 18: flag=_wrap_MatlabSwigIterator_TODOdecr(resc,resv,argc,(mxArray**)(argv)); break;
  case 19: flag=_wrap_MatlabSwigIterator_plus(resc,resv,argc,(mxArray**)(argv)); break;
  case 20: flag=_wrap_MatlabSwigIterator_minus(resc,resv,argc,(mxArray**)(argv)); break;
  case 21: flag=_wrap_StringVector_pop(resc,resv,argc,(mxArray**)(argv)); break;
  case 22: flag=_wrap_StringVector_brace(resc,resv,argc,(mxArray**)(argv)); break;
  case 23: flag=_wrap_StringVector_setbrace(resc,resv,argc,(mxArray**)(argv)); break;
  case 24: flag=_wrap_StringVector_append(resc,resv,argc,(mxArray**)(argv)); break;
  case 25: flag=_wrap_StringVector_empty(resc,resv,argc,(mxArray**)(argv)); break;
  case 26: flag=_wrap_StringVector_size(resc,resv,argc,(mxArray**)(argv)); break;
  case 27: flag=_wrap_StringVector_swap(resc,resv,argc,(mxArray**)(argv)); break;
  case 28: flag=_wrap_StringVector_begin(resc,resv,argc,(mxArray**)(argv)); break;
  case 29: flag=_wrap_StringVector_end(resc,resv,argc,(mxArray**)(argv)); break;
  case 30: flag=_wrap_StringVector_rbegin(resc,resv,argc,(mxArray**)(argv)); break;
  case 31: flag=_wrap_StringVector_rend(resc,resv,argc,(mxArray**)(argv)); break;
  case 32: flag=_wrap_StringVector_clear(resc,resv,argc,(mxArray**)(argv)); break;
  case 33: flag=_wrap_StringVector_get_allocator(resc,resv,argc,(mxArray**)(argv)); break;
  case 34: flag=_wrap_StringVector_pop_back(resc,resv,argc,(mxArray**)(argv)); break;
  case 35: flag=_wrap_StringVector_erase(resc,resv,argc,(mxArray**)(argv)); break;
  case 36: flag=_wrap_new_StringVector(resc,resv,argc,(mxArray**)(argv)); break;
  case 37: flag=_wrap_StringVector_push_back(resc,resv,argc,(mxArray**)(argv)); break;
  case 38: flag=_wrap_StringVector_front(resc,resv,argc,(mxArray**)(argv)); break;
  case 39: flag=_wrap_StringVector_back(resc,resv,argc,(mxArray**)(argv)); break;
  case 40: flag=_wrap_StringVector_assign(resc,resv,argc,(mxArray**)(argv)); break;
  case 41: flag=_wrap_StringVector_resize(resc,resv,argc,(mxArray**)(argv)); break;
  case 42: flag=_wrap_StringVector_insert(resc,resv,argc,(mxArray**)(argv)); break;
  case 43: flag=_wrap_StringVector_reserve(resc,resv,argc,(mxArray**)(argv)); break;
  case 44: flag=_wrap_StringVector_capacity(resc,resv,argc,(mxArray**)(argv)); break;
  case 45: flag=_wrap_delete_StringVector(resc,resv,argc,(mxArray**)(argv)); break;
  case 46: flag=_wrap_BerdySensors_pop(resc,resv,argc,(mxArray**)(argv)); break;
  case 47: flag=_wrap_BerdySensors_brace(resc,resv,argc,(mxArray**)(argv)); break;
  case 48: flag=_wrap_BerdySensors_setbrace(resc,resv,argc,(mxArray**)(argv)); break;
  case 49: flag=_wrap_BerdySensors_append(resc,resv,argc,(mxArray**)(argv)); break;
  case 50: flag=_wrap_BerdySensors_empty(resc,resv,argc,(mxArray**)(argv)); break;
  case 51: flag=_wrap_BerdySensors_size(resc,resv,argc,(mxArray**)(argv)); break;
  case 52: flag=_wrap_BerdySensors_swap(resc,resv,argc,(mxArray**)(argv)); break;
  case 53: flag=_wrap_BerdySensors_begin(resc,resv,argc,(mxArray**)(argv)); break;
  case 54: flag=_wrap_BerdySensors_end(resc,resv,argc,(mxArray**)(argv)); break;
  case 55: flag=_wrap_BerdySensors_rbegin(resc,resv,argc,(mxArray**)(argv)); break;
  case 56: flag=_wrap_BerdySensors_rend(resc,resv,argc,(mxArray**)(argv)); break;
  case 57: flag=_wrap_BerdySensors_clear(resc,resv,argc,(mxArray**)(argv)); break;
  case 58: flag=_wrap_BerdySensors_get_allocator(resc,resv,argc,(mxArray**)(argv)); break;
  case 59: flag=_wrap_BerdySensors_pop_back(resc,resv,argc,(mxArray**)(argv)); break;
  case 60: flag=_wrap_BerdySensors_erase(resc,resv,argc,(mxArray**)(argv)); break;
  case 61: flag=_wrap_new_BerdySensors(resc,resv,argc,(mxArray**)(argv)); break;
  case 62: flag=_wrap_BerdySensors_push_back(resc,resv,argc,(mxArray**)(argv)); break;
  case 63: flag=_wrap_BerdySensors_front(resc,resv,argc,(mxArray**)(argv)); break;
  case 64: flag=_wrap_BerdySensors_back(resc,resv,argc,(mxArray**)(argv)); break;
  case 65: flag=_wrap_BerdySensors_assign(resc,resv,argc,(mxArray**)(argv)); break;
  case 66: flag=_wrap_BerdySensors_resize(resc,resv,argc,(mxArray**)(argv)); break;
  case 67: flag=_wrap_BerdySensors_insert(resc,resv,argc,(mxArray**)(argv)); break;
  case 68: flag=_wrap_BerdySensors_reserve(resc,resv,argc,(mxArray**)(argv)); break;
  case 69: flag=_wrap_BerdySensors_capacity(resc,resv,argc,(mxArray**)(argv)); break;
  case 70: flag=_wrap_delete_BerdySensors(resc,resv,argc,(mxArray**)(argv)); break;
  case 71: flag=_wrap_BerdyDynamicVariables_pop(resc,resv,argc,(mxArray**)(argv)); break;
  case 72: flag=_wrap_BerdyDynamicVariables_brace(resc,resv,argc,(mxArray**)(argv)); break;
  case 73: flag=_wrap_BerdyDynamicVariables_setbrace(resc,resv,argc,(mxArray**)(argv)); break;
  case 74: flag=_wrap_BerdyDynamicVariables_append(resc,resv,argc,(mxArray**)(argv)); break;
  case 75: flag=_wrap_BerdyDynamicVariables_empty(resc,resv,argc,(mxArray**)(argv)); break;
  case 76: flag=_wrap_BerdyDynamicVariables_size(resc,resv,argc,(mxArray**)(argv)); break;
  case 77: flag=_wrap_BerdyDynamicVariables_swap(resc,resv,argc,(mxArray**)(argv)); break;
  case 78: flag=_wrap_BerdyDynamicVariables_begin(resc,resv,argc,(mxArray**)(argv)); break;
  case 79: flag=_wrap_BerdyDynamicVariables_end(resc,resv,argc,(mxArray**)(argv)); break;
  case 80: flag=_wrap_BerdyDynamicVariables_rbegin(resc,resv,argc,(mxArray**)(argv)); break;
  case 81: flag=_wrap_BerdyDynamicVariables_rend(resc,resv,argc,(mxArray**)(argv)); break;
  case 82: flag=_wrap_BerdyDynamicVariables_clear(resc,resv,argc,(mxArray**)(argv)); break;
  case 83: flag=_wrap_BerdyDynamicVariables_get_allocator(resc,resv,argc,(mxArray**)(argv)); break;
  case 84: flag=_wrap_BerdyDynamicVariables_pop_back(resc,resv,argc,(mxArray**)(argv)); break;
  case 85: flag=_wrap_BerdyDynamicVariables_erase(resc,resv,argc,(mxArray**)(argv)); break;
  case 86: flag=_wrap_new_BerdyDynamicVariables(resc,resv,argc,(mxArray**)(argv)); break;
  case 87: flag=_wrap_BerdyDynamicVariables_push_back(resc,resv,argc,(mxArray**)(argv)); break;
  case 88: flag=_wrap_BerdyDynamicVariables_front(resc,resv,argc,(mxArray**)(argv)); break;
  case 89: flag=_wrap_BerdyDynamicVariables_back(resc,resv,argc,(mxArray**)(argv)); break;
  case 90: flag=_wrap_BerdyDynamicVariables_assign(resc,resv,argc,(mxArray**)(argv)); break;
  case 91: flag=_wrap_BerdyDynamicVariables_resize(resc,resv,argc,(mxArray**)(argv)); break;
  case 92: flag=_wrap_BerdyDynamicVariables_insert(resc,resv,argc,(mxArray**)(argv)); break;
  case 93: flag=_wrap_BerdyDynamicVariables_reserve(resc,resv,argc,(mxArray**)(argv)); break;
  case 94: flag=_wrap_BerdyDynamicVariables_capacity(resc,resv,argc,(mxArray**)(argv)); break;
  case 95: flag=_wrap_delete_BerdyDynamicVariables(resc,resv,argc,(mxArray**)(argv)); break;
  case 96: flag=_wrap_IndexRange_offset_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 97: flag=_wrap_IndexRange_offset_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 98: flag=_wrap_IndexRange_size_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 99: flag=_wrap_IndexRange_size_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 100: flag=_wrap_IndexRange_isValid(resc,resv,argc,(mxArray**)(argv)); break;
  case 101: flag=_wrap_IndexRange_InvalidRange(resc,resv,argc,(mxArray**)(argv)); break;
  case 102: flag=_wrap_new_IndexRange(resc,resv,argc,(mxArray**)(argv)); break;
  case 103: flag=_wrap_delete_IndexRange(resc,resv,argc,(mxArray**)(argv)); break;
  case 104: flag=_wrap_new_MatrixDynSize(resc,resv,argc,(mxArray**)(argv)); break;
  case 105: flag=_wrap_delete_MatrixDynSize(resc,resv,argc,(mxArray**)(argv)); break;
  case 106: flag=_wrap_MatrixDynSize_paren(resc,resv,argc,(mxArray**)(argv)); break;
  case 107: flag=_wrap_MatrixDynSize_getVal(resc,resv,argc,(mxArray**)(argv)); break;
  case 108: flag=_wrap_MatrixDynSize_setVal(resc,resv,argc,(mxArray**)(argv)); break;
  case 109: flag=_wrap_MatrixDynSize_rows(resc,resv,argc,(mxArray**)(argv)); break;
  case 110: flag=_wrap_MatrixDynSize_cols(resc,resv,argc,(mxArray**)(argv)); break;
  case 111: flag=_wrap_MatrixDynSize_data(resc,resv,argc,(mxArray**)(argv)); break;
  case 112: flag=_wrap_MatrixDynSize_zero(resc,resv,argc,(mxArray**)(argv)); break;
  case 113: flag=_wrap_MatrixDynSize_resize(resc,resv,argc,(mxArray**)(argv)); break;
  case 114: flag=_wrap_MatrixDynSize_reserve(resc,resv,argc,(mxArray**)(argv)); break;
  case 115: flag=_wrap_MatrixDynSize_capacity(resc,resv,argc,(mxArray**)(argv)); break;
  case 116: flag=_wrap_MatrixDynSize_shrink_to_fit(resc,resv,argc,(mxArray**)(argv)); break;
  case 117: flag=_wrap_MatrixDynSize_fillRowMajorBuffer(resc,resv,argc,(mxArray**)(argv)); break;
  case 118: flag=_wrap_MatrixDynSize_fillColMajorBuffer(resc,resv,argc,(mxArray**)(argv)); break;
  case 119: flag=_wrap_MatrixDynSize_toString(resc,resv,argc,(mxArray**)(argv)); break;
  case 120: flag=_wrap_MatrixDynSize_display(resc,resv,argc,(mxArray**)(argv)); break;
  case 121: flag=_wrap_MatrixDynSize_toMatlab(resc,resv,argc,(mxArray**)(argv)); break;
  case 122: flag=_wrap_MatrixDynSize_fromMatlab(resc,resv,argc,(mxArray**)(argv)); break;
  case 123: flag=_wrap_new_SparseMatrix(resc,resv,argc,(mxArray**)(argv)); break;
  case 124: flag=_wrap_delete_SparseMatrix(resc,resv,argc,(mxArray**)(argv)); break;
  case 125: flag=_wrap_SparseMatrix_numberOfNonZeros(resc,resv,argc,(mxArray**)(argv)); break;
  case 126: flag=_wrap_SparseMatrix_nonZeroElementsForRowAtIndex(resc,resv,argc,(mxArray**)(argv)); break;
  case 127: flag=_wrap_SparseMatrix_resize(resc,resv,argc,(mxArray**)(argv)); break;
  case 128: flag=_wrap_SparseMatrix_reserve(resc,resv,argc,(mxArray**)(argv)); break;
  case 129: flag=_wrap_SparseMatrix_zero(resc,resv,argc,(mxArray**)(argv)); break;
  case 130: flag=_wrap_SparseMatrix_setFromConstTriplets(resc,resv,argc,(mxArray**)(argv)); break;
  case 131: flag=_wrap_SparseMatrix_setFromTriplets(resc,resv,argc,(mxArray**)(argv)); break;
  case 132: flag=_wrap_SparseMatrix_getValue(resc,resv,argc,(mxArray**)(argv)); break;
  case 133: flag=_wrap_SparseMatrix_setValue(resc,resv,argc,(mxArray**)(argv)); break;
  case 134: flag=_wrap_SparseMatrix_rows(resc,resv,argc,(mxArray**)(argv)); break;
  case 135: flag=_wrap_SparseMatrix_columns(resc,resv,argc,(mxArray**)(argv)); break;
  case 136: flag=_wrap_SparseMatrix_innerIndecesBuffer(resc,resv,argc,(mxArray**)(argv)); break;
  case 137: flag=_wrap_SparseMatrix_outerIndecesBuffer(resc,resv,argc,(mxArray**)(argv)); break;
  case 138: flag=_wrap_SparseMatrix_description(resc,resv,argc,(mxArray**)(argv)); break;
  case 139: flag=_wrap_SparseMatrix_convertFromColumnMajor(resc,resv,argc,(mxArray**)(argv)); break;
  case 140: flag=_wrap_SparseMatrix_toMatlab(resc,resv,argc,(mxArray**)(argv)); break;
  case 141: flag=_wrap_SparseMatrix_toMatlabDense(resc,resv,argc,(mxArray**)(argv)); break;
  case 142: flag=_wrap_SparseMatrix_fromMatlab(resc,resv,argc,(mxArray**)(argv)); break;
  case 143: flag=_wrap_new_VectorDynSize(resc,resv,argc,(mxArray**)(argv)); break;
  case 144: flag=_wrap_delete_VectorDynSize(resc,resv,argc,(mxArray**)(argv)); break;
  case 145: flag=_wrap_VectorDynSize_paren(resc,resv,argc,(mxArray**)(argv)); break;
  case 146: flag=_wrap_VectorDynSize_getVal(resc,resv,argc,(mxArray**)(argv)); break;
  case 147: flag=_wrap_VectorDynSize_setVal(resc,resv,argc,(mxArray**)(argv)); break;
  case 148: flag=_wrap_VectorDynSize_size(resc,resv,argc,(mxArray**)(argv)); break;
  case 149: flag=_wrap_VectorDynSize_data(resc,resv,argc,(mxArray**)(argv)); break;
  case 150: flag=_wrap_VectorDynSize_zero(resc,resv,argc,(mxArray**)(argv)); break;
  case 151: flag=_wrap_VectorDynSize_reserve(resc,resv,argc,(mxArray**)(argv)); break;
  case 152: flag=_wrap_VectorDynSize_resize(resc,resv,argc,(mxArray**)(argv)); break;
  case 153: flag=_wrap_VectorDynSize_shrink_to_fit(resc,resv,argc,(mxArray**)(argv)); break;
  case 154: flag=_wrap_VectorDynSize_capacity(resc,resv,argc,(mxArray**)(argv)); break;
  case 155: flag=_wrap_VectorDynSize_fillBuffer(resc,resv,argc,(mxArray**)(argv)); break;
  case 156: flag=_wrap_VectorDynSize_toString(resc,resv,argc,(mxArray**)(argv)); break;
  case 157: flag=_wrap_VectorDynSize_display(resc,resv,argc,(mxArray**)(argv)); break;
  case 158: flag=_wrap_VectorDynSize_toMatlab(resc,resv,argc,(mxArray**)(argv)); break;
  case 159: flag=_wrap_VectorDynSize_fromMatlab(resc,resv,argc,(mxArray**)(argv)); break;
  case 160: flag=_wrap_new_Matrix1x6(resc,resv,argc,(mxArray**)(argv)); break;
  case 161: flag=_wrap_Matrix1x6_paren(resc,resv,argc,(mxArray**)(argv)); break;
  case 162: flag=_wrap_Matrix1x6_getVal(resc,resv,argc,(mxArray**)(argv)); break;
  case 163: flag=_wrap_Matrix1x6_setVal(resc,resv,argc,(mxArray**)(argv)); break;
  case 164: flag=_wrap_Matrix1x6_rows(resc,resv,argc,(mxArray**)(argv)); break;
  case 165: flag=_wrap_Matrix1x6_cols(resc,resv,argc,(mxArray**)(argv)); break;
  case 166: flag=_wrap_Matrix1x6_data(resc,resv,argc,(mxArray**)(argv)); break;
  case 167: flag=_wrap_Matrix1x6_zero(resc,resv,argc,(mxArray**)(argv)); break;
  case 168: flag=_wrap_Matrix1x6_fillRowMajorBuffer(resc,resv,argc,(mxArray**)(argv)); break;
  case 169: flag=_wrap_Matrix1x6_fillColMajorBuffer(resc,resv,argc,(mxArray**)(argv)); break;
  case 170: flag=_wrap_Matrix1x6_toString(resc,resv,argc,(mxArray**)(argv)); break;
  case 171: flag=_wrap_Matrix1x6_display(resc,resv,argc,(mxArray**)(argv)); break;
  case 172: flag=_wrap_Matrix1x6_toMatlab(resc,resv,argc,(mxArray**)(argv)); break;
  case 173: flag=_wrap_Matrix1x6_fromMatlab(resc,resv,argc,(mxArray**)(argv)); break;
  case 174: flag=_wrap_delete_Matrix1x6(resc,resv,argc,(mxArray**)(argv)); break;
  case 175: flag=_wrap_new_Matrix2x3(resc,resv,argc,(mxArray**)(argv)); break;
  case 176: flag=_wrap_Matrix2x3_paren(resc,resv,argc,(mxArray**)(argv)); break;
  case 177: flag=_wrap_Matrix2x3_getVal(resc,resv,argc,(mxArray**)(argv)); break;
  case 178: flag=_wrap_Matrix2x3_setVal(resc,resv,argc,(mxArray**)(argv)); break;
  case 179: flag=_wrap_Matrix2x3_rows(resc,resv,argc,(mxArray**)(argv)); break;
  case 180: flag=_wrap_Matrix2x3_cols(resc,resv,argc,(mxArray**)(argv)); break;
  case 181: flag=_wrap_Matrix2x3_data(resc,resv,argc,(mxArray**)(argv)); break;
  case 182: flag=_wrap_Matrix2x3_zero(resc,resv,argc,(mxArray**)(argv)); break;
  case 183: flag=_wrap_Matrix2x3_fillRowMajorBuffer(resc,resv,argc,(mxArray**)(argv)); break;
  case 184: flag=_wrap_Matrix2x3_fillColMajorBuffer(resc,resv,argc,(mxArray**)(argv)); break;
  case 185: flag=_wrap_Matrix2x3_toString(resc,resv,argc,(mxArray**)(argv)); break;
  case 186: flag=_wrap_Matrix2x3_display(resc,resv,argc,(mxArray**)(argv)); break;
  case 187: flag=_wrap_Matrix2x3_toMatlab(resc,resv,argc,(mxArray**)(argv)); break;
  case 188: flag=_wrap_Matrix2x3_fromMatlab(resc,resv,argc,(mxArray**)(argv)); break;
  case 189: flag=_wrap_delete_Matrix2x3(resc,resv,argc,(mxArray**)(argv)); break;
  case 190: flag=_wrap_new_Matrix3x3(resc,resv,argc,(mxArray**)(argv)); break;
  case 191: flag=_wrap_Matrix3x3_paren(resc,resv,argc,(mxArray**)(argv)); break;
  case 192: flag=_wrap_Matrix3x3_getVal(resc,resv,argc,(mxArray**)(argv)); break;
  case 193: flag=_wrap_Matrix3x3_setVal(resc,resv,argc,(mxArray**)(argv)); break;
  case 194: flag=_wrap_Matrix3x3_rows(resc,resv,argc,(mxArray**)(argv)); break;
  case 195: flag=_wrap_Matrix3x3_cols(resc,resv,argc,(mxArray**)(argv)); break;
  case 196: flag=_wrap_Matrix3x3_data(resc,resv,argc,(mxArray**)(argv)); break;
  case 197: flag=_wrap_Matrix3x3_zero(resc,resv,argc,(mxArray**)(argv)); break;
  case 198: flag=_wrap_Matrix3x3_fillRowMajorBuffer(resc,resv,argc,(mxArray**)(argv)); break;
  case 199: flag=_wrap_Matrix3x3_fillColMajorBuffer(resc,resv,argc,(mxArray**)(argv)); break;
  case 200: flag=_wrap_Matrix3x3_toString(resc,resv,argc,(mxArray**)(argv)); break;
  case 201: flag=_wrap_Matrix3x3_display(resc,resv,argc,(mxArray**)(argv)); break;
  case 202: flag=_wrap_Matrix3x3_toMatlab(resc,resv,argc,(mxArray**)(argv)); break;
  case 203: flag=_wrap_Matrix3x3_fromMatlab(resc,resv,argc,(mxArray**)(argv)); break;
  case 204: flag=_wrap_delete_Matrix3x3(resc,resv,argc,(mxArray**)(argv)); break;
  case 205: flag=_wrap_new_Matrix4x4(resc,resv,argc,(mxArray**)(argv)); break;
  case 206: flag=_wrap_Matrix4x4_paren(resc,resv,argc,(mxArray**)(argv)); break;
  case 207: flag=_wrap_Matrix4x4_getVal(resc,resv,argc,(mxArray**)(argv)); break;
  case 208: flag=_wrap_Matrix4x4_setVal(resc,resv,argc,(mxArray**)(argv)); break;
  case 209: flag=_wrap_Matrix4x4_rows(resc,resv,argc,(mxArray**)(argv)); break;
  case 210: flag=_wrap_Matrix4x4_cols(resc,resv,argc,(mxArray**)(argv)); break;
  case 211: flag=_wrap_Matrix4x4_data(resc,resv,argc,(mxArray**)(argv)); break;
  case 212: flag=_wrap_Matrix4x4_zero(resc,resv,argc,(mxArray**)(argv)); break;
  case 213: flag=_wrap_Matrix4x4_fillRowMajorBuffer(resc,resv,argc,(mxArray**)(argv)); break;
  case 214: flag=_wrap_Matrix4x4_fillColMajorBuffer(resc,resv,argc,(mxArray**)(argv)); break;
  case 215: flag=_wrap_Matrix4x4_toString(resc,resv,argc,(mxArray**)(argv)); break;
  case 216: flag=_wrap_Matrix4x4_display(resc,resv,argc,(mxArray**)(argv)); break;
  case 217: flag=_wrap_Matrix4x4_toMatlab(resc,resv,argc,(mxArray**)(argv)); break;
  case 218: flag=_wrap_Matrix4x4_fromMatlab(resc,resv,argc,(mxArray**)(argv)); break;
  case 219: flag=_wrap_delete_Matrix4x4(resc,resv,argc,(mxArray**)(argv)); break;
  case 220: flag=_wrap_new_Matrix6x6(resc,resv,argc,(mxArray**)(argv)); break;
  case 221: flag=_wrap_Matrix6x6_paren(resc,resv,argc,(mxArray**)(argv)); break;
  case 222: flag=_wrap_Matrix6x6_getVal(resc,resv,argc,(mxArray**)(argv)); break;
  case 223: flag=_wrap_Matrix6x6_setVal(resc,resv,argc,(mxArray**)(argv)); break;
  case 224: flag=_wrap_Matrix6x6_rows(resc,resv,argc,(mxArray**)(argv)); break;
  case 225: flag=_wrap_Matrix6x6_cols(resc,resv,argc,(mxArray**)(argv)); break;
  case 226: flag=_wrap_Matrix6x6_data(resc,resv,argc,(mxArray**)(argv)); break;
  case 227: flag=_wrap_Matrix6x6_zero(resc,resv,argc,(mxArray**)(argv)); break;
  case 228: flag=_wrap_Matrix6x6_fillRowMajorBuffer(resc,resv,argc,(mxArray**)(argv)); break;
  case 229: flag=_wrap_Matrix6x6_fillColMajorBuffer(resc,resv,argc,(mxArray**)(argv)); break;
  case 230: flag=_wrap_Matrix6x6_toString(resc,resv,argc,(mxArray**)(argv)); break;
  case 231: flag=_wrap_Matrix6x6_display(resc,resv,argc,(mxArray**)(argv)); break;
  case 232: flag=_wrap_Matrix6x6_toMatlab(resc,resv,argc,(mxArray**)(argv)); break;
  case 233: flag=_wrap_Matrix6x6_fromMatlab(resc,resv,argc,(mxArray**)(argv)); break;
  case 234: flag=_wrap_delete_Matrix6x6(resc,resv,argc,(mxArray**)(argv)); break;
  case 235: flag=_wrap_new_Matrix6x10(resc,resv,argc,(mxArray**)(argv)); break;
  case 236: flag=_wrap_Matrix6x10_paren(resc,resv,argc,(mxArray**)(argv)); break;
  case 237: flag=_wrap_Matrix6x10_getVal(resc,resv,argc,(mxArray**)(argv)); break;
  case 238: flag=_wrap_Matrix6x10_setVal(resc,resv,argc,(mxArray**)(argv)); break;
  case 239: flag=_wrap_Matrix6x10_rows(resc,resv,argc,(mxArray**)(argv)); break;
  case 240: flag=_wrap_Matrix6x10_cols(resc,resv,argc,(mxArray**)(argv)); break;
  case 241: flag=_wrap_Matrix6x10_data(resc,resv,argc,(mxArray**)(argv)); break;
  case 242: flag=_wrap_Matrix6x10_zero(resc,resv,argc,(mxArray**)(argv)); break;
  case 243: flag=_wrap_Matrix6x10_fillRowMajorBuffer(resc,resv,argc,(mxArray**)(argv)); break;
  case 244: flag=_wrap_Matrix6x10_fillColMajorBuffer(resc,resv,argc,(mxArray**)(argv)); break;
  case 245: flag=_wrap_Matrix6x10_toString(resc,resv,argc,(mxArray**)(argv)); break;
  case 246: flag=_wrap_Matrix6x10_display(resc,resv,argc,(mxArray**)(argv)); break;
  case 247: flag=_wrap_Matrix6x10_toMatlab(resc,resv,argc,(mxArray**)(argv)); break;
  case 248: flag=_wrap_Matrix6x10_fromMatlab(resc,resv,argc,(mxArray**)(argv)); break;
  case 249: flag=_wrap_delete_Matrix6x10(resc,resv,argc,(mxArray**)(argv)); break;
  case 250: flag=_wrap_new_Matrix10x16(resc,resv,argc,(mxArray**)(argv)); break;
  case 251: flag=_wrap_Matrix10x16_paren(resc,resv,argc,(mxArray**)(argv)); break;
  case 252: flag=_wrap_Matrix10x16_getVal(resc,resv,argc,(mxArray**)(argv)); break;
  case 253: flag=_wrap_Matrix10x16_setVal(resc,resv,argc,(mxArray**)(argv)); break;
  case 254: flag=_wrap_Matrix10x16_rows(resc,resv,argc,(mxArray**)(argv)); break;
  case 255: flag=_wrap_Matrix10x16_cols(resc,resv,argc,(mxArray**)(argv)); break;
  case 256: flag=_wrap_Matrix10x16_data(resc,resv,argc,(mxArray**)(argv)); break;
  case 257: flag=_wrap_Matrix10x16_zero(resc,resv,argc,(mxArray**)(argv)); break;
  case 258: flag=_wrap_Matrix10x16_fillRowMajorBuffer(resc,resv,argc,(mxArray**)(argv)); break;
  case 259: flag=_wrap_Matrix10x16_fillColMajorBuffer(resc,resv,argc,(mxArray**)(argv)); break;
  case 260: flag=_wrap_Matrix10x16_toString(resc,resv,argc,(mxArray**)(argv)); break;
  case 261: flag=_wrap_Matrix10x16_display(resc,resv,argc,(mxArray**)(argv)); break;
  case 262: flag=_wrap_Matrix10x16_toMatlab(resc,resv,argc,(mxArray**)(argv)); break;
  case 263: flag=_wrap_Matrix10x16_fromMatlab(resc,resv,argc,(mxArray**)(argv)); break;
  case 264: flag=_wrap_delete_Matrix10x16(resc,resv,argc,(mxArray**)(argv)); break;
  case 265: flag=_wrap_new_Vector3(resc,resv,argc,(mxArray**)(argv)); break;
  case 266: flag=_wrap_Vector3_paren(resc,resv,argc,(mxArray**)(argv)); break;
  case 267: flag=_wrap_Vector3_getVal(resc,resv,argc,(mxArray**)(argv)); break;
  case 268: flag=_wrap_Vector3_setVal(resc,resv,argc,(mxArray**)(argv)); break;
  case 269: flag=_wrap_Vector3_size(resc,resv,argc,(mxArray**)(argv)); break;
  case 270: flag=_wrap_Vector3_data(resc,resv,argc,(mxArray**)(argv)); break;
  case 271: flag=_wrap_Vector3_zero(resc,resv,argc,(mxArray**)(argv)); break;
  case 272: flag=_wrap_Vector3_fillBuffer(resc,resv,argc,(mxArray**)(argv)); break;
  case 273: flag=_wrap_Vector3_toString(resc,resv,argc,(mxArray**)(argv)); break;
  case 274: flag=_wrap_Vector3_display(resc,resv,argc,(mxArray**)(argv)); break;
  case 275: flag=_wrap_Vector3_toMatlab(resc,resv,argc,(mxArray**)(argv)); break;
  case 276: flag=_wrap_Vector3_fromMatlab(resc,resv,argc,(mxArray**)(argv)); break;
  case 277: flag=_wrap_delete_Vector3(resc,resv,argc,(mxArray**)(argv)); break;
  case 278: flag=_wrap_new_Vector4(resc,resv,argc,(mxArray**)(argv)); break;
  case 279: flag=_wrap_Vector4_paren(resc,resv,argc,(mxArray**)(argv)); break;
  case 280: flag=_wrap_Vector4_getVal(resc,resv,argc,(mxArray**)(argv)); break;
  case 281: flag=_wrap_Vector4_setVal(resc,resv,argc,(mxArray**)(argv)); break;
  case 282: flag=_wrap_Vector4_size(resc,resv,argc,(mxArray**)(argv)); break;
  case 283: flag=_wrap_Vector4_data(resc,resv,argc,(mxArray**)(argv)); break;
  case 284: flag=_wrap_Vector4_zero(resc,resv,argc,(mxArray**)(argv)); break;
  case 285: flag=_wrap_Vector4_fillBuffer(resc,resv,argc,(mxArray**)(argv)); break;
  case 286: flag=_wrap_Vector4_toString(resc,resv,argc,(mxArray**)(argv)); break;
  case 287: flag=_wrap_Vector4_display(resc,resv,argc,(mxArray**)(argv)); break;
  case 288: flag=_wrap_Vector4_toMatlab(resc,resv,argc,(mxArray**)(argv)); break;
  case 289: flag=_wrap_Vector4_fromMatlab(resc,resv,argc,(mxArray**)(argv)); break;
  case 290: flag=_wrap_delete_Vector4(resc,resv,argc,(mxArray**)(argv)); break;
  case 291: flag=_wrap_new_Vector6(resc,resv,argc,(mxArray**)(argv)); break;
  case 292: flag=_wrap_Vector6_paren(resc,resv,argc,(mxArray**)(argv)); break;
  case 293: flag=_wrap_Vector6_getVal(resc,resv,argc,(mxArray**)(argv)); break;
  case 294: flag=_wrap_Vector6_setVal(resc,resv,argc,(mxArray**)(argv)); break;
  case 295: flag=_wrap_Vector6_size(resc,resv,argc,(mxArray**)(argv)); break;
  case 296: flag=_wrap_Vector6_data(resc,resv,argc,(mxArray**)(argv)); break;
  case 297: flag=_wrap_Vector6_zero(resc,resv,argc,(mxArray**)(argv)); break;
  case 298: flag=_wrap_Vector6_fillBuffer(resc,resv,argc,(mxArray**)(argv)); break;
  case 299: flag=_wrap_Vector6_toString(resc,resv,argc,(mxArray**)(argv)); break;
  case 300: flag=_wrap_Vector6_display(resc,resv,argc,(mxArray**)(argv)); break;
  case 301: flag=_wrap_Vector6_toMatlab(resc,resv,argc,(mxArray**)(argv)); break;
  case 302: flag=_wrap_Vector6_fromMatlab(resc,resv,argc,(mxArray**)(argv)); break;
  case 303: flag=_wrap_delete_Vector6(resc,resv,argc,(mxArray**)(argv)); break;
  case 304: flag=_wrap_new_Vector10(resc,resv,argc,(mxArray**)(argv)); break;
  case 305: flag=_wrap_Vector10_paren(resc,resv,argc,(mxArray**)(argv)); break;
  case 306: flag=_wrap_Vector10_getVal(resc,resv,argc,(mxArray**)(argv)); break;
  case 307: flag=_wrap_Vector10_setVal(resc,resv,argc,(mxArray**)(argv)); break;
  case 308: flag=_wrap_Vector10_size(resc,resv,argc,(mxArray**)(argv)); break;
  case 309: flag=_wrap_Vector10_data(resc,resv,argc,(mxArray**)(argv)); break;
  case 310: flag=_wrap_Vector10_zero(resc,resv,argc,(mxArray**)(argv)); break;
  case 311: flag=_wrap_Vector10_fillBuffer(resc,resv,argc,(mxArray**)(argv)); break;
  case 312: flag=_wrap_Vector10_toString(resc,resv,argc,(mxArray**)(argv)); break;
  case 313: flag=_wrap_Vector10_display(resc,resv,argc,(mxArray**)(argv)); break;
  case 314: flag=_wrap_Vector10_toMatlab(resc,resv,argc,(mxArray**)(argv)); break;
  case 315: flag=_wrap_Vector10_fromMatlab(resc,resv,argc,(mxArray**)(argv)); break;
  case 316: flag=_wrap_delete_Vector10(resc,resv,argc,(mxArray**)(argv)); break;
  case 317: flag=_wrap_new_Vector16(resc,resv,argc,(mxArray**)(argv)); break;
  case 318: flag=_wrap_Vector16_paren(resc,resv,argc,(mxArray**)(argv)); break;
  case 319: flag=_wrap_Vector16_getVal(resc,resv,argc,(mxArray**)(argv)); break;
  case 320: flag=_wrap_Vector16_setVal(resc,resv,argc,(mxArray**)(argv)); break;
  case 321: flag=_wrap_Vector16_size(resc,resv,argc,(mxArray**)(argv)); break;
  case 322: flag=_wrap_Vector16_data(resc,resv,argc,(mxArray**)(argv)); break;
  case 323: flag=_wrap_Vector16_zero(resc,resv,argc,(mxArray**)(argv)); break;
  case 324: flag=_wrap_Vector16_fillBuffer(resc,resv,argc,(mxArray**)(argv)); break;
  case 325: flag=_wrap_Vector16_toString(resc,resv,argc,(mxArray**)(argv)); break;
  case 326: flag=_wrap_Vector16_display(resc,resv,argc,(mxArray**)(argv)); break;
  case 327: flag=_wrap_Vector16_toMatlab(resc,resv,argc,(mxArray**)(argv)); break;
  case 328: flag=_wrap_Vector16_fromMatlab(resc,resv,argc,(mxArray**)(argv)); break;
  case 329: flag=_wrap_delete_Vector16(resc,resv,argc,(mxArray**)(argv)); break;
  case 330: flag=_wrap_new_PositionRaw(resc,resv,argc,(mxArray**)(argv)); break;
  case 331: flag=_wrap_PositionRaw_changePoint(resc,resv,argc,(mxArray**)(argv)); break;
  case 332: flag=_wrap_PositionRaw_changeRefPoint(resc,resv,argc,(mxArray**)(argv)); break;
  case 333: flag=_wrap_PositionRaw_compose(resc,resv,argc,(mxArray**)(argv)); break;
  case 334: flag=_wrap_PositionRaw_inverse(resc,resv,argc,(mxArray**)(argv)); break;
  case 335: flag=_wrap_PositionRaw_changePointOf(resc,resv,argc,(mxArray**)(argv)); break;
  case 336: flag=_wrap_PositionRaw_toString(resc,resv,argc,(mxArray**)(argv)); break;
  case 337: flag=_wrap_PositionRaw_display(resc,resv,argc,(mxArray**)(argv)); break;
  case 338: flag=_wrap_delete_PositionRaw(resc,resv,argc,(mxArray**)(argv)); break;
  case 339: flag=_wrap_new_PositionSemantics(resc,resv,argc,(mxArray**)(argv)); break;
  case 340: flag=_wrap_PositionSemantics_setToUnknown(resc,resv,argc,(mxArray**)(argv)); break;
  case 341: flag=_wrap_PositionSemantics_getPoint(resc,resv,argc,(mxArray**)(argv)); break;
  case 342: flag=_wrap_PositionSemantics_getBody(resc,resv,argc,(mxArray**)(argv)); break;
  case 343: flag=_wrap_PositionSemantics_getReferencePoint(resc,resv,argc,(mxArray**)(argv)); break;
  case 344: flag=_wrap_PositionSemantics_getRefBody(resc,resv,argc,(mxArray**)(argv)); break;
  case 345: flag=_wrap_PositionSemantics_getCoordinateFrame(resc,resv,argc,(mxArray**)(argv)); break;
  case 346: flag=_wrap_PositionSemantics_setPoint(resc,resv,argc,(mxArray**)(argv)); break;
  case 347: flag=_wrap_PositionSemantics_setBody(resc,resv,argc,(mxArray**)(argv)); break;
  case 348: flag=_wrap_PositionSemantics_setReferencePoint(resc,resv,argc,(mxArray**)(argv)); break;
  case 349: flag=_wrap_PositionSemantics_setRefBody(resc,resv,argc,(mxArray**)(argv)); break;
  case 350: flag=_wrap_PositionSemantics_setCoordinateFrame(resc,resv,argc,(mxArray**)(argv)); break;
  case 351: flag=_wrap_PositionSemantics_changePoint(resc,resv,argc,(mxArray**)(argv)); break;
  case 352: flag=_wrap_PositionSemantics_changeRefPoint(resc,resv,argc,(mxArray**)(argv)); break;
  case 353: flag=_wrap_PositionSemantics_compose(resc,resv,argc,(mxArray**)(argv)); break;
  case 354: flag=_wrap_PositionSemantics_inverse(resc,resv,argc,(mxArray**)(argv)); break;
  case 355: flag=_wrap_PositionSemantics_toString(resc,resv,argc,(mxArray**)(argv)); break;
  case 356: flag=_wrap_PositionSemantics_display(resc,resv,argc,(mxArray**)(argv)); break;
  case 357: flag=_wrap_delete_PositionSemantics(resc,resv,argc,(mxArray**)(argv)); break;
  case 358: flag=_wrap_new_Position(resc,resv,argc,(mxArray**)(argv)); break;
  case 359: flag=_wrap_Position_getSemantics(resc,resv,argc,(mxArray**)(argv)); break;
  case 360: flag=_wrap_Position_changePoint(resc,resv,argc,(mxArray**)(argv)); break;
  case 361: flag=_wrap_Position_changeRefPoint(resc,resv,argc,(mxArray**)(argv)); break;
  case 362: flag=_wrap_Position_changeCoordinateFrame(resc,resv,argc,(mxArray**)(argv)); break;
  case 363: flag=_wrap_Position_compose(resc,resv,argc,(mxArray**)(argv)); break;
  case 364: flag=_wrap_Position_inverse(resc,resv,argc,(mxArray**)(argv)); break;
  case 365: flag=_wrap_Position_changePointOf(resc,resv,argc,(mxArray**)(argv)); break;
  case 366: flag=_wrap_Position_plus(resc,resv,argc,(mxArray**)(argv)); break;
  case 367: flag=_wrap_Position_minus(resc,resv,argc,(mxArray**)(argv)); break;
  case 368: flag=_wrap_Position_uminus(resc,resv,argc,(mxArray**)(argv)); break;
  case 369: flag=_wrap_Position_mtimes(resc,resv,argc,(mxArray**)(argv)); break;
  case 370: flag=_wrap_Position_toString(resc,resv,argc,(mxArray**)(argv)); break;
  case 371: flag=_wrap_Position_display(resc,resv,argc,(mxArray**)(argv)); break;
  case 372: flag=_wrap_Position_Zero(resc,resv,argc,(mxArray**)(argv)); break;
  case 373: flag=_wrap_delete_Position(resc,resv,argc,(mxArray**)(argv)); break;
  case 374: flag=_wrap_new_GeomVector3Semantics__LinearMotionVector3Semantics(resc,resv,argc,(mxArray**)(argv)); break;
  case 375: flag=_wrap_GeomVector3Semantics__LinearMotionVector3Semantics_setToUnknown(resc,resv,argc,(mxArray**)(argv)); break;
  case 376: flag=_wrap_GeomVector3Semantics__LinearMotionVector3Semantics_getBody(resc,resv,argc,(mxArray**)(argv)); break;
  case 377: flag=_wrap_GeomVector3Semantics__LinearMotionVector3Semantics_getRefBody(resc,resv,argc,(mxArray**)(argv)); break;
  case 378: flag=_wrap_GeomVector3Semantics__LinearMotionVector3Semantics_getCoordinateFrame(resc,resv,argc,(mxArray**)(argv)); break;
  case 379: flag=_wrap_GeomVector3Semantics__LinearMotionVector3Semantics_isUnknown(resc,resv,argc,(mxArray**)(argv)); break;
  case 380: flag=_wrap_GeomVector3Semantics__LinearMotionVector3Semantics_changeCoordFrame(resc,resv,argc,(mxArray**)(argv)); break;
  case 381: flag=_wrap_GeomVector3Semantics__LinearMotionVector3Semantics_compose(resc,resv,argc,(mxArray**)(argv)); break;
  case 382: flag=_wrap_GeomVector3Semantics__LinearMotionVector3Semantics_inverse(resc,resv,argc,(mxArray**)(argv)); break;
  case 383: flag=_wrap_GeomVector3Semantics__LinearMotionVector3Semantics_dot(resc,resv,argc,(mxArray**)(argv)); break;
  case 384: flag=_wrap_delete_GeomVector3Semantics__LinearMotionVector3Semantics(resc,resv,argc,(mxArray**)(argv)); break;
  case 385: flag=_wrap_new_GeomVector3Semantics__AngularMotionVector3Semantics(resc,resv,argc,(mxArray**)(argv)); break;
  case 386: flag=_wrap_GeomVector3Semantics__AngularMotionVector3Semantics_setToUnknown(resc,resv,argc,(mxArray**)(argv)); break;
  case 387: flag=_wrap_GeomVector3Semantics__AngularMotionVector3Semantics_getBody(resc,resv,argc,(mxArray**)(argv)); break;
  case 388: flag=_wrap_GeomVector3Semantics__AngularMotionVector3Semantics_getRefBody(resc,resv,argc,(mxArray**)(argv)); break;
  case 389: flag=_wrap_GeomVector3Semantics__AngularMotionVector3Semantics_getCoordinateFrame(resc,resv,argc,(mxArray**)(argv)); break;
  case 390: flag=_wrap_GeomVector3Semantics__AngularMotionVector3Semantics_isUnknown(resc,resv,argc,(mxArray**)(argv)); break;
  case 391: flag=_wrap_GeomVector3Semantics__AngularMotionVector3Semantics_changeCoordFrame(resc,resv,argc,(mxArray**)(argv)); break;
  case 392: flag=_wrap_GeomVector3Semantics__AngularMotionVector3Semantics_compose(resc,resv,argc,(mxArray**)(argv)); break;
  case 393: flag=_wrap_GeomVector3Semantics__AngularMotionVector3Semantics_inverse(resc,resv,argc,(mxArray**)(argv)); break;
  case 394: flag=_wrap_GeomVector3Semantics__AngularMotionVector3Semantics_dot(resc,resv,argc,(mxArray**)(argv)); break;
  case 395: flag=_wrap_delete_GeomVector3Semantics__AngularMotionVector3Semantics(resc,resv,argc,(mxArray**)(argv)); break;
  case 396: flag=_wrap_new_GeomVector3Semantics__LinearForceVector3Semantics(resc,resv,argc,(mxArray**)(argv)); break;
  case 397: flag=_wrap_GeomVector3Semantics__LinearForceVector3Semantics_setToUnknown(resc,resv,argc,(mxArray**)(argv)); break;
  case 398: flag=_wrap_GeomVector3Semantics__LinearForceVector3Semantics_getBody(resc,resv,argc,(mxArray**)(argv)); break;
  case 399: flag=_wrap_GeomVector3Semantics__LinearForceVector3Semantics_getRefBody(resc,resv,argc,(mxArray**)(argv)); break;
  case 400: flag=_wrap_GeomVector3Semantics__LinearForceVector3Semantics_getCoordinateFrame(resc,resv,argc,(mxArray**)(argv)); break;
  case 401: flag=_wrap_GeomVector3Semantics__LinearForceVector3Semantics_isUnknown(resc,resv,argc,(mxArray**)(argv)); break;
  case 402: flag=_wrap_GeomVector3Semantics__LinearForceVector3Semantics_changeCoordFrame(resc,resv,argc,(mxArray**)(argv)); break;
  case 403: flag=_wrap_GeomVector3Semantics__LinearForceVector3Semantics_compose(resc,resv,argc,(mxArray**)(argv)); break;
  case 404: flag=_wrap_GeomVector3Semantics__LinearForceVector3Semantics_inverse(resc,resv,argc,(mxArray**)(argv)); break;
  case 405: flag=_wrap_GeomVector3Semantics__LinearForceVector3Semantics_dot(resc,resv,argc,(mxArray**)(argv)); break;
  case 406: flag=_wrap_delete_GeomVector3Semantics__LinearForceVector3Semantics(resc,resv,argc,(mxArray**)(argv)); break;
  case 407: flag=_wrap_new_GeomVector3Semantics__AngularForceVector3Semantics(resc,resv,argc,(mxArray**)(argv)); break;
  case 408: flag=_wrap_GeomVector3Semantics__AngularForceVector3Semantics_setToUnknown(resc,resv,argc,(mxArray**)(argv)); break;
  case 409: flag=_wrap_GeomVector3Semantics__AngularForceVector3Semantics_getBody(resc,resv,argc,(mxArray**)(argv)); break;
  case 410: flag=_wrap_GeomVector3Semantics__AngularForceVector3Semantics_getRefBody(resc,resv,argc,(mxArray**)(argv)); break;
  case 411: flag=_wrap_GeomVector3Semantics__AngularForceVector3Semantics_getCoordinateFrame(resc,resv,argc,(mxArray**)(argv)); break;
  case 412: flag=_wrap_GeomVector3Semantics__AngularForceVector3Semantics_isUnknown(resc,resv,argc,(mxArray**)(argv)); break;
  case 413: flag=_wrap_GeomVector3Semantics__AngularForceVector3Semantics_changeCoordFrame(resc,resv,argc,(mxArray**)(argv)); break;
  case 414: flag=_wrap_GeomVector3Semantics__AngularForceVector3Semantics_compose(resc,resv,argc,(mxArray**)(argv)); break;
  case 415: flag=_wrap_GeomVector3Semantics__AngularForceVector3Semantics_inverse(resc,resv,argc,(mxArray**)(argv)); break;
  case 416: flag=_wrap_GeomVector3Semantics__AngularForceVector3Semantics_dot(resc,resv,argc,(mxArray**)(argv)); break;
  case 417: flag=_wrap_delete_GeomVector3Semantics__AngularForceVector3Semantics(resc,resv,argc,(mxArray**)(argv)); break;
  case 418: flag=_wrap_GeomVector3__LinearMotionVector3_semantics_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 419: flag=_wrap_GeomVector3__LinearMotionVector3_semantics_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 420: flag=_wrap_new_GeomVector3__LinearMotionVector3(resc,resv,argc,(mxArray**)(argv)); break;
  case 421: flag=_wrap_GeomVector3__LinearMotionVector3_setSemantics(resc,resv,argc,(mxArray**)(argv)); break;
  case 422: flag=_wrap_GeomVector3__LinearMotionVector3_changeCoordFrame(resc,resv,argc,(mxArray**)(argv)); break;
  case 423: flag=_wrap_GeomVector3__LinearMotionVector3_compose(resc,resv,argc,(mxArray**)(argv)); break;
  case 424: flag=_wrap_GeomVector3__LinearMotionVector3_inverse(resc,resv,argc,(mxArray**)(argv)); break;
  case 425: flag=_wrap_GeomVector3__LinearMotionVector3_dot(resc,resv,argc,(mxArray**)(argv)); break;
  case 426: flag=_wrap_GeomVector3__LinearMotionVector3_plus(resc,resv,argc,(mxArray**)(argv)); break;
  case 427: flag=_wrap_GeomVector3__LinearMotionVector3_minus(resc,resv,argc,(mxArray**)(argv)); break;
  case 428: flag=_wrap_GeomVector3__LinearMotionVector3_uminus(resc,resv,argc,(mxArray**)(argv)); break;
  case 429: flag=_wrap_delete_GeomVector3__LinearMotionVector3(resc,resv,argc,(mxArray**)(argv)); break;
  case 430: flag=_wrap_GeomVector3__AngularMotionVector3_semantics_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 431: flag=_wrap_GeomVector3__AngularMotionVector3_semantics_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 432: flag=_wrap_new_GeomVector3__AngularMotionVector3(resc,resv,argc,(mxArray**)(argv)); break;
  case 433: flag=_wrap_GeomVector3__AngularMotionVector3_setSemantics(resc,resv,argc,(mxArray**)(argv)); break;
  case 434: flag=_wrap_GeomVector3__AngularMotionVector3_changeCoordFrame(resc,resv,argc,(mxArray**)(argv)); break;
  case 435: flag=_wrap_GeomVector3__AngularMotionVector3_compose(resc,resv,argc,(mxArray**)(argv)); break;
  case 436: flag=_wrap_GeomVector3__AngularMotionVector3_inverse(resc,resv,argc,(mxArray**)(argv)); break;
  case 437: flag=_wrap_GeomVector3__AngularMotionVector3_dot(resc,resv,argc,(mxArray**)(argv)); break;
  case 438: flag=_wrap_GeomVector3__AngularMotionVector3_plus(resc,resv,argc,(mxArray**)(argv)); break;
  case 439: flag=_wrap_GeomVector3__AngularMotionVector3_minus(resc,resv,argc,(mxArray**)(argv)); break;
  case 440: flag=_wrap_GeomVector3__AngularMotionVector3_uminus(resc,resv,argc,(mxArray**)(argv)); break;
  case 441: flag=_wrap_delete_GeomVector3__AngularMotionVector3(resc,resv,argc,(mxArray**)(argv)); break;
  case 442: flag=_wrap_GeomVector3__LinearForceVector3_semantics_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 443: flag=_wrap_GeomVector3__LinearForceVector3_semantics_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 444: flag=_wrap_new_GeomVector3__LinearForceVector3(resc,resv,argc,(mxArray**)(argv)); break;
  case 445: flag=_wrap_GeomVector3__LinearForceVector3_setSemantics(resc,resv,argc,(mxArray**)(argv)); break;
  case 446: flag=_wrap_GeomVector3__LinearForceVector3_changeCoordFrame(resc,resv,argc,(mxArray**)(argv)); break;
  case 447: flag=_wrap_GeomVector3__LinearForceVector3_compose(resc,resv,argc,(mxArray**)(argv)); break;
  case 448: flag=_wrap_GeomVector3__LinearForceVector3_inverse(resc,resv,argc,(mxArray**)(argv)); break;
  case 449: flag=_wrap_GeomVector3__LinearForceVector3_dot(resc,resv,argc,(mxArray**)(argv)); break;
  case 450: flag=_wrap_GeomVector3__LinearForceVector3_plus(resc,resv,argc,(mxArray**)(argv)); break;
  case 451: flag=_wrap_GeomVector3__LinearForceVector3_minus(resc,resv,argc,(mxArray**)(argv)); break;
  case 452: flag=_wrap_GeomVector3__LinearForceVector3_uminus(resc,resv,argc,(mxArray**)(argv)); break;
  case 453: flag=_wrap_delete_GeomVector3__LinearForceVector3(resc,resv,argc,(mxArray**)(argv)); break;
  case 454: flag=_wrap_GeomVector3__AngularForceVector3_semantics_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 455: flag=_wrap_GeomVector3__AngularForceVector3_semantics_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 456: flag=_wrap_new_GeomVector3__AngularForceVector3(resc,resv,argc,(mxArray**)(argv)); break;
  case 457: flag=_wrap_GeomVector3__AngularForceVector3_setSemantics(resc,resv,argc,(mxArray**)(argv)); break;
  case 458: flag=_wrap_GeomVector3__AngularForceVector3_changeCoordFrame(resc,resv,argc,(mxArray**)(argv)); break;
  case 459: flag=_wrap_GeomVector3__AngularForceVector3_compose(resc,resv,argc,(mxArray**)(argv)); break;
  case 460: flag=_wrap_GeomVector3__AngularForceVector3_inverse(resc,resv,argc,(mxArray**)(argv)); break;
  case 461: flag=_wrap_GeomVector3__AngularForceVector3_dot(resc,resv,argc,(mxArray**)(argv)); break;
  case 462: flag=_wrap_GeomVector3__AngularForceVector3_plus(resc,resv,argc,(mxArray**)(argv)); break;
  case 463: flag=_wrap_GeomVector3__AngularForceVector3_minus(resc,resv,argc,(mxArray**)(argv)); break;
  case 464: flag=_wrap_GeomVector3__AngularForceVector3_uminus(resc,resv,argc,(mxArray**)(argv)); break;
  case 465: flag=_wrap_delete_GeomVector3__AngularForceVector3(resc,resv,argc,(mxArray**)(argv)); break;
  case 466: flag=_wrap_new_ForceVector3Semantics__LinearForceVector3Semantics(resc,resv,argc,(mxArray**)(argv)); break;
  case 467: flag=_wrap_ForceVector3Semantics__LinearForceVector3Semantics_compose(resc,resv,argc,(mxArray**)(argv)); break;
  case 468: flag=_wrap_ForceVector3Semantics__LinearForceVector3Semantics_inverse(resc,resv,argc,(mxArray**)(argv)); break;
  case 469: flag=_wrap_delete_ForceVector3Semantics__LinearForceVector3Semantics(resc,resv,argc,(mxArray**)(argv)); break;
  case 470: flag=_wrap_new_ForceVector3Semantics__AngularForceVector3Semantics(resc,resv,argc,(mxArray**)(argv)); break;
  case 471: flag=_wrap_ForceVector3Semantics__AngularForceVector3Semantics_compose(resc,resv,argc,(mxArray**)(argv)); break;
  case 472: flag=_wrap_ForceVector3Semantics__AngularForceVector3Semantics_inverse(resc,resv,argc,(mxArray**)(argv)); break;
  case 473: flag=_wrap_delete_ForceVector3Semantics__AngularForceVector3Semantics(resc,resv,argc,(mxArray**)(argv)); break;
  case 474: flag=_wrap_new_MotionVector3__LinearMotionVector3(resc,resv,argc,(mxArray**)(argv)); break;
  case 475: flag=_wrap_MotionVector3__LinearMotionVector3_cross(resc,resv,argc,(mxArray**)(argv)); break;
  case 476: flag=_wrap_delete_MotionVector3__LinearMotionVector3(resc,resv,argc,(mxArray**)(argv)); break;
  case 477: flag=_wrap_new_MotionVector3__AngularMotionVector3(resc,resv,argc,(mxArray**)(argv)); break;
  case 478: flag=_wrap_MotionVector3__AngularMotionVector3_cross(resc,resv,argc,(mxArray**)(argv)); break;
  case 479: flag=_wrap_delete_MotionVector3__AngularMotionVector3(resc,resv,argc,(mxArray**)(argv)); break;
  case 480: flag=_wrap_new_ForceVector3__LinearForceVector3(resc,resv,argc,(mxArray**)(argv)); break;
  case 481: flag=_wrap_delete_ForceVector3__LinearForceVector3(resc,resv,argc,(mxArray**)(argv)); break;
  case 482: flag=_wrap_new_ForceVector3__AngularForceVector3(resc,resv,argc,(mxArray**)(argv)); break;
  case 483: flag=_wrap_delete_ForceVector3__AngularForceVector3(resc,resv,argc,(mxArray**)(argv)); break;
  case 484: flag=_wrap_new_LinearMotionVector3Semantics(resc,resv,argc,(mxArray**)(argv)); break;
  case 485: flag=_wrap_LinearMotionVector3Semantics_changePoint(resc,resv,argc,(mxArray**)(argv)); break;
  case 486: flag=_wrap_LinearMotionVector3Semantics_compose(resc,resv,argc,(mxArray**)(argv)); break;
  case 487: flag=_wrap_delete_LinearMotionVector3Semantics(resc,resv,argc,(mxArray**)(argv)); break;
  case 488: flag=_wrap_new_LinearMotionVector3(resc,resv,argc,(mxArray**)(argv)); break;
  case 489: flag=_wrap_LinearMotionVector3_changePoint(resc,resv,argc,(mxArray**)(argv)); break;
  case 490: flag=_wrap_delete_LinearMotionVector3(resc,resv,argc,(mxArray**)(argv)); break;
  case 491: flag=_wrap_new_AngularMotionVector3Semantics(resc,resv,argc,(mxArray**)(argv)); break;
  case 492: flag=_wrap_delete_AngularMotionVector3Semantics(resc,resv,argc,(mxArray**)(argv)); break;
  case 493: flag=_wrap_new_AngularMotionVector3(resc,resv,argc,(mxArray**)(argv)); break;
  case 494: flag=_wrap_AngularMotionVector3_exp(resc,resv,argc,(mxArray**)(argv)); break;
  case 495: flag=_wrap_delete_AngularMotionVector3(resc,resv,argc,(mxArray**)(argv)); break;
  case 496: flag=_wrap_new_LinearForceVector3Semantics(resc,resv,argc,(mxArray**)(argv)); break;
  case 497: flag=_wrap_delete_LinearForceVector3Semantics(resc,resv,argc,(mxArray**)(argv)); break;
  case 498: flag=_wrap_new_LinearForceVector3(resc,resv,argc,(mxArray**)(argv)); break;
  case 499: flag=_wrap_delete_LinearForceVector3(resc,resv,argc,(mxArray**)(argv)); break;
  case 500: flag=_wrap_new_AngularForceVector3Semantics(resc,resv,argc,(mxArray**)(argv)); break;
  case 501: flag=_wrap_AngularForceVector3Semantics_changePoint(resc,resv,argc,(mxArray**)(argv)); break;
  case 502: flag=_wrap_AngularForceVector3Semantics_compose(resc,resv,argc,(mxArray**)(argv)); break;
  case 503: flag=_wrap_delete_AngularForceVector3Semantics(resc,resv,argc,(mxArray**)(argv)); break;
  case 504: flag=_wrap_new_AngularForceVector3(resc,resv,argc,(mxArray**)(argv)); break;
  case 505: flag=_wrap_AngularForceVector3_changePoint(resc,resv,argc,(mxArray**)(argv)); break;
  case 506: flag=_wrap_delete_AngularForceVector3(resc,resv,argc,(mxArray**)(argv)); break;
  case 507: flag=_wrap_new_SpatialMotionVectorSemanticsBase(resc,resv,argc,(mxArray**)(argv)); break;
  case 508: flag=_wrap_SpatialMotionVectorSemanticsBase_check_linear2angularConsistency(resc,resv,argc,(mxArray**)(argv)); break;
  case 509: flag=_wrap_SpatialMotionVectorSemanticsBase_toString(resc,resv,argc,(mxArray**)(argv)); break;
  case 510: flag=_wrap_SpatialMotionVectorSemanticsBase_display(resc,resv,argc,(mxArray**)(argv)); break;
  case 511: flag=_wrap_delete_SpatialMotionVectorSemanticsBase(resc,resv,argc,(mxArray**)(argv)); break;
  case 512: flag=_wrap_new_SpatialForceVectorSemanticsBase(resc,resv,argc,(mxArray**)(argv)); break;
  case 513: flag=_wrap_SpatialForceVectorSemanticsBase_check_linear2angularConsistency(resc,resv,argc,(mxArray**)(argv)); break;
  case 514: flag=_wrap_SpatialForceVectorSemanticsBase_toString(resc,resv,argc,(mxArray**)(argv)); break;
  case 515: flag=_wrap_SpatialForceVectorSemanticsBase_display(resc,resv,argc,(mxArray**)(argv)); break;
  case 516: flag=_wrap_delete_SpatialForceVectorSemanticsBase(resc,resv,argc,(mxArray**)(argv)); break;
  case 517: flag=_wrap_new_SpatialMotionVectorBase(resc,resv,argc,(mxArray**)(argv)); break;
  case 518: flag=_wrap_SpatialMotionVectorBase_getLinearVec3(resc,resv,argc,(mxArray**)(argv)); break;
  case 519: flag=_wrap_SpatialMotionVectorBase_getAngularVec3(resc,resv,argc,(mxArray**)(argv)); break;
  case 520: flag=_wrap_SpatialMotionVectorBase_setLinearVec3(resc,resv,argc,(mxArray**)(argv)); break;
  case 521: flag=_wrap_SpatialMotionVectorBase_setAngularVec3(resc,resv,argc,(mxArray**)(argv)); break;
  case 522: flag=_wrap_SpatialMotionVectorBase_paren(resc,resv,argc,(mxArray**)(argv)); break;
  case 523: flag=_wrap_SpatialMotionVectorBase_getVal(resc,resv,argc,(mxArray**)(argv)); break;
  case 524: flag=_wrap_SpatialMotionVectorBase_setVal(resc,resv,argc,(mxArray**)(argv)); break;
  case 525: flag=_wrap_SpatialMotionVectorBase_size(resc,resv,argc,(mxArray**)(argv)); break;
  case 526: flag=_wrap_SpatialMotionVectorBase_zero(resc,resv,argc,(mxArray**)(argv)); break;
  case 527: flag=_wrap_SpatialMotionVectorBase_changePoint(resc,resv,argc,(mxArray**)(argv)); break;
  case 528: flag=_wrap_SpatialMotionVectorBase_changeCoordFrame(resc,resv,argc,(mxArray**)(argv)); break;
  case 529: flag=_wrap_SpatialMotionVectorBase_compose(resc,resv,argc,(mxArray**)(argv)); break;
  case 530: flag=_wrap_SpatialMotionVectorBase_inverse(resc,resv,argc,(mxArray**)(argv)); break;
  case 531: flag=_wrap_SpatialMotionVectorBase_dot(resc,resv,argc,(mxArray**)(argv)); break;
  case 532: flag=_wrap_SpatialMotionVectorBase_plus(resc,resv,argc,(mxArray**)(argv)); break;
  case 533: flag=_wrap_SpatialMotionVectorBase_minus(resc,resv,argc,(mxArray**)(argv)); break;
  case 534: flag=_wrap_SpatialMotionVectorBase_uminus(resc,resv,argc,(mxArray**)(argv)); break;
  case 535: flag=_wrap_SpatialMotionVectorBase_Zero(resc,resv,argc,(mxArray**)(argv)); break;
  case 536: flag=_wrap_SpatialMotionVectorBase_asVector(resc,resv,argc,(mxArray**)(argv)); break;
  case 537: flag=_wrap_SpatialMotionVectorBase_toString(resc,resv,argc,(mxArray**)(argv)); break;
  case 538: flag=_wrap_SpatialMotionVectorBase_display(resc,resv,argc,(mxArray**)(argv)); break;
  case 539: flag=_wrap_SpatialMotionVectorBase_toMatlab(resc,resv,argc,(mxArray**)(argv)); break;
  case 540: flag=_wrap_SpatialMotionVectorBase_fromMatlab(resc,resv,argc,(mxArray**)(argv)); break;
  case 541: flag=_wrap_delete_SpatialMotionVectorBase(resc,resv,argc,(mxArray**)(argv)); break;
  case 542: flag=_wrap_new_SpatialForceVectorBase(resc,resv,argc,(mxArray**)(argv)); break;
  case 543: flag=_wrap_SpatialForceVectorBase_getLinearVec3(resc,resv,argc,(mxArray**)(argv)); break;
  case 544: flag=_wrap_SpatialForceVectorBase_getAngularVec3(resc,resv,argc,(mxArray**)(argv)); break;
  case 545: flag=_wrap_SpatialForceVectorBase_setLinearVec3(resc,resv,argc,(mxArray**)(argv)); break;
  case 546: flag=_wrap_SpatialForceVectorBase_setAngularVec3(resc,resv,argc,(mxArray**)(argv)); break;
  case 547: flag=_wrap_SpatialForceVectorBase_paren(resc,resv,argc,(mxArray**)(argv)); break;
  case 548: flag=_wrap_SpatialForceVectorBase_getVal(resc,resv,argc,(mxArray**)(argv)); break;
  case 549: flag=_wrap_SpatialForceVectorBase_setVal(resc,resv,argc,(mxArray**)(argv)); break;
  case 550: flag=_wrap_SpatialForceVectorBase_size(resc,resv,argc,(mxArray**)(argv)); break;
  case 551: flag=_wrap_SpatialForceVectorBase_zero(resc,resv,argc,(mxArray**)(argv)); break;
  case 552: flag=_wrap_SpatialForceVectorBase_changePoint(resc,resv,argc,(mxArray**)(argv)); break;
  case 553: flag=_wrap_SpatialForceVectorBase_changeCoordFrame(resc,resv,argc,(mxArray**)(argv)); break;
  case 554: flag=_wrap_SpatialForceVectorBase_compose(resc,resv,argc,(mxArray**)(argv)); break;
  case 555: flag=_wrap_SpatialForceVectorBase_inverse(resc,resv,argc,(mxArray**)(argv)); break;
  case 556: flag=_wrap_SpatialForceVectorBase_dot(resc,resv,argc,(mxArray**)(argv)); break;
  case 557: flag=_wrap_SpatialForceVectorBase_plus(resc,resv,argc,(mxArray**)(argv)); break;
  case 558: flag=_wrap_SpatialForceVectorBase_minus(resc,resv,argc,(mxArray**)(argv)); break;
  case 559: flag=_wrap_SpatialForceVectorBase_uminus(resc,resv,argc,(mxArray**)(argv)); break;
  case 560: flag=_wrap_SpatialForceVectorBase_Zero(resc,resv,argc,(mxArray**)(argv)); break;
  case 561: flag=_wrap_SpatialForceVectorBase_asVector(resc,resv,argc,(mxArray**)(argv)); break;
  case 562: flag=_wrap_SpatialForceVectorBase_toString(resc,resv,argc,(mxArray**)(argv)); break;
  case 563: flag=_wrap_SpatialForceVectorBase_display(resc,resv,argc,(mxArray**)(argv)); break;
  case 564: flag=_wrap_SpatialForceVectorBase_toMatlab(resc,resv,argc,(mxArray**)(argv)); break;
  case 565: flag=_wrap_SpatialForceVectorBase_fromMatlab(resc,resv,argc,(mxArray**)(argv)); break;
  case 566: flag=_wrap_delete_SpatialForceVectorBase(resc,resv,argc,(mxArray**)(argv)); break;
  case 567: flag=_wrap_new_Dummy(resc,resv,argc,(mxArray**)(argv)); break;
  case 568: flag=_wrap_delete_Dummy(resc,resv,argc,(mxArray**)(argv)); break;
  case 569: flag=_wrap_new_SpatialMotionVector(resc,resv,argc,(mxArray**)(argv)); break;
  case 570: flag=_wrap_SpatialMotionVector_mtimes(resc,resv,argc,(mxArray**)(argv)); break;
  case 571: flag=_wrap_SpatialMotionVector_cross(resc,resv,argc,(mxArray**)(argv)); break;
  case 572: flag=_wrap_SpatialMotionVector_asCrossProductMatrix(resc,resv,argc,(mxArray**)(argv)); break;
  case 573: flag=_wrap_SpatialMotionVector_asCrossProductMatrixWrench(resc,resv,argc,(mxArray**)(argv)); break;
  case 574: flag=_wrap_SpatialMotionVector_exp(resc,resv,argc,(mxArray**)(argv)); break;
  case 575: flag=_wrap_delete_SpatialMotionVector(resc,resv,argc,(mxArray**)(argv)); break;
  case 576: flag=_wrap_new_SpatialForceVector(resc,resv,argc,(mxArray**)(argv)); break;
  case 577: flag=_wrap_delete_SpatialForceVector(resc,resv,argc,(mxArray**)(argv)); break;
  case 578: flag=_wrap_SpatialForceVector_mtimes(resc,resv,argc,(mxArray**)(argv)); break;
  case 579: flag=_wrap_new_Twist(resc,resv,argc,(mxArray**)(argv)); break;
  case 580: flag=_wrap_Twist_plus(resc,resv,argc,(mxArray**)(argv)); break;
  case 581: flag=_wrap_Twist_minus(resc,resv,argc,(mxArray**)(argv)); break;
  case 582: flag=_wrap_Twist_uminus(resc,resv,argc,(mxArray**)(argv)); break;
  case 583: flag=_wrap_Twist_mtimes(resc,resv,argc,(mxArray**)(argv)); break;
  case 584: flag=_wrap_delete_Twist(resc,resv,argc,(mxArray**)(argv)); break;
  case 585: flag=_wrap_new_Wrench(resc,resv,argc,(mxArray**)(argv)); break;
  case 586: flag=_wrap_Wrench_plus(resc,resv,argc,(mxArray**)(argv)); break;
  case 587: flag=_wrap_Wrench_minus(resc,resv,argc,(mxArray**)(argv)); break;
  case 588: flag=_wrap_Wrench_uminus(resc,resv,argc,(mxArray**)(argv)); break;
  case 589: flag=_wrap_delete_Wrench(resc,resv,argc,(mxArray**)(argv)); break;
  case 590: flag=_wrap_new_SpatialMomentum(resc,resv,argc,(mxArray**)(argv)); break;
  case 591: flag=_wrap_SpatialMomentum_plus(resc,resv,argc,(mxArray**)(argv)); break;
  case 592: flag=_wrap_SpatialMomentum_minus(resc,resv,argc,(mxArray**)(argv)); break;
  case 593: flag=_wrap_SpatialMomentum_uminus(resc,resv,argc,(mxArray**)(argv)); break;
  case 594: flag=_wrap_delete_SpatialMomentum(resc,resv,argc,(mxArray**)(argv)); break;
  case 595: flag=_wrap_new_SpatialAcc(resc,resv,argc,(mxArray**)(argv)); break;
  case 596: flag=_wrap_SpatialAcc_plus(resc,resv,argc,(mxArray**)(argv)); break;
  case 597: flag=_wrap_SpatialAcc_minus(resc,resv,argc,(mxArray**)(argv)); break;
  case 598: flag=_wrap_SpatialAcc_uminus(resc,resv,argc,(mxArray**)(argv)); break;
  case 599: flag=_wrap_delete_SpatialAcc(resc,resv,argc,(mxArray**)(argv)); break;
  case 600: flag=_wrap_new_ClassicalAcc(resc,resv,argc,(mxArray**)(argv)); break;
  case 601: flag=_wrap_ClassicalAcc_changeCoordFrame(resc,resv,argc,(mxArray**)(argv)); break;
  case 602: flag=_wrap_ClassicalAcc_Zero(resc,resv,argc,(mxArray**)(argv)); break;
  case 603: flag=_wrap_ClassicalAcc_fromSpatial(resc,resv,argc,(mxArray**)(argv)); break;
  case 604: flag=_wrap_ClassicalAcc_toSpatial(resc,resv,argc,(mxArray**)(argv)); break;
  case 605: flag=_wrap_delete_ClassicalAcc(resc,resv,argc,(mxArray**)(argv)); break;
  case 606: flag=_wrap_new_Direction(resc,resv,argc,(mxArray**)(argv)); break;
  case 607: flag=_wrap_Direction_Normalize(resc,resv,argc,(mxArray**)(argv)); break;
  case 608: flag=_wrap_Direction_isParallel(resc,resv,argc,(mxArray**)(argv)); break;
  case 609: flag=_wrap_Direction_isPerpendicular(resc,resv,argc,(mxArray**)(argv)); break;
  case 610: flag=_wrap_Direction_reverse(resc,resv,argc,(mxArray**)(argv)); break;
  case 611: flag=_wrap_Direction_toString(resc,resv,argc,(mxArray**)(argv)); break;
  case 612: flag=_wrap_Direction_display(resc,resv,argc,(mxArray**)(argv)); break;
  case 613: flag=_wrap_Direction_Default(resc,resv,argc,(mxArray**)(argv)); break;
  case 614: flag=_wrap_delete_Direction(resc,resv,argc,(mxArray**)(argv)); break;
  case 615: flag=_wrap_new_Axis(resc,resv,argc,(mxArray**)(argv)); break;
  case 616: flag=_wrap_Axis_getDirection(resc,resv,argc,(mxArray**)(argv)); break;
  case 617: flag=_wrap_Axis_getOrigin(resc,resv,argc,(mxArray**)(argv)); break;
  case 618: flag=_wrap_Axis_setDirection(resc,resv,argc,(mxArray**)(argv)); break;
  case 619: flag=_wrap_Axis_setOrigin(resc,resv,argc,(mxArray**)(argv)); break;
  case 620: flag=_wrap_Axis_getRotationTransform(resc,resv,argc,(mxArray**)(argv)); break;
  case 621: flag=_wrap_Axis_getRotationTransformDerivative(resc,resv,argc,(mxArray**)(argv)); break;
  case 622: flag=_wrap_Axis_getRotationTwist(resc,resv,argc,(mxArray**)(argv)); break;
  case 623: flag=_wrap_Axis_getRotationSpatialAcc(resc,resv,argc,(mxArray**)(argv)); break;
  case 624: flag=_wrap_Axis_getTranslationTransform(resc,resv,argc,(mxArray**)(argv)); break;
  case 625: flag=_wrap_Axis_getTranslationTransformDerivative(resc,resv,argc,(mxArray**)(argv)); break;
  case 626: flag=_wrap_Axis_getTranslationTwist(resc,resv,argc,(mxArray**)(argv)); break;
  case 627: flag=_wrap_Axis_getTranslationSpatialAcc(resc,resv,argc,(mxArray**)(argv)); break;
  case 628: flag=_wrap_Axis_isParallel(resc,resv,argc,(mxArray**)(argv)); break;
  case 629: flag=_wrap_Axis_reverse(resc,resv,argc,(mxArray**)(argv)); break;
  case 630: flag=_wrap_Axis_toString(resc,resv,argc,(mxArray**)(argv)); break;
  case 631: flag=_wrap_Axis_display(resc,resv,argc,(mxArray**)(argv)); break;
  case 632: flag=_wrap_delete_Axis(resc,resv,argc,(mxArray**)(argv)); break;
  case 633: flag=_wrap_new_RotationalInertiaRaw(resc,resv,argc,(mxArray**)(argv)); break;
  case 634: flag=_wrap_RotationalInertiaRaw_Zero(resc,resv,argc,(mxArray**)(argv)); break;
  case 635: flag=_wrap_delete_RotationalInertiaRaw(resc,resv,argc,(mxArray**)(argv)); break;
  case 636: flag=_wrap_new_SpatialInertiaRaw(resc,resv,argc,(mxArray**)(argv)); break;
  case 637: flag=_wrap_SpatialInertiaRaw_fromRotationalInertiaWrtCenterOfMass(resc,resv,argc,(mxArray**)(argv)); break;
  case 638: flag=_wrap_SpatialInertiaRaw_getMass(resc,resv,argc,(mxArray**)(argv)); break;
  case 639: flag=_wrap_SpatialInertiaRaw_getCenterOfMass(resc,resv,argc,(mxArray**)(argv)); break;
  case 640: flag=_wrap_SpatialInertiaRaw_getRotationalInertiaWrtFrameOrigin(resc,resv,argc,(mxArray**)(argv)); break;
  case 641: flag=_wrap_SpatialInertiaRaw_getRotationalInertiaWrtCenterOfMass(resc,resv,argc,(mxArray**)(argv)); break;
  case 642: flag=_wrap_SpatialInertiaRaw_combine(resc,resv,argc,(mxArray**)(argv)); break;
  case 643: flag=_wrap_SpatialInertiaRaw_multiply(resc,resv,argc,(mxArray**)(argv)); break;
  case 644: flag=_wrap_SpatialInertiaRaw_zero(resc,resv,argc,(mxArray**)(argv)); break;
  case 645: flag=_wrap_delete_SpatialInertiaRaw(resc,resv,argc,(mxArray**)(argv)); break;
  case 646: flag=_wrap_new_SpatialInertia(resc,resv,argc,(mxArray**)(argv)); break;
  case 647: flag=_wrap_SpatialInertia_combine(resc,resv,argc,(mxArray**)(argv)); break;
  case 648: flag=_wrap_SpatialInertia_asMatrix(resc,resv,argc,(mxArray**)(argv)); break;
  case 649: flag=_wrap_SpatialInertia_applyInverse(resc,resv,argc,(mxArray**)(argv)); break;
  case 650: flag=_wrap_SpatialInertia_getInverse(resc,resv,argc,(mxArray**)(argv)); break;
  case 651: flag=_wrap_SpatialInertia_plus(resc,resv,argc,(mxArray**)(argv)); break;
  case 652: flag=_wrap_SpatialInertia_mtimes(resc,resv,argc,(mxArray**)(argv)); break;
  case 653: flag=_wrap_SpatialInertia_biasWrench(resc,resv,argc,(mxArray**)(argv)); break;
  case 654: flag=_wrap_SpatialInertia_biasWrenchDerivative(resc,resv,argc,(mxArray**)(argv)); break;
  case 655: flag=_wrap_SpatialInertia_Zero(resc,resv,argc,(mxArray**)(argv)); break;
  case 656: flag=_wrap_SpatialInertia_asVector(resc,resv,argc,(mxArray**)(argv)); break;
  case 657: flag=_wrap_SpatialInertia_fromVector(resc,resv,argc,(mxArray**)(argv)); break;
  case 658: flag=_wrap_SpatialInertia_isPhysicallyConsistent(resc,resv,argc,(mxArray**)(argv)); break;
  case 659: flag=_wrap_SpatialInertia_momentumRegressor(resc,resv,argc,(mxArray**)(argv)); break;
  case 660: flag=_wrap_SpatialInertia_momentumDerivativeRegressor(resc,resv,argc,(mxArray**)(argv)); break;
  case 661: flag=_wrap_SpatialInertia_momentumDerivativeSlotineLiRegressor(resc,resv,argc,(mxArray**)(argv)); break;
  case 662: flag=_wrap_delete_SpatialInertia(resc,resv,argc,(mxArray**)(argv)); break;
  case 663: flag=_wrap_new_ArticulatedBodyInertia(resc,resv,argc,(mxArray**)(argv)); break;
  case 664: flag=_wrap_ArticulatedBodyInertia_getLinearLinearSubmatrix(resc,resv,argc,(mxArray**)(argv)); break;
  case 665: flag=_wrap_ArticulatedBodyInertia_getLinearAngularSubmatrix(resc,resv,argc,(mxArray**)(argv)); break;
  case 666: flag=_wrap_ArticulatedBodyInertia_getAngularAngularSubmatrix(resc,resv,argc,(mxArray**)(argv)); break;
  case 667: flag=_wrap_ArticulatedBodyInertia_combine(resc,resv,argc,(mxArray**)(argv)); break;
  case 668: flag=_wrap_ArticulatedBodyInertia_applyInverse(resc,resv,argc,(mxArray**)(argv)); break;
  case 669: flag=_wrap_ArticulatedBodyInertia_asMatrix(resc,resv,argc,(mxArray**)(argv)); break;
  case 670: flag=_wrap_ArticulatedBodyInertia_getInverse(resc,resv,argc,(mxArray**)(argv)); break;
  case 671: flag=_wrap_ArticulatedBodyInertia_plus(resc,resv,argc,(mxArray**)(argv)); break;
  case 672: flag=_wrap_ArticulatedBodyInertia_minus(resc,resv,argc,(mxArray**)(argv)); break;
  case 673: flag=_wrap_ArticulatedBodyInertia_mtimes(resc,resv,argc,(mxArray**)(argv)); break;
  case 674: flag=_wrap_ArticulatedBodyInertia_zero(resc,resv,argc,(mxArray**)(argv)); break;
  case 675: flag=_wrap_ArticulatedBodyInertia_ABADyadHelper(resc,resv,argc,(mxArray**)(argv)); break;
  case 676: flag=_wrap_ArticulatedBodyInertia_ABADyadHelperLin(resc,resv,argc,(mxArray**)(argv)); break;
  case 677: flag=_wrap_delete_ArticulatedBodyInertia(resc,resv,argc,(mxArray**)(argv)); break;
  case 678: flag=_wrap_RigidBodyInertiaNonLinearParametrization_mass_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 679: flag=_wrap_RigidBodyInertiaNonLinearParametrization_mass_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 680: flag=_wrap_RigidBodyInertiaNonLinearParametrization_com_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 681: flag=_wrap_RigidBodyInertiaNonLinearParametrization_com_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 682: flag=_wrap_RigidBodyInertiaNonLinearParametrization_link_R_centroidal_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 683: flag=_wrap_RigidBodyInertiaNonLinearParametrization_link_R_centroidal_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 684: flag=_wrap_RigidBodyInertiaNonLinearParametrization_centralSecondMomentOfMass_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 685: flag=_wrap_RigidBodyInertiaNonLinearParametrization_centralSecondMomentOfMass_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 686: flag=_wrap_RigidBodyInertiaNonLinearParametrization_getLinkCentroidalTransform(resc,resv,argc,(mxArray**)(argv)); break;
  case 687: flag=_wrap_RigidBodyInertiaNonLinearParametrization_fromRigidBodyInertia(resc,resv,argc,(mxArray**)(argv)); break;
  case 688: flag=_wrap_RigidBodyInertiaNonLinearParametrization_fromInertialParameters(resc,resv,argc,(mxArray**)(argv)); break;
  case 689: flag=_wrap_RigidBodyInertiaNonLinearParametrization_toRigidBodyInertia(resc,resv,argc,(mxArray**)(argv)); break;
  case 690: flag=_wrap_RigidBodyInertiaNonLinearParametrization_isPhysicallyConsistent(resc,resv,argc,(mxArray**)(argv)); break;
  case 691: flag=_wrap_RigidBodyInertiaNonLinearParametrization_asVectorWithRotationAsVec(resc,resv,argc,(mxArray**)(argv)); break;
  case 692: flag=_wrap_RigidBodyInertiaNonLinearParametrization_fromVectorWithRotationAsVec(resc,resv,argc,(mxArray**)(argv)); break;
  case 693: flag=_wrap_RigidBodyInertiaNonLinearParametrization_getGradientWithRotationAsVec(resc,resv,argc,(mxArray**)(argv)); break;
  case 694: flag=_wrap_new_RigidBodyInertiaNonLinearParametrization(resc,resv,argc,(mxArray**)(argv)); break;
  case 695: flag=_wrap_delete_RigidBodyInertiaNonLinearParametrization(resc,resv,argc,(mxArray**)(argv)); break;
  case 696: flag=_wrap_new_RotationRaw(resc,resv,argc,(mxArray**)(argv)); break;
  case 697: flag=_wrap_RotationRaw_changeOrientFrame(resc,resv,argc,(mxArray**)(argv)); break;
  case 698: flag=_wrap_RotationRaw_changeRefOrientFrame(resc,resv,argc,(mxArray**)(argv)); break;
  case 699: flag=_wrap_RotationRaw_compose(resc,resv,argc,(mxArray**)(argv)); break;
  case 700: flag=_wrap_RotationRaw_inverse2(resc,resv,argc,(mxArray**)(argv)); break;
  case 701: flag=_wrap_RotationRaw_changeCoordFrameOf(resc,resv,argc,(mxArray**)(argv)); break;
  case 702: flag=_wrap_RotationRaw_RotX(resc,resv,argc,(mxArray**)(argv)); break;
  case 703: flag=_wrap_RotationRaw_RotY(resc,resv,argc,(mxArray**)(argv)); break;
  case 704: flag=_wrap_RotationRaw_RotZ(resc,resv,argc,(mxArray**)(argv)); break;
  case 705: flag=_wrap_RotationRaw_RPY(resc,resv,argc,(mxArray**)(argv)); break;
  case 706: flag=_wrap_RotationRaw_Identity(resc,resv,argc,(mxArray**)(argv)); break;
  case 707: flag=_wrap_RotationRaw_toString(resc,resv,argc,(mxArray**)(argv)); break;
  case 708: flag=_wrap_RotationRaw_display(resc,resv,argc,(mxArray**)(argv)); break;
  case 709: flag=_wrap_delete_RotationRaw(resc,resv,argc,(mxArray**)(argv)); break;
  case 710: flag=_wrap_new_RotationSemantics(resc,resv,argc,(mxArray**)(argv)); break;
  case 711: flag=_wrap_RotationSemantics_setToUnknown(resc,resv,argc,(mxArray**)(argv)); break;
  case 712: flag=_wrap_RotationSemantics_getOrientationFrame(resc,resv,argc,(mxArray**)(argv)); break;
  case 713: flag=_wrap_RotationSemantics_getBody(resc,resv,argc,(mxArray**)(argv)); break;
  case 714: flag=_wrap_RotationSemantics_getReferenceOrientationFrame(resc,resv,argc,(mxArray**)(argv)); break;
  case 715: flag=_wrap_RotationSemantics_getRefBody(resc,resv,argc,(mxArray**)(argv)); break;
  case 716: flag=_wrap_RotationSemantics_getCoordinateFrame(resc,resv,argc,(mxArray**)(argv)); break;
  case 717: flag=_wrap_RotationSemantics_setOrientationFrame(resc,resv,argc,(mxArray**)(argv)); break;
  case 718: flag=_wrap_RotationSemantics_setBody(resc,resv,argc,(mxArray**)(argv)); break;
  case 719: flag=_wrap_RotationSemantics_setReferenceOrientationFrame(resc,resv,argc,(mxArray**)(argv)); break;
  case 720: flag=_wrap_RotationSemantics_setRefBody(resc,resv,argc,(mxArray**)(argv)); break;
  case 721: flag=_wrap_RotationSemantics_setCoordinateFrame(resc,resv,argc,(mxArray**)(argv)); break;
  case 722: flag=_wrap_RotationSemantics_changeOrientFrame(resc,resv,argc,(mxArray**)(argv)); break;
  case 723: flag=_wrap_RotationSemantics_changeRefOrientFrame(resc,resv,argc,(mxArray**)(argv)); break;
  case 724: flag=_wrap_RotationSemantics_changeCoordFrameOf(resc,resv,argc,(mxArray**)(argv)); break;
  case 725: flag=_wrap_RotationSemantics_compose(resc,resv,argc,(mxArray**)(argv)); break;
  case 726: flag=_wrap_RotationSemantics_inverse2(resc,resv,argc,(mxArray**)(argv)); break;
  case 727: flag=_wrap_RotationSemantics_toString(resc,resv,argc,(mxArray**)(argv)); break;
  case 728: flag=_wrap_RotationSemantics_display(resc,resv,argc,(mxArray**)(argv)); break;
  case 729: flag=_wrap_delete_RotationSemantics(resc,resv,argc,(mxArray**)(argv)); break;
  case 730: flag=_wrap_new_Rotation(resc,resv,argc,(mxArray**)(argv)); break;
  case 731: flag=_wrap_Rotation_getSemantics(resc,resv,argc,(mxArray**)(argv)); break;
  case 732: flag=_wrap_Rotation_changeOrientFrame(resc,resv,argc,(mxArray**)(argv)); break;
  case 733: flag=_wrap_Rotation_changeRefOrientFrame(resc,resv,argc,(mxArray**)(argv)); break;
  case 734: flag=_wrap_Rotation_changeCoordinateFrame(resc,resv,argc,(mxArray**)(argv)); break;
  case 735: flag=_wrap_Rotation_compose(resc,resv,argc,(mxArray**)(argv)); break;
  case 736: flag=_wrap_Rotation_inverse2(resc,resv,argc,(mxArray**)(argv)); break;
  case 737: flag=_wrap_Rotation_changeCoordFrameOf(resc,resv,argc,(mxArray**)(argv)); break;
  case 738: flag=_wrap_Rotation_inverse(resc,resv,argc,(mxArray**)(argv)); break;
  case 739: flag=_wrap_Rotation_mtimes(resc,resv,argc,(mxArray**)(argv)); break;
  case 740: flag=_wrap_Rotation_log(resc,resv,argc,(mxArray**)(argv)); break;
  case 741: flag=_wrap_Rotation_fromQuaternion(resc,resv,argc,(mxArray**)(argv)); break;
  case 742: flag=_wrap_Rotation_getRPY(resc,resv,argc,(mxArray**)(argv)); break;
  case 743: flag=_wrap_Rotation_asRPY(resc,resv,argc,(mxArray**)(argv)); break;
  case 744: flag=_wrap_Rotation_getQuaternion(resc,resv,argc,(mxArray**)(argv)); break;
  case 745: flag=_wrap_Rotation_asQuaternion(resc,resv,argc,(mxArray**)(argv)); break;
  case 746: flag=_wrap_Rotation_RotX(resc,resv,argc,(mxArray**)(argv)); break;
  case 747: flag=_wrap_Rotation_RotY(resc,resv,argc,(mxArray**)(argv)); break;
  case 748: flag=_wrap_Rotation_RotZ(resc,resv,argc,(mxArray**)(argv)); break;
  case 749: flag=_wrap_Rotation_RotAxis(resc,resv,argc,(mxArray**)(argv)); break;
  case 750: flag=_wrap_Rotation_RotAxisDerivative(resc,resv,argc,(mxArray**)(argv)); break;
  case 751: flag=_wrap_Rotation_RPY(resc,resv,argc,(mxArray**)(argv)); break;
  case 752: flag=_wrap_Rotation_RPYRightTrivializedDerivative(resc,resv,argc,(mxArray**)(argv)); break;
  case 753: flag=_wrap_Rotation_RPYRightTrivializedDerivativeInverse(resc,resv,argc,(mxArray**)(argv)); break;
  case 754: flag=_wrap_Rotation_QuaternionRightTrivializedDerivative(resc,resv,argc,(mxArray**)(argv)); break;
  case 755: flag=_wrap_Rotation_QuaternionRightTrivializedDerivativeInverse(resc,resv,argc,(mxArray**)(argv)); break;
  case 756: flag=_wrap_Rotation_Identity(resc,resv,argc,(mxArray**)(argv)); break;
  case 757: flag=_wrap_Rotation_RotationFromQuaternion(resc,resv,argc,(mxArray**)(argv)); break;
  case 758: flag=_wrap_Rotation_toString(resc,resv,argc,(mxArray**)(argv)); break;
  case 759: flag=_wrap_Rotation_display(resc,resv,argc,(mxArray**)(argv)); break;
  case 760: flag=_wrap_delete_Rotation(resc,resv,argc,(mxArray**)(argv)); break;
  case 761: flag=_wrap_new_TransformSemantics(resc,resv,argc,(mxArray**)(argv)); break;
  case 762: flag=_wrap_TransformSemantics_getRotationSemantics(resc,resv,argc,(mxArray**)(argv)); break;
  case 763: flag=_wrap_TransformSemantics_getPositionSemantics(resc,resv,argc,(mxArray**)(argv)); break;
  case 764: flag=_wrap_TransformSemantics_setRotationSemantics(resc,resv,argc,(mxArray**)(argv)); break;
  case 765: flag=_wrap_TransformSemantics_setPositionSemantics(resc,resv,argc,(mxArray**)(argv)); break;
  case 766: flag=_wrap_TransformSemantics_toString(resc,resv,argc,(mxArray**)(argv)); break;
  case 767: flag=_wrap_TransformSemantics_display(resc,resv,argc,(mxArray**)(argv)); break;
  case 768: flag=_wrap_delete_TransformSemantics(resc,resv,argc,(mxArray**)(argv)); break;
  case 769: flag=_wrap_new_Transform(resc,resv,argc,(mxArray**)(argv)); break;
  case 770: flag=_wrap_Transform_getSemantics(resc,resv,argc,(mxArray**)(argv)); break;
  case 771: flag=_wrap_Transform_getRotation(resc,resv,argc,(mxArray**)(argv)); break;
  case 772: flag=_wrap_Transform_getPosition(resc,resv,argc,(mxArray**)(argv)); break;
  case 773: flag=_wrap_Transform_setRotation(resc,resv,argc,(mxArray**)(argv)); break;
  case 774: flag=_wrap_Transform_setPosition(resc,resv,argc,(mxArray**)(argv)); break;
  case 775: flag=_wrap_Transform_compose(resc,resv,argc,(mxArray**)(argv)); break;
  case 776: flag=_wrap_Transform_inverse2(resc,resv,argc,(mxArray**)(argv)); break;
  case 777: flag=_wrap_Transform_inverse(resc,resv,argc,(mxArray**)(argv)); break;
  case 778: flag=_wrap_Transform_mtimes(resc,resv,argc,(mxArray**)(argv)); break;
  case 779: flag=_wrap_Transform_Identity(resc,resv,argc,(mxArray**)(argv)); break;
  case 780: flag=_wrap_Transform_asHomogeneousTransform(resc,resv,argc,(mxArray**)(argv)); break;
  case 781: flag=_wrap_Transform_asAdjointTransform(resc,resv,argc,(mxArray**)(argv)); break;
  case 782: flag=_wrap_Transform_asAdjointTransformWrench(resc,resv,argc,(mxArray**)(argv)); break;
  case 783: flag=_wrap_Transform_log(resc,resv,argc,(mxArray**)(argv)); break;
  case 784: flag=_wrap_Transform_toString(resc,resv,argc,(mxArray**)(argv)); break;
  case 785: flag=_wrap_Transform_display(resc,resv,argc,(mxArray**)(argv)); break;
  case 786: flag=_wrap_delete_Transform(resc,resv,argc,(mxArray**)(argv)); break;
  case 787: flag=_wrap_new_TransformDerivative(resc,resv,argc,(mxArray**)(argv)); break;
  case 788: flag=_wrap_delete_TransformDerivative(resc,resv,argc,(mxArray**)(argv)); break;
  case 789: flag=_wrap_TransformDerivative_getRotationDerivative(resc,resv,argc,(mxArray**)(argv)); break;
  case 790: flag=_wrap_TransformDerivative_getPositionDerivative(resc,resv,argc,(mxArray**)(argv)); break;
  case 791: flag=_wrap_TransformDerivative_setRotationDerivative(resc,resv,argc,(mxArray**)(argv)); break;
  case 792: flag=_wrap_TransformDerivative_setPositionDerivative(resc,resv,argc,(mxArray**)(argv)); break;
  case 793: flag=_wrap_TransformDerivative_Zero(resc,resv,argc,(mxArray**)(argv)); break;
  case 794: flag=_wrap_TransformDerivative_asHomogeneousTransformDerivative(resc,resv,argc,(mxArray**)(argv)); break;
  case 795: flag=_wrap_TransformDerivative_asAdjointTransformDerivative(resc,resv,argc,(mxArray**)(argv)); break;
  case 796: flag=_wrap_TransformDerivative_asAdjointTransformWrenchDerivative(resc,resv,argc,(mxArray**)(argv)); break;
  case 797: flag=_wrap_TransformDerivative_mtimes(resc,resv,argc,(mxArray**)(argv)); break;
  case 798: flag=_wrap_TransformDerivative_derivativeOfInverse(resc,resv,argc,(mxArray**)(argv)); break;
  case 799: flag=_wrap_TransformDerivative_transform(resc,resv,argc,(mxArray**)(argv)); break;
  case 800: flag=_wrap_LINK_INVALID_INDEX_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 801: flag=_wrap_LINK_INVALID_INDEX_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 802: flag=_wrap_LINK_INVALID_NAME_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 803: flag=_wrap_LINK_INVALID_NAME_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 804: flag=_wrap_JOINT_INVALID_INDEX_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 805: flag=_wrap_JOINT_INVALID_INDEX_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 806: flag=_wrap_JOINT_INVALID_NAME_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 807: flag=_wrap_JOINT_INVALID_NAME_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 808: flag=_wrap_DOF_INVALID_INDEX_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 809: flag=_wrap_DOF_INVALID_INDEX_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 810: flag=_wrap_DOF_INVALID_NAME_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 811: flag=_wrap_DOF_INVALID_NAME_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 812: flag=_wrap_FRAME_INVALID_INDEX_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 813: flag=_wrap_FRAME_INVALID_INDEX_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 814: flag=_wrap_FRAME_INVALID_NAME_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 815: flag=_wrap_FRAME_INVALID_NAME_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 816: flag=_wrap_TRAVERSAL_INVALID_INDEX_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 817: flag=_wrap_TRAVERSAL_INVALID_INDEX_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 818: flag=_wrap_new_LinkPositions(resc,resv,argc,(mxArray**)(argv)); break;
  case 819: flag=_wrap_LinkPositions_resize(resc,resv,argc,(mxArray**)(argv)); break;
  case 820: flag=_wrap_LinkPositions_isConsistent(resc,resv,argc,(mxArray**)(argv)); break;
  case 821: flag=_wrap_LinkPositions_getNrOfLinks(resc,resv,argc,(mxArray**)(argv)); break;
  case 822: flag=_wrap_LinkPositions_paren(resc,resv,argc,(mxArray**)(argv)); break;
  case 823: flag=_wrap_LinkPositions_toString(resc,resv,argc,(mxArray**)(argv)); break;
  case 824: flag=_wrap_delete_LinkPositions(resc,resv,argc,(mxArray**)(argv)); break;
  case 825: flag=_wrap_new_LinkWrenches(resc,resv,argc,(mxArray**)(argv)); break;
  case 826: flag=_wrap_LinkWrenches_resize(resc,resv,argc,(mxArray**)(argv)); break;
  case 827: flag=_wrap_LinkWrenches_isConsistent(resc,resv,argc,(mxArray**)(argv)); break;
  case 828: flag=_wrap_LinkWrenches_getNrOfLinks(resc,resv,argc,(mxArray**)(argv)); break;
  case 829: flag=_wrap_LinkWrenches_paren(resc,resv,argc,(mxArray**)(argv)); break;
  case 830: flag=_wrap_LinkWrenches_toString(resc,resv,argc,(mxArray**)(argv)); break;
  case 831: flag=_wrap_LinkWrenches_zero(resc,resv,argc,(mxArray**)(argv)); break;
  case 832: flag=_wrap_delete_LinkWrenches(resc,resv,argc,(mxArray**)(argv)); break;
  case 833: flag=_wrap_new_LinkInertias(resc,resv,argc,(mxArray**)(argv)); break;
  case 834: flag=_wrap_LinkInertias_resize(resc,resv,argc,(mxArray**)(argv)); break;
  case 835: flag=_wrap_LinkInertias_isConsistent(resc,resv,argc,(mxArray**)(argv)); break;
  case 836: flag=_wrap_LinkInertias_paren(resc,resv,argc,(mxArray**)(argv)); break;
  case 837: flag=_wrap_delete_LinkInertias(resc,resv,argc,(mxArray**)(argv)); break;
  case 838: flag=_wrap_new_LinkArticulatedBodyInertias(resc,resv,argc,(mxArray**)(argv)); break;
  case 839: flag=_wrap_LinkArticulatedBodyInertias_resize(resc,resv,argc,(mxArray**)(argv)); break;
  case 840: flag=_wrap_LinkArticulatedBodyInertias_isConsistent(resc,resv,argc,(mxArray**)(argv)); break;
  case 841: flag=_wrap_LinkArticulatedBodyInertias_paren(resc,resv,argc,(mxArray**)(argv)); break;
  case 842: flag=_wrap_delete_LinkArticulatedBodyInertias(resc,resv,argc,(mxArray**)(argv)); break;
  case 843: flag=_wrap_new_LinkVelArray(resc,resv,argc,(mxArray**)(argv)); break;
  case 844: flag=_wrap_LinkVelArray_resize(resc,resv,argc,(mxArray**)(argv)); break;
  case 845: flag=_wrap_LinkVelArray_isConsistent(resc,resv,argc,(mxArray**)(argv)); break;
  case 846: flag=_wrap_LinkVelArray_getNrOfLinks(resc,resv,argc,(mxArray**)(argv)); break;
  case 847: flag=_wrap_LinkVelArray_paren(resc,resv,argc,(mxArray**)(argv)); break;
  case 848: flag=_wrap_LinkVelArray_toString(resc,resv,argc,(mxArray**)(argv)); break;
  case 849: flag=_wrap_delete_LinkVelArray(resc,resv,argc,(mxArray**)(argv)); break;
  case 850: flag=_wrap_new_LinkAccArray(resc,resv,argc,(mxArray**)(argv)); break;
  case 851: flag=_wrap_LinkAccArray_resize(resc,resv,argc,(mxArray**)(argv)); break;
  case 852: flag=_wrap_LinkAccArray_isConsistent(resc,resv,argc,(mxArray**)(argv)); break;
  case 853: flag=_wrap_LinkAccArray_paren(resc,resv,argc,(mxArray**)(argv)); break;
  case 854: flag=_wrap_LinkAccArray_getNrOfLinks(resc,resv,argc,(mxArray**)(argv)); break;
  case 855: flag=_wrap_LinkAccArray_toString(resc,resv,argc,(mxArray**)(argv)); break;
  case 856: flag=_wrap_delete_LinkAccArray(resc,resv,argc,(mxArray**)(argv)); break;
  case 857: flag=_wrap_new_Link(resc,resv,argc,(mxArray**)(argv)); break;
  case 858: flag=_wrap_Link_inertia(resc,resv,argc,(mxArray**)(argv)); break;
  case 859: flag=_wrap_Link_setInertia(resc,resv,argc,(mxArray**)(argv)); break;
  case 860: flag=_wrap_Link_getInertia(resc,resv,argc,(mxArray**)(argv)); break;
  case 861: flag=_wrap_Link_setIndex(resc,resv,argc,(mxArray**)(argv)); break;
  case 862: flag=_wrap_Link_getIndex(resc,resv,argc,(mxArray**)(argv)); break;
  case 863: flag=_wrap_delete_Link(resc,resv,argc,(mxArray**)(argv)); break;
  case 864: flag=_wrap_delete_IJoint(resc,resv,argc,(mxArray**)(argv)); break;
  case 865: flag=_wrap_IJoint_clone(resc,resv,argc,(mxArray**)(argv)); break;
  case 866: flag=_wrap_IJoint_getNrOfPosCoords(resc,resv,argc,(mxArray**)(argv)); break;
  case 867: flag=_wrap_IJoint_getNrOfDOFs(resc,resv,argc,(mxArray**)(argv)); break;
  case 868: flag=_wrap_IJoint_setAttachedLinks(resc,resv,argc,(mxArray**)(argv)); break;
  case 869: flag=_wrap_IJoint_setRestTransform(resc,resv,argc,(mxArray**)(argv)); break;
  case 870: flag=_wrap_IJoint_getFirstAttachedLink(resc,resv,argc,(mxArray**)(argv)); break;
  case 871: flag=_wrap_IJoint_getSecondAttachedLink(resc,resv,argc,(mxArray**)(argv)); break;
  case 872: flag=_wrap_IJoint_getRestTransform(resc,resv,argc,(mxArray**)(argv)); break;
  case 873: flag=_wrap_IJoint_getTransform(resc,resv,argc,(mxArray**)(argv)); break;
  case 874: flag=_wrap_IJoint_getTransformDerivative(resc,resv,argc,(mxArray**)(argv)); break;
  case 875: flag=_wrap_IJoint_getMotionSubspaceVector(resc,resv,argc,(mxArray**)(argv)); break;
  case 876: flag=_wrap_IJoint_computeChildPosVelAcc(resc,resv,argc,(mxArray**)(argv)); break;
  case 877: flag=_wrap_IJoint_computeChildVelAcc(resc,resv,argc,(mxArray**)(argv)); break;
  case 878: flag=_wrap_IJoint_computeChildVel(resc,resv,argc,(mxArray**)(argv)); break;
  case 879: flag=_wrap_IJoint_computeChildAcc(resc,resv,argc,(mxArray**)(argv)); break;
  case 880: flag=_wrap_IJoint_computeChildBiasAcc(resc,resv,argc,(mxArray**)(argv)); break;
  case 881: flag=_wrap_IJoint_computeJointTorque(resc,resv,argc,(mxArray**)(argv)); break;
  case 882: flag=_wrap_IJoint_setIndex(resc,resv,argc,(mxArray**)(argv)); break;
  case 883: flag=_wrap_IJoint_getIndex(resc,resv,argc,(mxArray**)(argv)); break;
  case 884: flag=_wrap_IJoint_setPosCoordsOffset(resc,resv,argc,(mxArray**)(argv)); break;
  case 885: flag=_wrap_IJoint_getPosCoordsOffset(resc,resv,argc,(mxArray**)(argv)); break;
  case 886: flag=_wrap_IJoint_setDOFsOffset(resc,resv,argc,(mxArray**)(argv)); break;
  case 887: flag=_wrap_IJoint_getDOFsOffset(resc,resv,argc,(mxArray**)(argv)); break;
  case 888: flag=_wrap_IJoint_hasPosLimits(resc,resv,argc,(mxArray**)(argv)); break;
  case 889: flag=_wrap_IJoint_enablePosLimits(resc,resv,argc,(mxArray**)(argv)); break;
  case 890: flag=_wrap_IJoint_getPosLimits(resc,resv,argc,(mxArray**)(argv)); break;
  case 891: flag=_wrap_IJoint_getMinPosLimit(resc,resv,argc,(mxArray**)(argv)); break;
  case 892: flag=_wrap_IJoint_getMaxPosLimit(resc,resv,argc,(mxArray**)(argv)); break;
  case 893: flag=_wrap_IJoint_setPosLimits(resc,resv,argc,(mxArray**)(argv)); break;
  case 894: flag=_wrap_IJoint_isRevoluteJoint(resc,resv,argc,(mxArray**)(argv)); break;
  case 895: flag=_wrap_IJoint_isFixedJoint(resc,resv,argc,(mxArray**)(argv)); break;
  case 896: flag=_wrap_IJoint_asRevoluteJoint(resc,resv,argc,(mxArray**)(argv)); break;
  case 897: flag=_wrap_IJoint_asFixedJoint(resc,resv,argc,(mxArray**)(argv)); break;
  case 898: flag=_wrap_delete_FixedJoint(resc,resv,argc,(mxArray**)(argv)); break;
  case 899: flag=_wrap_FixedJoint_clone(resc,resv,argc,(mxArray**)(argv)); break;
  case 900: flag=_wrap_FixedJoint_getNrOfPosCoords(resc,resv,argc,(mxArray**)(argv)); break;
  case 901: flag=_wrap_FixedJoint_getNrOfDOFs(resc,resv,argc,(mxArray**)(argv)); break;
  case 902: flag=_wrap_FixedJoint_setAttachedLinks(resc,resv,argc,(mxArray**)(argv)); break;
  case 903: flag=_wrap_FixedJoint_setRestTransform(resc,resv,argc,(mxArray**)(argv)); break;
  case 904: flag=_wrap_FixedJoint_getFirstAttachedLink(resc,resv,argc,(mxArray**)(argv)); break;
  case 905: flag=_wrap_FixedJoint_getSecondAttachedLink(resc,resv,argc,(mxArray**)(argv)); break;
  case 906: flag=_wrap_FixedJoint_getRestTransform(resc,resv,argc,(mxArray**)(argv)); break;
  case 907: flag=_wrap_FixedJoint_getTransform(resc,resv,argc,(mxArray**)(argv)); break;
  case 908: flag=_wrap_FixedJoint_getTransformDerivative(resc,resv,argc,(mxArray**)(argv)); break;
  case 909: flag=_wrap_FixedJoint_getMotionSubspaceVector(resc,resv,argc,(mxArray**)(argv)); break;
  case 910: flag=_wrap_FixedJoint_computeChildPosVelAcc(resc,resv,argc,(mxArray**)(argv)); break;
  case 911: flag=_wrap_FixedJoint_computeChildVelAcc(resc,resv,argc,(mxArray**)(argv)); break;
  case 912: flag=_wrap_FixedJoint_computeChildVel(resc,resv,argc,(mxArray**)(argv)); break;
  case 913: flag=_wrap_FixedJoint_computeChildAcc(resc,resv,argc,(mxArray**)(argv)); break;
  case 914: flag=_wrap_FixedJoint_computeChildBiasAcc(resc,resv,argc,(mxArray**)(argv)); break;
  case 915: flag=_wrap_FixedJoint_computeJointTorque(resc,resv,argc,(mxArray**)(argv)); break;
  case 916: flag=_wrap_FixedJoint_setIndex(resc,resv,argc,(mxArray**)(argv)); break;
  case 917: flag=_wrap_FixedJoint_getIndex(resc,resv,argc,(mxArray**)(argv)); break;
  case 918: flag=_wrap_FixedJoint_setPosCoordsOffset(resc,resv,argc,(mxArray**)(argv)); break;
  case 919: flag=_wrap_FixedJoint_getPosCoordsOffset(resc,resv,argc,(mxArray**)(argv)); break;
  case 920: flag=_wrap_FixedJoint_setDOFsOffset(resc,resv,argc,(mxArray**)(argv)); break;
  case 921: flag=_wrap_FixedJoint_getDOFsOffset(resc,resv,argc,(mxArray**)(argv)); break;
  case 922: flag=_wrap_FixedJoint_hasPosLimits(resc,resv,argc,(mxArray**)(argv)); break;
  case 923: flag=_wrap_FixedJoint_enablePosLimits(resc,resv,argc,(mxArray**)(argv)); break;
  case 924: flag=_wrap_FixedJoint_getPosLimits(resc,resv,argc,(mxArray**)(argv)); break;
  case 925: flag=_wrap_FixedJoint_getMinPosLimit(resc,resv,argc,(mxArray**)(argv)); break;
  case 926: flag=_wrap_FixedJoint_getMaxPosLimit(resc,resv,argc,(mxArray**)(argv)); break;
  case 927: flag=_wrap_FixedJoint_setPosLimits(resc,resv,argc,(mxArray**)(argv)); break;
  case 928: flag=_wrap_delete_MovableJointImpl1(resc,resv,argc,(mxArray**)(argv)); break;
  case 929: flag=_wrap_MovableJointImpl1_getNrOfPosCoords(resc,resv,argc,(mxArray**)(argv)); break;
  case 930: flag=_wrap_MovableJointImpl1_getNrOfDOFs(resc,resv,argc,(mxArray**)(argv)); break;
  case 931: flag=_wrap_MovableJointImpl1_setIndex(resc,resv,argc,(mxArray**)(argv)); break;
  case 932: flag=_wrap_MovableJointImpl1_getIndex(resc,resv,argc,(mxArray**)(argv)); break;
  case 933: flag=_wrap_MovableJointImpl1_setPosCoordsOffset(resc,resv,argc,(mxArray**)(argv)); break;
  case 934: flag=_wrap_MovableJointImpl1_getPosCoordsOffset(resc,resv,argc,(mxArray**)(argv)); break;
  case 935: flag=_wrap_MovableJointImpl1_setDOFsOffset(resc,resv,argc,(mxArray**)(argv)); break;
  case 936: flag=_wrap_MovableJointImpl1_getDOFsOffset(resc,resv,argc,(mxArray**)(argv)); break;
  case 937: flag=_wrap_delete_MovableJointImpl2(resc,resv,argc,(mxArray**)(argv)); break;
  case 938: flag=_wrap_MovableJointImpl2_getNrOfPosCoords(resc,resv,argc,(mxArray**)(argv)); break;
  case 939: flag=_wrap_MovableJointImpl2_getNrOfDOFs(resc,resv,argc,(mxArray**)(argv)); break;
  case 940: flag=_wrap_MovableJointImpl2_setIndex(resc,resv,argc,(mxArray**)(argv)); break;
  case 941: flag=_wrap_MovableJointImpl2_getIndex(resc,resv,argc,(mxArray**)(argv)); break;
  case 942: flag=_wrap_MovableJointImpl2_setPosCoordsOffset(resc,resv,argc,(mxArray**)(argv)); break;
  case 943: flag=_wrap_MovableJointImpl2_getPosCoordsOffset(resc,resv,argc,(mxArray**)(argv)); break;
  case 944: flag=_wrap_MovableJointImpl2_setDOFsOffset(resc,resv,argc,(mxArray**)(argv)); break;
  case 945: flag=_wrap_MovableJointImpl2_getDOFsOffset(resc,resv,argc,(mxArray**)(argv)); break;
  case 946: flag=_wrap_delete_MovableJointImpl3(resc,resv,argc,(mxArray**)(argv)); break;
  case 947: flag=_wrap_MovableJointImpl3_getNrOfPosCoords(resc,resv,argc,(mxArray**)(argv)); break;
  case 948: flag=_wrap_MovableJointImpl3_getNrOfDOFs(resc,resv,argc,(mxArray**)(argv)); break;
  case 949: flag=_wrap_MovableJointImpl3_setIndex(resc,resv,argc,(mxArray**)(argv)); break;
  case 950: flag=_wrap_MovableJointImpl3_getIndex(resc,resv,argc,(mxArray**)(argv)); break;
  case 951: flag=_wrap_MovableJointImpl3_setPosCoordsOffset(resc,resv,argc,(mxArray**)(argv)); break;
  case 952: flag=_wrap_MovableJointImpl3_getPosCoordsOffset(resc,resv,argc,(mxArray**)(argv)); break;
  case 953: flag=_wrap_MovableJointImpl3_setDOFsOffset(resc,resv,argc,(mxArray**)(argv)); break;
  case 954: flag=_wrap_MovableJointImpl3_getDOFsOffset(resc,resv,argc,(mxArray**)(argv)); break;
  case 955: flag=_wrap_delete_MovableJointImpl4(resc,resv,argc,(mxArray**)(argv)); break;
  case 956: flag=_wrap_MovableJointImpl4_getNrOfPosCoords(resc,resv,argc,(mxArray**)(argv)); break;
  case 957: flag=_wrap_MovableJointImpl4_getNrOfDOFs(resc,resv,argc,(mxArray**)(argv)); break;
  case 958: flag=_wrap_MovableJointImpl4_setIndex(resc,resv,argc,(mxArray**)(argv)); break;
  case 959: flag=_wrap_MovableJointImpl4_getIndex(resc,resv,argc,(mxArray**)(argv)); break;
  case 960: flag=_wrap_MovableJointImpl4_setPosCoordsOffset(resc,resv,argc,(mxArray**)(argv)); break;
  case 961: flag=_wrap_MovableJointImpl4_getPosCoordsOffset(resc,resv,argc,(mxArray**)(argv)); break;
  case 962: flag=_wrap_MovableJointImpl4_setDOFsOffset(resc,resv,argc,(mxArray**)(argv)); break;
  case 963: flag=_wrap_MovableJointImpl4_getDOFsOffset(resc,resv,argc,(mxArray**)(argv)); break;
  case 964: flag=_wrap_delete_MovableJointImpl5(resc,resv,argc,(mxArray**)(argv)); break;
  case 965: flag=_wrap_MovableJointImpl5_getNrOfPosCoords(resc,resv,argc,(mxArray**)(argv)); break;
  case 966: flag=_wrap_MovableJointImpl5_getNrOfDOFs(resc,resv,argc,(mxArray**)(argv)); break;
  case 967: flag=_wrap_MovableJointImpl5_setIndex(resc,resv,argc,(mxArray**)(argv)); break;
  case 968: flag=_wrap_MovableJointImpl5_getIndex(resc,resv,argc,(mxArray**)(argv)); break;
  case 969: flag=_wrap_MovableJointImpl5_setPosCoordsOffset(resc,resv,argc,(mxArray**)(argv)); break;
  case 970: flag=_wrap_MovableJointImpl5_getPosCoordsOffset(resc,resv,argc,(mxArray**)(argv)); break;
  case 971: flag=_wrap_MovableJointImpl5_setDOFsOffset(resc,resv,argc,(mxArray**)(argv)); break;
  case 972: flag=_wrap_MovableJointImpl5_getDOFsOffset(resc,resv,argc,(mxArray**)(argv)); break;
  case 973: flag=_wrap_delete_MovableJointImpl6(resc,resv,argc,(mxArray**)(argv)); break;
  case 974: flag=_wrap_MovableJointImpl6_getNrOfPosCoords(resc,resv,argc,(mxArray**)(argv)); break;
  case 975: flag=_wrap_MovableJointImpl6_getNrOfDOFs(resc,resv,argc,(mxArray**)(argv)); break;
  case 976: flag=_wrap_MovableJointImpl6_setIndex(resc,resv,argc,(mxArray**)(argv)); break;
  case 977: flag=_wrap_MovableJointImpl6_getIndex(resc,resv,argc,(mxArray**)(argv)); break;
  case 978: flag=_wrap_MovableJointImpl6_setPosCoordsOffset(resc,resv,argc,(mxArray**)(argv)); break;
  case 979: flag=_wrap_MovableJointImpl6_getPosCoordsOffset(resc,resv,argc,(mxArray**)(argv)); break;
  case 980: flag=_wrap_MovableJointImpl6_setDOFsOffset(resc,resv,argc,(mxArray**)(argv)); break;
  case 981: flag=_wrap_MovableJointImpl6_getDOFsOffset(resc,resv,argc,(mxArray**)(argv)); break;
  case 982: flag=_wrap_delete_RevoluteJoint(resc,resv,argc,(mxArray**)(argv)); break;
  case 983: flag=_wrap_RevoluteJoint_clone(resc,resv,argc,(mxArray**)(argv)); break;
  case 984: flag=_wrap_RevoluteJoint_setAttachedLinks(resc,resv,argc,(mxArray**)(argv)); break;
  case 985: flag=_wrap_RevoluteJoint_setRestTransform(resc,resv,argc,(mxArray**)(argv)); break;
  case 986: flag=_wrap_RevoluteJoint_setAxis(resc,resv,argc,(mxArray**)(argv)); break;
  case 987: flag=_wrap_RevoluteJoint_getFirstAttachedLink(resc,resv,argc,(mxArray**)(argv)); break;
  case 988: flag=_wrap_RevoluteJoint_getSecondAttachedLink(resc,resv,argc,(mxArray**)(argv)); break;
  case 989: flag=_wrap_RevoluteJoint_getAxis(resc,resv,argc,(mxArray**)(argv)); break;
  case 990: flag=_wrap_RevoluteJoint_getRestTransform(resc,resv,argc,(mxArray**)(argv)); break;
  case 991: flag=_wrap_RevoluteJoint_getTransform(resc,resv,argc,(mxArray**)(argv)); break;
  case 992: flag=_wrap_RevoluteJoint_getTransformDerivative(resc,resv,argc,(mxArray**)(argv)); break;
  case 993: flag=_wrap_RevoluteJoint_getMotionSubspaceVector(resc,resv,argc,(mxArray**)(argv)); break;
  case 994: flag=_wrap_RevoluteJoint_computeChildPosVelAcc(resc,resv,argc,(mxArray**)(argv)); break;
  case 995: flag=_wrap_RevoluteJoint_computeChildVel(resc,resv,argc,(mxArray**)(argv)); break;
  case 996: flag=_wrap_RevoluteJoint_computeChildVelAcc(resc,resv,argc,(mxArray**)(argv)); break;
  case 997: flag=_wrap_RevoluteJoint_computeChildAcc(resc,resv,argc,(mxArray**)(argv)); break;
  case 998: flag=_wrap_RevoluteJoint_computeChildBiasAcc(resc,resv,argc,(mxArray**)(argv)); break;
  case 999: flag=_wrap_RevoluteJoint_computeJointTorque(resc,resv,argc,(mxArray**)(argv)); break;
  case 1000: flag=_wrap_RevoluteJoint_hasPosLimits(resc,resv,argc,(mxArray**)(argv)); break;
  case 1001: flag=_wrap_RevoluteJoint_enablePosLimits(resc,resv,argc,(mxArray**)(argv)); break;
  case 1002: flag=_wrap_RevoluteJoint_getPosLimits(resc,resv,argc,(mxArray**)(argv)); break;
  case 1003: flag=_wrap_RevoluteJoint_getMinPosLimit(resc,resv,argc,(mxArray**)(argv)); break;
  case 1004: flag=_wrap_RevoluteJoint_getMaxPosLimit(resc,resv,argc,(mxArray**)(argv)); break;
  case 1005: flag=_wrap_RevoluteJoint_setPosLimits(resc,resv,argc,(mxArray**)(argv)); break;
  case 1006: flag=_wrap_new_Traversal(resc,resv,argc,(mxArray**)(argv)); break;
  case 1007: flag=_wrap_delete_Traversal(resc,resv,argc,(mxArray**)(argv)); break;
  case 1008: flag=_wrap_Traversal_getNrOfVisitedLinks(resc,resv,argc,(mxArray**)(argv)); break;
  case 1009: flag=_wrap_Traversal_getLink(resc,resv,argc,(mxArray**)(argv)); break;
  case 1010: flag=_wrap_Traversal_getBaseLink(resc,resv,argc,(mxArray**)(argv)); break;
  case 1011: flag=_wrap_Traversal_getParentLink(resc,resv,argc,(mxArray**)(argv)); break;
  case 1012: flag=_wrap_Traversal_getParentJoint(resc,resv,argc,(mxArray**)(argv)); break;
  case 1013: flag=_wrap_Traversal_getParentLinkFromLinkIndex(resc,resv,argc,(mxArray**)(argv)); break;
  case 1014: flag=_wrap_Traversal_getParentJointFromLinkIndex(resc,resv,argc,(mxArray**)(argv)); break;
  case 1015: flag=_wrap_Traversal_getTraversalIndexFromLinkIndex(resc,resv,argc,(mxArray**)(argv)); break;
  case 1016: flag=_wrap_Traversal_reset(resc,resv,argc,(mxArray**)(argv)); break;
  case 1017: flag=_wrap_Traversal_addTraversalBase(resc,resv,argc,(mxArray**)(argv)); break;
  case 1018: flag=_wrap_Traversal_addTraversalElement(resc,resv,argc,(mxArray**)(argv)); break;
  case 1019: flag=_wrap_Traversal_isParentOf(resc,resv,argc,(mxArray**)(argv)); break;
  case 1020: flag=_wrap_Traversal_getChildLinkIndexFromJointIndex(resc,resv,argc,(mxArray**)(argv)); break;
  case 1021: flag=_wrap_Traversal_toString(resc,resv,argc,(mxArray**)(argv)); break;
  case 1022: flag=_wrap_delete_SolidShape(resc,resv,argc,(mxArray**)(argv)); break;
  case 1023: flag=_wrap_SolidShape_clone(resc,resv,argc,(mxArray**)(argv)); break;
  case 1024: flag=_wrap_SolidShape_name_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 1025: flag=_wrap_SolidShape_name_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 1026: flag=_wrap_SolidShape_link_H_geometry_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 1027: flag=_wrap_SolidShape_link_H_geometry_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 1028: flag=_wrap_SolidShape_material_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 1029: flag=_wrap_SolidShape_material_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 1030: flag=_wrap_SolidShape_isSphere(resc,resv,argc,(mxArray**)(argv)); break;
  case 1031: flag=_wrap_SolidShape_isBox(resc,resv,argc,(mxArray**)(argv)); break;
  case 1032: flag=_wrap_SolidShape_isCylinder(resc,resv,argc,(mxArray**)(argv)); break;
  case 1033: flag=_wrap_SolidShape_isExternalMesh(resc,resv,argc,(mxArray**)(argv)); break;
  case 1034: flag=_wrap_SolidShape_asSphere(resc,resv,argc,(mxArray**)(argv)); break;
  case 1035: flag=_wrap_SolidShape_asBox(resc,resv,argc,(mxArray**)(argv)); break;
  case 1036: flag=_wrap_SolidShape_asCylinder(resc,resv,argc,(mxArray**)(argv)); break;
  case 1037: flag=_wrap_SolidShape_asExternalMesh(resc,resv,argc,(mxArray**)(argv)); break;
  case 1038: flag=_wrap_delete_Sphere(resc,resv,argc,(mxArray**)(argv)); break;
  case 1039: flag=_wrap_Sphere_clone(resc,resv,argc,(mxArray**)(argv)); break;
  case 1040: flag=_wrap_Sphere_radius_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 1041: flag=_wrap_Sphere_radius_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 1042: flag=_wrap_new_Sphere(resc,resv,argc,(mxArray**)(argv)); break;
  case 1043: flag=_wrap_delete_Box(resc,resv,argc,(mxArray**)(argv)); break;
  case 1044: flag=_wrap_Box_clone(resc,resv,argc,(mxArray**)(argv)); break;
  case 1045: flag=_wrap_Box_x_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 1046: flag=_wrap_Box_x_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 1047: flag=_wrap_Box_y_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 1048: flag=_wrap_Box_y_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 1049: flag=_wrap_Box_z_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 1050: flag=_wrap_Box_z_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 1051: flag=_wrap_new_Box(resc,resv,argc,(mxArray**)(argv)); break;
  case 1052: flag=_wrap_delete_Cylinder(resc,resv,argc,(mxArray**)(argv)); break;
  case 1053: flag=_wrap_Cylinder_clone(resc,resv,argc,(mxArray**)(argv)); break;
  case 1054: flag=_wrap_Cylinder_length_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 1055: flag=_wrap_Cylinder_length_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 1056: flag=_wrap_Cylinder_radius_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 1057: flag=_wrap_Cylinder_radius_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 1058: flag=_wrap_new_Cylinder(resc,resv,argc,(mxArray**)(argv)); break;
  case 1059: flag=_wrap_delete_ExternalMesh(resc,resv,argc,(mxArray**)(argv)); break;
  case 1060: flag=_wrap_ExternalMesh_clone(resc,resv,argc,(mxArray**)(argv)); break;
  case 1061: flag=_wrap_ExternalMesh_filename_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 1062: flag=_wrap_ExternalMesh_filename_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 1063: flag=_wrap_ExternalMesh_scale_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 1064: flag=_wrap_ExternalMesh_scale_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 1065: flag=_wrap_new_ExternalMesh(resc,resv,argc,(mxArray**)(argv)); break;
  case 1066: flag=_wrap_new_ModelSolidShapes(resc,resv,argc,(mxArray**)(argv)); break;
  case 1067: flag=_wrap_ModelSolidShapes_clear(resc,resv,argc,(mxArray**)(argv)); break;
  case 1068: flag=_wrap_delete_ModelSolidShapes(resc,resv,argc,(mxArray**)(argv)); break;
  case 1069: flag=_wrap_ModelSolidShapes_resize(resc,resv,argc,(mxArray**)(argv)); break;
  case 1070: flag=_wrap_ModelSolidShapes_isConsistent(resc,resv,argc,(mxArray**)(argv)); break;
  case 1071: flag=_wrap_ModelSolidShapes_linkSolidShapes_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 1072: flag=_wrap_ModelSolidShapes_linkSolidShapes_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 1073: flag=_wrap_Neighbor_neighborLink_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 1074: flag=_wrap_Neighbor_neighborLink_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 1075: flag=_wrap_Neighbor_neighborJoint_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 1076: flag=_wrap_Neighbor_neighborJoint_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 1077: flag=_wrap_new_Neighbor(resc,resv,argc,(mxArray**)(argv)); break;
  case 1078: flag=_wrap_delete_Neighbor(resc,resv,argc,(mxArray**)(argv)); break;
  case 1079: flag=_wrap_new_Model(resc,resv,argc,(mxArray**)(argv)); break;
  case 1080: flag=_wrap_Model_copy(resc,resv,argc,(mxArray**)(argv)); break;
  case 1081: flag=_wrap_delete_Model(resc,resv,argc,(mxArray**)(argv)); break;
  case 1082: flag=_wrap_Model_getNrOfLinks(resc,resv,argc,(mxArray**)(argv)); break;
  case 1083: flag=_wrap_Model_getLinkName(resc,resv,argc,(mxArray**)(argv)); break;
  case 1084: flag=_wrap_Model_getLinkIndex(resc,resv,argc,(mxArray**)(argv)); break;
  case 1085: flag=_wrap_Model_isValidLinkIndex(resc,resv,argc,(mxArray**)(argv)); break;
  case 1086: flag=_wrap_Model_getLink(resc,resv,argc,(mxArray**)(argv)); break;
  case 1087: flag=_wrap_Model_addLink(resc,resv,argc,(mxArray**)(argv)); break;
  case 1088: flag=_wrap_Model_getNrOfJoints(resc,resv,argc,(mxArray**)(argv)); break;
  case 1089: flag=_wrap_Model_getJointName(resc,resv,argc,(mxArray**)(argv)); break;
  case 1090: flag=_wrap_Model_getJointIndex(resc,resv,argc,(mxArray**)(argv)); break;
  case 1091: flag=_wrap_Model_getJoint(resc,resv,argc,(mxArray**)(argv)); break;
  case 1092: flag=_wrap_Model_isValidJointIndex(resc,resv,argc,(mxArray**)(argv)); break;
  case 1093: flag=_wrap_Model_isLinkNameUsed(resc,resv,argc,(mxArray**)(argv)); break;
  case 1094: flag=_wrap_Model_isJointNameUsed(resc,resv,argc,(mxArray**)(argv)); break;
  case 1095: flag=_wrap_Model_isFrameNameUsed(resc,resv,argc,(mxArray**)(argv)); break;
  case 1096: flag=_wrap_Model_addJoint(resc,resv,argc,(mxArray**)(argv)); break;
  case 1097: flag=_wrap_Model_getNrOfPosCoords(resc,resv,argc,(mxArray**)(argv)); break;
  case 1098: flag=_wrap_Model_getNrOfDOFs(resc,resv,argc,(mxArray**)(argv)); break;
  case 1099: flag=_wrap_Model_getNrOfFrames(resc,resv,argc,(mxArray**)(argv)); break;
  case 1100: flag=_wrap_Model_addAdditionalFrameToLink(resc,resv,argc,(mxArray**)(argv)); break;
  case 1101: flag=_wrap_Model_getFrameName(resc,resv,argc,(mxArray**)(argv)); break;
  case 1102: flag=_wrap_Model_getFrameIndex(resc,resv,argc,(mxArray**)(argv)); break;
  case 1103: flag=_wrap_Model_isValidFrameIndex(resc,resv,argc,(mxArray**)(argv)); break;
  case 1104: flag=_wrap_Model_getFrameTransform(resc,resv,argc,(mxArray**)(argv)); break;
  case 1105: flag=_wrap_Model_getFrameLink(resc,resv,argc,(mxArray**)(argv)); break;
  case 1106: flag=_wrap_Model_getNrOfNeighbors(resc,resv,argc,(mxArray**)(argv)); break;
  case 1107: flag=_wrap_Model_getNeighbor(resc,resv,argc,(mxArray**)(argv)); break;
  case 1108: flag=_wrap_Model_setDefaultBaseLink(resc,resv,argc,(mxArray**)(argv)); break;
  case 1109: flag=_wrap_Model_getDefaultBaseLink(resc,resv,argc,(mxArray**)(argv)); break;
  case 1110: flag=_wrap_Model_computeFullTreeTraversal(resc,resv,argc,(mxArray**)(argv)); break;
  case 1111: flag=_wrap_Model_getInertialParameters(resc,resv,argc,(mxArray**)(argv)); break;
  case 1112: flag=_wrap_Model_updateInertialParameters(resc,resv,argc,(mxArray**)(argv)); break;
  case 1113: flag=_wrap_Model_visualSolidShapes(resc,resv,argc,(mxArray**)(argv)); break;
  case 1114: flag=_wrap_Model_collisionSolidShapes(resc,resv,argc,(mxArray**)(argv)); break;
  case 1115: flag=_wrap_Model_toString(resc,resv,argc,(mxArray**)(argv)); break;
  case 1116: flag=_wrap_new_JointPosDoubleArray(resc,resv,argc,(mxArray**)(argv)); break;
  case 1117: flag=_wrap_JointPosDoubleArray_resize(resc,resv,argc,(mxArray**)(argv)); break;
  case 1118: flag=_wrap_JointPosDoubleArray_isConsistent(resc,resv,argc,(mxArray**)(argv)); break;
  case 1119: flag=_wrap_delete_JointPosDoubleArray(resc,resv,argc,(mxArray**)(argv)); break;
  case 1120: flag=_wrap_new_JointDOFsDoubleArray(resc,resv,argc,(mxArray**)(argv)); break;
  case 1121: flag=_wrap_JointDOFsDoubleArray_resize(resc,resv,argc,(mxArray**)(argv)); break;
  case 1122: flag=_wrap_JointDOFsDoubleArray_isConsistent(resc,resv,argc,(mxArray**)(argv)); break;
  case 1123: flag=_wrap_delete_JointDOFsDoubleArray(resc,resv,argc,(mxArray**)(argv)); break;
  case 1124: flag=_wrap_new_DOFSpatialForceArray(resc,resv,argc,(mxArray**)(argv)); break;
  case 1125: flag=_wrap_DOFSpatialForceArray_resize(resc,resv,argc,(mxArray**)(argv)); break;
  case 1126: flag=_wrap_DOFSpatialForceArray_isConsistent(resc,resv,argc,(mxArray**)(argv)); break;
  case 1127: flag=_wrap_DOFSpatialForceArray_paren(resc,resv,argc,(mxArray**)(argv)); break;
  case 1128: flag=_wrap_delete_DOFSpatialForceArray(resc,resv,argc,(mxArray**)(argv)); break;
  case 1129: flag=_wrap_new_DOFSpatialMotionArray(resc,resv,argc,(mxArray**)(argv)); break;
  case 1130: flag=_wrap_DOFSpatialMotionArray_resize(resc,resv,argc,(mxArray**)(argv)); break;
  case 1131: flag=_wrap_DOFSpatialMotionArray_isConsistent(resc,resv,argc,(mxArray**)(argv)); break;
  case 1132: flag=_wrap_DOFSpatialMotionArray_paren(resc,resv,argc,(mxArray**)(argv)); break;
  case 1133: flag=_wrap_delete_DOFSpatialMotionArray(resc,resv,argc,(mxArray**)(argv)); break;
  case 1134: flag=_wrap_new_FrameFreeFloatingJacobian(resc,resv,argc,(mxArray**)(argv)); break;
  case 1135: flag=_wrap_FrameFreeFloatingJacobian_resize(resc,resv,argc,(mxArray**)(argv)); break;
  case 1136: flag=_wrap_FrameFreeFloatingJacobian_isConsistent(resc,resv,argc,(mxArray**)(argv)); break;
  case 1137: flag=_wrap_delete_FrameFreeFloatingJacobian(resc,resv,argc,(mxArray**)(argv)); break;
  case 1138: flag=_wrap_new_MomentumFreeFloatingJacobian(resc,resv,argc,(mxArray**)(argv)); break;
  case 1139: flag=_wrap_MomentumFreeFloatingJacobian_resize(resc,resv,argc,(mxArray**)(argv)); break;
  case 1140: flag=_wrap_MomentumFreeFloatingJacobian_isConsistent(resc,resv,argc,(mxArray**)(argv)); break;
  case 1141: flag=_wrap_delete_MomentumFreeFloatingJacobian(resc,resv,argc,(mxArray**)(argv)); break;
  case 1142: flag=_wrap_new_FreeFloatingMassMatrix(resc,resv,argc,(mxArray**)(argv)); break;
  case 1143: flag=_wrap_FreeFloatingMassMatrix_resize(resc,resv,argc,(mxArray**)(argv)); break;
  case 1144: flag=_wrap_delete_FreeFloatingMassMatrix(resc,resv,argc,(mxArray**)(argv)); break;
  case 1145: flag=_wrap_new_FreeFloatingPos(resc,resv,argc,(mxArray**)(argv)); break;
  case 1146: flag=_wrap_FreeFloatingPos_resize(resc,resv,argc,(mxArray**)(argv)); break;
  case 1147: flag=_wrap_FreeFloatingPos_worldBasePos(resc,resv,argc,(mxArray**)(argv)); break;
  case 1148: flag=_wrap_FreeFloatingPos_jointPos(resc,resv,argc,(mxArray**)(argv)); break;
  case 1149: flag=_wrap_FreeFloatingPos_getNrOfPosCoords(resc,resv,argc,(mxArray**)(argv)); break;
  case 1150: flag=_wrap_delete_FreeFloatingPos(resc,resv,argc,(mxArray**)(argv)); break;
  case 1151: flag=_wrap_new_FreeFloatingGeneralizedTorques(resc,resv,argc,(mxArray**)(argv)); break;
  case 1152: flag=_wrap_FreeFloatingGeneralizedTorques_resize(resc,resv,argc,(mxArray**)(argv)); break;
  case 1153: flag=_wrap_FreeFloatingGeneralizedTorques_baseWrench(resc,resv,argc,(mxArray**)(argv)); break;
  case 1154: flag=_wrap_FreeFloatingGeneralizedTorques_jointTorques(resc,resv,argc,(mxArray**)(argv)); break;
  case 1155: flag=_wrap_FreeFloatingGeneralizedTorques_getNrOfDOFs(resc,resv,argc,(mxArray**)(argv)); break;
  case 1156: flag=_wrap_delete_FreeFloatingGeneralizedTorques(resc,resv,argc,(mxArray**)(argv)); break;
  case 1157: flag=_wrap_new_FreeFloatingVel(resc,resv,argc,(mxArray**)(argv)); break;
  case 1158: flag=_wrap_FreeFloatingVel_resize(resc,resv,argc,(mxArray**)(argv)); break;
  case 1159: flag=_wrap_FreeFloatingVel_baseVel(resc,resv,argc,(mxArray**)(argv)); break;
  case 1160: flag=_wrap_FreeFloatingVel_jointVel(resc,resv,argc,(mxArray**)(argv)); break;
  case 1161: flag=_wrap_FreeFloatingVel_getNrOfDOFs(resc,resv,argc,(mxArray**)(argv)); break;
  case 1162: flag=_wrap_delete_FreeFloatingVel(resc,resv,argc,(mxArray**)(argv)); break;
  case 1163: flag=_wrap_new_FreeFloatingAcc(resc,resv,argc,(mxArray**)(argv)); break;
  case 1164: flag=_wrap_FreeFloatingAcc_resize(resc,resv,argc,(mxArray**)(argv)); break;
  case 1165: flag=_wrap_FreeFloatingAcc_baseAcc(resc,resv,argc,(mxArray**)(argv)); break;
  case 1166: flag=_wrap_FreeFloatingAcc_jointAcc(resc,resv,argc,(mxArray**)(argv)); break;
  case 1167: flag=_wrap_FreeFloatingAcc_getNrOfDOFs(resc,resv,argc,(mxArray**)(argv)); break;
  case 1168: flag=_wrap_delete_FreeFloatingAcc(resc,resv,argc,(mxArray**)(argv)); break;
  case 1169: flag=_wrap_ContactWrench_contactId(resc,resv,argc,(mxArray**)(argv)); break;
  case 1170: flag=_wrap_ContactWrench_contactPoint(resc,resv,argc,(mxArray**)(argv)); break;
  case 1171: flag=_wrap_ContactWrench_contactWrench(resc,resv,argc,(mxArray**)(argv)); break;
  case 1172: flag=_wrap_new_ContactWrench(resc,resv,argc,(mxArray**)(argv)); break;
  case 1173: flag=_wrap_delete_ContactWrench(resc,resv,argc,(mxArray**)(argv)); break;
  case 1174: flag=_wrap_new_LinkContactWrenches(resc,resv,argc,(mxArray**)(argv)); break;
  case 1175: flag=_wrap_LinkContactWrenches_resize(resc,resv,argc,(mxArray**)(argv)); break;
  case 1176: flag=_wrap_LinkContactWrenches_getNrOfContactsForLink(resc,resv,argc,(mxArray**)(argv)); break;
  case 1177: flag=_wrap_LinkContactWrenches_setNrOfContactsForLink(resc,resv,argc,(mxArray**)(argv)); break;
  case 1178: flag=_wrap_LinkContactWrenches_getNrOfLinks(resc,resv,argc,(mxArray**)(argv)); break;
  case 1179: flag=_wrap_LinkContactWrenches_contactWrench(resc,resv,argc,(mxArray**)(argv)); break;
  case 1180: flag=_wrap_LinkContactWrenches_computeNetWrenches(resc,resv,argc,(mxArray**)(argv)); break;
  case 1181: flag=_wrap_LinkContactWrenches_toString(resc,resv,argc,(mxArray**)(argv)); break;
  case 1182: flag=_wrap_delete_LinkContactWrenches(resc,resv,argc,(mxArray**)(argv)); break;
  case 1183: flag=_wrap_ForwardPositionKinematics(resc,resv,argc,(mxArray**)(argv)); break;
  case 1184: flag=_wrap_ForwardVelAccKinematics(resc,resv,argc,(mxArray**)(argv)); break;
  case 1185: flag=_wrap_ForwardPosVelAccKinematics(resc,resv,argc,(mxArray**)(argv)); break;
  case 1186: flag=_wrap_ForwardPosVelKinematics(resc,resv,argc,(mxArray**)(argv)); break;
  case 1187: flag=_wrap_ForwardAccKinematics(resc,resv,argc,(mxArray**)(argv)); break;
  case 1188: flag=_wrap_ForwardBiasAccKinematics(resc,resv,argc,(mxArray**)(argv)); break;
  case 1189: flag=_wrap_ComputeLinearAndAngularMomentum(resc,resv,argc,(mxArray**)(argv)); break;
  case 1190: flag=_wrap_ComputeLinearAndAngularMomentumDerivativeBias(resc,resv,argc,(mxArray**)(argv)); break;
  case 1191: flag=_wrap_RNEADynamicPhase(resc,resv,argc,(mxArray**)(argv)); break;
  case 1192: flag=_wrap_CompositeRigidBodyAlgorithm(resc,resv,argc,(mxArray**)(argv)); break;
  case 1193: flag=_wrap_new_ArticulatedBodyAlgorithmInternalBuffers(resc,resv,argc,(mxArray**)(argv)); break;
  case 1194: flag=_wrap_ArticulatedBodyAlgorithmInternalBuffers_resize(resc,resv,argc,(mxArray**)(argv)); break;
  case 1195: flag=_wrap_ArticulatedBodyAlgorithmInternalBuffers_isConsistent(resc,resv,argc,(mxArray**)(argv)); break;
  case 1196: flag=_wrap_ArticulatedBodyAlgorithmInternalBuffers_S_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 1197: flag=_wrap_ArticulatedBodyAlgorithmInternalBuffers_S_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 1198: flag=_wrap_ArticulatedBodyAlgorithmInternalBuffers_U_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 1199: flag=_wrap_ArticulatedBodyAlgorithmInternalBuffers_U_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 1200: flag=_wrap_ArticulatedBodyAlgorithmInternalBuffers_D_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 1201: flag=_wrap_ArticulatedBodyAlgorithmInternalBuffers_D_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 1202: flag=_wrap_ArticulatedBodyAlgorithmInternalBuffers_u_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 1203: flag=_wrap_ArticulatedBodyAlgorithmInternalBuffers_u_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 1204: flag=_wrap_ArticulatedBodyAlgorithmInternalBuffers_linksVel_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 1205: flag=_wrap_ArticulatedBodyAlgorithmInternalBuffers_linksVel_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 1206: flag=_wrap_ArticulatedBodyAlgorithmInternalBuffers_linksBiasAcceleration_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 1207: flag=_wrap_ArticulatedBodyAlgorithmInternalBuffers_linksBiasAcceleration_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 1208: flag=_wrap_ArticulatedBodyAlgorithmInternalBuffers_linksAccelerations_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 1209: flag=_wrap_ArticulatedBodyAlgorithmInternalBuffers_linksAccelerations_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 1210: flag=_wrap_ArticulatedBodyAlgorithmInternalBuffers_linkABIs_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 1211: flag=_wrap_ArticulatedBodyAlgorithmInternalBuffers_linkABIs_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 1212: flag=_wrap_ArticulatedBodyAlgorithmInternalBuffers_linksBiasWrench_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 1213: flag=_wrap_ArticulatedBodyAlgorithmInternalBuffers_linksBiasWrench_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 1214: flag=_wrap_delete_ArticulatedBodyAlgorithmInternalBuffers(resc,resv,argc,(mxArray**)(argv)); break;
  case 1215: flag=_wrap_ArticulatedBodyAlgorithm(resc,resv,argc,(mxArray**)(argv)); break;
  case 1216: flag=_wrap_NR_OF_SENSOR_TYPES_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 1217: flag=_wrap_isLinkSensor(resc,resv,argc,(mxArray**)(argv)); break;
  case 1218: flag=_wrap_isJointSensor(resc,resv,argc,(mxArray**)(argv)); break;
  case 1219: flag=_wrap_getSensorTypeSize(resc,resv,argc,(mxArray**)(argv)); break;
  case 1220: flag=_wrap_delete_Sensor(resc,resv,argc,(mxArray**)(argv)); break;
  case 1221: flag=_wrap_Sensor_getName(resc,resv,argc,(mxArray**)(argv)); break;
  case 1222: flag=_wrap_Sensor_getSensorType(resc,resv,argc,(mxArray**)(argv)); break;
  case 1223: flag=_wrap_Sensor_isValid(resc,resv,argc,(mxArray**)(argv)); break;
  case 1224: flag=_wrap_Sensor_setName(resc,resv,argc,(mxArray**)(argv)); break;
  case 1225: flag=_wrap_Sensor_clone(resc,resv,argc,(mxArray**)(argv)); break;
  case 1226: flag=_wrap_Sensor_updateIndices(resc,resv,argc,(mxArray**)(argv)); break;
  case 1227: flag=_wrap_Sensor_updateIndeces(resc,resv,argc,(mxArray**)(argv)); break;
  case 1228: flag=_wrap_delete_JointSensor(resc,resv,argc,(mxArray**)(argv)); break;
  case 1229: flag=_wrap_JointSensor_getParentJoint(resc,resv,argc,(mxArray**)(argv)); break;
  case 1230: flag=_wrap_JointSensor_getParentJointIndex(resc,resv,argc,(mxArray**)(argv)); break;
  case 1231: flag=_wrap_JointSensor_setParentJoint(resc,resv,argc,(mxArray**)(argv)); break;
  case 1232: flag=_wrap_JointSensor_setParentJointIndex(resc,resv,argc,(mxArray**)(argv)); break;
  case 1233: flag=_wrap_delete_LinkSensor(resc,resv,argc,(mxArray**)(argv)); break;
  case 1234: flag=_wrap_LinkSensor_getParentLink(resc,resv,argc,(mxArray**)(argv)); break;
  case 1235: flag=_wrap_LinkSensor_getParentLinkIndex(resc,resv,argc,(mxArray**)(argv)); break;
  case 1236: flag=_wrap_LinkSensor_getLinkSensorTransform(resc,resv,argc,(mxArray**)(argv)); break;
  case 1237: flag=_wrap_LinkSensor_setParentLink(resc,resv,argc,(mxArray**)(argv)); break;
  case 1238: flag=_wrap_LinkSensor_setParentLinkIndex(resc,resv,argc,(mxArray**)(argv)); break;
  case 1239: flag=_wrap_LinkSensor_setLinkSensorTransform(resc,resv,argc,(mxArray**)(argv)); break;
  case 1240: flag=_wrap_new_SensorsList(resc,resv,argc,(mxArray**)(argv)); break;
  case 1241: flag=_wrap_delete_SensorsList(resc,resv,argc,(mxArray**)(argv)); break;
  case 1242: flag=_wrap_SensorsList_addSensor(resc,resv,argc,(mxArray**)(argv)); break;
  case 1243: flag=_wrap_SensorsList_setSerialization(resc,resv,argc,(mxArray**)(argv)); break;
  case 1244: flag=_wrap_SensorsList_getSerialization(resc,resv,argc,(mxArray**)(argv)); break;
  case 1245: flag=_wrap_SensorsList_getNrOfSensors(resc,resv,argc,(mxArray**)(argv)); break;
  case 1246: flag=_wrap_SensorsList_getSensorIndex(resc,resv,argc,(mxArray**)(argv)); break;
  case 1247: flag=_wrap_SensorsList_getSizeOfAllSensorsMeasurements(resc,resv,argc,(mxArray**)(argv)); break;
  case 1248: flag=_wrap_SensorsList_getSensor(resc,resv,argc,(mxArray**)(argv)); break;
  case 1249: flag=_wrap_SensorsList_removeSensor(resc,resv,argc,(mxArray**)(argv)); break;
  case 1250: flag=_wrap_SensorsList_removeAllSensorsOfType(resc,resv,argc,(mxArray**)(argv)); break;
  case 1251: flag=_wrap_SensorsList_getSixAxisForceTorqueSensor(resc,resv,argc,(mxArray**)(argv)); break;
  case 1252: flag=_wrap_SensorsList_getAccelerometerSensor(resc,resv,argc,(mxArray**)(argv)); break;
  case 1253: flag=_wrap_SensorsList_getGyroscopeSensor(resc,resv,argc,(mxArray**)(argv)); break;
  case 1254: flag=_wrap_new_SensorsMeasurements(resc,resv,argc,(mxArray**)(argv)); break;
  case 1255: flag=_wrap_delete_SensorsMeasurements(resc,resv,argc,(mxArray**)(argv)); break;
  case 1256: flag=_wrap_SensorsMeasurements_setNrOfSensors(resc,resv,argc,(mxArray**)(argv)); break;
  case 1257: flag=_wrap_SensorsMeasurements_getNrOfSensors(resc,resv,argc,(mxArray**)(argv)); break;
  case 1258: flag=_wrap_SensorsMeasurements_resize(resc,resv,argc,(mxArray**)(argv)); break;
  case 1259: flag=_wrap_SensorsMeasurements_toVector(resc,resv,argc,(mxArray**)(argv)); break;
  case 1260: flag=_wrap_SensorsMeasurements_setMeasurement(resc,resv,argc,(mxArray**)(argv)); break;
  case 1261: flag=_wrap_SensorsMeasurements_getMeasurement(resc,resv,argc,(mxArray**)(argv)); break;
  case 1262: flag=_wrap_SensorsMeasurements_getSizeOfAllSensorsMeasurements(resc,resv,argc,(mxArray**)(argv)); break;
  case 1263: flag=_wrap_new_SixAxisForceTorqueSensor(resc,resv,argc,(mxArray**)(argv)); break;
  case 1264: flag=_wrap_delete_SixAxisForceTorqueSensor(resc,resv,argc,(mxArray**)(argv)); break;
  case 1265: flag=_wrap_SixAxisForceTorqueSensor_setName(resc,resv,argc,(mxArray**)(argv)); break;
  case 1266: flag=_wrap_SixAxisForceTorqueSensor_setFirstLinkSensorTransform(resc,resv,argc,(mxArray**)(argv)); break;
  case 1267: flag=_wrap_SixAxisForceTorqueSensor_setSecondLinkSensorTransform(resc,resv,argc,(mxArray**)(argv)); break;
  case 1268: flag=_wrap_SixAxisForceTorqueSensor_getFirstLinkIndex(resc,resv,argc,(mxArray**)(argv)); break;
  case 1269: flag=_wrap_SixAxisForceTorqueSensor_getSecondLinkIndex(resc,resv,argc,(mxArray**)(argv)); break;
  case 1270: flag=_wrap_SixAxisForceTorqueSensor_setFirstLinkName(resc,resv,argc,(mxArray**)(argv)); break;
  case 1271: flag=_wrap_SixAxisForceTorqueSensor_setSecondLinkName(resc,resv,argc,(mxArray**)(argv)); break;
  case 1272: flag=_wrap_SixAxisForceTorqueSensor_getFirstLinkName(resc,resv,argc,(mxArray**)(argv)); break;
  case 1273: flag=_wrap_SixAxisForceTorqueSensor_getSecondLinkName(resc,resv,argc,(mxArray**)(argv)); break;
  case 1274: flag=_wrap_SixAxisForceTorqueSensor_setParentJoint(resc,resv,argc,(mxArray**)(argv)); break;
  case 1275: flag=_wrap_SixAxisForceTorqueSensor_setParentJointIndex(resc,resv,argc,(mxArray**)(argv)); break;
  case 1276: flag=_wrap_SixAxisForceTorqueSensor_setAppliedWrenchLink(resc,resv,argc,(mxArray**)(argv)); break;
  case 1277: flag=_wrap_SixAxisForceTorqueSensor_getName(resc,resv,argc,(mxArray**)(argv)); break;
  case 1278: flag=_wrap_SixAxisForceTorqueSensor_getSensorType(resc,resv,argc,(mxArray**)(argv)); break;
  case 1279: flag=_wrap_SixAxisForceTorqueSensor_getParentJoint(resc,resv,argc,(mxArray**)(argv)); break;
  case 1280: flag=_wrap_SixAxisForceTorqueSensor_getParentJointIndex(resc,resv,argc,(mxArray**)(argv)); break;
  case 1281: flag=_wrap_SixAxisForceTorqueSensor_isValid(resc,resv,argc,(mxArray**)(argv)); break;
  case 1282: flag=_wrap_SixAxisForceTorqueSensor_clone(resc,resv,argc,(mxArray**)(argv)); break;
  case 1283: flag=_wrap_SixAxisForceTorqueSensor_updateIndices(resc,resv,argc,(mxArray**)(argv)); break;
  case 1284: flag=_wrap_SixAxisForceTorqueSensor_updateIndeces(resc,resv,argc,(mxArray**)(argv)); break;
  case 1285: flag=_wrap_SixAxisForceTorqueSensor_getAppliedWrenchLink(resc,resv,argc,(mxArray**)(argv)); break;
  case 1286: flag=_wrap_SixAxisForceTorqueSensor_isLinkAttachedToSensor(resc,resv,argc,(mxArray**)(argv)); break;
  case 1287: flag=_wrap_SixAxisForceTorqueSensor_getLinkSensorTransform(resc,resv,argc,(mxArray**)(argv)); break;
  case 1288: flag=_wrap_SixAxisForceTorqueSensor_getWrenchAppliedOnLink(resc,resv,argc,(mxArray**)(argv)); break;
  case 1289: flag=_wrap_SixAxisForceTorqueSensor_getWrenchAppliedOnLinkMatrix(resc,resv,argc,(mxArray**)(argv)); break;
  case 1290: flag=_wrap_SixAxisForceTorqueSensor_getWrenchAppliedOnLinkInverseMatrix(resc,resv,argc,(mxArray**)(argv)); break;
  case 1291: flag=_wrap_SixAxisForceTorqueSensor_predictMeasurement(resc,resv,argc,(mxArray**)(argv)); break;
  case 1292: flag=_wrap_SixAxisForceTorqueSensor_toString(resc,resv,argc,(mxArray**)(argv)); break;
  case 1293: flag=_wrap_new_AccelerometerSensor(resc,resv,argc,(mxArray**)(argv)); break;
  case 1294: flag=_wrap_delete_AccelerometerSensor(resc,resv,argc,(mxArray**)(argv)); break;
  case 1295: flag=_wrap_AccelerometerSensor_setName(resc,resv,argc,(mxArray**)(argv)); break;
  case 1296: flag=_wrap_AccelerometerSensor_setLinkSensorTransform(resc,resv,argc,(mxArray**)(argv)); break;
  case 1297: flag=_wrap_AccelerometerSensor_setParentLink(resc,resv,argc,(mxArray**)(argv)); break;
  case 1298: flag=_wrap_AccelerometerSensor_setParentLinkIndex(resc,resv,argc,(mxArray**)(argv)); break;
  case 1299: flag=_wrap_AccelerometerSensor_getName(resc,resv,argc,(mxArray**)(argv)); break;
  case 1300: flag=_wrap_AccelerometerSensor_getSensorType(resc,resv,argc,(mxArray**)(argv)); break;
  case 1301: flag=_wrap_AccelerometerSensor_getParentLink(resc,resv,argc,(mxArray**)(argv)); break;
  case 1302: flag=_wrap_AccelerometerSensor_getParentLinkIndex(resc,resv,argc,(mxArray**)(argv)); break;
  case 1303: flag=_wrap_AccelerometerSensor_getLinkSensorTransform(resc,resv,argc,(mxArray**)(argv)); break;
  case 1304: flag=_wrap_AccelerometerSensor_isValid(resc,resv,argc,(mxArray**)(argv)); break;
  case 1305: flag=_wrap_AccelerometerSensor_clone(resc,resv,argc,(mxArray**)(argv)); break;
  case 1306: flag=_wrap_AccelerometerSensor_updateIndices(resc,resv,argc,(mxArray**)(argv)); break;
  case 1307: flag=_wrap_AccelerometerSensor_updateIndeces(resc,resv,argc,(mxArray**)(argv)); break;
  case 1308: flag=_wrap_AccelerometerSensor_predictMeasurement(resc,resv,argc,(mxArray**)(argv)); break;
  case 1309: flag=_wrap_new_GyroscopeSensor(resc,resv,argc,(mxArray**)(argv)); break;
  case 1310: flag=_wrap_delete_GyroscopeSensor(resc,resv,argc,(mxArray**)(argv)); break;
  case 1311: flag=_wrap_GyroscopeSensor_setName(resc,resv,argc,(mxArray**)(argv)); break;
  case 1312: flag=_wrap_GyroscopeSensor_setLinkSensorTransform(resc,resv,argc,(mxArray**)(argv)); break;
  case 1313: flag=_wrap_GyroscopeSensor_setParentLink(resc,resv,argc,(mxArray**)(argv)); break;
  case 1314: flag=_wrap_GyroscopeSensor_setParentLinkIndex(resc,resv,argc,(mxArray**)(argv)); break;
  case 1315: flag=_wrap_GyroscopeSensor_getName(resc,resv,argc,(mxArray**)(argv)); break;
  case 1316: flag=_wrap_GyroscopeSensor_getSensorType(resc,resv,argc,(mxArray**)(argv)); break;
  case 1317: flag=_wrap_GyroscopeSensor_getParentLink(resc,resv,argc,(mxArray**)(argv)); break;
  case 1318: flag=_wrap_GyroscopeSensor_getParentLinkIndex(resc,resv,argc,(mxArray**)(argv)); break;
  case 1319: flag=_wrap_GyroscopeSensor_getLinkSensorTransform(resc,resv,argc,(mxArray**)(argv)); break;
  case 1320: flag=_wrap_GyroscopeSensor_isValid(resc,resv,argc,(mxArray**)(argv)); break;
  case 1321: flag=_wrap_GyroscopeSensor_clone(resc,resv,argc,(mxArray**)(argv)); break;
  case 1322: flag=_wrap_GyroscopeSensor_updateIndices(resc,resv,argc,(mxArray**)(argv)); break;
  case 1323: flag=_wrap_GyroscopeSensor_updateIndeces(resc,resv,argc,(mxArray**)(argv)); break;
  case 1324: flag=_wrap_GyroscopeSensor_predictMeasurement(resc,resv,argc,(mxArray**)(argv)); break;
  case 1325: flag=_wrap_predictSensorsMeasurements(resc,resv,argc,(mxArray**)(argv)); break;
  case 1326: flag=_wrap_predictSensorsMeasurementsFromRawBuffers(resc,resv,argc,(mxArray**)(argv)); break;
  case 1327: flag=_wrap_URDFParserOptions_addSensorFramesAsAdditionalFrames_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 1328: flag=_wrap_URDFParserOptions_addSensorFramesAsAdditionalFrames_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 1329: flag=_wrap_URDFParserOptions_originalFilename_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 1330: flag=_wrap_URDFParserOptions_originalFilename_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 1331: flag=_wrap_new_URDFParserOptions(resc,resv,argc,(mxArray**)(argv)); break;
  case 1332: flag=_wrap_delete_URDFParserOptions(resc,resv,argc,(mxArray**)(argv)); break;
  case 1333: flag=_wrap_modelFromURDF(resc,resv,argc,(mxArray**)(argv)); break;
  case 1334: flag=_wrap_modelFromURDFString(resc,resv,argc,(mxArray**)(argv)); break;
  case 1335: flag=_wrap_dofsListFromURDF(resc,resv,argc,(mxArray**)(argv)); break;
  case 1336: flag=_wrap_dofsListFromURDFString(resc,resv,argc,(mxArray**)(argv)); break;
  case 1337: flag=_wrap_sensorsFromURDF(resc,resv,argc,(mxArray**)(argv)); break;
  case 1338: flag=_wrap_sensorsFromURDFString(resc,resv,argc,(mxArray**)(argv)); break;
  case 1339: flag=_wrap_new_ModelLoader(resc,resv,argc,(mxArray**)(argv)); break;
  case 1340: flag=_wrap_ModelLoader_loadModelFromString(resc,resv,argc,(mxArray**)(argv)); break;
  case 1341: flag=_wrap_ModelLoader_loadModelFromFile(resc,resv,argc,(mxArray**)(argv)); break;
  case 1342: flag=_wrap_ModelLoader_loadReducedModelFromFullModel(resc,resv,argc,(mxArray**)(argv)); break;
  case 1343: flag=_wrap_ModelLoader_loadReducedModelFromString(resc,resv,argc,(mxArray**)(argv)); break;
  case 1344: flag=_wrap_ModelLoader_loadReducedModelFromFile(resc,resv,argc,(mxArray**)(argv)); break;
  case 1345: flag=_wrap_ModelLoader_model(resc,resv,argc,(mxArray**)(argv)); break;
  case 1346: flag=_wrap_ModelLoader_sensors(resc,resv,argc,(mxArray**)(argv)); break;
  case 1347: flag=_wrap_ModelLoader_isValid(resc,resv,argc,(mxArray**)(argv)); break;
  case 1348: flag=_wrap_delete_ModelLoader(resc,resv,argc,(mxArray**)(argv)); break;
  case 1349: flag=_wrap_new_UnknownWrenchContact(resc,resv,argc,(mxArray**)(argv)); break;
  case 1350: flag=_wrap_UnknownWrenchContact_unknownType_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 1351: flag=_wrap_UnknownWrenchContact_unknownType_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 1352: flag=_wrap_UnknownWrenchContact_contactPoint_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 1353: flag=_wrap_UnknownWrenchContact_contactPoint_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 1354: flag=_wrap_UnknownWrenchContact_forceDirection_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 1355: flag=_wrap_UnknownWrenchContact_forceDirection_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 1356: flag=_wrap_UnknownWrenchContact_knownWrench_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 1357: flag=_wrap_UnknownWrenchContact_knownWrench_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 1358: flag=_wrap_UnknownWrenchContact_contactId_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 1359: flag=_wrap_UnknownWrenchContact_contactId_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 1360: flag=_wrap_delete_UnknownWrenchContact(resc,resv,argc,(mxArray**)(argv)); break;
  case 1361: flag=_wrap_new_LinkUnknownWrenchContacts(resc,resv,argc,(mxArray**)(argv)); break;
  case 1362: flag=_wrap_LinkUnknownWrenchContacts_clear(resc,resv,argc,(mxArray**)(argv)); break;
  case 1363: flag=_wrap_LinkUnknownWrenchContacts_resize(resc,resv,argc,(mxArray**)(argv)); break;
  case 1364: flag=_wrap_LinkUnknownWrenchContacts_getNrOfContactsForLink(resc,resv,argc,(mxArray**)(argv)); break;
  case 1365: flag=_wrap_LinkUnknownWrenchContacts_setNrOfContactsForLink(resc,resv,argc,(mxArray**)(argv)); break;
  case 1366: flag=_wrap_LinkUnknownWrenchContacts_addNewContactForLink(resc,resv,argc,(mxArray**)(argv)); break;
  case 1367: flag=_wrap_LinkUnknownWrenchContacts_addNewContactInFrame(resc,resv,argc,(mxArray**)(argv)); break;
  case 1368: flag=_wrap_LinkUnknownWrenchContacts_addNewUnknownFullWrenchInFrameOrigin(resc,resv,argc,(mxArray**)(argv)); break;
  case 1369: flag=_wrap_LinkUnknownWrenchContacts_contactWrench(resc,resv,argc,(mxArray**)(argv)); break;
  case 1370: flag=_wrap_LinkUnknownWrenchContacts_toString(resc,resv,argc,(mxArray**)(argv)); break;
  case 1371: flag=_wrap_delete_LinkUnknownWrenchContacts(resc,resv,argc,(mxArray**)(argv)); break;
  case 1372: flag=_wrap_new_estimateExternalWrenchesBuffers(resc,resv,argc,(mxArray**)(argv)); break;
  case 1373: flag=_wrap_estimateExternalWrenchesBuffers_resize(resc,resv,argc,(mxArray**)(argv)); break;
  case 1374: flag=_wrap_estimateExternalWrenchesBuffers_getNrOfSubModels(resc,resv,argc,(mxArray**)(argv)); break;
  case 1375: flag=_wrap_estimateExternalWrenchesBuffers_getNrOfLinks(resc,resv,argc,(mxArray**)(argv)); break;
  case 1376: flag=_wrap_estimateExternalWrenchesBuffers_isConsistent(resc,resv,argc,(mxArray**)(argv)); break;
  case 1377: flag=_wrap_estimateExternalWrenchesBuffers_A_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 1378: flag=_wrap_estimateExternalWrenchesBuffers_A_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 1379: flag=_wrap_estimateExternalWrenchesBuffers_x_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 1380: flag=_wrap_estimateExternalWrenchesBuffers_x_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 1381: flag=_wrap_estimateExternalWrenchesBuffers_b_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 1382: flag=_wrap_estimateExternalWrenchesBuffers_b_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 1383: flag=_wrap_estimateExternalWrenchesBuffers_pinvA_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 1384: flag=_wrap_estimateExternalWrenchesBuffers_pinvA_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 1385: flag=_wrap_estimateExternalWrenchesBuffers_b_contacts_subtree_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 1386: flag=_wrap_estimateExternalWrenchesBuffers_b_contacts_subtree_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 1387: flag=_wrap_estimateExternalWrenchesBuffers_subModelBase_H_link_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 1388: flag=_wrap_estimateExternalWrenchesBuffers_subModelBase_H_link_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 1389: flag=_wrap_delete_estimateExternalWrenchesBuffers(resc,resv,argc,(mxArray**)(argv)); break;
  case 1390: flag=_wrap_estimateExternalWrenchesWithoutInternalFT(resc,resv,argc,(mxArray**)(argv)); break;
  case 1391: flag=_wrap_estimateExternalWrenches(resc,resv,argc,(mxArray**)(argv)); break;
  case 1392: flag=_wrap_dynamicsEstimationForwardVelAccKinematics(resc,resv,argc,(mxArray**)(argv)); break;
  case 1393: flag=_wrap_dynamicsEstimationForwardVelKinematics(resc,resv,argc,(mxArray**)(argv)); break;
  case 1394: flag=_wrap_computeLinkNetWrenchesWithoutGravity(resc,resv,argc,(mxArray**)(argv)); break;
  case 1395: flag=_wrap_new_ExtWrenchesAndJointTorquesEstimator(resc,resv,argc,(mxArray**)(argv)); break;
  case 1396: flag=_wrap_delete_ExtWrenchesAndJointTorquesEstimator(resc,resv,argc,(mxArray**)(argv)); break;
  case 1397: flag=_wrap_ExtWrenchesAndJointTorquesEstimator_setModelAndSensors(resc,resv,argc,(mxArray**)(argv)); break;
  case 1398: flag=_wrap_ExtWrenchesAndJointTorquesEstimator_loadModelAndSensorsFromFile(resc,resv,argc,(mxArray**)(argv)); break;
  case 1399: flag=_wrap_ExtWrenchesAndJointTorquesEstimator_loadModelAndSensorsFromFileWithSpecifiedDOFs(resc,resv,argc,(mxArray**)(argv)); break;
  case 1400: flag=_wrap_ExtWrenchesAndJointTorquesEstimator_model(resc,resv,argc,(mxArray**)(argv)); break;
  case 1401: flag=_wrap_ExtWrenchesAndJointTorquesEstimator_sensors(resc,resv,argc,(mxArray**)(argv)); break;
  case 1402: flag=_wrap_ExtWrenchesAndJointTorquesEstimator_submodels(resc,resv,argc,(mxArray**)(argv)); break;
  case 1403: flag=_wrap_ExtWrenchesAndJointTorquesEstimator_updateKinematicsFromFloatingBase(resc,resv,argc,(mxArray**)(argv)); break;
  case 1404: flag=_wrap_ExtWrenchesAndJointTorquesEstimator_updateKinematicsFromFixedBase(resc,resv,argc,(mxArray**)(argv)); break;
  case 1405: flag=_wrap_ExtWrenchesAndJointTorquesEstimator_computeExpectedFTSensorsMeasurements(resc,resv,argc,(mxArray**)(argv)); break;
  case 1406: flag=_wrap_ExtWrenchesAndJointTorquesEstimator_estimateExtWrenchesAndJointTorques(resc,resv,argc,(mxArray**)(argv)); break;
  case 1407: flag=_wrap_ExtWrenchesAndJointTorquesEstimator_checkThatTheModelIsStill(resc,resv,argc,(mxArray**)(argv)); break;
  case 1408: flag=_wrap_ExtWrenchesAndJointTorquesEstimator_estimateLinkNetWrenchesWithoutGravity(resc,resv,argc,(mxArray**)(argv)); break;
  case 1409: flag=_wrap_new_SimpleLeggedOdometry(resc,resv,argc,(mxArray**)(argv)); break;
  case 1410: flag=_wrap_delete_SimpleLeggedOdometry(resc,resv,argc,(mxArray**)(argv)); break;
  case 1411: flag=_wrap_SimpleLeggedOdometry_setModel(resc,resv,argc,(mxArray**)(argv)); break;
  case 1412: flag=_wrap_SimpleLeggedOdometry_loadModelFromFile(resc,resv,argc,(mxArray**)(argv)); break;
  case 1413: flag=_wrap_SimpleLeggedOdometry_loadModelFromFileWithSpecifiedDOFs(resc,resv,argc,(mxArray**)(argv)); break;
  case 1414: flag=_wrap_SimpleLeggedOdometry_model(resc,resv,argc,(mxArray**)(argv)); break;
  case 1415: flag=_wrap_SimpleLeggedOdometry_updateKinematics(resc,resv,argc,(mxArray**)(argv)); break;
  case 1416: flag=_wrap_SimpleLeggedOdometry_init(resc,resv,argc,(mxArray**)(argv)); break;
  case 1417: flag=_wrap_SimpleLeggedOdometry_changeFixedFrame(resc,resv,argc,(mxArray**)(argv)); break;
  case 1418: flag=_wrap_SimpleLeggedOdometry_getCurrentFixedLink(resc,resv,argc,(mxArray**)(argv)); break;
  case 1419: flag=_wrap_SimpleLeggedOdometry_getWorldLinkTransform(resc,resv,argc,(mxArray**)(argv)); break;
  case 1420: flag=_wrap_isLinkBerdyDynamicVariable(resc,resv,argc,(mxArray**)(argv)); break;
  case 1421: flag=_wrap_isJointBerdyDynamicVariable(resc,resv,argc,(mxArray**)(argv)); break;
  case 1422: flag=_wrap_isDOFBerdyDynamicVariable(resc,resv,argc,(mxArray**)(argv)); break;
  case 1423: flag=_wrap_new_BerdyOptions(resc,resv,argc,(mxArray**)(argv)); break;
  case 1424: flag=_wrap_BerdyOptions_berdyVariant_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 1425: flag=_wrap_BerdyOptions_berdyVariant_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 1426: flag=_wrap_BerdyOptions_includeAllNetExternalWrenchesAsDynamicVariables_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 1427: flag=_wrap_BerdyOptions_includeAllNetExternalWrenchesAsDynamicVariables_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 1428: flag=_wrap_BerdyOptions_includeAllJointAccelerationsAsSensors_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 1429: flag=_wrap_BerdyOptions_includeAllJointAccelerationsAsSensors_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 1430: flag=_wrap_BerdyOptions_includeAllJointTorquesAsSensors_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 1431: flag=_wrap_BerdyOptions_includeAllJointTorquesAsSensors_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 1432: flag=_wrap_BerdyOptions_includeAllNetExternalWrenchesAsSensors_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 1433: flag=_wrap_BerdyOptions_includeAllNetExternalWrenchesAsSensors_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 1434: flag=_wrap_BerdyOptions_includeFixedBaseExternalWrench_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 1435: flag=_wrap_BerdyOptions_includeFixedBaseExternalWrench_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 1436: flag=_wrap_BerdyOptions_jointOnWhichTheInternalWrenchIsMeasured_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 1437: flag=_wrap_BerdyOptions_jointOnWhichTheInternalWrenchIsMeasured_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 1438: flag=_wrap_BerdyOptions_baseLink_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 1439: flag=_wrap_BerdyOptions_baseLink_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 1440: flag=_wrap_BerdyOptions_checkConsistency(resc,resv,argc,(mxArray**)(argv)); break;
  case 1441: flag=_wrap_delete_BerdyOptions(resc,resv,argc,(mxArray**)(argv)); break;
  case 1442: flag=_wrap_BerdySensor_type_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 1443: flag=_wrap_BerdySensor_type_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 1444: flag=_wrap_BerdySensor_id_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 1445: flag=_wrap_BerdySensor_id_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 1446: flag=_wrap_BerdySensor_range_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 1447: flag=_wrap_BerdySensor_range_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 1448: flag=_wrap_BerdySensor_eq(resc,resv,argc,(mxArray**)(argv)); break;
  case 1449: flag=_wrap_BerdySensor_lt(resc,resv,argc,(mxArray**)(argv)); break;
  case 1450: flag=_wrap_new_BerdySensor(resc,resv,argc,(mxArray**)(argv)); break;
  case 1451: flag=_wrap_delete_BerdySensor(resc,resv,argc,(mxArray**)(argv)); break;
  case 1452: flag=_wrap_BerdyDynamicVariable_type_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 1453: flag=_wrap_BerdyDynamicVariable_type_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 1454: flag=_wrap_BerdyDynamicVariable_id_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 1455: flag=_wrap_BerdyDynamicVariable_id_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 1456: flag=_wrap_BerdyDynamicVariable_range_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 1457: flag=_wrap_BerdyDynamicVariable_range_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 1458: flag=_wrap_BerdyDynamicVariable_eq(resc,resv,argc,(mxArray**)(argv)); break;
  case 1459: flag=_wrap_BerdyDynamicVariable_lt(resc,resv,argc,(mxArray**)(argv)); break;
  case 1460: flag=_wrap_new_BerdyDynamicVariable(resc,resv,argc,(mxArray**)(argv)); break;
  case 1461: flag=_wrap_delete_BerdyDynamicVariable(resc,resv,argc,(mxArray**)(argv)); break;
  case 1462: flag=_wrap_new_BerdyHelper(resc,resv,argc,(mxArray**)(argv)); break;
  case 1463: flag=_wrap_BerdyHelper_dynamicTraversal(resc,resv,argc,(mxArray**)(argv)); break;
  case 1464: flag=_wrap_BerdyHelper_model(resc,resv,argc,(mxArray**)(argv)); break;
  case 1465: flag=_wrap_BerdyHelper_sensors(resc,resv,argc,(mxArray**)(argv)); break;
  case 1466: flag=_wrap_BerdyHelper_init(resc,resv,argc,(mxArray**)(argv)); break;
  case 1467: flag=_wrap_BerdyHelper_getOptions(resc,resv,argc,(mxArray**)(argv)); break;
  case 1468: flag=_wrap_BerdyHelper_getNrOfDynamicVariables(resc,resv,argc,(mxArray**)(argv)); break;
  case 1469: flag=_wrap_BerdyHelper_getNrOfDynamicEquations(resc,resv,argc,(mxArray**)(argv)); break;
  case 1470: flag=_wrap_BerdyHelper_getNrOfSensorsMeasurements(resc,resv,argc,(mxArray**)(argv)); break;
  case 1471: flag=_wrap_BerdyHelper_resizeAndZeroBerdyMatrices(resc,resv,argc,(mxArray**)(argv)); break;
  case 1472: flag=_wrap_BerdyHelper_getBerdyMatrices(resc,resv,argc,(mxArray**)(argv)); break;
  case 1473: flag=_wrap_BerdyHelper_getSensorsOrdering(resc,resv,argc,(mxArray**)(argv)); break;
  case 1474: flag=_wrap_BerdyHelper_getDynamicVariablesOrdering(resc,resv,argc,(mxArray**)(argv)); break;
  case 1475: flag=_wrap_BerdyHelper_serializeDynamicVariables(resc,resv,argc,(mxArray**)(argv)); break;
  case 1476: flag=_wrap_BerdyHelper_serializeSensorVariables(resc,resv,argc,(mxArray**)(argv)); break;
  case 1477: flag=_wrap_BerdyHelper_serializeDynamicVariablesComputedFromFixedBaseRNEA(resc,resv,argc,(mxArray**)(argv)); break;
  case 1478: flag=_wrap_BerdyHelper_updateKinematicsFromFloatingBase(resc,resv,argc,(mxArray**)(argv)); break;
  case 1479: flag=_wrap_BerdyHelper_updateKinematicsFromFixedBase(resc,resv,argc,(mxArray**)(argv)); break;
  case 1480: flag=_wrap_BerdyHelper_updateKinematicsFromTraversalFixedBase(resc,resv,argc,(mxArray**)(argv)); break;
  case 1481: flag=_wrap_delete_BerdyHelper(resc,resv,argc,(mxArray**)(argv)); break;
  case 1482: flag=_wrap_DynamicsRegressorParameter_category_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 1483: flag=_wrap_DynamicsRegressorParameter_category_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 1484: flag=_wrap_DynamicsRegressorParameter_elemIndex_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 1485: flag=_wrap_DynamicsRegressorParameter_elemIndex_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 1486: flag=_wrap_DynamicsRegressorParameter_type_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 1487: flag=_wrap_DynamicsRegressorParameter_type_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 1488: flag=_wrap_DynamicsRegressorParameter_lt(resc,resv,argc,(mxArray**)(argv)); break;
  case 1489: flag=_wrap_DynamicsRegressorParameter_eq(resc,resv,argc,(mxArray**)(argv)); break;
  case 1490: flag=_wrap_DynamicsRegressorParameter_ne(resc,resv,argc,(mxArray**)(argv)); break;
  case 1491: flag=_wrap_new_DynamicsRegressorParameter(resc,resv,argc,(mxArray**)(argv)); break;
  case 1492: flag=_wrap_delete_DynamicsRegressorParameter(resc,resv,argc,(mxArray**)(argv)); break;
  case 1493: flag=_wrap_DynamicsRegressorParametersList_parameters_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 1494: flag=_wrap_DynamicsRegressorParametersList_parameters_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 1495: flag=_wrap_DynamicsRegressorParametersList_getDescriptionOfParameter(resc,resv,argc,(mxArray**)(argv)); break;
  case 1496: flag=_wrap_DynamicsRegressorParametersList_addParam(resc,resv,argc,(mxArray**)(argv)); break;
  case 1497: flag=_wrap_DynamicsRegressorParametersList_addList(resc,resv,argc,(mxArray**)(argv)); break;
  case 1498: flag=_wrap_DynamicsRegressorParametersList_findParam(resc,resv,argc,(mxArray**)(argv)); break;
  case 1499: flag=_wrap_DynamicsRegressorParametersList_getNrOfParameters(resc,resv,argc,(mxArray**)(argv)); break;
  case 1500: flag=_wrap_new_DynamicsRegressorParametersList(resc,resv,argc,(mxArray**)(argv)); break;
  case 1501: flag=_wrap_delete_DynamicsRegressorParametersList(resc,resv,argc,(mxArray**)(argv)); break;
  case 1502: flag=_wrap_new_DynamicsRegressorGenerator(resc,resv,argc,(mxArray**)(argv)); break;
  case 1503: flag=_wrap_delete_DynamicsRegressorGenerator(resc,resv,argc,(mxArray**)(argv)); break;
  case 1504: flag=_wrap_DynamicsRegressorGenerator_loadRobotAndSensorsModelFromFile(resc,resv,argc,(mxArray**)(argv)); break;
  case 1505: flag=_wrap_DynamicsRegressorGenerator_loadRobotAndSensorsModelFromString(resc,resv,argc,(mxArray**)(argv)); break;
  case 1506: flag=_wrap_DynamicsRegressorGenerator_loadRegressorStructureFromFile(resc,resv,argc,(mxArray**)(argv)); break;
  case 1507: flag=_wrap_DynamicsRegressorGenerator_loadRegressorStructureFromString(resc,resv,argc,(mxArray**)(argv)); break;
  case 1508: flag=_wrap_DynamicsRegressorGenerator_isValid(resc,resv,argc,(mxArray**)(argv)); break;
  case 1509: flag=_wrap_DynamicsRegressorGenerator_getNrOfParameters(resc,resv,argc,(mxArray**)(argv)); break;
  case 1510: flag=_wrap_DynamicsRegressorGenerator_getNrOfOutputs(resc,resv,argc,(mxArray**)(argv)); break;
  case 1511: flag=_wrap_DynamicsRegressorGenerator_getNrOfDegreesOfFreedom(resc,resv,argc,(mxArray**)(argv)); break;
  case 1512: flag=_wrap_DynamicsRegressorGenerator_getDescriptionOfParameter(resc,resv,argc,(mxArray**)(argv)); break;
  case 1513: flag=_wrap_DynamicsRegressorGenerator_getDescriptionOfParameters(resc,resv,argc,(mxArray**)(argv)); break;
  case 1514: flag=_wrap_DynamicsRegressorGenerator_getDescriptionOfOutput(resc,resv,argc,(mxArray**)(argv)); break;
  case 1515: flag=_wrap_DynamicsRegressorGenerator_getDescriptionOfOutputs(resc,resv,argc,(mxArray**)(argv)); break;
  case 1516: flag=_wrap_DynamicsRegressorGenerator_getDescriptionOfDegreeOfFreedom(resc,resv,argc,(mxArray**)(argv)); break;
  case 1517: flag=_wrap_DynamicsRegressorGenerator_getDescriptionOfDegreesOfFreedom(resc,resv,argc,(mxArray**)(argv)); break;
  case 1518: flag=_wrap_DynamicsRegressorGenerator_getDescriptionOfLink(resc,resv,argc,(mxArray**)(argv)); break;
  case 1519: flag=_wrap_DynamicsRegressorGenerator_getDescriptionOfLinks(resc,resv,argc,(mxArray**)(argv)); break;
  case 1520: flag=_wrap_DynamicsRegressorGenerator_getNrOfLinks(resc,resv,argc,(mxArray**)(argv)); break;
  case 1521: flag=_wrap_DynamicsRegressorGenerator_getNrOfFakeLinks(resc,resv,argc,(mxArray**)(argv)); break;
  case 1522: flag=_wrap_DynamicsRegressorGenerator_getBaseLinkName(resc,resv,argc,(mxArray**)(argv)); break;
  case 1523: flag=_wrap_DynamicsRegressorGenerator_getSensorsModel(resc,resv,argc,(mxArray**)(argv)); break;
  case 1524: flag=_wrap_DynamicsRegressorGenerator_setRobotState(resc,resv,argc,(mxArray**)(argv)); break;
  case 1525: flag=_wrap_DynamicsRegressorGenerator_getSensorsMeasurements(resc,resv,argc,(mxArray**)(argv)); break;
  case 1526: flag=_wrap_DynamicsRegressorGenerator_setTorqueSensorMeasurement(resc,resv,argc,(mxArray**)(argv)); break;
  case 1527: flag=_wrap_DynamicsRegressorGenerator_computeRegressor(resc,resv,argc,(mxArray**)(argv)); break;
  case 1528: flag=_wrap_DynamicsRegressorGenerator_getModelParameters(resc,resv,argc,(mxArray**)(argv)); break;
  case 1529: flag=_wrap_DynamicsRegressorGenerator_computeFloatingBaseIdentifiableSubspace(resc,resv,argc,(mxArray**)(argv)); break;
  case 1530: flag=_wrap_DynamicsRegressorGenerator_computeFixedBaseIdentifiableSubspace(resc,resv,argc,(mxArray**)(argv)); break;
  case 1531: flag=_wrap_DynamicsRegressorGenerator_generate_random_regressors(resc,resv,argc,(mxArray**)(argv)); break;
  case 1532: flag=_wrap_new_KinDynComputations(resc,resv,argc,(mxArray**)(argv)); break;
  case 1533: flag=_wrap_delete_KinDynComputations(resc,resv,argc,(mxArray**)(argv)); break;
  case 1534: flag=_wrap_KinDynComputations_loadRobotModel(resc,resv,argc,(mxArray**)(argv)); break;
  case 1535: flag=_wrap_KinDynComputations_loadRobotModelFromFile(resc,resv,argc,(mxArray**)(argv)); break;
  case 1536: flag=_wrap_KinDynComputations_loadRobotModelFromString(resc,resv,argc,(mxArray**)(argv)); break;
  case 1537: flag=_wrap_KinDynComputations_isValid(resc,resv,argc,(mxArray**)(argv)); break;
  case 1538: flag=_wrap_KinDynComputations_setFrameVelocityRepresentation(resc,resv,argc,(mxArray**)(argv)); break;
  case 1539: flag=_wrap_KinDynComputations_getFrameVelocityRepresentation(resc,resv,argc,(mxArray**)(argv)); break;
  case 1540: flag=_wrap_KinDynComputations_getNrOfDegreesOfFreedom(resc,resv,argc,(mxArray**)(argv)); break;
  case 1541: flag=_wrap_KinDynComputations_getDescriptionOfDegreeOfFreedom(resc,resv,argc,(mxArray**)(argv)); break;
  case 1542: flag=_wrap_KinDynComputations_getDescriptionOfDegreesOfFreedom(resc,resv,argc,(mxArray**)(argv)); break;
  case 1543: flag=_wrap_KinDynComputations_getNrOfLinks(resc,resv,argc,(mxArray**)(argv)); break;
  case 1544: flag=_wrap_KinDynComputations_getNrOfFrames(resc,resv,argc,(mxArray**)(argv)); break;
  case 1545: flag=_wrap_KinDynComputations_getFloatingBase(resc,resv,argc,(mxArray**)(argv)); break;
  case 1546: flag=_wrap_KinDynComputations_setFloatingBase(resc,resv,argc,(mxArray**)(argv)); break;
  case 1547: flag=_wrap_KinDynComputations_model(resc,resv,argc,(mxArray**)(argv)); break;
  case 1548: flag=_wrap_KinDynComputations_getRobotModel(resc,resv,argc,(mxArray**)(argv)); break;
  case 1549: flag=_wrap_KinDynComputations_setJointPos(resc,resv,argc,(mxArray**)(argv)); break;
  case 1550: flag=_wrap_KinDynComputations_setRobotState(resc,resv,argc,(mxArray**)(argv)); break;
  case 1551: flag=_wrap_KinDynComputations_getRobotState(resc,resv,argc,(mxArray**)(argv)); break;
  case 1552: flag=_wrap_KinDynComputations_getWorldBaseTransform(resc,resv,argc,(mxArray**)(argv)); break;
  case 1553: flag=_wrap_KinDynComputations_getBaseTwist(resc,resv,argc,(mxArray**)(argv)); break;
  case 1554: flag=_wrap_KinDynComputations_getJointPos(resc,resv,argc,(mxArray**)(argv)); break;
  case 1555: flag=_wrap_KinDynComputations_getJointVel(resc,resv,argc,(mxArray**)(argv)); break;
  case 1556: flag=_wrap_KinDynComputations_getModelVel(resc,resv,argc,(mxArray**)(argv)); break;
  case 1557: flag=_wrap_KinDynComputations_getFrameIndex(resc,resv,argc,(mxArray**)(argv)); break;
  case 1558: flag=_wrap_KinDynComputations_getFrameName(resc,resv,argc,(mxArray**)(argv)); break;
  case 1559: flag=_wrap_KinDynComputations_getWorldTransform(resc,resv,argc,(mxArray**)(argv)); break;
  case 1560: flag=_wrap_KinDynComputations_getRelativeTransformExplicit(resc,resv,argc,(mxArray**)(argv)); break;
  case 1561: flag=_wrap_KinDynComputations_getRelativeTransform(resc,resv,argc,(mxArray**)(argv)); break;
  case 1562: flag=_wrap_KinDynComputations_getFrameVel(resc,resv,argc,(mxArray**)(argv)); break;
  case 1563: flag=_wrap_KinDynComputations_getFrameFreeFloatingJacobian(resc,resv,argc,(mxArray**)(argv)); break;
  case 1564: flag=_wrap_KinDynComputations_getRelativeJacobian(resc,resv,argc,(mxArray**)(argv)); break;
  case 1565: flag=_wrap_KinDynComputations_getRelativeJacobianExplicit(resc,resv,argc,(mxArray**)(argv)); break;
  case 1566: flag=_wrap_KinDynComputations_getFrameBiasAcc(resc,resv,argc,(mxArray**)(argv)); break;
  case 1567: flag=_wrap_KinDynComputations_getCenterOfMassPosition(resc,resv,argc,(mxArray**)(argv)); break;
  case 1568: flag=_wrap_KinDynComputations_getCenterOfMassVelocity(resc,resv,argc,(mxArray**)(argv)); break;
  case 1569: flag=_wrap_KinDynComputations_getCenterOfMassJacobian(resc,resv,argc,(mxArray**)(argv)); break;
  case 1570: flag=_wrap_KinDynComputations_getCenterOfMassBiasAcc(resc,resv,argc,(mxArray**)(argv)); break;
  case 1571: flag=_wrap_KinDynComputations_getAverageVelocity(resc,resv,argc,(mxArray**)(argv)); break;
  case 1572: flag=_wrap_KinDynComputations_getAverageVelocityJacobian(resc,resv,argc,(mxArray**)(argv)); break;
  case 1573: flag=_wrap_KinDynComputations_getCentroidalAverageVelocity(resc,resv,argc,(mxArray**)(argv)); break;
  case 1574: flag=_wrap_KinDynComputations_getCentroidalAverageVelocityJacobian(resc,resv,argc,(mxArray**)(argv)); break;
  case 1575: flag=_wrap_KinDynComputations_getLinearAngularMomentum(resc,resv,argc,(mxArray**)(argv)); break;
  case 1576: flag=_wrap_KinDynComputations_getLinearAngularMomentumJacobian(resc,resv,argc,(mxArray**)(argv)); break;
  case 1577: flag=_wrap_KinDynComputations_getCentroidalTotalMomentum(resc,resv,argc,(mxArray**)(argv)); break;
  case 1578: flag=_wrap_KinDynComputations_getFreeFloatingMassMatrix(resc,resv,argc,(mxArray**)(argv)); break;
  case 1579: flag=_wrap_KinDynComputations_inverseDynamics(resc,resv,argc,(mxArray**)(argv)); break;
  case 1580: flag=_wrap_KinDynComputations_generalizedBiasForces(resc,resv,argc,(mxArray**)(argv)); break;
  case 1581: flag=_wrap_KinDynComputations_generalizedGravityForces(resc,resv,argc,(mxArray**)(argv)); break;
  case 1582: flag=_wrap_delete_ICamera(resc,resv,argc,(mxArray**)(argv)); break;
  case 1583: flag=_wrap_ICamera_setPosition(resc,resv,argc,(mxArray**)(argv)); break;
  case 1584: flag=_wrap_ICamera_setTarget(resc,resv,argc,(mxArray**)(argv)); break;
  case 1585: flag=_wrap_ICamera_setUpVector(resc,resv,argc,(mxArray**)(argv)); break;
  case 1586: flag=_wrap_ColorViz_r_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 1587: flag=_wrap_ColorViz_r_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 1588: flag=_wrap_ColorViz_g_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 1589: flag=_wrap_ColorViz_g_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 1590: flag=_wrap_ColorViz_b_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 1591: flag=_wrap_ColorViz_b_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 1592: flag=_wrap_ColorViz_a_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 1593: flag=_wrap_ColorViz_a_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 1594: flag=_wrap_new_ColorViz(resc,resv,argc,(mxArray**)(argv)); break;
  case 1595: flag=_wrap_delete_ColorViz(resc,resv,argc,(mxArray**)(argv)); break;
  case 1596: flag=_wrap_delete_ILight(resc,resv,argc,(mxArray**)(argv)); break;
  case 1597: flag=_wrap_ILight_getName(resc,resv,argc,(mxArray**)(argv)); break;
  case 1598: flag=_wrap_ILight_setType(resc,resv,argc,(mxArray**)(argv)); break;
  case 1599: flag=_wrap_ILight_getType(resc,resv,argc,(mxArray**)(argv)); break;
  case 1600: flag=_wrap_ILight_setPosition(resc,resv,argc,(mxArray**)(argv)); break;
  case 1601: flag=_wrap_ILight_getPosition(resc,resv,argc,(mxArray**)(argv)); break;
  case 1602: flag=_wrap_ILight_setDirection(resc,resv,argc,(mxArray**)(argv)); break;
  case 1603: flag=_wrap_ILight_getDirection(resc,resv,argc,(mxArray**)(argv)); break;
  case 1604: flag=_wrap_ILight_setAmbientColor(resc,resv,argc,(mxArray**)(argv)); break;
  case 1605: flag=_wrap_ILight_getAmbientColor(resc,resv,argc,(mxArray**)(argv)); break;
  case 1606: flag=_wrap_ILight_setSpecularColor(resc,resv,argc,(mxArray**)(argv)); break;
  case 1607: flag=_wrap_ILight_getSpecularColor(resc,resv,argc,(mxArray**)(argv)); break;
  case 1608: flag=_wrap_ILight_setDiffuseColor(resc,resv,argc,(mxArray**)(argv)); break;
  case 1609: flag=_wrap_ILight_getDiffuseColor(resc,resv,argc,(mxArray**)(argv)); break;
  case 1610: flag=_wrap_delete_IEnvironment(resc,resv,argc,(mxArray**)(argv)); break;
  case 1611: flag=_wrap_IEnvironment_getElements(resc,resv,argc,(mxArray**)(argv)); break;
  case 1612: flag=_wrap_IEnvironment_setElementVisibility(resc,resv,argc,(mxArray**)(argv)); break;
  case 1613: flag=_wrap_IEnvironment_setBackgroundColor(resc,resv,argc,(mxArray**)(argv)); break;
  case 1614: flag=_wrap_IEnvironment_setAmbientLight(resc,resv,argc,(mxArray**)(argv)); break;
  case 1615: flag=_wrap_IEnvironment_getLights(resc,resv,argc,(mxArray**)(argv)); break;
  case 1616: flag=_wrap_IEnvironment_addLight(resc,resv,argc,(mxArray**)(argv)); break;
  case 1617: flag=_wrap_IEnvironment_lightViz(resc,resv,argc,(mxArray**)(argv)); break;
  case 1618: flag=_wrap_IEnvironment_removeLight(resc,resv,argc,(mxArray**)(argv)); break;
  case 1619: flag=_wrap_delete_IJetsVisualization(resc,resv,argc,(mxArray**)(argv)); break;
  case 1620: flag=_wrap_IJetsVisualization_setJetsFrames(resc,resv,argc,(mxArray**)(argv)); break;
  case 1621: flag=_wrap_IJetsVisualization_getNrOfJets(resc,resv,argc,(mxArray**)(argv)); break;
  case 1622: flag=_wrap_IJetsVisualization_getJetDirection(resc,resv,argc,(mxArray**)(argv)); break;
  case 1623: flag=_wrap_IJetsVisualization_setJetDirection(resc,resv,argc,(mxArray**)(argv)); break;
  case 1624: flag=_wrap_IJetsVisualization_setJetColor(resc,resv,argc,(mxArray**)(argv)); break;
  case 1625: flag=_wrap_IJetsVisualization_setJetsDimensions(resc,resv,argc,(mxArray**)(argv)); break;
  case 1626: flag=_wrap_IJetsVisualization_setJetsIntensity(resc,resv,argc,(mxArray**)(argv)); break;
  case 1627: flag=_wrap_delete_IModelVisualization(resc,resv,argc,(mxArray**)(argv)); break;
  case 1628: flag=_wrap_IModelVisualization_setPositions(resc,resv,argc,(mxArray**)(argv)); break;
  case 1629: flag=_wrap_IModelVisualization_setLinkPositions(resc,resv,argc,(mxArray**)(argv)); break;
  case 1630: flag=_wrap_IModelVisualization_model(resc,resv,argc,(mxArray**)(argv)); break;
  case 1631: flag=_wrap_IModelVisualization_getInstanceName(resc,resv,argc,(mxArray**)(argv)); break;
  case 1632: flag=_wrap_IModelVisualization_setModelVisibility(resc,resv,argc,(mxArray**)(argv)); break;
  case 1633: flag=_wrap_IModelVisualization_setModelColor(resc,resv,argc,(mxArray**)(argv)); break;
  case 1634: flag=_wrap_IModelVisualization_resetModelColor(resc,resv,argc,(mxArray**)(argv)); break;
  case 1635: flag=_wrap_IModelVisualization_getLinkNames(resc,resv,argc,(mxArray**)(argv)); break;
  case 1636: flag=_wrap_IModelVisualization_setLinkVisibility(resc,resv,argc,(mxArray**)(argv)); break;
  case 1637: flag=_wrap_IModelVisualization_getFeatures(resc,resv,argc,(mxArray**)(argv)); break;
  case 1638: flag=_wrap_IModelVisualization_setFeatureVisibility(resc,resv,argc,(mxArray**)(argv)); break;
  case 1639: flag=_wrap_IModelVisualization_jets(resc,resv,argc,(mxArray**)(argv)); break;
  case 1640: flag=_wrap_VisualizerOptions_verbose_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 1641: flag=_wrap_VisualizerOptions_verbose_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 1642: flag=_wrap_VisualizerOptions_winWidth_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 1643: flag=_wrap_VisualizerOptions_winWidth_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 1644: flag=_wrap_VisualizerOptions_winHeight_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 1645: flag=_wrap_VisualizerOptions_winHeight_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 1646: flag=_wrap_VisualizerOptions_rootFrameArrowsDimension_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 1647: flag=_wrap_VisualizerOptions_rootFrameArrowsDimension_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 1648: flag=_wrap_new_VisualizerOptions(resc,resv,argc,(mxArray**)(argv)); break;
  case 1649: flag=_wrap_delete_VisualizerOptions(resc,resv,argc,(mxArray**)(argv)); break;
  case 1650: flag=_wrap_new_Visualizer(resc,resv,argc,(mxArray**)(argv)); break;
  case 1651: flag=_wrap_delete_Visualizer(resc,resv,argc,(mxArray**)(argv)); break;
  case 1652: flag=_wrap_Visualizer_init(resc,resv,argc,(mxArray**)(argv)); break;
  case 1653: flag=_wrap_Visualizer_getNrOfVisualizedModels(resc,resv,argc,(mxArray**)(argv)); break;
  case 1654: flag=_wrap_Visualizer_getModelInstanceName(resc,resv,argc,(mxArray**)(argv)); break;
  case 1655: flag=_wrap_Visualizer_getModelInstanceIndex(resc,resv,argc,(mxArray**)(argv)); break;
  case 1656: flag=_wrap_Visualizer_addModel(resc,resv,argc,(mxArray**)(argv)); break;
  case 1657: flag=_wrap_Visualizer_modelViz(resc,resv,argc,(mxArray**)(argv)); break;
  case 1658: flag=_wrap_Visualizer_camera(resc,resv,argc,(mxArray**)(argv)); break;
  case 1659: flag=_wrap_Visualizer_enviroment(resc,resv,argc,(mxArray**)(argv)); break;
  case 1660: flag=_wrap_Visualizer_run(resc,resv,argc,(mxArray**)(argv)); break;
  case 1661: flag=_wrap_Visualizer_draw(resc,resv,argc,(mxArray**)(argv)); break;
  case 1662: flag=_wrap_Visualizer_drawToFile(resc,resv,argc,(mxArray**)(argv)); break;
  case 1663: flag=_wrap_Visualizer_close(resc,resv,argc,(mxArray**)(argv)); break;
  case 1664: flag=_wrap_new_DynamicsComputations(resc,resv,argc,(mxArray**)(argv)); break;
  case 1665: flag=_wrap_delete_DynamicsComputations(resc,resv,argc,(mxArray**)(argv)); break;
  case 1666: flag=_wrap_DynamicsComputations_loadRobotModelFromFile(resc,resv,argc,(mxArray**)(argv)); break;
  case 1667: flag=_wrap_DynamicsComputations_loadRobotModelFromString(resc,resv,argc,(mxArray**)(argv)); break;
  case 1668: flag=_wrap_DynamicsComputations_isValid(resc,resv,argc,(mxArray**)(argv)); break;
  case 1669: flag=_wrap_DynamicsComputations_getNrOfDegreesOfFreedom(resc,resv,argc,(mxArray**)(argv)); break;
  case 1670: flag=_wrap_DynamicsComputations_getDescriptionOfDegreeOfFreedom(resc,resv,argc,(mxArray**)(argv)); break;
  case 1671: flag=_wrap_DynamicsComputations_getDescriptionOfDegreesOfFreedom(resc,resv,argc,(mxArray**)(argv)); break;
  case 1672: flag=_wrap_DynamicsComputations_getNrOfLinks(resc,resv,argc,(mxArray**)(argv)); break;
  case 1673: flag=_wrap_DynamicsComputations_getNrOfFrames(resc,resv,argc,(mxArray**)(argv)); break;
  case 1674: flag=_wrap_DynamicsComputations_getFloatingBase(resc,resv,argc,(mxArray**)(argv)); break;
  case 1675: flag=_wrap_DynamicsComputations_setFloatingBase(resc,resv,argc,(mxArray**)(argv)); break;
  case 1676: flag=_wrap_DynamicsComputations_setRobotState(resc,resv,argc,(mxArray**)(argv)); break;
  case 1677: flag=_wrap_DynamicsComputations_getWorldBaseTransform(resc,resv,argc,(mxArray**)(argv)); break;
  case 1678: flag=_wrap_DynamicsComputations_getBaseTwist(resc,resv,argc,(mxArray**)(argv)); break;
  case 1679: flag=_wrap_DynamicsComputations_getJointPos(resc,resv,argc,(mxArray**)(argv)); break;
  case 1680: flag=_wrap_DynamicsComputations_getJointVel(resc,resv,argc,(mxArray**)(argv)); break;
  case 1681: flag=_wrap_DynamicsComputations_getFrameIndex(resc,resv,argc,(mxArray**)(argv)); break;
  case 1682: flag=_wrap_DynamicsComputations_getFrameName(resc,resv,argc,(mxArray**)(argv)); break;
  case 1683: flag=_wrap_DynamicsComputations_getWorldTransform(resc,resv,argc,(mxArray**)(argv)); break;
  case 1684: flag=_wrap_DynamicsComputations_getRelativeTransform(resc,resv,argc,(mxArray**)(argv)); break;
  case 1685: flag=_wrap_DynamicsComputations_getFrameTwist(resc,resv,argc,(mxArray**)(argv)); break;
  case 1686: flag=_wrap_DynamicsComputations_getFrameTwistInWorldOrient(resc,resv,argc,(mxArray**)(argv)); break;
  case 1687: flag=_wrap_DynamicsComputations_getFrameProperSpatialAcceleration(resc,resv,argc,(mxArray**)(argv)); break;
  case 1688: flag=_wrap_DynamicsComputations_getLinkIndex(resc,resv,argc,(mxArray**)(argv)); break;
  case 1689: flag=_wrap_DynamicsComputations_getLinkInertia(resc,resv,argc,(mxArray**)(argv)); break;
  case 1690: flag=_wrap_DynamicsComputations_getJointIndex(resc,resv,argc,(mxArray**)(argv)); break;
  case 1691: flag=_wrap_DynamicsComputations_getJointName(resc,resv,argc,(mxArray**)(argv)); break;
  case 1692: flag=_wrap_DynamicsComputations_getJointLimits(resc,resv,argc,(mxArray**)(argv)); break;
  case 1693: flag=_wrap_DynamicsComputations_inverseDynamics(resc,resv,argc,(mxArray**)(argv)); break;
  case 1694: flag=_wrap_DynamicsComputations_getFreeFloatingMassMatrix(resc,resv,argc,(mxArray**)(argv)); break;
  case 1695: flag=_wrap_DynamicsComputations_getFrameJacobian(resc,resv,argc,(mxArray**)(argv)); break;
  case 1696: flag=_wrap_DynamicsComputations_getDynamicsRegressor(resc,resv,argc,(mxArray**)(argv)); break;
  case 1697: flag=_wrap_DynamicsComputations_getModelDynamicsParameters(resc,resv,argc,(mxArray**)(argv)); break;
  case 1698: flag=_wrap_DynamicsComputations_getCenterOfMass(resc,resv,argc,(mxArray**)(argv)); break;
  case 1699: flag=_wrap_DynamicsComputations_getCenterOfMassJacobian(resc,resv,argc,(mxArray**)(argv)); break;
  default: flag=1, SWIG_Error(SWIG_RuntimeError, "No function id %d.", fcn_id);
  }
  if (flag) {
    mexErrMsgIdAndTxt(SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  }
}
