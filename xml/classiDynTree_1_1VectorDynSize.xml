<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classiDynTree_1_1VectorDynSize" kind="class" language="C++" prot="public">
    <compoundname>iDynTree::VectorDynSize</compoundname>
    <derivedcompoundref refid="classiDynTree_1_1JointDOFsDoubleArray" prot="public" virt="non-virtual">iDynTree::JointDOFsDoubleArray</derivedcompoundref>
    <derivedcompoundref refid="classiDynTree_1_1JointPosDoubleArray" prot="public" virt="non-virtual">iDynTree::JointPosDoubleArray</derivedcompoundref>
    <includes local="no">iDynTree/VectorDynSize.h</includes>
      <sectiondef kind="user-defined">
      <memberdef kind="typedef" id="classiDynTree_1_1VectorDynSize_1a0bfc17c328f9cbb2a63b501edb09cc6a" prot="public" static="no">
        <type>double</type>
        <definition>typedef double iDynTree::VectorDynSize::value_type</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
<para>Typedefs to enable make_span. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/VectorDynSize.h" line="247" column="24" bodyfile="iDynTree/VectorDynSize.h" bodystart="247" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classiDynTree_1_1VectorDynSize_1a3ea2fb7a1554fed00d992b005b6c661a" prot="public" static="no">
        <type>std::allocator&lt; double &gt;</type>
        <definition>typedef std::allocator&lt;double&gt; iDynTree::VectorDynSize::allocator_type</definition>
        <argsstring></argsstring>
        <name>allocator_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/VectorDynSize.h" line="249" column="32" bodyfile="iDynTree/VectorDynSize.h" bodystart="249" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classiDynTree_1_1VectorDynSize_1a4ade79723371cd1b3b3d7bbdf17d9e92" prot="public" static="no">
        <type>std::allocator_traits&lt; std::allocator&lt; double &gt; &gt;::pointer</type>
        <definition>typedef std::allocator_traits&lt;std::allocator&lt;double&gt; &gt;::pointer iDynTree::VectorDynSize::pointer</definition>
        <argsstring></argsstring>
        <name>pointer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/VectorDynSize.h" line="251" column="58" bodyfile="iDynTree/VectorDynSize.h" bodystart="251" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classiDynTree_1_1VectorDynSize_1afa55464b73d97865bb3c070a3fa53b72" prot="public" static="no">
        <type>std::allocator_traits&lt; std::allocator&lt; double &gt; &gt;::const_pointer</type>
        <definition>typedef std::allocator_traits&lt;std::allocator&lt;double&gt; &gt;::const_pointer iDynTree::VectorDynSize::const_pointer</definition>
        <argsstring></argsstring>
        <name>const_pointer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/VectorDynSize.h" line="253" column="64" bodyfile="iDynTree/VectorDynSize.h" bodystart="253" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Vector interface methods.</header>
      <description><para>Methods exposing a vector-like interface to PositionRaw. </para>
</description>
      <memberdef kind="function" id="classiDynTree_1_1VectorDynSize_1a420b4d9434108eb19ec6a8adc2190856" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double iDynTree::VectorDynSize::operator()</definition>
        <argsstring>(const std::size_t index) const</argsstring>
        <name>operator()</name>
        <param>
          <type>const std::size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/VectorDynSize.h" line="123" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1VectorDynSize_1aa0dccee7d469722a58972d578ec3e004" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double &amp;</type>
        <definition>double&amp; iDynTree::VectorDynSize::operator()</definition>
        <argsstring>(const std::size_t index)</argsstring>
        <name>operator()</name>
        <param>
          <type>const std::size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/VectorDynSize.h" line="125" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1VectorDynSize_1a89c0494d10142474cf317a3fba6704d1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double iDynTree::VectorDynSize::operator[]</definition>
        <argsstring>(const std::size_t index) const</argsstring>
        <name>operator[]</name>
        <param>
          <type>const std::size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/VectorDynSize.h" line="127" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1VectorDynSize_1a0f51ccc812b13faf0059f2e392e39c93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double &amp;</type>
        <definition>double&amp; iDynTree::VectorDynSize::operator[]</definition>
        <argsstring>(const std::size_t index)</argsstring>
        <name>operator[]</name>
        <param>
          <type>const std::size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/VectorDynSize.h" line="129" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1VectorDynSize_1a5f0d8d1b4087ca7dad2efee621700b88" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double iDynTree::VectorDynSize::getVal</definition>
        <argsstring>(const std::size_t index) const</argsstring>
        <name>getVal</name>
        <param>
          <type>const std::size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/VectorDynSize.h" line="131" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1VectorDynSize_1a4d111694becf32e213e35b89f6a22508" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool iDynTree::VectorDynSize::setVal</definition>
        <argsstring>(const std::size_t index, const double new_el)</argsstring>
        <name>setVal</name>
        <param>
          <type>const std::size_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>new_el</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/VectorDynSize.h" line="133" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1VectorDynSize_1a5f0343d03d3920a41c1bd94d2e6ffff5" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>const double *</type>
        <definition>const double* iDynTree::VectorDynSize::begin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>begin</name>
        <briefdescription>
<para>Returns a const iterator to the beginning of the vector. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>At the moment iterator is implemented as a pointer, it may change in the future. For this reason it should not be used as a pointer to the data, use <ref refid="classiDynTree_1_1VectorDynSize_1a463b9b3d0f4581b3ab44f2ce63ba8874" kindref="member">data()</ref> instead. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/VectorDynSize.h" line="140" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1VectorDynSize_1aa75089c81fd2e6224182b16dee49dd79" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>const double *</type>
        <definition>const double* iDynTree::VectorDynSize::end</definition>
        <argsstring>() const noexcept</argsstring>
        <name>end</name>
        <briefdescription>
<para>Returns a const iterator to the beginning of the vector. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>At the moment iterator is implemented as a pointer, it may change in the future. For this reason it should not be used as a pointer to the data, use <ref refid="classiDynTree_1_1VectorDynSize_1a463b9b3d0f4581b3ab44f2ce63ba8874" kindref="member">data()</ref> instead. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/VectorDynSize.h" line="147" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1VectorDynSize_1a2c6ca00df9c9295292f8aa505c938dbc" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>const double *</type>
        <definition>const double* iDynTree::VectorDynSize::cbegin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>cbegin</name>
        <briefdescription>
<para>Returns a const iterator to the beginning of the vector. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>At the moment iterator is implemented as a pointer, it may change in the future. For this reason it should not be used as a pointer to the data, use <ref refid="classiDynTree_1_1VectorDynSize_1a463b9b3d0f4581b3ab44f2ce63ba8874" kindref="member">data()</ref> instead. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/VectorDynSize.h" line="154" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1VectorDynSize_1ae32ad5772e2398de0f8fa4bf82eb9179" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>const double *</type>
        <definition>const double* iDynTree::VectorDynSize::cend</definition>
        <argsstring>() const noexcept</argsstring>
        <name>cend</name>
        <briefdescription>
<para>Returns a const iterator to the beginning of the vector. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>At the moment iterator is implemented as a pointer, it may change in the future. For this reason it should not be used as a pointer to the data, use <ref refid="classiDynTree_1_1VectorDynSize_1a463b9b3d0f4581b3ab44f2ce63ba8874" kindref="member">data()</ref> instead. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/VectorDynSize.h" line="161" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1VectorDynSize_1a6bd1b71bba47254db0d28d8a77135998" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>double *</type>
        <definition>double* iDynTree::VectorDynSize::begin</definition>
        <argsstring>() noexcept</argsstring>
        <name>begin</name>
        <briefdescription>
<para>Returns a iterator to the beginning of the vector. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>At the moment iterator is implemented as a pointer, it may change in the future. For this reason it should not be used as a pointer to the data, use <ref refid="classiDynTree_1_1VectorDynSize_1a463b9b3d0f4581b3ab44f2ce63ba8874" kindref="member">data()</ref> instead. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/VectorDynSize.h" line="168" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1VectorDynSize_1acb315119d3e5018c46a6d410bae6830c" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>double *</type>
        <definition>double* iDynTree::VectorDynSize::end</definition>
        <argsstring>() noexcept</argsstring>
        <name>end</name>
        <briefdescription>
<para>Returns a iterator to the beginning of the vector. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>At the moment iterator is implemented as a pointer, it may change in the future. For this reason it should not be used as a pointer to the data, use <ref refid="classiDynTree_1_1VectorDynSize_1a463b9b3d0f4581b3ab44f2ce63ba8874" kindref="member">data()</ref> instead. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/VectorDynSize.h" line="175" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1VectorDynSize_1ae0939194f829b13a798bc7120efa26c9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t iDynTree::VectorDynSize::size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/VectorDynSize.h" line="177" column="21"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Output helpers.</header>
      <description><para>Output helpers. </para>
</description>
      <memberdef kind="function" id="classiDynTree_1_1VectorDynSize_1ae4f23d980b16dac5b100ec8eaa37f848" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string iDynTree::VectorDynSize::toString</definition>
        <argsstring>() const</argsstring>
        <name>toString</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/VectorDynSize.h" line="261" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1VectorDynSize_1af1d48bf5aac5f4cf8c87e3ac161d2523" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string iDynTree::VectorDynSize::reservedToString</definition>
        <argsstring>() const</argsstring>
        <name>reservedToString</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/VectorDynSize.h" line="263" column="21"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classiDynTree_1_1VectorDynSize_1a5b4afa8d10714a7343f53d5a6c4ddecc" prot="protected" static="no" mutable="no">
        <type>double *</type>
        <definition>double* iDynTree::VectorDynSize::m_data</definition>
        <argsstring></argsstring>
        <name>m_data</name>
        <briefdescription>
<para>Storage for the <ref refid="classiDynTree_1_1VectorDynSize" kindref="compound">VectorDynSize</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Pointer to an area of <ref refid="classiDynTree_1_1VectorDynSize_1adb08f82f775b84bd0e0f8964b5c42dc5" kindref="member">capacity()</ref> doubles, managed by this class. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/VectorDynSize.h" line="29" column="17" bodyfile="iDynTree/VectorDynSize.h" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classiDynTree_1_1VectorDynSize_1a82c970a6d8f227ee9b6613fd2592eea4" prot="protected" static="no" mutable="no">
        <type>std::size_t</type>
        <definition>std::size_t iDynTree::VectorDynSize::m_size</definition>
        <argsstring></argsstring>
        <name>m_size</name>
        <briefdescription>
<para>Size of the vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/VectorDynSize.h" line="34" column="21" bodyfile="iDynTree/VectorDynSize.h" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classiDynTree_1_1VectorDynSize_1af654f4b9b859eff6af68a6ece12a60d2" prot="protected" static="no" mutable="no">
        <type>std::size_t</type>
        <definition>std::size_t iDynTree::VectorDynSize::m_capacity</definition>
        <argsstring></argsstring>
        <name>m_capacity</name>
        <briefdescription>
<para>The buffer to which m_data is pointing is m_capacity*sizeof(double). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/VectorDynSize.h" line="39" column="21" bodyfile="iDynTree/VectorDynSize.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classiDynTree_1_1VectorDynSize_1aa7f1b92585b7eeab05b278ebe5504a06" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void iDynTree::VectorDynSize::changeCapacityAndCopyData</definition>
        <argsstring>(const std::size_t _newCapacity)</argsstring>
        <name>changeCapacityAndCopyData</name>
        <param>
          <type>const std::size_t</type>
          <declname>_newCapacity</declname>
        </param>
        <briefdescription>
<para>Set the capacity of the vector, resizing the buffer pointed by m_data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/VectorDynSize.h" line="44" column="14"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classiDynTree_1_1VectorDynSize_1ad5f75c57383d1f74bdff0cf636dc897c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iDynTree::VectorDynSize::VectorDynSize</definition>
        <argsstring>()</argsstring>
        <name>VectorDynSize</name>
        <briefdescription>
<para>Default constructor: initialize the size of the array to zero. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/VectorDynSize.h" line="50" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1VectorDynSize_1ab5078978b40c0d797f4ec2679ad9a39c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iDynTree::VectorDynSize::VectorDynSize</definition>
        <argsstring>(std::size_t _size)</argsstring>
        <name>VectorDynSize</name>
        <param>
          <type>std::size_t</type>
          <declname>_size</declname>
        </param>
        <briefdescription>
<para>Constructor from the size, all the element assigned to 0. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_size</parametername>
</parameternamelist>
<parameterdescription>
<para>the desired size of the array.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>performs dynamic memory allocation operations </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/VectorDynSize.h" line="59" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1VectorDynSize_1a357bd4663b1aa598357dfeb2a5221dd4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iDynTree::VectorDynSize::VectorDynSize</definition>
        <argsstring>(const double *in_data, const std::size_t in_size)</argsstring>
        <name>VectorDynSize</name>
        <param>
          <type>const double *</type>
          <declname>in_data</declname>
        </param>
        <param>
          <type>const std::size_t</type>
          <declname>in_size</declname>
        </param>
        <briefdescription>
<para>Constructor from a C-style array. </para>
        </briefdescription>
        <detaileddescription>
<para>Build</para>
<para><simplesect kind="warning"><para>performs dynamic memory allocation operations </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/VectorDynSize.h" line="68" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1VectorDynSize_1a6cd442c9388f049e75a141fa9da1a37e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iDynTree::VectorDynSize::VectorDynSize</definition>
        <argsstring>(const VectorDynSize &amp;vec)</argsstring>
        <name>VectorDynSize</name>
        <param>
          <type>const <ref refid="classiDynTree_1_1VectorDynSize" kindref="compound">VectorDynSize</ref> &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
<para>Copy constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>performs dynamic memory allocation operations </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/VectorDynSize.h" line="74" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1VectorDynSize_1ab68a0190fe0a877a55d7a6b8399517a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iDynTree::VectorDynSize::VectorDynSize</definition>
        <argsstring>(iDynTree::Span&lt; const double &gt; vec)</argsstring>
        <name>VectorDynSize</name>
        <param>
          <type><ref refid="classiDynTree_1_1Span" kindref="compound">iDynTree::Span</ref>&lt; const double &gt;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
<para>Constructor from an <ref refid="classiDynTree_1_1Span" kindref="compound">iDynTree::Span</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vec</parametername>
</parameternamelist>
<parameterdescription>
<para>span representing a vector</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>performs dynamic memory allocation operations </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/VectorDynSize.h" line="85" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1VectorDynSize_1a2b3a46833b8ac3023a285d9d180604c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual iDynTree::VectorDynSize::~VectorDynSize</definition>
        <argsstring>()</argsstring>
        <name>~VectorDynSize</name>
        <briefdescription>
<para>Denstructor. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>performs dynamic memory allocation operations </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/VectorDynSize.h" line="93" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1VectorDynSize_1a6bf2663c71216f9ec3b8fb9d6e68e3ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classiDynTree_1_1VectorDynSize" kindref="compound">VectorDynSize</ref> &amp;</type>
        <definition>VectorDynSize&amp; iDynTree::VectorDynSize::operator=</definition>
        <argsstring>(const VectorDynSize &amp;vec)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classiDynTree_1_1VectorDynSize" kindref="compound">VectorDynSize</ref> &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
<para>Copy assignment operator. </para>
        </briefdescription>
        <detaileddescription>
<para>The vector will be resize to match the size of the argument, and the data will then be copied.</para>
<para><simplesect kind="warning"><para>performs dynamic memory allocation operations </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/VectorDynSize.h" line="104" column="24"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1VectorDynSize_1a03b12232917d198052696fec51b891c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classiDynTree_1_1VectorDynSize" kindref="compound">VectorDynSize</ref> &amp;</type>
        <definition>VectorDynSize&amp; iDynTree::VectorDynSize::operator=</definition>
        <argsstring>(iDynTree::Span&lt; const double &gt; vec)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classiDynTree_1_1Span" kindref="compound">iDynTree::Span</ref>&lt; const double &gt;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
<para>Copy assignment operator. </para>
        </briefdescription>
        <detaileddescription>
<para>The vector will be resize to match the size of the argument, and the data will then be copied.</para>
<para><simplesect kind="warning"><para>performs dynamic memory allocation operations </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/VectorDynSize.h" line="116" column="24"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1VectorDynSize_1a6f33a6cbfc6efa20a58d174c96e1605f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const double *</type>
        <definition>const double* iDynTree::VectorDynSize::data</definition>
        <argsstring>() const</argsstring>
        <name>data</name>
        <briefdescription>
<para>Raw data accessor. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a const pointer to a vector of size() doubles </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/VectorDynSize.h" line="186" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1VectorDynSize_1a463b9b3d0f4581b3ab44f2ce63ba8874" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double *</type>
        <definition>double* iDynTree::VectorDynSize::data</definition>
        <argsstring>()</argsstring>
        <name>data</name>
        <briefdescription>
<para>Raw data accessor. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a pointer to a vector of size() doubles </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/VectorDynSize.h" line="193" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1VectorDynSize_1ad264c9a85bf7adbd308627b0e719d65f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void iDynTree::VectorDynSize::zero</definition>
        <argsstring>()</argsstring>
        <name>zero</name>
        <briefdescription>
<para>Assign all element of the vector to 0. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/VectorDynSize.h" line="198" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1VectorDynSize_1a0c18e4e63e37de5efe0481f4c1861774" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void iDynTree::VectorDynSize::reserve</definition>
        <argsstring>(const std::size_t newCapacity)</argsstring>
        <name>reserve</name>
        <param>
          <type>const std::size_t</type>
          <declname>newCapacity</declname>
        </param>
        <briefdescription>
<para>Increase the capacity of the vector preserving content. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>newCapacity</parametername>
</parameternamelist>
<parameterdescription>
<para>the new capacity of the vector </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>performs dynamic memory allocation operations if newCapacity &gt; <ref refid="classiDynTree_1_1VectorDynSize_1adb08f82f775b84bd0e0f8964b5c42dc5" kindref="member">capacity()</ref> </para>
</simplesect>
<simplesect kind="note"><para>if newCapacity &lt;= <ref refid="classiDynTree_1_1VectorDynSize_1adb08f82f775b84bd0e0f8964b5c42dc5" kindref="member">capacity()</ref>, this method does nothing and the capacity will remain unchanged. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/VectorDynSize.h" line="207" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1VectorDynSize_1a6c1045505770a93e2a142546d3a8420c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void iDynTree::VectorDynSize::resize</definition>
        <argsstring>(const std::size_t newSize)</argsstring>
        <name>resize</name>
        <param>
          <type>const std::size_t</type>
          <declname>newSize</declname>
        </param>
        <briefdescription>
<para>Change the size of the vector preserving old content. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>newSize</parametername>
</parameternamelist>
<parameterdescription>
<para>the new size of the vector </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>performs dynamic memory allocation operations if newSize &gt; <ref refid="classiDynTree_1_1VectorDynSize_1adb08f82f775b84bd0e0f8964b5c42dc5" kindref="member">capacity()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/VectorDynSize.h" line="215" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1VectorDynSize_1adb3205ed58008a5d54c9cd84b155d6e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void iDynTree::VectorDynSize::shrink_to_fit</definition>
        <argsstring>()</argsstring>
        <name>shrink_to_fit</name>
        <briefdescription>
<para>Change the capacity of the vector to match the size. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>performs dynamic memory allocation operations if size() != <ref refid="classiDynTree_1_1VectorDynSize_1adb08f82f775b84bd0e0f8964b5c42dc5" kindref="member">capacity()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/VectorDynSize.h" line="222" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1VectorDynSize_1adb08f82f775b84bd0e0f8964b5c42dc5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t iDynTree::VectorDynSize::capacity</definition>
        <argsstring>() const</argsstring>
        <name>capacity</name>
        <briefdescription>
<para>The buffer pointed by <ref refid="classiDynTree_1_1VectorDynSize_1a463b9b3d0f4581b3ab44f2ce63ba8874" kindref="member">data()</ref> has size <ref refid="classiDynTree_1_1VectorDynSize_1adb08f82f775b84bd0e0f8964b5c42dc5" kindref="member">capacity()</ref>*sizeof(double) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/VectorDynSize.h" line="227" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1VectorDynSize_1a1f435e6b594f64f058059df2e63434f8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void iDynTree::VectorDynSize::fillBuffer</definition>
        <argsstring>(double *buf) const</argsstring>
        <name>fillBuffer</name>
        <param>
          <type>double *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Assume that buf is pointing to a buffer of size() doubles, and fill it with the content of this vector. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the buffer to fill</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
<para><simplesect kind="warning"><para>use this function only if you are an expert C user </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/VectorDynSize.h" line="241" column="14"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Class providing a simple form of vector with dynamic size. </para>
    </briefdescription>
    <detaileddescription>
<para>It is designed to provide seamless integration with SWIG. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>iDynTree::VectorDynSize</label>
        <link refid="classiDynTree_1_1VectorDynSize"/>
      </node>
      <node id="2">
        <label>iDynTree::JointDOFsDoubleArray</label>
        <link refid="classiDynTree_1_1JointDOFsDoubleArray"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>iDynTree::JointPosDoubleArray</label>
        <link refid="classiDynTree_1_1JointPosDoubleArray"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="iDynTree/VectorDynSize.h" line="21" column="5" bodyfile="iDynTree/VectorDynSize.h" bodystart="22" bodyend="266"/>
    <listofallmembers>
      <member refid="classiDynTree_1_1VectorDynSize_1a3ea2fb7a1554fed00d992b005b6c661a" prot="public" virt="non-virtual"><scope>iDynTree::VectorDynSize</scope><name>allocator_type</name></member>
      <member refid="classiDynTree_1_1VectorDynSize_1a5f0343d03d3920a41c1bd94d2e6ffff5" prot="public" virt="non-virtual"><scope>iDynTree::VectorDynSize</scope><name>begin</name></member>
      <member refid="classiDynTree_1_1VectorDynSize_1a6bd1b71bba47254db0d28d8a77135998" prot="public" virt="non-virtual"><scope>iDynTree::VectorDynSize</scope><name>begin</name></member>
      <member refid="classiDynTree_1_1VectorDynSize_1adb08f82f775b84bd0e0f8964b5c42dc5" prot="public" virt="non-virtual"><scope>iDynTree::VectorDynSize</scope><name>capacity</name></member>
      <member refid="classiDynTree_1_1VectorDynSize_1a2c6ca00df9c9295292f8aa505c938dbc" prot="public" virt="non-virtual"><scope>iDynTree::VectorDynSize</scope><name>cbegin</name></member>
      <member refid="classiDynTree_1_1VectorDynSize_1ae32ad5772e2398de0f8fa4bf82eb9179" prot="public" virt="non-virtual"><scope>iDynTree::VectorDynSize</scope><name>cend</name></member>
      <member refid="classiDynTree_1_1VectorDynSize_1aa7f1b92585b7eeab05b278ebe5504a06" prot="protected" virt="non-virtual"><scope>iDynTree::VectorDynSize</scope><name>changeCapacityAndCopyData</name></member>
      <member refid="classiDynTree_1_1VectorDynSize_1afa55464b73d97865bb3c070a3fa53b72" prot="public" virt="non-virtual"><scope>iDynTree::VectorDynSize</scope><name>const_pointer</name></member>
      <member refid="classiDynTree_1_1VectorDynSize_1a6f33a6cbfc6efa20a58d174c96e1605f" prot="public" virt="non-virtual"><scope>iDynTree::VectorDynSize</scope><name>data</name></member>
      <member refid="classiDynTree_1_1VectorDynSize_1a463b9b3d0f4581b3ab44f2ce63ba8874" prot="public" virt="non-virtual"><scope>iDynTree::VectorDynSize</scope><name>data</name></member>
      <member refid="classiDynTree_1_1VectorDynSize_1aa75089c81fd2e6224182b16dee49dd79" prot="public" virt="non-virtual"><scope>iDynTree::VectorDynSize</scope><name>end</name></member>
      <member refid="classiDynTree_1_1VectorDynSize_1acb315119d3e5018c46a6d410bae6830c" prot="public" virt="non-virtual"><scope>iDynTree::VectorDynSize</scope><name>end</name></member>
      <member refid="classiDynTree_1_1VectorDynSize_1a1f435e6b594f64f058059df2e63434f8" prot="public" virt="non-virtual"><scope>iDynTree::VectorDynSize</scope><name>fillBuffer</name></member>
      <member refid="classiDynTree_1_1VectorDynSize_1a5f0d8d1b4087ca7dad2efee621700b88" prot="public" virt="non-virtual"><scope>iDynTree::VectorDynSize</scope><name>getVal</name></member>
      <member refid="classiDynTree_1_1VectorDynSize_1af654f4b9b859eff6af68a6ece12a60d2" prot="protected" virt="non-virtual"><scope>iDynTree::VectorDynSize</scope><name>m_capacity</name></member>
      <member refid="classiDynTree_1_1VectorDynSize_1a5b4afa8d10714a7343f53d5a6c4ddecc" prot="protected" virt="non-virtual"><scope>iDynTree::VectorDynSize</scope><name>m_data</name></member>
      <member refid="classiDynTree_1_1VectorDynSize_1a82c970a6d8f227ee9b6613fd2592eea4" prot="protected" virt="non-virtual"><scope>iDynTree::VectorDynSize</scope><name>m_size</name></member>
      <member refid="classiDynTree_1_1VectorDynSize_1a420b4d9434108eb19ec6a8adc2190856" prot="public" virt="non-virtual"><scope>iDynTree::VectorDynSize</scope><name>operator()</name></member>
      <member refid="classiDynTree_1_1VectorDynSize_1aa0dccee7d469722a58972d578ec3e004" prot="public" virt="non-virtual"><scope>iDynTree::VectorDynSize</scope><name>operator()</name></member>
      <member refid="classiDynTree_1_1VectorDynSize_1a6bf2663c71216f9ec3b8fb9d6e68e3ec" prot="public" virt="non-virtual"><scope>iDynTree::VectorDynSize</scope><name>operator=</name></member>
      <member refid="classiDynTree_1_1VectorDynSize_1a03b12232917d198052696fec51b891c9" prot="public" virt="non-virtual"><scope>iDynTree::VectorDynSize</scope><name>operator=</name></member>
      <member refid="classiDynTree_1_1VectorDynSize_1a89c0494d10142474cf317a3fba6704d1" prot="public" virt="non-virtual"><scope>iDynTree::VectorDynSize</scope><name>operator[]</name></member>
      <member refid="classiDynTree_1_1VectorDynSize_1a0f51ccc812b13faf0059f2e392e39c93" prot="public" virt="non-virtual"><scope>iDynTree::VectorDynSize</scope><name>operator[]</name></member>
      <member refid="classiDynTree_1_1VectorDynSize_1a4ade79723371cd1b3b3d7bbdf17d9e92" prot="public" virt="non-virtual"><scope>iDynTree::VectorDynSize</scope><name>pointer</name></member>
      <member refid="classiDynTree_1_1VectorDynSize_1a0c18e4e63e37de5efe0481f4c1861774" prot="public" virt="non-virtual"><scope>iDynTree::VectorDynSize</scope><name>reserve</name></member>
      <member refid="classiDynTree_1_1VectorDynSize_1af1d48bf5aac5f4cf8c87e3ac161d2523" prot="public" virt="non-virtual"><scope>iDynTree::VectorDynSize</scope><name>reservedToString</name></member>
      <member refid="classiDynTree_1_1VectorDynSize_1a6c1045505770a93e2a142546d3a8420c" prot="public" virt="non-virtual"><scope>iDynTree::VectorDynSize</scope><name>resize</name></member>
      <member refid="classiDynTree_1_1VectorDynSize_1a4d111694becf32e213e35b89f6a22508" prot="public" virt="non-virtual"><scope>iDynTree::VectorDynSize</scope><name>setVal</name></member>
      <member refid="classiDynTree_1_1VectorDynSize_1adb3205ed58008a5d54c9cd84b155d6e9" prot="public" virt="non-virtual"><scope>iDynTree::VectorDynSize</scope><name>shrink_to_fit</name></member>
      <member refid="classiDynTree_1_1VectorDynSize_1ae0939194f829b13a798bc7120efa26c9" prot="public" virt="non-virtual"><scope>iDynTree::VectorDynSize</scope><name>size</name></member>
      <member refid="classiDynTree_1_1VectorDynSize_1ae4f23d980b16dac5b100ec8eaa37f848" prot="public" virt="non-virtual"><scope>iDynTree::VectorDynSize</scope><name>toString</name></member>
      <member refid="classiDynTree_1_1VectorDynSize_1a0bfc17c328f9cbb2a63b501edb09cc6a" prot="public" virt="non-virtual"><scope>iDynTree::VectorDynSize</scope><name>value_type</name></member>
      <member refid="classiDynTree_1_1VectorDynSize_1ad5f75c57383d1f74bdff0cf636dc897c" prot="public" virt="non-virtual"><scope>iDynTree::VectorDynSize</scope><name>VectorDynSize</name></member>
      <member refid="classiDynTree_1_1VectorDynSize_1ab5078978b40c0d797f4ec2679ad9a39c" prot="public" virt="non-virtual"><scope>iDynTree::VectorDynSize</scope><name>VectorDynSize</name></member>
      <member refid="classiDynTree_1_1VectorDynSize_1a357bd4663b1aa598357dfeb2a5221dd4" prot="public" virt="non-virtual"><scope>iDynTree::VectorDynSize</scope><name>VectorDynSize</name></member>
      <member refid="classiDynTree_1_1VectorDynSize_1a6cd442c9388f049e75a141fa9da1a37e" prot="public" virt="non-virtual"><scope>iDynTree::VectorDynSize</scope><name>VectorDynSize</name></member>
      <member refid="classiDynTree_1_1VectorDynSize_1ab68a0190fe0a877a55d7a6b8399517a2" prot="public" virt="non-virtual"><scope>iDynTree::VectorDynSize</scope><name>VectorDynSize</name></member>
      <member refid="classiDynTree_1_1VectorDynSize_1ad264c9a85bf7adbd308627b0e719d65f" prot="public" virt="non-virtual"><scope>iDynTree::VectorDynSize</scope><name>zero</name></member>
      <member refid="classiDynTree_1_1VectorDynSize_1a2b3a46833b8ac3023a285d9d180604c9" prot="public" virt="virtual"><scope>iDynTree::VectorDynSize</scope><name>~VectorDynSize</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
