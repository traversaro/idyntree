<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="namespaceiDynTree_1_1SpanUtils" kind="namespace" language="C++">
    <compoundname>iDynTree::SpanUtils</compoundname>
    <innerclass refid="structiDynTree_1_1SpanUtils_1_1make__void" prot="public">iDynTree::SpanUtils::make_void</innerclass>
    <innerclass refid="structiDynTree_1_1SpanUtils_1_1is__value__defined" prot="public">iDynTree::SpanUtils::is_value_defined</innerclass>
    <innerclass refid="structiDynTree_1_1SpanUtils_1_1is__value__defined_3_01T_00_01void__t_3_01typename_01T_1_1value__type_01_4_01_4" prot="public">iDynTree::SpanUtils::is_value_defined&lt; T, void_t&lt; typename T::value_type &gt; &gt;</innerclass>
    <innerclass refid="structiDynTree_1_1SpanUtils_1_1is__element__defined" prot="public">iDynTree::SpanUtils::is_element_defined</innerclass>
    <innerclass refid="structiDynTree_1_1SpanUtils_1_1is__element__defined_3_01T_00_01void__t_3_01typename_01T_1_1element__type_01_4_01_4" prot="public">iDynTree::SpanUtils::is_element_defined&lt; T, void_t&lt; typename T::element_type &gt; &gt;</innerclass>
    <innerclass refid="structiDynTree_1_1SpanUtils_1_1has__data__method" prot="public">iDynTree::SpanUtils::has_data_method</innerclass>
    <innerclass refid="structiDynTree_1_1SpanUtils_1_1has__data__method_3_01T_00_01void__t_3_01decltype_07std_1_1declvab6b1e478fbc78504ead5a4d656be7ada" prot="public">iDynTree::SpanUtils::has_data_method&lt; T, void_t&lt; decltype(std::declval&lt; T &gt;().data())&gt; &gt;</innerclass>
    <innerclass refid="structiDynTree_1_1SpanUtils_1_1has__size__method" prot="public">iDynTree::SpanUtils::has_size_method</innerclass>
    <innerclass refid="structiDynTree_1_1SpanUtils_1_1has__size__method_3_01T_00_01void__t_3_01decltype_07std_1_1declvae1bc7a5e579508da24d014f467d8f210" prot="public">iDynTree::SpanUtils::has_size_method&lt; T, void_t&lt; decltype(std::declval&lt; T &gt;().size())&gt; &gt;</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="Span_8h_1a27ad8bb96b7bc89403877a10e99534d4" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>typename <ref refid="structiDynTree_1_1SpanUtils_1_1make__void" kindref="compound">make_void</ref>&lt; Ts... &gt;::type</type>
        <definition>using iDynTree::SpanUtils::void_t = typedef typename make_void&lt;Ts...&gt;::type</definition>
        <argsstring></argsstring>
        <name>void_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Span.h" line="77" column="13" bodyfile="iDynTree/Span.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="iDynTree/Span.h" line="73" column="1"/>
  </compounddef>
</doxygen>
