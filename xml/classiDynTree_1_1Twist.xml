<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classiDynTree_1_1Twist" kind="class" language="C++" prot="public">
    <compoundname>iDynTree::Twist</compoundname>
    <basecompoundref refid="classiDynTree_1_1SpatialMotionVector" prot="public" virt="non-virtual">iDynTree::SpatialMotionVector</basecompoundref>
    <includes local="no">iDynTree/Twist.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classiDynTree_1_1Twist_1a3a2fff49fa9cbdcdc96589f26f909811" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iDynTree::Twist::Twist</definition>
        <argsstring>()</argsstring>
        <name>Twist</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Twist.h" line="25" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1Twist_1ad6ccf45a38ed5304317540ac2d4f9953" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iDynTree::Twist::Twist</definition>
        <argsstring>(const LinVelocity &amp;_linearVec3, const AngVelocity &amp;_angularVec3)</argsstring>
        <name>Twist</name>
        <param>
          <type>const <ref refid="classiDynTree_1_1GeomVector3" kindref="compound">LinVelocity</ref> &amp;</type>
          <declname>_linearVec3</declname>
        </param>
        <param>
          <type>const <ref refid="classiDynTree_1_1GeomVector3" kindref="compound">AngVelocity</ref> &amp;</type>
          <declname>_angularVec3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Twist.h" line="26" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1Twist_1a356ac02dceb5807c911d0dc77a37c62b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iDynTree::Twist::Twist</definition>
        <argsstring>(const SpatialMotionVector &amp;other)</argsstring>
        <name>Twist</name>
        <param>
          <type>const <ref refid="classiDynTree_1_1SpatialMotionVector" kindref="compound">SpatialMotionVector</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Twist.h" line="27" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1Twist_1a9769af112f3b78419a69678a80da6c53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iDynTree::Twist::Twist</definition>
        <argsstring>(const Twist &amp;other)</argsstring>
        <name>Twist</name>
        <param>
          <type>const <ref refid="classiDynTree_1_1Twist" kindref="compound">Twist</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Twist.h" line="28" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1Twist_1aad28c77fa88e513b639ac507148102ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classiDynTree_1_1Twist" kindref="compound">Twist</ref> &amp;</type>
        <definition>Twist&amp; iDynTree::Twist::operator=</definition>
        <argsstring>(const Twist &amp;other)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classiDynTree_1_1Twist" kindref="compound">Twist</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>overloaded operators </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Twist.h" line="31" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1Twist_1aceda68fe1acfbabfe78f7c9462f4f25a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classiDynTree_1_1Twist" kindref="compound">Twist</ref></type>
        <definition>Twist iDynTree::Twist::operator+</definition>
        <argsstring>(const Twist &amp;other) const</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classiDynTree_1_1Twist" kindref="compound">Twist</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Twist.h" line="32" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1Twist_1a40943fa7464aa2f1f205ffad431dbb02" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classiDynTree_1_1Twist" kindref="compound">Twist</ref></type>
        <definition>Twist iDynTree::Twist::operator-</definition>
        <argsstring>(const Twist &amp;other) const</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classiDynTree_1_1Twist" kindref="compound">Twist</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Twist.h" line="33" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1Twist_1a2c0be74f866be2d1607cbfdf28031411" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classiDynTree_1_1Twist" kindref="compound">Twist</ref></type>
        <definition>Twist iDynTree::Twist::operator-</definition>
        <argsstring>() const</argsstring>
        <name>operator-</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Twist.h" line="34" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1Twist_1aca6ae92346059edd6efe6a3d6faf81da" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classiDynTree_1_1SpatialAcc" kindref="compound">SpatialAcc</ref></type>
        <definition>SpatialAcc iDynTree::Twist::operator*</definition>
        <argsstring>(const Twist &amp;other) const</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classiDynTree_1_1Twist" kindref="compound">Twist</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>overloaded cross products </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Twist.h" line="37" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1Twist_1aeb45cc74d27dbe912f630842136f0e40" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classiDynTree_1_1Wrench" kindref="compound">Wrench</ref></type>
        <definition>Wrench iDynTree::Twist::operator*</definition>
        <argsstring>(const SpatialMomentum &amp;other) const</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classiDynTree_1_1SpatialMomentum" kindref="compound">SpatialMomentum</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Twist.h" line="38" column="16"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Class representing a twist, i.e. </para>
    </briefdescription>
    <detaileddescription>
<para>a 6D combination of linear an angular velocity. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>iDynTree::Twist</label>
        <link refid="classiDynTree_1_1Twist"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>iDynTree::SpatialVector&lt; SpatialMotionVector &gt;</label>
        <link refid="classiDynTree_1_1SpatialVector"/>
        <childnode refid="4" relation="template-instance">
          <edgelabel>&lt; SpatialMotionVector &gt;</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>iDynTree::SpatialVector</label>
        <link refid="classiDynTree_1_1SpatialVector"/>
      </node>
      <node id="2">
        <label>iDynTree::SpatialMotionVector</label>
        <link refid="classiDynTree_1_1SpatialMotionVector"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>iDynTree::Twist</label>
        <link refid="classiDynTree_1_1Twist"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>iDynTree::SpatialVector&lt; SpatialMotionVector &gt;</label>
        <link refid="classiDynTree_1_1SpatialVector"/>
        <childnode refid="4" relation="template-instance">
          <edgelabel>&lt; SpatialMotionVector &gt;</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>iDynTree::SpatialVector</label>
        <link refid="classiDynTree_1_1SpatialVector"/>
        <childnode refid="5" relation="usage">
          <edgelabel>angularVec3</edgelabel>
          <edgelabel>linearVec3</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>iDynTree::SpatialMotionForceVectorT_traits&lt; DerivedSpatialVecT &gt;</label>
        <link refid="classiDynTree_1_1SpatialMotionForceVectorT__traits"/>
        <childnode refid="6" relation="template-instance">
          <edgelabel>&lt; DerivedSpatialVecT &gt;</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>iDynTree::SpatialMotionVector</label>
        <link refid="classiDynTree_1_1SpatialMotionVector"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>iDynTree::SpatialMotionForceVectorT_traits&lt; SpatialMotionForceVectorT &gt;</label>
        <link refid="classiDynTree_1_1SpatialMotionForceVectorT__traits"/>
      </node>
    </collaborationgraph>
    <location file="iDynTree/Twist.h" line="22" column="5" bodyfile="iDynTree/Twist.h" bodystart="23" bodyend="40"/>
    <listofallmembers>
      <member refid="classiDynTree_1_1SpatialVector_1a45a617c3a2fbf58cb8f14be36a9f0ff5" prot="protected" virt="non-virtual"><scope>iDynTree::Twist</scope><name>angularOffset</name></member>
      <member refid="classiDynTree_1_1SpatialVector_1a7713fdb080783747a894974f5c4b44a6" prot="protected" virt="non-virtual"><scope>iDynTree::Twist</scope><name>angularVec3</name></member>
      <member refid="classiDynTree_1_1SpatialVector_1a13a172b06a7af17f6220a90a4163b3f8" prot="public" virt="non-virtual"><scope>iDynTree::Twist</scope><name>AngularVector3T</name></member>
      <member refid="classiDynTree_1_1SpatialMotionVector_1a0afe65574d10fd441e294b01b9d59328" prot="public" virt="non-virtual"><scope>iDynTree::Twist</scope><name>asCrossProductMatrix</name></member>
      <member refid="classiDynTree_1_1SpatialMotionVector_1aa12336105b40e215151dc40e02d85533" prot="public" virt="non-virtual"><scope>iDynTree::Twist</scope><name>asCrossProductMatrixWrench</name></member>
      <member refid="classiDynTree_1_1SpatialVector_1a28178bda574859bc9cda8e51f23ffc07" prot="public" virt="non-virtual"><scope>iDynTree::Twist</scope><name>asVector</name></member>
      <member refid="classiDynTree_1_1SpatialVector_1af55844354af98084b8fd52a9240b2d5f" prot="public" virt="non-virtual"><scope>iDynTree::Twist</scope><name>changeCoordFrame</name></member>
      <member refid="classiDynTree_1_1SpatialVector_1aaf50d0723aa1bf73962f05224a56bd8b" prot="public" virt="non-virtual"><scope>iDynTree::Twist</scope><name>changePoint</name></member>
      <member refid="classiDynTree_1_1SpatialVector_1a0f1211dba411c4efe1a7c9d0944d2a38" prot="public" virt="non-virtual"><scope>iDynTree::Twist</scope><name>compose</name></member>
      <member refid="classiDynTree_1_1SpatialMotionVector_1a00b69fb5887ebaab90f53bf3f43927ae" prot="public" virt="non-virtual"><scope>iDynTree::Twist</scope><name>cross</name></member>
      <member refid="classiDynTree_1_1SpatialMotionVector_1a1230a70db77b4cf2ebb2c643b62d37e9" prot="public" virt="non-virtual"><scope>iDynTree::Twist</scope><name>cross</name></member>
      <member refid="classiDynTree_1_1SpatialVector_1a676b41872e9165b9795a9706149a8e17" prot="public" virt="non-virtual"><scope>iDynTree::Twist</scope><name>dot</name></member>
      <member refid="classiDynTree_1_1SpatialVector_1a7910d803e3b8c3ef52db0bdc0b2bec42" prot="public" virt="non-virtual"><scope>iDynTree::Twist</scope><name>DualVectorT</name></member>
      <member refid="classiDynTree_1_1SpatialMotionVector_1a3d13bde6997132732cac8cc942dba7ef" prot="public" virt="non-virtual"><scope>iDynTree::Twist</scope><name>exp</name></member>
      <member refid="classiDynTree_1_1SpatialVector_1a8b9ae18e77c2af17ec1d369d196e0c10" prot="public" virt="non-virtual"><scope>iDynTree::Twist</scope><name>getAngularVec3</name></member>
      <member refid="classiDynTree_1_1SpatialVector_1a67479f75f4632e397d7c38394f499ca5" prot="public" virt="non-virtual"><scope>iDynTree::Twist</scope><name>getAngularVec3</name></member>
      <member refid="classiDynTree_1_1SpatialVector_1a705aa7e917215639cf8088da8a279031" prot="public" virt="non-virtual"><scope>iDynTree::Twist</scope><name>getLinearVec3</name></member>
      <member refid="classiDynTree_1_1SpatialVector_1aef471e533b923fca899adfcac5703173" prot="public" virt="non-virtual"><scope>iDynTree::Twist</scope><name>getLinearVec3</name></member>
      <member refid="classiDynTree_1_1SpatialVector_1a74a991f1f695825378e5b1765e743e42" prot="public" virt="non-virtual"><scope>iDynTree::Twist</scope><name>getVal</name></member>
      <member refid="classiDynTree_1_1SpatialVector_1aa1ad54ef1ef1c37676cf7c231242f9fb" prot="public" virt="non-virtual"><scope>iDynTree::Twist</scope><name>inverse</name></member>
      <member refid="classiDynTree_1_1SpatialVector_1aa6aa22433d0a6c29e37a4efc5970e1d8" prot="protected" virt="non-virtual"><scope>iDynTree::Twist</scope><name>linearOffset</name></member>
      <member refid="classiDynTree_1_1SpatialVector_1a404b99c91ecaa2269ed0e891df474720" prot="protected" virt="non-virtual"><scope>iDynTree::Twist</scope><name>linearVec3</name></member>
      <member refid="classiDynTree_1_1SpatialVector_1a4ca8db3255a63370cb6fb9c5b8e4bc6c" prot="public" virt="non-virtual"><scope>iDynTree::Twist</scope><name>LinearVector3T</name></member>
      <member refid="classiDynTree_1_1SpatialVector_1a176d715e9026aee5a3cad9ff9dde198c" prot="public" virt="non-virtual"><scope>iDynTree::Twist</scope><name>operator()</name></member>
      <member refid="classiDynTree_1_1SpatialVector_1a583e1a9062c0d7f72da539e521e597b5" prot="public" virt="non-virtual"><scope>iDynTree::Twist</scope><name>operator()</name></member>
      <member refid="classiDynTree_1_1Twist_1aca6ae92346059edd6efe6a3d6faf81da" prot="public" virt="non-virtual"><scope>iDynTree::Twist</scope><name>operator*</name></member>
      <member refid="classiDynTree_1_1Twist_1aeb45cc74d27dbe912f630842136f0e40" prot="public" virt="non-virtual"><scope>iDynTree::Twist</scope><name>operator*</name></member>
      <member refid="classiDynTree_1_1SpatialMotionVector_1a22816c9ea7c88ea880bbe547366c2dad" prot="public" virt="non-virtual" ambiguityscope="iDynTree::SpatialMotionVector::"><scope>iDynTree::Twist</scope><name>operator*</name></member>
      <member refid="classiDynTree_1_1Twist_1aceda68fe1acfbabfe78f7c9462f4f25a" prot="public" virt="non-virtual"><scope>iDynTree::Twist</scope><name>operator+</name></member>
      <member refid="classiDynTree_1_1SpatialVector_1aee117ebb24cae309a169f678019f1181" prot="public" virt="non-virtual" ambiguityscope="iDynTree::SpatialMotionVector::"><scope>iDynTree::Twist</scope><name>operator+</name></member>
      <member refid="classiDynTree_1_1Twist_1a40943fa7464aa2f1f205ffad431dbb02" prot="public" virt="non-virtual"><scope>iDynTree::Twist</scope><name>operator-</name></member>
      <member refid="classiDynTree_1_1Twist_1a2c0be74f866be2d1607cbfdf28031411" prot="public" virt="non-virtual"><scope>iDynTree::Twist</scope><name>operator-</name></member>
      <member refid="classiDynTree_1_1SpatialVector_1afcf112b3ddd4e01fc0389dd2319eb383" prot="public" virt="non-virtual" ambiguityscope="iDynTree::SpatialMotionVector::"><scope>iDynTree::Twist</scope><name>operator-</name></member>
      <member refid="classiDynTree_1_1Twist_1aad28c77fa88e513b639ac507148102ad" prot="public" virt="non-virtual"><scope>iDynTree::Twist</scope><name>operator=</name></member>
      <member refid="classiDynTree_1_1SpatialVector_1a739d85b3a1b3af607344f9fc8e930b0c" prot="public" virt="non-virtual" ambiguityscope="iDynTree::SpatialMotionVector::"><scope>iDynTree::Twist</scope><name>operator=</name></member>
      <member refid="classiDynTree_1_1SpatialVector_1a73b398dd07e9f3dd5c252692380a6b02" prot="public" virt="non-virtual"><scope>iDynTree::Twist</scope><name>reservedToString</name></member>
      <member refid="classiDynTree_1_1SpatialVector_1a719a64c179d736390f48b6ddd0ccf6fa" prot="public" virt="non-virtual"><scope>iDynTree::Twist</scope><name>setAngularVec3</name></member>
      <member refid="classiDynTree_1_1SpatialVector_1a171e7cf6e215e67eb32ac791526a044f" prot="public" virt="non-virtual"><scope>iDynTree::Twist</scope><name>setLinearVec3</name></member>
      <member refid="classiDynTree_1_1SpatialVector_1a0fe3633e4ccf66267b01b7302a1658ec" prot="public" virt="non-virtual"><scope>iDynTree::Twist</scope><name>setVal</name></member>
      <member refid="classiDynTree_1_1SpatialVector_1af1f3a2d0e7522b63b2dc0d729a33f5a5" prot="public" virt="non-virtual"><scope>iDynTree::Twist</scope><name>size</name></member>
      <member refid="classiDynTree_1_1SpatialMotionVector_1a0fb7aa781b8ab353a0e21bc163e7c1e2" prot="public" virt="non-virtual"><scope>iDynTree::Twist</scope><name>SpatialMotionVector</name></member>
      <member refid="classiDynTree_1_1SpatialMotionVector_1a7132bf38ebc1773c0d5d7c0f1f5b630c" prot="public" virt="non-virtual"><scope>iDynTree::Twist</scope><name>SpatialMotionVector</name></member>
      <member refid="classiDynTree_1_1SpatialMotionVector_1a469d555799e3942b020dc94910998dd4" prot="public" virt="non-virtual"><scope>iDynTree::Twist</scope><name>SpatialMotionVector</name></member>
      <member refid="classiDynTree_1_1SpatialMotionVector_1a9c27f65454a05a5c770b3e8ae23ab3a0" prot="public" virt="non-virtual"><scope>iDynTree::Twist</scope><name>SpatialMotionVector</name></member>
      <member refid="classiDynTree_1_1SpatialVector_1a787b62017e61e1dc49e0bc753cb0516b" prot="public" virt="non-virtual"><scope>iDynTree::Twist</scope><name>SpatialVector</name></member>
      <member refid="classiDynTree_1_1SpatialVector_1a3d7d78e133ab83dfadb346539f70df96" prot="public" virt="non-virtual"><scope>iDynTree::Twist</scope><name>SpatialVector</name></member>
      <member refid="classiDynTree_1_1SpatialVector_1aff082c865731b86ad00f3901b1f487cb" prot="public" virt="non-virtual"><scope>iDynTree::Twist</scope><name>SpatialVector</name></member>
      <member refid="classiDynTree_1_1SpatialVector_1a1000a5a67bd77de13aabe6e41b320587" prot="public" virt="non-virtual"><scope>iDynTree::Twist</scope><name>SpatialVector</name></member>
      <member refid="classiDynTree_1_1SpatialVector_1aea482fe4d53b76b02a0438d9561e1fd0" prot="public" virt="non-virtual"><scope>iDynTree::Twist</scope><name>toString</name></member>
      <member refid="classiDynTree_1_1SpatialVector_1adfea1ab56aa331af032a7f7d31ac0afc" prot="protected" virt="non-virtual"><scope>iDynTree::Twist</scope><name>totalSize</name></member>
      <member refid="classiDynTree_1_1Twist_1a3a2fff49fa9cbdcdc96589f26f909811" prot="public" virt="non-virtual"><scope>iDynTree::Twist</scope><name>Twist</name></member>
      <member refid="classiDynTree_1_1Twist_1ad6ccf45a38ed5304317540ac2d4f9953" prot="public" virt="non-virtual"><scope>iDynTree::Twist</scope><name>Twist</name></member>
      <member refid="classiDynTree_1_1Twist_1a356ac02dceb5807c911d0dc77a37c62b" prot="public" virt="non-virtual"><scope>iDynTree::Twist</scope><name>Twist</name></member>
      <member refid="classiDynTree_1_1Twist_1a9769af112f3b78419a69678a80da6c53" prot="public" virt="non-virtual"><scope>iDynTree::Twist</scope><name>Twist</name></member>
      <member refid="classiDynTree_1_1SpatialVector_1a8414377bb976157317aeb070b4ed235d" prot="public" virt="non-virtual"><scope>iDynTree::Twist</scope><name>zero</name></member>
      <member refid="classiDynTree_1_1SpatialVector_1ae2ae611372d0a0f53dd983e3598bcc58" prot="public" virt="non-virtual"><scope>iDynTree::Twist</scope><name>Zero</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
