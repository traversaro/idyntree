<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classiDynTree_1_1MatrixFixSize" kind="class" language="C++" prot="public">
    <compoundname>iDynTree::MatrixFixSize</compoundname>
    <derivedcompoundref refid="classiDynTree_1_1SpatialForceWrtMotionDerivative" prot="public" virt="non-virtual">iDynTree::SpatialForceWrtMotionDerivative</derivedcompoundref>
    <derivedcompoundref refid="classiDynTree_1_1SpatialMotionWrtMotionDerivative" prot="public" virt="non-virtual">iDynTree::SpatialMotionWrtMotionDerivative</derivedcompoundref>
    <includes local="no">iDynTree/MatrixFixSize.h</includes>
    <templateparamlist>
      <param>
        <type>unsigned int</type>
        <declname>nRows</declname>
        <defname>nRows</defname>
      </param>
      <param>
        <type>unsigned int</type>
        <declname>nCols</declname>
        <defname>nCols</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <memberdef kind="typedef" id="classiDynTree_1_1MatrixFixSize_1a8f8fd8b2d42c3b1e51eaac923dc77395" prot="public" static="no">
        <type>double</type>
        <definition>typedef double iDynTree::MatrixFixSize&lt; nRows, nCols &gt;::value_type</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
<para>Typedefs to enable make_matrix_view. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/MatrixFixSize.h" line="151" column="24" bodyfile="iDynTree/MatrixFixSize.h" bodystart="151" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Matrix interface methods.</header>
      <description><para>Methods exposing a matrix-like interface to <ref refid="classiDynTree_1_1MatrixFixSize" kindref="compound">MatrixFixSize</ref>. </para>
</description>
      <memberdef kind="function" id="classiDynTree_1_1MatrixFixSize_1ab3e1a6639194edc7f1449f7a035006e7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double iDynTree::MatrixFixSize&lt; nRows, nCols &gt;::operator()</definition>
        <argsstring>(const std::size_t row, const std::size_t col) const</argsstring>
        <name>operator()</name>
        <param>
          <type>const std::size_t</type>
          <declname>row</declname>
        </param>
        <param>
          <type>const std::size_t</type>
          <declname>col</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/MatrixFixSize.h" line="86" column="16" bodyfile="iDynTree/MatrixFixSize.h" bodystart="272" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1MatrixFixSize_1a0d188ae16044771a2baeb0e9e4749647" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double &amp;</type>
        <definition>double &amp; iDynTree::MatrixFixSize&lt; nRows, nCols &gt;::operator()</definition>
        <argsstring>(const std::size_t row, const std::size_t col)</argsstring>
        <name>operator()</name>
        <param>
          <type>const std::size_t</type>
          <declname>row</declname>
        </param>
        <param>
          <type>const std::size_t</type>
          <declname>col</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/MatrixFixSize.h" line="87" column="16" bodyfile="iDynTree/MatrixFixSize.h" bodystart="264" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1MatrixFixSize_1af7565606ec61a76aef023327d6d76e5d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double iDynTree::MatrixFixSize&lt; nRows, nCols &gt;::getVal</definition>
        <argsstring>(const std::size_t row, const std::size_t col) const</argsstring>
        <name>getVal</name>
        <param>
          <type>const std::size_t</type>
          <declname>row</declname>
        </param>
        <param>
          <type>const std::size_t</type>
          <declname>col</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/MatrixFixSize.h" line="88" column="16" bodyfile="iDynTree/MatrixFixSize.h" bodystart="280" bodyend="290"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1MatrixFixSize_1ad0f0ee21b75babc619fffec43e922747" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool iDynTree::MatrixFixSize&lt; nRows, nCols &gt;::setVal</definition>
        <argsstring>(const std::size_t row, const std::size_t col, const double new_el)</argsstring>
        <name>setVal</name>
        <param>
          <type>const std::size_t</type>
          <declname>row</declname>
        </param>
        <param>
          <type>const std::size_t</type>
          <declname>col</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>new_el</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/MatrixFixSize.h" line="89" column="14" bodyfile="iDynTree/MatrixFixSize.h" bodystart="293" bodyend="304"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1MatrixFixSize_1a1504fe384616906ee0bab7a7751426c8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t iDynTree::MatrixFixSize&lt; nRows, nCols &gt;::rows</definition>
        <argsstring>() const</argsstring>
        <name>rows</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/MatrixFixSize.h" line="90" column="21" bodyfile="iDynTree/MatrixFixSize.h" bodystart="225" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1MatrixFixSize_1ae38fd55ba7321a950d4d99a215508bf2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t iDynTree::MatrixFixSize&lt; nRows, nCols &gt;::cols</definition>
        <argsstring>() const</argsstring>
        <name>cols</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/MatrixFixSize.h" line="91" column="21" bodyfile="iDynTree/MatrixFixSize.h" bodystart="231" bodyend="234"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Output helpers.</header>
      <description><para>Output helpers. </para>
</description>
      <memberdef kind="function" id="classiDynTree_1_1MatrixFixSize_1aab67a981ed6a31503d0aca8b4589d6be" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string iDynTree::MatrixFixSize&lt; nRows, nCols &gt;::toString</definition>
        <argsstring>() const</argsstring>
        <name>toString</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/MatrixFixSize.h" line="160" column="21" bodyfile="iDynTree/MatrixFixSize.h" bodystart="340" bodyend="354"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1MatrixFixSize_1a1323e690b88b1abe04bd838db6546637" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string iDynTree::MatrixFixSize&lt; nRows, nCols &gt;::reservedToString</definition>
        <argsstring>() const</argsstring>
        <name>reservedToString</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/MatrixFixSize.h" line="162" column="21" bodyfile="iDynTree/MatrixFixSize.h" bodystart="357" bodyend="360"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classiDynTree_1_1MatrixFixSize_1a8e916f4550fec92847dab198695299a1" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double iDynTree::MatrixFixSize&lt; nRows, nCols &gt;::m_data[nRows *nCols]</definition>
        <argsstring>[nRows *nCols]</argsstring>
        <name>m_data</name>
        <briefdescription>
<para>Storage for the <ref refid="classiDynTree_1_1MatrixDynSize" kindref="compound">MatrixDynSize</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Pointer to an area of size() doubles, managed by this class.</para>
<para><simplesect kind="warning"><para>this class stores data using the row major order </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/MatrixFixSize.h" line="54" column="16" bodyfile="iDynTree/MatrixFixSize.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classiDynTree_1_1MatrixFixSize_1a4f6f9d26fe883d0a438a0fd572340955" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t iDynTree::MatrixFixSize&lt; nRows, nCols &gt;::rawIndexRowMajor</definition>
        <argsstring>(std::size_t row, std::size_t col) const</argsstring>
        <name>rawIndexRowMajor</name>
        <param>
          <type>std::size_t</type>
          <declname>row</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>col</declname>
        </param>
        <briefdescription>
<para>Return the raw index in the data vector of the element corresponding to row and col, using row major ordering. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/MatrixFixSize.h" line="33" column="21" bodyfile="iDynTree/MatrixFixSize.h" bodystart="328" bodyend="331"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1MatrixFixSize_1aad346f12224b36494b1f288e5a651ee6" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t iDynTree::MatrixFixSize&lt; nRows, nCols &gt;::rawIndexColMajor</definition>
        <argsstring>(std::size_t row, std::size_t col) const</argsstring>
        <name>rawIndexColMajor</name>
        <param>
          <type>std::size_t</type>
          <declname>row</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>col</declname>
        </param>
        <briefdescription>
<para>Return the raw index in the data vector of the element corresponding to row and col, using col major ordering. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>The class stores data in row major order, this function is used just in the fillColMajorBuffer method. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/MatrixFixSize.h" line="44" column="21" bodyfile="iDynTree/MatrixFixSize.h" bodystart="334" bodyend="337"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classiDynTree_1_1MatrixFixSize_1a5a0f188608c558f9865c068ff219fbf7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iDynTree::MatrixFixSize&lt; nRows, nCols &gt;::MatrixFixSize</definition>
        <argsstring>()</argsstring>
        <name>MatrixFixSize</name>
        <briefdescription>
<para>Default constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>The data is not reset to 0 for perfomance reason. Please initialize the data in the vector before any use. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/MatrixFixSize.h" line="63" column="9" bodyfile="iDynTree/MatrixFixSize.h" bodystart="170" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1MatrixFixSize_1af40e02e39fdc16ea5c8b48017118cf9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iDynTree::MatrixFixSize&lt; nRows, nCols &gt;::MatrixFixSize</definition>
        <argsstring>(const double *in_data, const std::size_t in_rows, const std::size_t in_cols)</argsstring>
        <name>MatrixFixSize</name>
        <param>
          <type>const double *</type>
          <declname>in_data</declname>
        </param>
        <param>
          <type>const std::size_t</type>
          <declname>in_rows</declname>
        </param>
        <param>
          <type>const std::size_t</type>
          <declname>in_cols</declname>
        </param>
        <briefdescription>
<para>Constructor from a C-style matrix (row major). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>this class stores data using the row major order </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/MatrixFixSize.h" line="71" column="9" bodyfile="iDynTree/MatrixFixSize.h" bodystart="175" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1MatrixFixSize_1a36e8e1c4e1b9910a1a0837e270cb8a62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iDynTree::MatrixFixSize&lt; nRows, nCols &gt;::MatrixFixSize</definition>
        <argsstring>(iDynTree::MatrixView&lt; const double &gt; other)</argsstring>
        <name>MatrixFixSize</name>
        <param>
          <type><ref refid="classiDynTree_1_1MatrixView" kindref="compound">iDynTree::MatrixView</ref>&lt; const double &gt;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Constructor from a <ref refid="classiDynTree_1_1MatrixView" kindref="compound">MatrixView</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>this class stores data using the row major order </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/MatrixFixSize.h" line="78" column="9" bodyfile="iDynTree/MatrixFixSize.h" bodystart="192" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1MatrixFixSize_1a94ef6fa6794ee354df4687078731e383" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classiDynTree_1_1MatrixFixSize" kindref="compound">MatrixFixSize</ref> &amp;</type>
        <definition>MatrixFixSize&lt; nRows, nCols &gt; &amp; iDynTree::MatrixFixSize&lt; nRows, nCols &gt;::operator=</definition>
        <argsstring>(iDynTree::MatrixView&lt; const double &gt; mat)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classiDynTree_1_1MatrixView" kindref="compound">iDynTree::MatrixView</ref>&lt; const double &gt;</type>
          <declname>mat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/MatrixFixSize.h" line="94" column="24" bodyfile="iDynTree/MatrixFixSize.h" bodystart="249" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1MatrixFixSize_1afa9fff22a34eb198785d87ffe161488f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const double *</type>
        <definition>const double * iDynTree::MatrixFixSize&lt; nRows, nCols &gt;::data</definition>
        <argsstring>() const</argsstring>
        <name>data</name>
        <briefdescription>
<para>Raw data accessor. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>this class stores matrix data using the row major order </para>
</simplesect>
<simplesect kind="return"><para>a const pointer to a vector of rows()*cols() doubles </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/MatrixFixSize.h" line="102" column="23" bodyfile="iDynTree/MatrixFixSize.h" bodystart="243" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1MatrixFixSize_1aa4afb9030800a8424afd9a8bb36d8972" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double *</type>
        <definition>double * iDynTree::MatrixFixSize&lt; nRows, nCols &gt;::data</definition>
        <argsstring>()</argsstring>
        <name>data</name>
        <briefdescription>
<para>Raw data accessor. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>this class stores matrix data using the row major order </para>
</simplesect>
<simplesect kind="return"><para>a pointer to a vector of rows()*cols() doubles </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/MatrixFixSize.h" line="110" column="17" bodyfile="iDynTree/MatrixFixSize.h" bodystart="237" bodyend="240"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1MatrixFixSize_1a26bd376a8f4cfa044ff366a22f1aab6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void iDynTree::MatrixFixSize&lt; nRows, nCols &gt;::zero</definition>
        <argsstring>()</argsstring>
        <name>zero</name>
        <briefdescription>
<para>Assign all element of the matrix to 0. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/MatrixFixSize.h" line="115" column="14" bodyfile="iDynTree/MatrixFixSize.h" bodystart="213" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1MatrixFixSize_1a6da0a936d351418e0dcb4d67f3d0abbc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void iDynTree::MatrixFixSize&lt; nRows, nCols &gt;::fillRowMajorBuffer</definition>
        <argsstring>(double *rowMajorBuf) const</argsstring>
        <name>fillRowMajorBuffer</name>
        <param>
          <type>double *</type>
          <declname>rowMajorBuf</declname>
        </param>
        <briefdescription>
<para>Assume that rowMajorBuf is pointing to a buffer of rows()*cols() doubles, and fill it with the content of this matrix, using row major order. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rowMajorBuf</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the buffer to fill</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
<para><simplesect kind="warning"><para>use this function only if you are an expert C user </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/MatrixFixSize.h" line="130" column="14" bodyfile="iDynTree/MatrixFixSize.h" bodystart="307" bodyend="312"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1MatrixFixSize_1a58750c21e5e8c31c54c3eed7dd2309b6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void iDynTree::MatrixFixSize&lt; nRows, nCols &gt;::fillColMajorBuffer</definition>
        <argsstring>(double *colMajorBuf) const</argsstring>
        <name>fillColMajorBuffer</name>
        <param>
          <type>double *</type>
          <declname>colMajorBuf</declname>
        </param>
        <briefdescription>
<para>Assume that colMajorBuf is pointing to a buffer of rows()*cols() doubles, and fill it with the content of this matrix, using column major order. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>colMajorBuf</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the buffer to fill</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
<para><simplesect kind="warning"><para>use this function only if you are an expert C user </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/MatrixFixSize.h" line="145" column="14" bodyfile="iDynTree/MatrixFixSize.h" bodystart="315" bodyend="325"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Class providing a simple form of matrix with dynamic size. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="9">
        <label>iDynTree::Rotation</label>
        <link refid="classiDynTree_1_1Rotation"/>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>iDynTree::SpatialForceWrtMotionDerivative&lt; 6, 6 &gt;</label>
        <link refid="classiDynTree_1_1SpatialForceWrtMotionDerivative"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>iDynTree::MatrixFixSize&lt; 2, 3 &gt;</label>
        <link refid="classiDynTree_1_1MatrixFixSize"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; 2, 3 &gt;</edgelabel>
        </childnode>
      </node>
      <node id="10">
        <label>iDynTree::RotationalInertia</label>
        <link refid="classiDynTree_1_1RotationalInertia"/>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>iDynTree::MatrixFixSize&lt; 4, 4 &gt;</label>
        <link refid="classiDynTree_1_1MatrixFixSize"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; 4, 4 &gt;</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>iDynTree::SpatialMotionWrtMotionDerivative&lt; 6, 6 &gt;</label>
        <link refid="classiDynTree_1_1SpatialMotionWrtMotionDerivative"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>iDynTree::MatrixFixSize&lt; nRows, nCols &gt;</label>
        <link refid="classiDynTree_1_1MatrixFixSize"/>
      </node>
      <node id="6">
        <label>iDynTree::MatrixFixSize&lt; 4, 3 &gt;</label>
        <link refid="classiDynTree_1_1MatrixFixSize"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; 4, 3 &gt;</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>iDynTree::MatrixFixSize&lt; 3, 4 &gt;</label>
        <link refid="classiDynTree_1_1MatrixFixSize"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; 3, 4 &gt;</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>iDynTree::MatrixFixSize&lt; 3, 3 &gt;</label>
        <link refid="classiDynTree_1_1MatrixFixSize"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; 3, 3 &gt;</edgelabel>
        </childnode>
      </node>
    </inheritancegraph>
    <location file="iDynTree/MatrixFixSize.h" line="25" column="5" bodyfile="iDynTree/MatrixFixSize.h" bodystart="26" bodyend="165"/>
    <listofallmembers>
      <member refid="classiDynTree_1_1MatrixFixSize_1ae38fd55ba7321a950d4d99a215508bf2" prot="public" virt="non-virtual"><scope>iDynTree::MatrixFixSize</scope><name>cols</name></member>
      <member refid="classiDynTree_1_1MatrixFixSize_1afa9fff22a34eb198785d87ffe161488f" prot="public" virt="non-virtual"><scope>iDynTree::MatrixFixSize</scope><name>data</name></member>
      <member refid="classiDynTree_1_1MatrixFixSize_1aa4afb9030800a8424afd9a8bb36d8972" prot="public" virt="non-virtual"><scope>iDynTree::MatrixFixSize</scope><name>data</name></member>
      <member refid="classiDynTree_1_1MatrixFixSize_1a58750c21e5e8c31c54c3eed7dd2309b6" prot="public" virt="non-virtual"><scope>iDynTree::MatrixFixSize</scope><name>fillColMajorBuffer</name></member>
      <member refid="classiDynTree_1_1MatrixFixSize_1a6da0a936d351418e0dcb4d67f3d0abbc" prot="public" virt="non-virtual"><scope>iDynTree::MatrixFixSize</scope><name>fillRowMajorBuffer</name></member>
      <member refid="classiDynTree_1_1MatrixFixSize_1af7565606ec61a76aef023327d6d76e5d" prot="public" virt="non-virtual"><scope>iDynTree::MatrixFixSize</scope><name>getVal</name></member>
      <member refid="classiDynTree_1_1MatrixFixSize_1a8e916f4550fec92847dab198695299a1" prot="protected" virt="non-virtual"><scope>iDynTree::MatrixFixSize</scope><name>m_data</name></member>
      <member refid="classiDynTree_1_1MatrixFixSize_1a5a0f188608c558f9865c068ff219fbf7" prot="public" virt="non-virtual"><scope>iDynTree::MatrixFixSize</scope><name>MatrixFixSize</name></member>
      <member refid="classiDynTree_1_1MatrixFixSize_1af40e02e39fdc16ea5c8b48017118cf9e" prot="public" virt="non-virtual"><scope>iDynTree::MatrixFixSize</scope><name>MatrixFixSize</name></member>
      <member refid="classiDynTree_1_1MatrixFixSize_1a36e8e1c4e1b9910a1a0837e270cb8a62" prot="public" virt="non-virtual"><scope>iDynTree::MatrixFixSize</scope><name>MatrixFixSize</name></member>
      <member refid="classiDynTree_1_1MatrixFixSize_1ab3e1a6639194edc7f1449f7a035006e7" prot="public" virt="non-virtual"><scope>iDynTree::MatrixFixSize</scope><name>operator()</name></member>
      <member refid="classiDynTree_1_1MatrixFixSize_1a0d188ae16044771a2baeb0e9e4749647" prot="public" virt="non-virtual"><scope>iDynTree::MatrixFixSize</scope><name>operator()</name></member>
      <member refid="classiDynTree_1_1MatrixFixSize_1a94ef6fa6794ee354df4687078731e383" prot="public" virt="non-virtual"><scope>iDynTree::MatrixFixSize</scope><name>operator=</name></member>
      <member refid="classiDynTree_1_1MatrixFixSize_1aad346f12224b36494b1f288e5a651ee6" prot="private" virt="non-virtual"><scope>iDynTree::MatrixFixSize</scope><name>rawIndexColMajor</name></member>
      <member refid="classiDynTree_1_1MatrixFixSize_1a4f6f9d26fe883d0a438a0fd572340955" prot="private" virt="non-virtual"><scope>iDynTree::MatrixFixSize</scope><name>rawIndexRowMajor</name></member>
      <member refid="classiDynTree_1_1MatrixFixSize_1a1323e690b88b1abe04bd838db6546637" prot="public" virt="non-virtual"><scope>iDynTree::MatrixFixSize</scope><name>reservedToString</name></member>
      <member refid="classiDynTree_1_1MatrixFixSize_1a1504fe384616906ee0bab7a7751426c8" prot="public" virt="non-virtual"><scope>iDynTree::MatrixFixSize</scope><name>rows</name></member>
      <member refid="classiDynTree_1_1MatrixFixSize_1ad0f0ee21b75babc619fffec43e922747" prot="public" virt="non-virtual"><scope>iDynTree::MatrixFixSize</scope><name>setVal</name></member>
      <member refid="classiDynTree_1_1MatrixFixSize_1aab67a981ed6a31503d0aca8b4589d6be" prot="public" virt="non-virtual"><scope>iDynTree::MatrixFixSize</scope><name>toString</name></member>
      <member refid="classiDynTree_1_1MatrixFixSize_1a8f8fd8b2d42c3b1e51eaac923dc77395" prot="public" virt="non-virtual"><scope>iDynTree::MatrixFixSize</scope><name>value_type</name></member>
      <member refid="classiDynTree_1_1MatrixFixSize_1a26bd376a8f4cfa044ff366a22f1aab6e" prot="public" virt="non-virtual"><scope>iDynTree::MatrixFixSize</scope><name>zero</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
