<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classiDynTree_1_1details_1_1span__iterator" kind="class" language="C++" prot="public">
    <compoundname>iDynTree::details::span_iterator</compoundname>
    <templateparamlist>
      <param>
        <type>class <ref refid="classiDynTree_1_1Span" kindref="compound">Span</ref></type>
      </param>
      <param>
        <type>bool</type>
        <declname>IsConst</declname>
        <defname>IsConst</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classiDynTree_1_1details_1_1span__iterator_1a10a82b7bfc086be513926a3bb930f3a6" prot="private" static="no">
        <type>typename Span::element_type</type>
        <definition>using iDynTree::details::span_iterator&lt; Span, IsConst &gt;::element_type_ =  typename Span::element_type</definition>
        <argsstring></argsstring>
        <name>element_type_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Span.h" line="177" column="9" bodyfile="iDynTree/Span.h" bodystart="177" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classiDynTree_1_1details_1_1span__iterator_1afda7d38dfbe62ea4fca71096f325231e" prot="public" static="no">
        <type>std::random_access_iterator_tag</type>
        <definition>using iDynTree::details::span_iterator&lt; Span, IsConst &gt;::iterator_category =  std::random_access_iterator_tag</definition>
        <argsstring></argsstring>
        <name>iterator_category</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Span.h" line="181" column="9" bodyfile="iDynTree/Span.h" bodystart="181" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classiDynTree_1_1details_1_1span__iterator_1a5a2a55b8c402d3715799c8f25c981511" prot="public" static="no">
        <type>std::remove_cv_t&lt; element_type_ &gt;</type>
        <definition>using iDynTree::details::span_iterator&lt; Span, IsConst &gt;::value_type =  std::remove_cv_t&lt;element_type_&gt;</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Span.h" line="182" column="9" bodyfile="iDynTree/Span.h" bodystart="182" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classiDynTree_1_1details_1_1span__iterator_1a95e7743424aa2a3bff3ca571d56e610f" prot="public" static="no">
        <type>typename Span::index_type</type>
        <definition>using iDynTree::details::span_iterator&lt; Span, IsConst &gt;::difference_type =  typename Span::index_type</definition>
        <argsstring></argsstring>
        <name>difference_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Span.h" line="183" column="9" bodyfile="iDynTree/Span.h" bodystart="183" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classiDynTree_1_1details_1_1span__iterator_1a03af8487e423c4cc728c1dc1f7f7bdd0" prot="public" static="no">
        <type>std::conditional_t&lt; IsConst, const element_type_, element_type_ &gt; &amp;</type>
        <definition>using iDynTree::details::span_iterator&lt; Span, IsConst &gt;::reference =  std::conditional_t&lt;IsConst, const element_type_, element_type_&gt;&amp;</definition>
        <argsstring></argsstring>
        <name>reference</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Span.h" line="185" column="9" bodyfile="iDynTree/Span.h" bodystart="185" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classiDynTree_1_1details_1_1span__iterator_1ac362fa94544278396d257bf2cf2f0045" prot="public" static="no">
        <type>std::add_pointer_t&lt; reference &gt;</type>
        <definition>using iDynTree::details::span_iterator&lt; Span, IsConst &gt;::pointer =  std::add_pointer_t&lt;reference&gt;</definition>
        <argsstring></argsstring>
        <name>pointer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Span.h" line="186" column="9" bodyfile="iDynTree/Span.h" bodystart="186" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classiDynTree_1_1details_1_1span__iterator_1a955ef508deb0f59ccb1b7da91579c971" prot="public" static="no" mutable="no">
        <type>friend</type>
        <definition>friend iDynTree::details::span_iterator&lt; Span, IsConst &gt;::span_iterator&lt; Span, true &gt;</definition>
        <argsstring></argsstring>
        <name>span_iterator&lt; Span, true &gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Span.h" line="194" column="9" bodyfile="iDynTree/Span.h" bodystart="194" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classiDynTree_1_1details_1_1span__iterator_1ae61e8342b21ed93b8dc40c209b996aa0" prot="protected" static="no" mutable="no">
        <type>const <ref refid="classiDynTree_1_1Span" kindref="compound">Span</ref> *</type>
        <definition>const Span* iDynTree::details::span_iterator&lt; Span, IsConst &gt;::span_</definition>
        <argsstring></argsstring>
        <name>span_</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Span.h" line="310" column="20" bodyfile="iDynTree/Span.h" bodystart="310" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classiDynTree_1_1details_1_1span__iterator_1ae7c97626fbc07c1011a157af897d1c6c" prot="protected" static="no" mutable="no">
        <type>std::ptrdiff_t</type>
        <definition>std::ptrdiff_t iDynTree::details::span_iterator&lt; Span, IsConst &gt;::index_</definition>
        <argsstring></argsstring>
        <name>index_</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Span.h" line="311" column="24" bodyfile="iDynTree/Span.h" bodystart="311" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classiDynTree_1_1details_1_1span__iterator_1aa51d1f641fc61475b619084f9d1cd1e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iDynTree::details::span_iterator&lt; Span, IsConst &gt;::span_iterator</definition>
        <argsstring>()=default</argsstring>
        <name>span_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Span.h" line="188" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1details_1_1span__iterator_1a2dfbc9599010de35cf909f2df7781108" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>IDYNTREE_CONSTEXPR</type>
        <definition>IDYNTREE_CONSTEXPR iDynTree::details::span_iterator&lt; Span, IsConst &gt;::span_iterator</definition>
        <argsstring>(const Span *span, typename Span::index_type idx) noexcept</argsstring>
        <name>span_iterator</name>
        <param>
          <type>const <ref refid="classiDynTree_1_1Span" kindref="compound">Span</ref> *</type>
          <declname>span</declname>
        </param>
        <param>
          <type>typename Span::index_type</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Span.h" line="190" column="28" bodyfile="iDynTree/Span.h" bodystart="190" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1details_1_1span__iterator_1abc721637e9cb5fa1d18bbb6b38712143" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>bool</type>
            <declname>B</declname>
            <defname>B</defname>
          </param>
          <param>
            <type>std::enable_if_t&lt;!B &amp;&amp;IsConst &gt; *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>IDYNTREE_CONSTEXPR</type>
        <definition>IDYNTREE_CONSTEXPR iDynTree::details::span_iterator&lt; Span, IsConst &gt;::span_iterator</definition>
        <argsstring>(const span_iterator&lt; Span, B &gt; &amp;other) noexcept</argsstring>
        <name>span_iterator</name>
        <param>
          <type>const <ref refid="classiDynTree_1_1details_1_1span__iterator" kindref="compound">span_iterator</ref>&lt; <ref refid="classiDynTree_1_1Span" kindref="compound">Span</ref>, B &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Span.h" line="196" column="28" bodyfile="iDynTree/Span.h" bodystart="196" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1details_1_1span__iterator_1ae93c3126a4cafed6df5a4a7ece791693" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>IDYNTREE_CONSTEXPR reference</type>
        <definition>IDYNTREE_CONSTEXPR reference iDynTree::details::span_iterator&lt; Span, IsConst &gt;::operator*</definition>
        <argsstring>() const</argsstring>
        <name>operator*</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Span.h" line="201" column="38" bodyfile="iDynTree/Span.h" bodystart="201" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1details_1_1span__iterator_1aedf22b1a1e80d35c8a3d993f747f9c1c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>IDYNTREE_CONSTEXPR pointer</type>
        <definition>IDYNTREE_CONSTEXPR pointer iDynTree::details::span_iterator&lt; Span, IsConst &gt;::operator-&gt;</definition>
        <argsstring>() const</argsstring>
        <name>operator-&gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Span.h" line="207" column="36" bodyfile="iDynTree/Span.h" bodystart="207" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1details_1_1span__iterator_1abc5424d3ee57f8ab6fcc1217637a2849" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>IDYNTREE_CONSTEXPR <ref refid="classiDynTree_1_1details_1_1span__iterator" kindref="compound">span_iterator</ref> &amp;</type>
        <definition>IDYNTREE_CONSTEXPR span_iterator&amp; iDynTree::details::span_iterator&lt; Span, IsConst &gt;::operator++</definition>
        <argsstring>()</argsstring>
        <name>operator++</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Span.h" line="213" column="42" bodyfile="iDynTree/Span.h" bodystart="213" bodyend="218"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1details_1_1span__iterator_1a7a249673db7494b11ad49f3c4397f5e9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>IDYNTREE_CONSTEXPR <ref refid="classiDynTree_1_1details_1_1span__iterator" kindref="compound">span_iterator</ref></type>
        <definition>IDYNTREE_CONSTEXPR span_iterator iDynTree::details::span_iterator&lt; Span, IsConst &gt;::operator++</definition>
        <argsstring>(int)</argsstring>
        <name>operator++</name>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Span.h" line="220" column="42" bodyfile="iDynTree/Span.h" bodystart="220" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1details_1_1span__iterator_1a76fb6fcf233057cb310a320fd8c65f15" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>IDYNTREE_CONSTEXPR <ref refid="classiDynTree_1_1details_1_1span__iterator" kindref="compound">span_iterator</ref> &amp;</type>
        <definition>IDYNTREE_CONSTEXPR span_iterator&amp; iDynTree::details::span_iterator&lt; Span, IsConst &gt;::operator--</definition>
        <argsstring>()</argsstring>
        <name>operator--</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Span.h" line="227" column="42" bodyfile="iDynTree/Span.h" bodystart="227" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1details_1_1span__iterator_1a71e04527506cb19aae503bbb0ec1f792" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>IDYNTREE_CONSTEXPR <ref refid="classiDynTree_1_1details_1_1span__iterator" kindref="compound">span_iterator</ref></type>
        <definition>IDYNTREE_CONSTEXPR span_iterator iDynTree::details::span_iterator&lt; Span, IsConst &gt;::operator--</definition>
        <argsstring>(int)</argsstring>
        <name>operator--</name>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Span.h" line="234" column="42" bodyfile="iDynTree/Span.h" bodystart="234" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1details_1_1span__iterator_1a2d597dc838b857055b0d02ede27a9ea3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>IDYNTREE_CONSTEXPR <ref refid="classiDynTree_1_1details_1_1span__iterator" kindref="compound">span_iterator</ref></type>
        <definition>IDYNTREE_CONSTEXPR span_iterator iDynTree::details::span_iterator&lt; Span, IsConst &gt;::operator+</definition>
        <argsstring>(difference_type n) const</argsstring>
        <name>operator+</name>
        <param>
          <type>difference_type</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Span.h" line="241" column="42" bodyfile="iDynTree/Span.h" bodystart="241" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1details_1_1span__iterator_1a94f2bc0df554d18745d65c0d1261621e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>IDYNTREE_CONSTEXPR <ref refid="classiDynTree_1_1details_1_1span__iterator" kindref="compound">span_iterator</ref> &amp;</type>
        <definition>IDYNTREE_CONSTEXPR span_iterator&amp; iDynTree::details::span_iterator&lt; Span, IsConst &gt;::operator+=</definition>
        <argsstring>(difference_type n)</argsstring>
        <name>operator+=</name>
        <param>
          <type>difference_type</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Span.h" line="247" column="42" bodyfile="iDynTree/Span.h" bodystart="247" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1details_1_1span__iterator_1af9a6c1dcb6d10b55500a36f465a5913f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>IDYNTREE_CONSTEXPR <ref refid="classiDynTree_1_1details_1_1span__iterator" kindref="compound">span_iterator</ref></type>
        <definition>IDYNTREE_CONSTEXPR span_iterator iDynTree::details::span_iterator&lt; Span, IsConst &gt;::operator-</definition>
        <argsstring>(difference_type n) const</argsstring>
        <name>operator-</name>
        <param>
          <type>difference_type</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Span.h" line="254" column="42" bodyfile="iDynTree/Span.h" bodystart="254" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1details_1_1span__iterator_1af7cae232b80bf2b2f69e44bab09036dc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>IDYNTREE_CONSTEXPR <ref refid="classiDynTree_1_1details_1_1span__iterator" kindref="compound">span_iterator</ref> &amp;</type>
        <definition>IDYNTREE_CONSTEXPR span_iterator&amp; iDynTree::details::span_iterator&lt; Span, IsConst &gt;::operator-=</definition>
        <argsstring>(difference_type n)</argsstring>
        <name>operator-=</name>
        <param>
          <type>difference_type</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Span.h" line="260" column="42" bodyfile="iDynTree/Span.h" bodystart="260" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1details_1_1span__iterator_1ae73116a84ec75e5b9de7108a762a555e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>IDYNTREE_CONSTEXPR difference_type</type>
        <definition>IDYNTREE_CONSTEXPR difference_type iDynTree::details::span_iterator&lt; Span, IsConst &gt;::operator-</definition>
        <argsstring>(span_iterator rhs) const</argsstring>
        <name>operator-</name>
        <param>
          <type><ref refid="classiDynTree_1_1details_1_1span__iterator" kindref="compound">span_iterator</ref></type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Span.h" line="262" column="44" bodyfile="iDynTree/Span.h" bodystart="262" bodyend="266"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1details_1_1span__iterator_1a5e795510a6ac876761874c68fa1b6d5b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>IDYNTREE_CONSTEXPR reference</type>
        <definition>IDYNTREE_CONSTEXPR reference iDynTree::details::span_iterator&lt; Span, IsConst &gt;::operator[]</definition>
        <argsstring>(difference_type n) const</argsstring>
        <name>operator[]</name>
        <param>
          <type>difference_type</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Span.h" line="268" column="38" bodyfile="iDynTree/Span.h" bodystart="268" bodyend="271"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classiDynTree_1_1details_1_1span__iterator_1a7d6d902c87892c3fbb0a3bcf58181c1c" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>IDYNTREE_CONSTEXPR friend bool</type>
        <definition>IDYNTREE_CONSTEXPR friend bool operator==</definition>
        <argsstring>(span_iterator lhs, span_iterator rhs) noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type><ref refid="classiDynTree_1_1details_1_1span__iterator" kindref="compound">span_iterator</ref></type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="classiDynTree_1_1details_1_1span__iterator" kindref="compound">span_iterator</ref></type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Span.h" line="273" column="39" bodyfile="iDynTree/Span.h" bodystart="273" bodyend="277"/>
      </memberdef>
      <memberdef kind="friend" id="classiDynTree_1_1details_1_1span__iterator_1ad1bb528178e666c9a7ba8e20f92bad8c" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>IDYNTREE_CONSTEXPR friend bool</type>
        <definition>IDYNTREE_CONSTEXPR friend bool operator!=</definition>
        <argsstring>(span_iterator lhs, span_iterator rhs) noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type><ref refid="classiDynTree_1_1details_1_1span__iterator" kindref="compound">span_iterator</ref></type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="classiDynTree_1_1details_1_1span__iterator" kindref="compound">span_iterator</ref></type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Span.h" line="279" column="40" bodyfile="iDynTree/Span.h" bodystart="279" bodyend="283"/>
      </memberdef>
      <memberdef kind="friend" id="classiDynTree_1_1details_1_1span__iterator_1a9c9a598e0cd1212f4dd10d7a155be54c" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>IDYNTREE_CONSTEXPR friend bool</type>
        <definition>IDYNTREE_CONSTEXPR friend bool operator&lt;</definition>
        <argsstring>(span_iterator lhs, span_iterator rhs) noexcept</argsstring>
        <name>operator&lt;</name>
        <param>
          <type><ref refid="classiDynTree_1_1details_1_1span__iterator" kindref="compound">span_iterator</ref></type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="classiDynTree_1_1details_1_1span__iterator" kindref="compound">span_iterator</ref></type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Span.h" line="285" column="35" bodyfile="iDynTree/Span.h" bodystart="285" bodyend="289"/>
      </memberdef>
      <memberdef kind="friend" id="classiDynTree_1_1details_1_1span__iterator_1ae6b274e7652a76915dc3142aa1f553d2" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>IDYNTREE_CONSTEXPR friend bool</type>
        <definition>IDYNTREE_CONSTEXPR friend bool operator&lt;=</definition>
        <argsstring>(span_iterator lhs, span_iterator rhs) noexcept</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type><ref refid="classiDynTree_1_1details_1_1span__iterator" kindref="compound">span_iterator</ref></type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="classiDynTree_1_1details_1_1span__iterator" kindref="compound">span_iterator</ref></type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Span.h" line="291" column="35" bodyfile="iDynTree/Span.h" bodystart="291" bodyend="295"/>
      </memberdef>
      <memberdef kind="friend" id="classiDynTree_1_1details_1_1span__iterator_1abe582aeb4c23c757830fe556b7222104" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>IDYNTREE_CONSTEXPR friend bool</type>
        <definition>IDYNTREE_CONSTEXPR friend bool operator&gt;</definition>
        <argsstring>(span_iterator lhs, span_iterator rhs) noexcept</argsstring>
        <name>operator&gt;</name>
        <param>
          <type><ref refid="classiDynTree_1_1details_1_1span__iterator" kindref="compound">span_iterator</ref></type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="classiDynTree_1_1details_1_1span__iterator" kindref="compound">span_iterator</ref></type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Span.h" line="297" column="40" bodyfile="iDynTree/Span.h" bodystart="297" bodyend="301"/>
      </memberdef>
      <memberdef kind="friend" id="classiDynTree_1_1details_1_1span__iterator_1adc91f255205e954804b88018f4b78ea4" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>IDYNTREE_CONSTEXPR friend bool</type>
        <definition>IDYNTREE_CONSTEXPR friend bool operator&gt;=</definition>
        <argsstring>(span_iterator lhs, span_iterator rhs) noexcept</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type><ref refid="classiDynTree_1_1details_1_1span__iterator" kindref="compound">span_iterator</ref></type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="classiDynTree_1_1details_1_1span__iterator" kindref="compound">span_iterator</ref></type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Span.h" line="303" column="40" bodyfile="iDynTree/Span.h" bodystart="303" bodyend="307"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="2">
        <label>iDynTree::Span&lt; ElementType, Extent &gt;</label>
        <link refid="classiDynTree_1_1Span"/>
      </node>
      <node id="1">
        <label>iDynTree::details::span_iterator&lt; Span, IsConst &gt;</label>
        <link refid="classiDynTree_1_1details_1_1span__iterator"/>
        <childnode refid="2" relation="usage">
          <edgelabel>span_</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="iDynTree/Span.h" line="175" column="5" bodyfile="iDynTree/Span.h" bodystart="176" bodyend="312"/>
    <listofallmembers>
      <member refid="classiDynTree_1_1details_1_1span__iterator_1a95e7743424aa2a3bff3ca571d56e610f" prot="public" virt="non-virtual"><scope>iDynTree::details::span_iterator</scope><name>difference_type</name></member>
      <member refid="classiDynTree_1_1details_1_1span__iterator_1a10a82b7bfc086be513926a3bb930f3a6" prot="private" virt="non-virtual"><scope>iDynTree::details::span_iterator</scope><name>element_type_</name></member>
      <member refid="classiDynTree_1_1details_1_1span__iterator_1ae7c97626fbc07c1011a157af897d1c6c" prot="protected" virt="non-virtual"><scope>iDynTree::details::span_iterator</scope><name>index_</name></member>
      <member refid="classiDynTree_1_1details_1_1span__iterator_1afda7d38dfbe62ea4fca71096f325231e" prot="public" virt="non-virtual"><scope>iDynTree::details::span_iterator</scope><name>iterator_category</name></member>
      <member refid="classiDynTree_1_1details_1_1span__iterator_1ad1bb528178e666c9a7ba8e20f92bad8c" prot="public" virt="non-virtual"><scope>iDynTree::details::span_iterator</scope><name>operator!=</name></member>
      <member refid="classiDynTree_1_1details_1_1span__iterator_1ae93c3126a4cafed6df5a4a7ece791693" prot="public" virt="non-virtual"><scope>iDynTree::details::span_iterator</scope><name>operator*</name></member>
      <member refid="classiDynTree_1_1details_1_1span__iterator_1a2d597dc838b857055b0d02ede27a9ea3" prot="public" virt="non-virtual"><scope>iDynTree::details::span_iterator</scope><name>operator+</name></member>
      <member refid="classiDynTree_1_1details_1_1span__iterator_1abc5424d3ee57f8ab6fcc1217637a2849" prot="public" virt="non-virtual"><scope>iDynTree::details::span_iterator</scope><name>operator++</name></member>
      <member refid="classiDynTree_1_1details_1_1span__iterator_1a7a249673db7494b11ad49f3c4397f5e9" prot="public" virt="non-virtual"><scope>iDynTree::details::span_iterator</scope><name>operator++</name></member>
      <member refid="classiDynTree_1_1details_1_1span__iterator_1a94f2bc0df554d18745d65c0d1261621e" prot="public" virt="non-virtual"><scope>iDynTree::details::span_iterator</scope><name>operator+=</name></member>
      <member refid="classiDynTree_1_1details_1_1span__iterator_1af9a6c1dcb6d10b55500a36f465a5913f" prot="public" virt="non-virtual"><scope>iDynTree::details::span_iterator</scope><name>operator-</name></member>
      <member refid="classiDynTree_1_1details_1_1span__iterator_1ae73116a84ec75e5b9de7108a762a555e" prot="public" virt="non-virtual"><scope>iDynTree::details::span_iterator</scope><name>operator-</name></member>
      <member refid="classiDynTree_1_1details_1_1span__iterator_1a76fb6fcf233057cb310a320fd8c65f15" prot="public" virt="non-virtual"><scope>iDynTree::details::span_iterator</scope><name>operator--</name></member>
      <member refid="classiDynTree_1_1details_1_1span__iterator_1a71e04527506cb19aae503bbb0ec1f792" prot="public" virt="non-virtual"><scope>iDynTree::details::span_iterator</scope><name>operator--</name></member>
      <member refid="classiDynTree_1_1details_1_1span__iterator_1af7cae232b80bf2b2f69e44bab09036dc" prot="public" virt="non-virtual"><scope>iDynTree::details::span_iterator</scope><name>operator-=</name></member>
      <member refid="classiDynTree_1_1details_1_1span__iterator_1aedf22b1a1e80d35c8a3d993f747f9c1c" prot="public" virt="non-virtual"><scope>iDynTree::details::span_iterator</scope><name>operator-&gt;</name></member>
      <member refid="classiDynTree_1_1details_1_1span__iterator_1a9c9a598e0cd1212f4dd10d7a155be54c" prot="public" virt="non-virtual"><scope>iDynTree::details::span_iterator</scope><name>operator&lt;</name></member>
      <member refid="classiDynTree_1_1details_1_1span__iterator_1ae6b274e7652a76915dc3142aa1f553d2" prot="public" virt="non-virtual"><scope>iDynTree::details::span_iterator</scope><name>operator&lt;=</name></member>
      <member refid="classiDynTree_1_1details_1_1span__iterator_1a7d6d902c87892c3fbb0a3bcf58181c1c" prot="public" virt="non-virtual"><scope>iDynTree::details::span_iterator</scope><name>operator==</name></member>
      <member refid="classiDynTree_1_1details_1_1span__iterator_1abe582aeb4c23c757830fe556b7222104" prot="public" virt="non-virtual"><scope>iDynTree::details::span_iterator</scope><name>operator&gt;</name></member>
      <member refid="classiDynTree_1_1details_1_1span__iterator_1adc91f255205e954804b88018f4b78ea4" prot="public" virt="non-virtual"><scope>iDynTree::details::span_iterator</scope><name>operator&gt;=</name></member>
      <member refid="classiDynTree_1_1details_1_1span__iterator_1a5e795510a6ac876761874c68fa1b6d5b" prot="public" virt="non-virtual"><scope>iDynTree::details::span_iterator</scope><name>operator[]</name></member>
      <member refid="classiDynTree_1_1details_1_1span__iterator_1ac362fa94544278396d257bf2cf2f0045" prot="public" virt="non-virtual"><scope>iDynTree::details::span_iterator</scope><name>pointer</name></member>
      <member refid="classiDynTree_1_1details_1_1span__iterator_1a03af8487e423c4cc728c1dc1f7f7bdd0" prot="public" virt="non-virtual"><scope>iDynTree::details::span_iterator</scope><name>reference</name></member>
      <member refid="classiDynTree_1_1details_1_1span__iterator_1ae61e8342b21ed93b8dc40c209b996aa0" prot="protected" virt="non-virtual"><scope>iDynTree::details::span_iterator</scope><name>span_</name></member>
      <member refid="classiDynTree_1_1details_1_1span__iterator_1aa51d1f641fc61475b619084f9d1cd1e2" prot="public" virt="non-virtual"><scope>iDynTree::details::span_iterator</scope><name>span_iterator</name></member>
      <member refid="classiDynTree_1_1details_1_1span__iterator_1a2dfbc9599010de35cf909f2df7781108" prot="public" virt="non-virtual"><scope>iDynTree::details::span_iterator</scope><name>span_iterator</name></member>
      <member refid="classiDynTree_1_1details_1_1span__iterator_1abc721637e9cb5fa1d18bbb6b38712143" prot="public" virt="non-virtual"><scope>iDynTree::details::span_iterator</scope><name>span_iterator</name></member>
      <member refid="classiDynTree_1_1details_1_1span__iterator_1a955ef508deb0f59ccb1b7da91579c971" prot="public" virt="non-virtual"><scope>iDynTree::details::span_iterator</scope><name>span_iterator&lt; Span, true &gt;</name></member>
      <member refid="classiDynTree_1_1details_1_1span__iterator_1a5a2a55b8c402d3715799c8f25c981511" prot="public" virt="non-virtual"><scope>iDynTree::details::span_iterator</scope><name>value_type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
