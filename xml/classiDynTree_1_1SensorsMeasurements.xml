<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classiDynTree_1_1SensorsMeasurements" kind="class" language="C++" prot="public">
    <compoundname>iDynTree::SensorsMeasurements</compoundname>
    <includes local="no">iDynTree/Sensors.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classiDynTree_1_1SensorsMeasurements_1a0daa8e0031f98c4a95d48ff19806752c" prot="private" static="no" mutable="no">
        <type>SensorsMeasurementsPrivateAttributes *</type>
        <definition>SensorsMeasurementsPrivateAttributes* iDynTree::SensorsMeasurements::pimpl</definition>
        <argsstring></argsstring>
        <name>pimpl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Sensors.h" line="508" column="51" bodyfile="iDynTree/Sensors.h" bodystart="507" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classiDynTree_1_1SensorsMeasurements_1a1a14e72920fd5afc53e9bf0e656bd93d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iDynTree::SensorsMeasurements::SensorsMeasurements</definition>
        <argsstring>()</argsstring>
        <name>SensorsMeasurements</name>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Sensors.h" line="514" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1SensorsMeasurements_1a7020210e0089cd9d011680b3331ac403" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iDynTree::SensorsMeasurements::SensorsMeasurements</definition>
        <argsstring>(const SensorsList &amp;sensorList)</argsstring>
        <name>SensorsMeasurements</name>
        <param>
          <type>const <ref refid="classiDynTree_1_1SensorsList" kindref="compound">SensorsList</ref> &amp;</type>
          <declname>sensorList</declname>
        </param>
        <briefdescription>
<para>Constructor from SensorList. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Sensors.h" line="519" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1SensorsMeasurements_1a7b42cdb179bf20acc780422882af9308" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iDynTree::SensorsMeasurements::SensorsMeasurements</definition>
        <argsstring>(const SensorsMeasurements &amp;other)</argsstring>
        <name>SensorsMeasurements</name>
        <param>
          <type>const <ref refid="classiDynTree_1_1SensorsMeasurements" kindref="compound">SensorsMeasurements</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Copy constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Sensors.h" line="524" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1SensorsMeasurements_1a4266785ba25425a16cc5a2c46bb1e7d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classiDynTree_1_1SensorsMeasurements" kindref="compound">SensorsMeasurements</ref> &amp;</type>
        <definition>SensorsMeasurements&amp; iDynTree::SensorsMeasurements::operator=</definition>
        <argsstring>(const SensorsMeasurements &amp;other)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classiDynTree_1_1SensorsMeasurements" kindref="compound">SensorsMeasurements</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Copy operator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Sensors.h" line="529" column="33"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1SensorsMeasurements_1a4d2989e1fe40d29d9e62dfa48826599f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual iDynTree::SensorsMeasurements::~SensorsMeasurements</definition>
        <argsstring>()</argsstring>
        <name>~SensorsMeasurements</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Sensors.h" line="534" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1SensorsMeasurements_1a0b92f906baf6e95d02bdf9f4892e1814" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool iDynTree::SensorsMeasurements::setNrOfSensors</definition>
        <argsstring>(const SensorType &amp;sensor_type, std::size_t nrOfSensors)</argsstring>
        <name>setNrOfSensors</name>
        <param>
          <type>const SensorType &amp;</type>
          <declname>sensor_type</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>nrOfSensors</declname>
        </param>
        <briefdescription>
<para>Set the number of sensors of type sensor_type in this SensorsTree . </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if all went right, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Sensors.h" line="540" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1SensorsMeasurements_1a89be04043f4ffa8f1c1ef2318b3f7921" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t iDynTree::SensorsMeasurements::getNrOfSensors</definition>
        <argsstring>(const SensorType &amp;sensor_type) const</argsstring>
        <name>getNrOfSensors</name>
        <param>
          <type>const SensorType &amp;</type>
          <declname>sensor_type</declname>
        </param>
        <briefdescription>
<para>Get the number of sensors of type sensor_type in this <ref refid="classiDynTree_1_1SensorsMeasurements" kindref="compound">SensorsMeasurements</ref> . </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the number of sensors of type sensor_type </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Sensors.h" line="546" column="25"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1SensorsMeasurements_1a29c04be67efee04dc5d499a7f9ee5614" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool iDynTree::SensorsMeasurements::resize</definition>
        <argsstring>(const SensorsList &amp;sensorsList)</argsstring>
        <name>resize</name>
        <param>
          <type>const <ref refid="classiDynTree_1_1SensorsList" kindref="compound">SensorsList</ref> &amp;</type>
          <declname>sensorsList</declname>
        </param>
        <briefdescription>
<para>Resize and reset the measurement vectors. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if all went right, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Sensors.h" line="552" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1SensorsMeasurements_1a02a06dbaf1317f943a10cb0a1367e9e4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool iDynTree::SensorsMeasurements::toVector</definition>
        <argsstring>(VectorDynSize &amp;measurementVector) const</argsstring>
        <name>toVector</name>
        <param>
          <type><ref refid="classiDynTree_1_1VectorDynSize" kindref="compound">VectorDynSize</ref> &amp;</type>
          <declname>measurementVector</declname>
        </param>
        <briefdescription>
<para>Returns a double vector of all the sensors measurements. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if all went right, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Sensors.h" line="558" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1SensorsMeasurements_1af0e5fd3549372c30ef8b6eb50a16d108" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool iDynTree::SensorsMeasurements::setMeasurement</definition>
        <argsstring>(const SensorType &amp;sensor_type, const std::ptrdiff_t &amp;sensor_index, const iDynTree::Wrench &amp;measurement)</argsstring>
        <name>setMeasurement</name>
        <param>
          <type>const SensorType &amp;</type>
          <declname>sensor_type</declname>
        </param>
        <param>
          <type>const std::ptrdiff_t &amp;</type>
          <declname>sensor_index</declname>
        </param>
        <param>
          <type>const <ref refid="classiDynTree_1_1Wrench" kindref="compound">iDynTree::Wrench</ref> &amp;</type>
          <declname>measurement</declname>
        </param>
        <briefdescription>
<para>Set the measurement for the specified sensor. </para>
        </briefdescription>
        <detaileddescription>
<para>Return true if all is correct (i.e. sensor_index is not out of bounds) and the specified sensor_type uses <ref refid="classiDynTree_1_1Wrench" kindref="compound">Wrench</ref> as its measurement type. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Sensors.h" line="566" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1SensorsMeasurements_1a5ab70fe4113aad3a81c1d5d6874e192b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool iDynTree::SensorsMeasurements::setMeasurement</definition>
        <argsstring>(const SensorType &amp;sensor_type, const std::ptrdiff_t &amp;sensor_index, const Vector3 &amp;measurement)</argsstring>
        <name>setMeasurement</name>
        <param>
          <type>const SensorType &amp;</type>
          <declname>sensor_type</declname>
        </param>
        <param>
          <type>const std::ptrdiff_t &amp;</type>
          <declname>sensor_index</declname>
        </param>
        <param>
          <type>const <ref refid="classiDynTree_1_1VectorFixSize" kindref="compound">Vector3</ref> &amp;</type>
          <declname>measurement</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Sensors.h" line="569" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1SensorsMeasurements_1a16bb2e229b465f6881c22476d81fcc94" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool iDynTree::SensorsMeasurements::getMeasurement</definition>
        <argsstring>(const SensorType &amp;sensor_type, const std::ptrdiff_t &amp;sensor_index, iDynTree::Wrench &amp;measurement) const</argsstring>
        <name>getMeasurement</name>
        <param>
          <type>const SensorType &amp;</type>
          <declname>sensor_type</declname>
        </param>
        <param>
          <type>const std::ptrdiff_t &amp;</type>
          <declname>sensor_index</declname>
        </param>
        <param>
          <type><ref refid="classiDynTree_1_1Wrench" kindref="compound">iDynTree::Wrench</ref> &amp;</type>
          <declname>measurement</declname>
        </param>
        <briefdescription>
<para>Get the measurement for a specified sensor. </para>
        </briefdescription>
        <detaileddescription>
<para>Return true if all is correct (i.e. sensor_index is not out of bounds) and the specified sensor_type uses its appropriate type as its measurement type. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Sensors.h" line="580" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1SensorsMeasurements_1a543f60da95bdeb9c9c24fb92cf5f5705" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool iDynTree::SensorsMeasurements::getMeasurement</definition>
        <argsstring>(const SensorType &amp;sensor_type, const std::ptrdiff_t &amp;sensor_index, Vector3 &amp;measurement) const</argsstring>
        <name>getMeasurement</name>
        <param>
          <type>const SensorType &amp;</type>
          <declname>sensor_type</declname>
        </param>
        <param>
          <type>const std::ptrdiff_t &amp;</type>
          <declname>sensor_index</declname>
        </param>
        <param>
          <type><ref refid="classiDynTree_1_1VectorFixSize" kindref="compound">Vector3</ref> &amp;</type>
          <declname>measurement</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Sensors.h" line="583" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1SensorsMeasurements_1a89704247187588c99da74ed64f810094" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t iDynTree::SensorsMeasurements::getSizeOfAllSensorsMeasurements</definition>
        <argsstring>() const</argsstring>
        <name>getSizeOfAllSensorsMeasurements</name>
        <briefdescription>
<para>Get the total size of sensor measurements. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>this is the size of vector returned by toVector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Sensors.h" line="592" column="20"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A list of measurements associated with a <ref refid="classiDynTree_1_1SensorsList" kindref="compound">SensorsList</ref> . </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="iDynTree/Sensors.h" line="504" column="5" bodyfile="iDynTree/Sensors.h" bodystart="505" bodyend="593"/>
    <listofallmembers>
      <member refid="classiDynTree_1_1SensorsMeasurements_1a16bb2e229b465f6881c22476d81fcc94" prot="public" virt="non-virtual"><scope>iDynTree::SensorsMeasurements</scope><name>getMeasurement</name></member>
      <member refid="classiDynTree_1_1SensorsMeasurements_1a543f60da95bdeb9c9c24fb92cf5f5705" prot="public" virt="non-virtual"><scope>iDynTree::SensorsMeasurements</scope><name>getMeasurement</name></member>
      <member refid="classiDynTree_1_1SensorsMeasurements_1a89be04043f4ffa8f1c1ef2318b3f7921" prot="public" virt="non-virtual"><scope>iDynTree::SensorsMeasurements</scope><name>getNrOfSensors</name></member>
      <member refid="classiDynTree_1_1SensorsMeasurements_1a89704247187588c99da74ed64f810094" prot="public" virt="non-virtual"><scope>iDynTree::SensorsMeasurements</scope><name>getSizeOfAllSensorsMeasurements</name></member>
      <member refid="classiDynTree_1_1SensorsMeasurements_1a4266785ba25425a16cc5a2c46bb1e7d5" prot="public" virt="non-virtual"><scope>iDynTree::SensorsMeasurements</scope><name>operator=</name></member>
      <member refid="classiDynTree_1_1SensorsMeasurements_1a0daa8e0031f98c4a95d48ff19806752c" prot="private" virt="non-virtual"><scope>iDynTree::SensorsMeasurements</scope><name>pimpl</name></member>
      <member refid="classiDynTree_1_1SensorsMeasurements_1a29c04be67efee04dc5d499a7f9ee5614" prot="public" virt="non-virtual"><scope>iDynTree::SensorsMeasurements</scope><name>resize</name></member>
      <member refid="classiDynTree_1_1SensorsMeasurements_1a1a14e72920fd5afc53e9bf0e656bd93d" prot="public" virt="non-virtual"><scope>iDynTree::SensorsMeasurements</scope><name>SensorsMeasurements</name></member>
      <member refid="classiDynTree_1_1SensorsMeasurements_1a7020210e0089cd9d011680b3331ac403" prot="public" virt="non-virtual"><scope>iDynTree::SensorsMeasurements</scope><name>SensorsMeasurements</name></member>
      <member refid="classiDynTree_1_1SensorsMeasurements_1a7b42cdb179bf20acc780422882af9308" prot="public" virt="non-virtual"><scope>iDynTree::SensorsMeasurements</scope><name>SensorsMeasurements</name></member>
      <member refid="classiDynTree_1_1SensorsMeasurements_1af0e5fd3549372c30ef8b6eb50a16d108" prot="public" virt="non-virtual"><scope>iDynTree::SensorsMeasurements</scope><name>setMeasurement</name></member>
      <member refid="classiDynTree_1_1SensorsMeasurements_1a5ab70fe4113aad3a81c1d5d6874e192b" prot="public" virt="non-virtual"><scope>iDynTree::SensorsMeasurements</scope><name>setMeasurement</name></member>
      <member refid="classiDynTree_1_1SensorsMeasurements_1a0b92f906baf6e95d02bdf9f4892e1814" prot="public" virt="non-virtual"><scope>iDynTree::SensorsMeasurements</scope><name>setNrOfSensors</name></member>
      <member refid="classiDynTree_1_1SensorsMeasurements_1a02a06dbaf1317f943a10cb0a1367e9e4" prot="public" virt="non-virtual"><scope>iDynTree::SensorsMeasurements</scope><name>toVector</name></member>
      <member refid="classiDynTree_1_1SensorsMeasurements_1a4d2989e1fe40d29d9e62dfa48826599f" prot="public" virt="virtual"><scope>iDynTree::SensorsMeasurements</scope><name>~SensorsMeasurements</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
