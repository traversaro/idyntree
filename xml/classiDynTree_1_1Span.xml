<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classiDynTree_1_1Span" kind="class" language="C++" prot="public">
    <compoundname>iDynTree::Span</compoundname>
    <innerclass refid="structiDynTree_1_1Span_1_1KnownNotNull" prot="private">iDynTree::Span::KnownNotNull</innerclass>
    <innerclass refid="classiDynTree_1_1Span_1_1storage__type" prot="private">iDynTree::Span::storage_type</innerclass>
    <innerclass refid="classiDynTree_1_1Span_1_1subspan__selector" prot="private">iDynTree::Span::subspan_selector</innerclass>
    <templateparamlist>
      <param>
        <type>class ElementType</type>
      </param>
      <param>
        <type>std::ptrdiff_t</type>
        <declname>Extent</declname>
        <defname>Extent</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classiDynTree_1_1Span_1a70db7c45968e3bd56ca981811e237f40" prot="public" static="no">
        <type>ElementType</type>
        <definition>using iDynTree::Span&lt; ElementType, Extent &gt;::element_type =  ElementType</definition>
        <argsstring></argsstring>
        <name>element_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Span.h" line="385" column="5" bodyfile="iDynTree/Span.h" bodystart="385" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classiDynTree_1_1Span_1a731b2a8e595a3b6e03df9c843856d7c1" prot="public" static="no">
        <type>std::remove_cv_t&lt; ElementType &gt;</type>
        <definition>using iDynTree::Span&lt; ElementType, Extent &gt;::value_type =  std::remove_cv_t&lt;ElementType&gt;</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Span.h" line="386" column="5" bodyfile="iDynTree/Span.h" bodystart="386" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classiDynTree_1_1Span_1a5f39b58d1f1f24fa826e8afed2f0a47d" prot="public" static="no">
        <type>std::ptrdiff_t</type>
        <definition>using iDynTree::Span&lt; ElementType, Extent &gt;::index_type =  std::ptrdiff_t</definition>
        <argsstring></argsstring>
        <name>index_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Span.h" line="387" column="5" bodyfile="iDynTree/Span.h" bodystart="387" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classiDynTree_1_1Span_1a36b24ad88f7035362135d713f5210caf" prot="public" static="no">
        <type>element_type *</type>
        <definition>using iDynTree::Span&lt; ElementType, Extent &gt;::pointer =  element_type*</definition>
        <argsstring></argsstring>
        <name>pointer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Span.h" line="388" column="5" bodyfile="iDynTree/Span.h" bodystart="388" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classiDynTree_1_1Span_1ae2642271b87b800d7233fa17d521e1f5" prot="public" static="no">
        <type>element_type &amp;</type>
        <definition>using iDynTree::Span&lt; ElementType, Extent &gt;::reference =  element_type&amp;</definition>
        <argsstring></argsstring>
        <name>reference</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Span.h" line="389" column="5" bodyfile="iDynTree/Span.h" bodystart="389" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classiDynTree_1_1Span_1afb25a7eef81ba47110192e3d6f906f68" prot="public" static="no">
        <type>const element_type &amp;</type>
        <definition>using iDynTree::Span&lt; ElementType, Extent &gt;::const_reference =  const element_type&amp;</definition>
        <argsstring></argsstring>
        <name>const_reference</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Span.h" line="390" column="5" bodyfile="iDynTree/Span.h" bodystart="390" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classiDynTree_1_1Span_1a756d7b9397c34924e72785d050024b2d" prot="public" static="no">
        <type><ref refid="classiDynTree_1_1details_1_1span__iterator" kindref="compound">details::span_iterator</ref>&lt; <ref refid="classiDynTree_1_1Span" kindref="compound">Span</ref>&lt; ElementType, Extent &gt;, false &gt;</type>
        <definition>using iDynTree::Span&lt; ElementType, Extent &gt;::iterator =  details::span_iterator&lt;Span&lt;ElementType, Extent&gt;, false&gt;</definition>
        <argsstring></argsstring>
        <name>iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Span.h" line="392" column="5" bodyfile="iDynTree/Span.h" bodystart="392" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classiDynTree_1_1Span_1aa7f215f49b5509cc0be76c103716698e" prot="public" static="no">
        <type><ref refid="classiDynTree_1_1details_1_1span__iterator" kindref="compound">details::span_iterator</ref>&lt; <ref refid="classiDynTree_1_1Span" kindref="compound">Span</ref>&lt; ElementType, Extent &gt;, true &gt;</type>
        <definition>using iDynTree::Span&lt; ElementType, Extent &gt;::const_iterator =  details::span_iterator&lt;Span&lt;ElementType, Extent&gt;, true&gt;</definition>
        <argsstring></argsstring>
        <name>const_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Span.h" line="393" column="5" bodyfile="iDynTree/Span.h" bodystart="393" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classiDynTree_1_1Span_1ad03f65546eccd46d2866a12d9eea6aa4" prot="public" static="no">
        <type>std::reverse_iterator&lt; <ref refid="classiDynTree_1_1details_1_1span__iterator" kindref="compound">iterator</ref> &gt;</type>
        <definition>using iDynTree::Span&lt; ElementType, Extent &gt;::reverse_iterator =  std::reverse_iterator&lt;iterator&gt;</definition>
        <argsstring></argsstring>
        <name>reverse_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Span.h" line="394" column="5" bodyfile="iDynTree/Span.h" bodystart="394" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classiDynTree_1_1Span_1a6c64cd168935d8f52052a6d37c6088a8" prot="public" static="no">
        <type>std::reverse_iterator&lt; <ref refid="classiDynTree_1_1details_1_1span__iterator" kindref="compound">const_iterator</ref> &gt;</type>
        <definition>using iDynTree::Span&lt; ElementType, Extent &gt;::const_reverse_iterator =  std::reverse_iterator&lt;const_iterator&gt;</definition>
        <argsstring></argsstring>
        <name>const_reverse_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Span.h" line="395" column="5" bodyfile="iDynTree/Span.h" bodystart="395" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classiDynTree_1_1Span_1a679606e2b5ef53d99bb437b9b42f51d3" prot="public" static="no">
        <type>index_type</type>
        <definition>using iDynTree::Span&lt; ElementType, Extent &gt;::size_type =  index_type</definition>
        <argsstring></argsstring>
        <name>size_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Span.h" line="397" column="5" bodyfile="iDynTree/Span.h" bodystart="397" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classiDynTree_1_1Span_1a769d61d5d758537d47cabfd3a3074858" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const index_type</type>
        <definition>IDYNTREE_CONSTEXPR const Span&lt; ElementType, Extent &gt;::index_type iDynTree::Span&lt; ElementType, Extent &gt;::extent</definition>
        <argsstring></argsstring>
        <name>extent</name>
        <initializer>{ Extent }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Span.h" line="400" column="39" bodyfile="iDynTree/Span.h" bodystart="400" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classiDynTree_1_1Span_1af5e0465e4669298175be266e861b5573" prot="private" static="no" mutable="no">
        <type>storage_type&lt; <ref refid="classiDynTree_1_1details_1_1extent__type" kindref="compound">details::extent_type</ref>&lt; Extent &gt; &gt;</type>
        <definition>storage_type&lt;details::extent_type&lt;Extent&gt; &gt; iDynTree::Span&lt; ElementType, Extent &gt;::storage_</definition>
        <argsstring></argsstring>
        <name>storage_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Span.h" line="601" column="18" bodyfile="iDynTree/Span.h" bodystart="601" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classiDynTree_1_1Span_1abc012d28574a8641a5ab3f7bafa7b6d5" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>bool</type>
            <declname>Dependent</declname>
            <defname>Dependent</defname>
            <defval>false</defval>
          </param>
          <param>
            <type>class</type>
            <defval>std::enable_if_t&lt;(Dependent || Extent &lt;= 0)&gt;</defval>
          </param>
        </templateparamlist>
        <type>IDYNTREE_CONSTEXPR</type>
        <definition>IDYNTREE_CONSTEXPR iDynTree::Span&lt; ElementType, Extent &gt;::Span</definition>
        <argsstring>() noexcept</argsstring>
        <name>Span</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Span.h" line="411" column="24" bodyfile="iDynTree/Span.h" bodystart="411" bodyend="413"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1Span_1ad91a5ef1ecfacfd0f1bc8c549ec6eb2a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>IDYNTREE_CONSTEXPR</type>
        <definition>IDYNTREE_CONSTEXPR iDynTree::Span&lt; ElementType, Extent &gt;::Span</definition>
        <argsstring>(pointer ptr, index_type count)</argsstring>
        <name>Span</name>
        <param>
          <type>pointer</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>index_type</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Span.h" line="416" column="24" bodyfile="iDynTree/Span.h" bodystart="416" bodyend="416"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1Span_1a9c962214e112e643a0f4898e2455ed85" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>IDYNTREE_CONSTEXPR</type>
        <definition>IDYNTREE_CONSTEXPR iDynTree::Span&lt; ElementType, Extent &gt;::Span</definition>
        <argsstring>(pointer firstElem, pointer lastElem)</argsstring>
        <name>Span</name>
        <param>
          <type>pointer</type>
          <declname>firstElem</declname>
        </param>
        <param>
          <type>pointer</type>
          <declname>lastElem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Span.h" line="418" column="24" bodyfile="iDynTree/Span.h" bodystart="418" bodyend="421"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1Span_1a1fbbfad7a9b0967334d878cd3c68a7f6" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>IDYNTREE_CONSTEXPR</type>
        <definition>IDYNTREE_CONSTEXPR iDynTree::Span&lt; ElementType, Extent &gt;::Span</definition>
        <argsstring>(element_type(&amp;arr)[N]) noexcept</argsstring>
        <name>Span</name>
        <param>
          <type>element_type(&amp;)</type>
          <declname>arr</declname>
          <array>[N]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Span.h" line="424" column="24" bodyfile="iDynTree/Span.h" bodystart="424" bodyend="427"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1Span_1a8e5b0b1eb6ae07cc346c1358e82c162d" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
          <param>
            <type>class ArrayElementType</type>
            <defval>std::remove_const_t&lt;element_type&gt;</defval>
          </param>
        </templateparamlist>
        <type>IDYNTREE_CONSTEXPR</type>
        <definition>IDYNTREE_CONSTEXPR iDynTree::Span&lt; ElementType, Extent &gt;::Span</definition>
        <argsstring>(std::array&lt; ArrayElementType, N &gt; &amp;arr) noexcept</argsstring>
        <name>Span</name>
        <param>
          <type>std::array&lt; ArrayElementType, N &gt; &amp;</type>
          <declname>arr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Span.h" line="430" column="24" bodyfile="iDynTree/Span.h" bodystart="430" bodyend="433"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1Span_1a24a3f7b3832c3a78bf42529776960db6" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>IDYNTREE_CONSTEXPR</type>
        <definition>IDYNTREE_CONSTEXPR iDynTree::Span&lt; ElementType, Extent &gt;::Span</definition>
        <argsstring>(const std::array&lt; std::remove_const_t&lt; element_type &gt;, N &gt; &amp;arr) noexcept</argsstring>
        <name>Span</name>
        <param>
          <type>const std::array&lt; std::remove_const_t&lt; element_type &gt;, N &gt; &amp;</type>
          <declname>arr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Span.h" line="436" column="24" bodyfile="iDynTree/Span.h" bodystart="436" bodyend="439"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1Span_1aae7fac87b82c44524b67bca5e6a98bfd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Container</type>
          </param>
          <param>
            <type>class</type>
            <defval>std::enable_if_t&lt;<ref refid="structiDynTree_1_1SpanUtils_1_1has__data__method" kindref="compound">SpanUtils::has_data_method</ref>&lt;Container&gt;::value &amp;&amp; <ref refid="structiDynTree_1_1SpanUtils_1_1has__size__method" kindref="compound">SpanUtils::has_size_method</ref>&lt;Container&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>IDYNTREE_CONSTEXPR</type>
        <definition>IDYNTREE_CONSTEXPR iDynTree::Span&lt; ElementType, Extent &gt;::Span</definition>
        <argsstring>(Container &amp;cont)</argsstring>
        <name>Span</name>
        <param>
          <type>Container &amp;</type>
          <declname>cont</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Span.h" line="449" column="24" bodyfile="iDynTree/Span.h" bodystart="449" bodyend="451"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1Span_1afedf7aaf714bef1be9c70590340655c8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Container</type>
          </param>
          <param>
            <type>class</type>
            <defval>std::enable_if_t&lt;<ref refid="structiDynTree_1_1SpanUtils_1_1has__data__method" kindref="compound">SpanUtils::has_data_method</ref>&lt;Container&gt;::value &amp;&amp; <ref refid="structiDynTree_1_1SpanUtils_1_1has__size__method" kindref="compound">SpanUtils::has_size_method</ref>&lt;Container&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>IDYNTREE_CONSTEXPR</type>
        <definition>IDYNTREE_CONSTEXPR iDynTree::Span&lt; ElementType, Extent &gt;::Span</definition>
        <argsstring>(const Container &amp;cont)</argsstring>
        <name>Span</name>
        <param>
          <type>const Container &amp;</type>
          <declname>cont</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Span.h" line="458" column="24" bodyfile="iDynTree/Span.h" bodystart="458" bodyend="460"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1Span_1a2f5eb3aa82cd1bd72f8d90b5e6653a50" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>IDYNTREE_CONSTEXPR</type>
        <definition>IDYNTREE_CONSTEXPR iDynTree::Span&lt; ElementType, Extent &gt;::Span</definition>
        <argsstring>(const Span &amp;other) noexcept=default</argsstring>
        <name>Span</name>
        <param>
          <type>const <ref refid="classiDynTree_1_1Span" kindref="compound">Span</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Span.h" line="463" column="24"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1Span_1a537095cae4195e7f8653c99f4b90d41e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class OtherElementType</type>
          </param>
          <param>
            <type>std::ptrdiff_t</type>
            <declname>OtherExtent</declname>
            <defname>OtherExtent</defname>
          </param>
          <param>
            <type>class</type>
            <defval>std::enable_if_t&lt;            <ref refid="structiDynTree_1_1details_1_1is__allowed__extent__conversion" kindref="compound">details::is_allowed_extent_conversion</ref>&lt;OtherExtent, Extent&gt;::value &amp;&amp;            <ref refid="structiDynTree_1_1details_1_1is__allowed__element__type__conversion" kindref="compound">details::is_allowed_element_type_conversion</ref>&lt;OtherElementType, element_type&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>IDYNTREE_CONSTEXPR</type>
        <definition>IDYNTREE_CONSTEXPR iDynTree::Span&lt; ElementType, Extent &gt;::Span</definition>
        <argsstring>(const Span&lt; OtherElementType, OtherExtent &gt; &amp;other)</argsstring>
        <name>Span</name>
        <param>
          <type>const <ref refid="classiDynTree_1_1Span" kindref="compound">Span</ref>&lt; OtherElementType, OtherExtent &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Span.h" line="471" column="24" bodyfile="iDynTree/Span.h" bodystart="471" bodyend="474"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1Span_1a96e1b612c73489bc0543e1b281348d03" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>iDynTree::Span&lt; ElementType, Extent &gt;::~Span</definition>
        <argsstring>() noexcept=default</argsstring>
        <name>~Span</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Span.h" line="477" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1Span_1a210a813bcd52fcfbf12997430237b533" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>IDYNTREE_CONSTEXPR <ref refid="classiDynTree_1_1Span" kindref="compound">Span</ref> &amp;</type>
        <definition>IDYNTREE_CONSTEXPR Span&amp; iDynTree::Span&lt; ElementType, Extent &gt;::operator=</definition>
        <argsstring>(const Span &amp;other) noexcept=default</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classiDynTree_1_1Span" kindref="compound">Span</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Span.h" line="478" column="29"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1Span_1a8adb813162ff11a568a0fdc425e492d4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::ptrdiff_t</type>
            <declname>Count</declname>
            <defname>Count</defname>
          </param>
        </templateparamlist>
        <type>IDYNTREE_CONSTEXPR <ref refid="classiDynTree_1_1Span" kindref="compound">Span</ref>&lt; element_type, Count &gt;</type>
        <definition>IDYNTREE_CONSTEXPR Span&lt;element_type, Count&gt; iDynTree::Span&lt; ElementType, Extent &gt;::first</definition>
        <argsstring>() const</argsstring>
        <name>first</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Span.h" line="482" column="29" bodyfile="iDynTree/Span.h" bodystart="482" bodyend="486"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1Span_1a18120c4d63ac40bb3490edfb6ceb226e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::ptrdiff_t</type>
            <declname>Count</declname>
            <defname>Count</defname>
          </param>
        </templateparamlist>
        <type>IDYNTREE_CONSTEXPR <ref refid="classiDynTree_1_1Span" kindref="compound">Span</ref>&lt; element_type, Count &gt;</type>
        <definition>IDYNTREE_CONSTEXPR Span&lt;element_type, Count&gt; iDynTree::Span&lt; ElementType, Extent &gt;::last</definition>
        <argsstring>() const</argsstring>
        <name>last</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Span.h" line="489" column="29" bodyfile="iDynTree/Span.h" bodystart="489" bodyend="493"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1Span_1a7586e4325dd1765618d301ce4551682a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::ptrdiff_t</type>
            <declname>Offset</declname>
            <defname>Offset</defname>
          </param>
          <param>
            <type>std::ptrdiff_t</type>
            <declname>Count</declname>
            <defname>Count</defname>
            <defval>dynamic_extent</defval>
          </param>
        </templateparamlist>
        <type>IDYNTREE_CONSTEXPR auto</type>
        <definition>IDYNTREE_CONSTEXPR auto iDynTree::Span&lt; ElementType, Extent &gt;::subspan</definition>
        <argsstring>() const -&gt; typename details::calculate_subspan_type&lt; ElementType, Extent, Offset, Count &gt;::type</argsstring>
        <name>subspan</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Span.h" line="497" column="29" bodyfile="iDynTree/Span.h" bodystart="497" bodyend="503"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1Span_1a21d66395cac09a76a56d9d230d5bfc26" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>IDYNTREE_CONSTEXPR <ref refid="classiDynTree_1_1Span" kindref="compound">Span</ref>&lt; element_type, dynamic_extent &gt;</type>
        <definition>IDYNTREE_CONSTEXPR Span&lt;element_type, dynamic_extent&gt; iDynTree::Span&lt; ElementType, Extent &gt;::first</definition>
        <argsstring>(index_type count) const</argsstring>
        <name>first</name>
        <param>
          <type>index_type</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Span.h" line="506" column="29" bodyfile="iDynTree/Span.h" bodystart="506" bodyend="510"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1Span_1a640d4ee52e067a94dc1de648f79c5edc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>IDYNTREE_CONSTEXPR <ref refid="classiDynTree_1_1Span" kindref="compound">Span</ref>&lt; element_type, dynamic_extent &gt;</type>
        <definition>IDYNTREE_CONSTEXPR Span&lt;element_type, dynamic_extent&gt; iDynTree::Span&lt; ElementType, Extent &gt;::last</definition>
        <argsstring>(index_type count) const</argsstring>
        <name>last</name>
        <param>
          <type>index_type</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Span.h" line="512" column="29" bodyfile="iDynTree/Span.h" bodystart="512" bodyend="515"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1Span_1a982781643e6a4a5a5ea31c6013bebde5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>IDYNTREE_CONSTEXPR <ref refid="classiDynTree_1_1Span" kindref="compound">Span</ref>&lt; element_type, dynamic_extent &gt;</type>
        <definition>IDYNTREE_CONSTEXPR Span&lt;element_type, dynamic_extent&gt; iDynTree::Span&lt; ElementType, Extent &gt;::subspan</definition>
        <argsstring>(index_type offset, index_type count=dynamic_extent) const</argsstring>
        <name>subspan</name>
        <param>
          <type>index_type</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>index_type</type>
          <declname>count</declname>
          <defval>dynamic_extent</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Span.h" line="517" column="29" bodyfile="iDynTree/Span.h" bodystart="517" bodyend="521"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1Span_1af304ba80cabe3c1a7d00f1cbb81b803f" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>IDYNTREE_CONSTEXPR index_type</type>
        <definition>IDYNTREE_CONSTEXPR index_type iDynTree::Span&lt; ElementType, Extent &gt;::size</definition>
        <argsstring>() const noexcept</argsstring>
        <name>size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Span.h" line="525" column="35" bodyfile="iDynTree/Span.h" bodystart="525" bodyend="525"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1Span_1aba35de3ae6d57c9fb20a8f801060b90b" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>IDYNTREE_CONSTEXPR index_type</type>
        <definition>IDYNTREE_CONSTEXPR index_type iDynTree::Span&lt; ElementType, Extent &gt;::size_bytes</definition>
        <argsstring>() const noexcept</argsstring>
        <name>size_bytes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Span.h" line="526" column="35" bodyfile="iDynTree/Span.h" bodystart="526" bodyend="529"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1Span_1a1666613569f4e2f24db16a112a41c8e9" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>IDYNTREE_CONSTEXPR bool</type>
        <definition>IDYNTREE_CONSTEXPR bool iDynTree::Span&lt; ElementType, Extent &gt;::empty</definition>
        <argsstring>() const noexcept</argsstring>
        <name>empty</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Span.h" line="530" column="29" bodyfile="iDynTree/Span.h" bodystart="530" bodyend="530"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1Span_1af79f016b2ac1e691005cc20ebdd179ba" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>IDYNTREE_CONSTEXPR reference</type>
        <definition>IDYNTREE_CONSTEXPR reference iDynTree::Span&lt; ElementType, Extent &gt;::operator[]</definition>
        <argsstring>(index_type idx) const</argsstring>
        <name>operator[]</name>
        <param>
          <type>index_type</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Span.h" line="533" column="34" bodyfile="iDynTree/Span.h" bodystart="533" bodyend="537"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1Span_1abb1c0032e5b8b0559bd79ecb22592f17" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>IDYNTREE_CONSTEXPR const_reference</type>
        <definition>IDYNTREE_CONSTEXPR const_reference iDynTree::Span&lt; ElementType, Extent &gt;::getVal</definition>
        <argsstring>(index_type idx) const</argsstring>
        <name>getVal</name>
        <param>
          <type>index_type</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Span.h" line="539" column="40" bodyfile="iDynTree/Span.h" bodystart="539" bodyend="539"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1Span_1a227ad4ae67fc259cc8a44df883b92557" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>IDYNTREE_CONSTEXPR bool</type>
        <definition>IDYNTREE_CONSTEXPR bool iDynTree::Span&lt; ElementType, Extent &gt;::setVal</definition>
        <argsstring>(index_type idx, const_reference val)</argsstring>
        <name>setVal</name>
        <param>
          <type>index_type</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>const_reference</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Span.h" line="540" column="29" bodyfile="iDynTree/Span.h" bodystart="540" bodyend="545"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1Span_1ac7629c2d787e91ae8501db3c5699428b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>IDYNTREE_CONSTEXPR reference</type>
        <definition>IDYNTREE_CONSTEXPR reference iDynTree::Span&lt; ElementType, Extent &gt;::at</definition>
        <argsstring>(index_type idx) const</argsstring>
        <name>at</name>
        <param>
          <type>index_type</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Span.h" line="547" column="34" bodyfile="iDynTree/Span.h" bodystart="547" bodyend="547"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1Span_1ab50f91a19ed1d88f7bb10367fa59412e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>IDYNTREE_CONSTEXPR reference</type>
        <definition>IDYNTREE_CONSTEXPR reference iDynTree::Span&lt; ElementType, Extent &gt;::operator()</definition>
        <argsstring>(index_type idx) const</argsstring>
        <name>operator()</name>
        <param>
          <type>index_type</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Span.h" line="548" column="34" bodyfile="iDynTree/Span.h" bodystart="548" bodyend="548"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1Span_1a348108e3280c4ef8c8e3ec35d4f6d7bf" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>IDYNTREE_CONSTEXPR pointer</type>
        <definition>IDYNTREE_CONSTEXPR pointer iDynTree::Span&lt; ElementType, Extent &gt;::data</definition>
        <argsstring>() const noexcept</argsstring>
        <name>data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Span.h" line="549" column="32" bodyfile="iDynTree/Span.h" bodystart="549" bodyend="549"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1Span_1a3ffa753817b222a0f9c83232f4c5c141" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>IDYNTREE_CONSTEXPR <ref refid="classiDynTree_1_1details_1_1span__iterator" kindref="compound">iterator</ref></type>
        <definition>IDYNTREE_CONSTEXPR iterator iDynTree::Span&lt; ElementType, Extent &gt;::begin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Span.h" line="552" column="33" bodyfile="iDynTree/Span.h" bodystart="552" bodyend="552"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1Span_1afb67f31bc6c4da128044733f940b7e55" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>IDYNTREE_CONSTEXPR <ref refid="classiDynTree_1_1details_1_1span__iterator" kindref="compound">iterator</ref></type>
        <definition>IDYNTREE_CONSTEXPR iterator iDynTree::Span&lt; ElementType, Extent &gt;::end</definition>
        <argsstring>() const noexcept</argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Span.h" line="553" column="33" bodyfile="iDynTree/Span.h" bodystart="553" bodyend="553"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1Span_1a56af802b85a3ad0aea91e63f117c05b7" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>IDYNTREE_CONSTEXPR <ref refid="classiDynTree_1_1details_1_1span__iterator" kindref="compound">const_iterator</ref></type>
        <definition>IDYNTREE_CONSTEXPR const_iterator iDynTree::Span&lt; ElementType, Extent &gt;::cbegin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>cbegin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Span.h" line="555" column="39" bodyfile="iDynTree/Span.h" bodystart="555" bodyend="555"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1Span_1a81c64d2257e3e0f665e06168ea941b45" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>IDYNTREE_CONSTEXPR <ref refid="classiDynTree_1_1details_1_1span__iterator" kindref="compound">const_iterator</ref></type>
        <definition>IDYNTREE_CONSTEXPR const_iterator iDynTree::Span&lt; ElementType, Extent &gt;::cend</definition>
        <argsstring>() const noexcept</argsstring>
        <name>cend</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Span.h" line="556" column="39" bodyfile="iDynTree/Span.h" bodystart="556" bodyend="556"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1Span_1a700dd4216eb5a5fccc6aaa7751c46abd" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>IDYNTREE_CONSTEXPR reverse_iterator</type>
        <definition>IDYNTREE_CONSTEXPR reverse_iterator iDynTree::Span&lt; ElementType, Extent &gt;::rbegin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>rbegin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Span.h" line="558" column="41" bodyfile="iDynTree/Span.h" bodystart="558" bodyend="558"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1Span_1a373be1ad1db1e1f4c8ebd87d838c0dc6" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>IDYNTREE_CONSTEXPR reverse_iterator</type>
        <definition>IDYNTREE_CONSTEXPR reverse_iterator iDynTree::Span&lt; ElementType, Extent &gt;::rend</definition>
        <argsstring>() const noexcept</argsstring>
        <name>rend</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Span.h" line="559" column="41" bodyfile="iDynTree/Span.h" bodystart="559" bodyend="559"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1Span_1ab79906017e317d4147909338f2705649" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>IDYNTREE_CONSTEXPR const_reverse_iterator</type>
        <definition>IDYNTREE_CONSTEXPR const_reverse_iterator iDynTree::Span&lt; ElementType, Extent &gt;::crbegin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>crbegin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Span.h" line="561" column="47" bodyfile="iDynTree/Span.h" bodystart="561" bodyend="561"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1Span_1a3da51a5c1535128edd711b64325511fe" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>IDYNTREE_CONSTEXPR const_reverse_iterator</type>
        <definition>IDYNTREE_CONSTEXPR const_reverse_iterator iDynTree::Span&lt; ElementType, Extent &gt;::crend</definition>
        <argsstring>() const noexcept</argsstring>
        <name>crend</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Span.h" line="562" column="47" bodyfile="iDynTree/Span.h" bodystart="562" bodyend="562"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classiDynTree_1_1Span_1af317e5b8d1f5d7edfb3143894284348c" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>IDYNTREE_CONSTEXPR</type>
        <definition>IDYNTREE_CONSTEXPR iDynTree::Span&lt; ElementType, Extent &gt;::Span</definition>
        <argsstring>(KnownNotNull ptr, index_type count)</argsstring>
        <name>Span</name>
        <param>
          <type>KnownNotNull</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>index_type</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Span.h" line="605" column="24" bodyfile="iDynTree/Span.h" bodystart="605" bodyend="605"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1Span_1a7b4bb4ff08839c11e04e940dc422faea" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::ptrdiff_t</type>
            <declname>CallerExtent</declname>
            <defname>CallerExtent</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classiDynTree_1_1Span" kindref="compound">Span</ref>&lt; element_type, dynamic_extent &gt;</type>
        <definition>Span&lt;element_type, dynamic_extent&gt; iDynTree::Span&lt; ElementType, Extent &gt;::make_subspan</definition>
        <argsstring>(index_type offset, index_type count, subspan_selector&lt; CallerExtent &gt;) const</argsstring>
        <name>make_subspan</name>
        <param>
          <type>index_type</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>index_type</type>
          <declname>count</declname>
        </param>
        <param>
          <type>subspan_selector&lt; CallerExtent &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Span.h" line="611" column="10" bodyfile="iDynTree/Span.h" bodystart="611" bodyend="617"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1Span_1a7460b190c3fafed0915598c53c4978ae" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classiDynTree_1_1Span" kindref="compound">Span</ref>&lt; element_type, dynamic_extent &gt;</type>
        <definition>Span&lt;element_type, dynamic_extent&gt; iDynTree::Span&lt; ElementType, Extent &gt;::make_subspan</definition>
        <argsstring>(index_type offset, index_type count, subspan_selector&lt; dynamic_extent &gt;) const</argsstring>
        <name>make_subspan</name>
        <param>
          <type>index_type</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>index_type</type>
          <declname>count</declname>
        </param>
        <param>
          <type>subspan_selector&lt; dynamic_extent &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/Span.h" line="619" column="10" bodyfile="iDynTree/Span.h" bodystart="619" bodyend="631"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="iDynTree/Span.h" line="381" column="1" bodyfile="iDynTree/Span.h" bodystart="382" bodyend="632"/>
    <listofallmembers>
      <member refid="classiDynTree_1_1Span_1ac7629c2d787e91ae8501db3c5699428b" prot="public" virt="non-virtual"><scope>iDynTree::Span</scope><name>at</name></member>
      <member refid="classiDynTree_1_1Span_1a3ffa753817b222a0f9c83232f4c5c141" prot="public" virt="non-virtual"><scope>iDynTree::Span</scope><name>begin</name></member>
      <member refid="classiDynTree_1_1Span_1a56af802b85a3ad0aea91e63f117c05b7" prot="public" virt="non-virtual"><scope>iDynTree::Span</scope><name>cbegin</name></member>
      <member refid="classiDynTree_1_1Span_1a81c64d2257e3e0f665e06168ea941b45" prot="public" virt="non-virtual"><scope>iDynTree::Span</scope><name>cend</name></member>
      <member refid="classiDynTree_1_1Span_1aa7f215f49b5509cc0be76c103716698e" prot="public" virt="non-virtual"><scope>iDynTree::Span</scope><name>const_iterator</name></member>
      <member refid="classiDynTree_1_1Span_1afb25a7eef81ba47110192e3d6f906f68" prot="public" virt="non-virtual"><scope>iDynTree::Span</scope><name>const_reference</name></member>
      <member refid="classiDynTree_1_1Span_1a6c64cd168935d8f52052a6d37c6088a8" prot="public" virt="non-virtual"><scope>iDynTree::Span</scope><name>const_reverse_iterator</name></member>
      <member refid="classiDynTree_1_1Span_1ab79906017e317d4147909338f2705649" prot="public" virt="non-virtual"><scope>iDynTree::Span</scope><name>crbegin</name></member>
      <member refid="classiDynTree_1_1Span_1a3da51a5c1535128edd711b64325511fe" prot="public" virt="non-virtual"><scope>iDynTree::Span</scope><name>crend</name></member>
      <member refid="classiDynTree_1_1Span_1a348108e3280c4ef8c8e3ec35d4f6d7bf" prot="public" virt="non-virtual"><scope>iDynTree::Span</scope><name>data</name></member>
      <member refid="classiDynTree_1_1Span_1a70db7c45968e3bd56ca981811e237f40" prot="public" virt="non-virtual"><scope>iDynTree::Span</scope><name>element_type</name></member>
      <member refid="classiDynTree_1_1Span_1a1666613569f4e2f24db16a112a41c8e9" prot="public" virt="non-virtual"><scope>iDynTree::Span</scope><name>empty</name></member>
      <member refid="classiDynTree_1_1Span_1afb67f31bc6c4da128044733f940b7e55" prot="public" virt="non-virtual"><scope>iDynTree::Span</scope><name>end</name></member>
      <member refid="classiDynTree_1_1Span_1a769d61d5d758537d47cabfd3a3074858" prot="public" virt="non-virtual"><scope>iDynTree::Span</scope><name>extent</name></member>
      <member refid="classiDynTree_1_1Span_1a8adb813162ff11a568a0fdc425e492d4" prot="public" virt="non-virtual"><scope>iDynTree::Span</scope><name>first</name></member>
      <member refid="classiDynTree_1_1Span_1a21d66395cac09a76a56d9d230d5bfc26" prot="public" virt="non-virtual"><scope>iDynTree::Span</scope><name>first</name></member>
      <member refid="classiDynTree_1_1Span_1abb1c0032e5b8b0559bd79ecb22592f17" prot="public" virt="non-virtual"><scope>iDynTree::Span</scope><name>getVal</name></member>
      <member refid="classiDynTree_1_1Span_1a5f39b58d1f1f24fa826e8afed2f0a47d" prot="public" virt="non-virtual"><scope>iDynTree::Span</scope><name>index_type</name></member>
      <member refid="classiDynTree_1_1Span_1a756d7b9397c34924e72785d050024b2d" prot="public" virt="non-virtual"><scope>iDynTree::Span</scope><name>iterator</name></member>
      <member refid="classiDynTree_1_1Span_1a18120c4d63ac40bb3490edfb6ceb226e" prot="public" virt="non-virtual"><scope>iDynTree::Span</scope><name>last</name></member>
      <member refid="classiDynTree_1_1Span_1a640d4ee52e067a94dc1de648f79c5edc" prot="public" virt="non-virtual"><scope>iDynTree::Span</scope><name>last</name></member>
      <member refid="classiDynTree_1_1Span_1a7b4bb4ff08839c11e04e940dc422faea" prot="private" virt="non-virtual"><scope>iDynTree::Span</scope><name>make_subspan</name></member>
      <member refid="classiDynTree_1_1Span_1a7460b190c3fafed0915598c53c4978ae" prot="private" virt="non-virtual"><scope>iDynTree::Span</scope><name>make_subspan</name></member>
      <member refid="classiDynTree_1_1Span_1ab50f91a19ed1d88f7bb10367fa59412e" prot="public" virt="non-virtual"><scope>iDynTree::Span</scope><name>operator()</name></member>
      <member refid="classiDynTree_1_1Span_1a210a813bcd52fcfbf12997430237b533" prot="public" virt="non-virtual"><scope>iDynTree::Span</scope><name>operator=</name></member>
      <member refid="classiDynTree_1_1Span_1af79f016b2ac1e691005cc20ebdd179ba" prot="public" virt="non-virtual"><scope>iDynTree::Span</scope><name>operator[]</name></member>
      <member refid="classiDynTree_1_1Span_1a36b24ad88f7035362135d713f5210caf" prot="public" virt="non-virtual"><scope>iDynTree::Span</scope><name>pointer</name></member>
      <member refid="classiDynTree_1_1Span_1a700dd4216eb5a5fccc6aaa7751c46abd" prot="public" virt="non-virtual"><scope>iDynTree::Span</scope><name>rbegin</name></member>
      <member refid="classiDynTree_1_1Span_1ae2642271b87b800d7233fa17d521e1f5" prot="public" virt="non-virtual"><scope>iDynTree::Span</scope><name>reference</name></member>
      <member refid="classiDynTree_1_1Span_1a373be1ad1db1e1f4c8ebd87d838c0dc6" prot="public" virt="non-virtual"><scope>iDynTree::Span</scope><name>rend</name></member>
      <member refid="classiDynTree_1_1Span_1ad03f65546eccd46d2866a12d9eea6aa4" prot="public" virt="non-virtual"><scope>iDynTree::Span</scope><name>reverse_iterator</name></member>
      <member refid="classiDynTree_1_1Span_1a227ad4ae67fc259cc8a44df883b92557" prot="public" virt="non-virtual"><scope>iDynTree::Span</scope><name>setVal</name></member>
      <member refid="classiDynTree_1_1Span_1af304ba80cabe3c1a7d00f1cbb81b803f" prot="public" virt="non-virtual"><scope>iDynTree::Span</scope><name>size</name></member>
      <member refid="classiDynTree_1_1Span_1aba35de3ae6d57c9fb20a8f801060b90b" prot="public" virt="non-virtual"><scope>iDynTree::Span</scope><name>size_bytes</name></member>
      <member refid="classiDynTree_1_1Span_1a679606e2b5ef53d99bb437b9b42f51d3" prot="public" virt="non-virtual"><scope>iDynTree::Span</scope><name>size_type</name></member>
      <member refid="classiDynTree_1_1Span_1abc012d28574a8641a5ab3f7bafa7b6d5" prot="public" virt="non-virtual"><scope>iDynTree::Span</scope><name>Span</name></member>
      <member refid="classiDynTree_1_1Span_1ad91a5ef1ecfacfd0f1bc8c549ec6eb2a" prot="public" virt="non-virtual"><scope>iDynTree::Span</scope><name>Span</name></member>
      <member refid="classiDynTree_1_1Span_1a9c962214e112e643a0f4898e2455ed85" prot="public" virt="non-virtual"><scope>iDynTree::Span</scope><name>Span</name></member>
      <member refid="classiDynTree_1_1Span_1a1fbbfad7a9b0967334d878cd3c68a7f6" prot="public" virt="non-virtual"><scope>iDynTree::Span</scope><name>Span</name></member>
      <member refid="classiDynTree_1_1Span_1a8e5b0b1eb6ae07cc346c1358e82c162d" prot="public" virt="non-virtual"><scope>iDynTree::Span</scope><name>Span</name></member>
      <member refid="classiDynTree_1_1Span_1a24a3f7b3832c3a78bf42529776960db6" prot="public" virt="non-virtual"><scope>iDynTree::Span</scope><name>Span</name></member>
      <member refid="classiDynTree_1_1Span_1aae7fac87b82c44524b67bca5e6a98bfd" prot="public" virt="non-virtual"><scope>iDynTree::Span</scope><name>Span</name></member>
      <member refid="classiDynTree_1_1Span_1afedf7aaf714bef1be9c70590340655c8" prot="public" virt="non-virtual"><scope>iDynTree::Span</scope><name>Span</name></member>
      <member refid="classiDynTree_1_1Span_1a2f5eb3aa82cd1bd72f8d90b5e6653a50" prot="public" virt="non-virtual"><scope>iDynTree::Span</scope><name>Span</name></member>
      <member refid="classiDynTree_1_1Span_1a537095cae4195e7f8653c99f4b90d41e" prot="public" virt="non-virtual"><scope>iDynTree::Span</scope><name>Span</name></member>
      <member refid="classiDynTree_1_1Span_1af317e5b8d1f5d7edfb3143894284348c" prot="private" virt="non-virtual"><scope>iDynTree::Span</scope><name>Span</name></member>
      <member refid="classiDynTree_1_1Span_1af5e0465e4669298175be266e861b5573" prot="private" virt="non-virtual"><scope>iDynTree::Span</scope><name>storage_</name></member>
      <member refid="classiDynTree_1_1Span_1a7586e4325dd1765618d301ce4551682a" prot="public" virt="non-virtual"><scope>iDynTree::Span</scope><name>subspan</name></member>
      <member refid="classiDynTree_1_1Span_1a982781643e6a4a5a5ea31c6013bebde5" prot="public" virt="non-virtual"><scope>iDynTree::Span</scope><name>subspan</name></member>
      <member refid="classiDynTree_1_1Span_1a731b2a8e595a3b6e03df9c843856d7c1" prot="public" virt="non-virtual"><scope>iDynTree::Span</scope><name>value_type</name></member>
      <member refid="classiDynTree_1_1Span_1a96e1b612c73489bc0543e1b281348d03" prot="public" virt="non-virtual"><scope>iDynTree::Span</scope><name>~Span</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
