<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="YARPEigenConversions_8h" kind="file" language="C++">
    <compoundname>YARPEigenConversions.h</compoundname>
    <includes local="no">yarp/sig/Matrix.h</includes>
    <includes local="no">yarp/sig/Vector.h</includes>
    <includes local="no">Eigen/Dense</includes>
    <includedby refid="yarp_2YARPEigenConversions_8h" local="no">iDynTree/yarp/YARPEigenConversions.h</includedby>
    <incdepgraph>
      <node id="1">
        <label>iDynTree/YARPEigenConversions.h</label>
        <link refid="YARPEigenConversions_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>yarp/sig/Matrix.h</label>
      </node>
      <node id="4">
        <label>Eigen/Dense</label>
      </node>
      <node id="3">
        <label>yarp/sig/Vector.h</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespaceiDynTree">iDynTree</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="YARPEigenConversions_8h_1ae7c28c545c2775b437536fd84dabc97d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Eigen::Map&lt; Eigen::VectorXd &gt;</type>
        <definition>Eigen::Map&lt;Eigen::VectorXd&gt; iDynTree::toEigen</definition>
        <argsstring>(yarp::sig::Vector &amp;yarpVector)</argsstring>
        <name>toEigen</name>
        <param>
          <type>yarp::sig::Vector &amp;</type>
          <declname>yarpVector</declname>
        </param>
        <briefdescription>
<para>Convert a yarp::sig::Vector to a Eigen::Map&lt;Eigen::VectorXd&gt; object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>yarpVector</parametername>
</parameternamelist>
<parameterdescription>
<para>yarp::sig::Vector input </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a Eigen::Map vector that points to the data contained in the yarp vector </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/YARPEigenConversions.h" line="20" column="19" bodyfile="iDynTree/YARPEigenConversions.h" bodystart="20" bodyend="23"/>
      </memberdef>
      <memberdef kind="function" id="YARPEigenConversions_8h_1a19f060a1b963d4cdd58a142372675f6b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Eigen::Map&lt; Eigen::Matrix&lt; double, Eigen::Dynamic, Eigen::Dynamic, Eigen::RowMajor &gt; &gt;</type>
        <definition>Eigen::Map&lt; Eigen::Matrix&lt;double,Eigen::Dynamic,Eigen::Dynamic,Eigen::RowMajor&gt; &gt; iDynTree::toEigen</definition>
        <argsstring>(yarp::sig::Matrix &amp;yarpMatrix)</argsstring>
        <name>toEigen</name>
        <param>
          <type>yarp::sig::Matrix &amp;</type>
          <declname>yarpMatrix</declname>
        </param>
        <briefdescription>
<para>Convert a yarp::sig::Matrix to a Eigen::Map&lt; Eigen::Matrix&lt;double,Eigen::Dynamic,Eigen::Dynamic,Eigen::RowMajor&gt; &gt; object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>yarpVector</parametername>
</parameternamelist>
<parameterdescription>
<para>yarp::sig::Matrix input </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a Eigen::Map vector that points to the data contained in the yarp matrix </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/YARPEigenConversions.h" line="30" column="19" bodyfile="iDynTree/YARPEigenConversions.h" bodystart="30" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="YARPEigenConversions_8h_1a0fc1ec0d7de0f823d4a8c32524aaecd7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Eigen::Map&lt; const Eigen::VectorXd &gt;</type>
        <definition>Eigen::Map&lt;const Eigen::VectorXd&gt; iDynTree::toEigen</definition>
        <argsstring>(const yarp::sig::Vector &amp;yarpVector)</argsstring>
        <name>toEigen</name>
        <param>
          <type>const yarp::sig::Vector &amp;</type>
          <declname>yarpVector</declname>
        </param>
        <briefdescription>
<para>Convert a const yarp::sig::Vector to a Eigen::Map&lt;const Eigen::VectorXd&gt; object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>yarpVector</parametername>
</parameternamelist>
<parameterdescription>
<para>yarp::sig::Vector input </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a Eigen::Map vector that points to the data contained in the yarp vector </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/YARPEigenConversions.h" line="40" column="19" bodyfile="iDynTree/YARPEigenConversions.h" bodystart="40" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="YARPEigenConversions_8h_1a4f400cf54f7b7757adbaa768205b9df9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Eigen::Map&lt; const Eigen::Matrix&lt; double, Eigen::Dynamic, Eigen::Dynamic, Eigen::RowMajor &gt; &gt;</type>
        <definition>Eigen::Map&lt;const Eigen::Matrix&lt;double,Eigen::Dynamic,Eigen::Dynamic,Eigen::RowMajor&gt; &gt; iDynTree::toEigen</definition>
        <argsstring>(const yarp::sig::Matrix &amp;yarpMatrix)</argsstring>
        <name>toEigen</name>
        <param>
          <type>const yarp::sig::Matrix &amp;</type>
          <declname>yarpMatrix</declname>
        </param>
        <briefdescription>
<para>Convert a const yarp::sig::Matrix to a Eigen::Map&lt; const Eigen::Matrix&lt;double,Eigen::Dynamic,Eigen::Dynamic,Eigen::RowMajor&gt; &gt; object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>yarpVector</parametername>
</parameternamelist>
<parameterdescription>
<para>yarp::sig::Matrix input </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a Eigen::Map vector that points to the data contained in the yarp matrix </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/YARPEigenConversions.h" line="50" column="19" bodyfile="iDynTree/YARPEigenConversions.h" bodystart="50" bodyend="53"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="iDynTree/YARPEigenConversions.h"/>
  </compounddef>
</doxygen>
