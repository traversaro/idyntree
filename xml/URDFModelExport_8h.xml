<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="URDFModelExport_8h" kind="file" language="C++">
    <compoundname>URDFModelExport.h</compoundname>
    <includes local="no">string</includes>
    <includes refid="ModelExporter_8h" local="no">iDynTree/ModelExporter.h</includes>
    <incdepgraph>
      <node id="2">
        <label>string</label>
      </node>
      <node id="1">
        <label>private/URDFModelExport.h</label>
        <link refid="URDFModelExport_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespaceiDynTree">iDynTree</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__iDynTreeModelIO_1gaeaa7b0320760138dab8d2e7ba5525b2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool iDynTree::URDFFromModel</definition>
        <argsstring>(const iDynTree::Model &amp;model, const std::string &amp;urdf_filename, const ModelExporterOptions options=ModelExporterOptions())</argsstring>
        <name>URDFFromModel</name>
        <param>
          <type>const <ref refid="classiDynTree_1_1Model" kindref="compound">iDynTree::Model</ref> &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>urdf_filename</declname>
        </param>
        <param>
          <type>const ModelExporterOptions</type>
          <declname>options</declname>
          <defval>ModelExporterOptions()</defval>
        </param>
        <briefdescription>
<para>Export a <ref refid="classiDynTree_1_1Model" kindref="compound">iDynTree::Model</ref> object to a URDF file. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="structiDynTree_1_1ModelExporterOptions" kindref="compound">iDynTree::ModelExporterOptions</ref> for more details on supported and default options.</para>
</simplesect>
<simplesect kind="warning"><para>This function does not support exporting sensor or solid shapes at the moment.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">urdf_filename</parametername>
</parameternamelist>
<parameterdescription>
<para>Path to the URDF file that will be created. It can be either a relative filename with respect to the current working directory, or an absolute filename. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">options</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="structiDynTree_1_1ModelExporterOptions" kindref="compound">iDynTree::ModelExporterOptions</ref> struct of options passed to the parser. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if all went ok, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="private/URDFModelExport.h" line="32" column="6" declfile="private/URDFModelExport.h" declline="32" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__iDynTreeModelIO_1gab9223d51ca118bea013bbbde14d6e054" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool iDynTree::URDFStringFromModel</definition>
        <argsstring>(const iDynTree::Model &amp;output, std::string &amp;urdf_string, const ModelExporterOptions options=ModelExporterOptions())</argsstring>
        <name>URDFStringFromModel</name>
        <param>
          <type>const <ref refid="classiDynTree_1_1Model" kindref="compound">iDynTree::Model</ref> &amp;</type>
          <declname>output</declname>
        </param>
        <param>
          <type>std::string &amp;</type>
          <declname>urdf_string</declname>
        </param>
        <param>
          <type>const ModelExporterOptions</type>
          <declname>options</declname>
          <defval>ModelExporterOptions()</defval>
        </param>
        <briefdescription>
<para>Export a <ref refid="classiDynTree_1_1Model" kindref="compound">iDynTree::Model</ref> object to a URDF string. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="structiDynTree_1_1ModelExporterOptions" kindref="compound">iDynTree::ModelExporterOptions</ref> for more details on supported and default options.</para>
</simplesect>
<simplesect kind="warning"><para>This function does not support exporting sensor or solid shapes at the moment.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">options</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="structiDynTree_1_1ModelExporterOptions" kindref="compound">iDynTree::ModelExporterOptions</ref> struct of options passed to the parser. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if all went ok, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="private/URDFModelExport.h" line="48" column="6" declfile="private/URDFModelExport.h" declline="48" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="private/URDFModelExport.h"/>
  </compounddef>
</doxygen>
