<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classiDynTree_1_1SubModelDecomposition" kind="class" language="C++" prot="public">
    <compoundname>iDynTree::SubModelDecomposition</compoundname>
    <includes local="no">iDynTree/SubModel.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classiDynTree_1_1SubModelDecomposition_1a6d5fdc37d78e7a5948d71d997182be70" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="classiDynTree_1_1Traversal" kindref="compound">Traversal</ref> * &gt;</type>
        <definition>std::vector&lt;Traversal *&gt; iDynTree::SubModelDecomposition::subModelTraversals</definition>
        <argsstring></argsstring>
        <name>subModelTraversals</name>
        <briefdescription>
<para>Vector of size nrOfSubModels traversal, one for each submodel. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/SubModel.h" line="37" column="21" bodyfile="iDynTree/SubModel.h" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classiDynTree_1_1SubModelDecomposition_1a4700199605f495eb12af9d70db8402ee" prot="private" static="no" mutable="no">
        <type>std::vector&lt; size_t &gt;</type>
        <definition>std::vector&lt;size_t&gt; iDynTree::SubModelDecomposition::link2subModelIndex</definition>
        <argsstring></argsstring>
        <name>link2subModelIndex</name>
        <briefdescription>
<para>Vector mapping link index to sub model index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/SubModel.h" line="42" column="21" bodyfile="iDynTree/SubModel.h" bodystart="42" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classiDynTree_1_1SubModelDecomposition_1a275735a1fa7bdb5d0d2a91ab58f272c4" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iDynTree::SubModelDecomposition::SubModelDecomposition</definition>
        <argsstring>(const SubModelDecomposition &amp;other)</argsstring>
        <name>SubModelDecomposition</name>
        <param>
          <type>const <ref refid="classiDynTree_1_1SubModelDecomposition" kindref="compound">SubModelDecomposition</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Copy constructor is forbidden. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/SubModel.h" line="47" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1SubModelDecomposition_1a5fe54e692ed2865a3d57fc8a761a301a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classiDynTree_1_1SubModelDecomposition" kindref="compound">SubModelDecomposition</ref> &amp;</type>
        <definition>SubModelDecomposition&amp; iDynTree::SubModelDecomposition::operator=</definition>
        <argsstring>(const SubModelDecomposition &amp;other)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classiDynTree_1_1SubModelDecomposition" kindref="compound">SubModelDecomposition</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Copy operator is forbidden. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/SubModel.h" line="52" column="31"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classiDynTree_1_1SubModelDecomposition_1ae82500f7dbab9194b1f65613373131f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iDynTree::SubModelDecomposition::SubModelDecomposition</definition>
        <argsstring>()</argsstring>
        <name>SubModelDecomposition</name>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/SubModel.h" line="58" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1SubModelDecomposition_1a145cde29018b5b6c27a462925fd484f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iDynTree::SubModelDecomposition::~SubModelDecomposition</definition>
        <argsstring>()</argsstring>
        <name>~SubModelDecomposition</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/SubModel.h" line="63" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1SubModelDecomposition_1a03d8e08985fa2b90c2f9a8cd5c4d97ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool iDynTree::SubModelDecomposition::splitModelAlongJoints</definition>
        <argsstring>(const Model &amp;model, const Traversal &amp;traversal, const std::vector&lt; std::string &gt; &amp;splitJoints)</argsstring>
        <name>splitModelAlongJoints</name>
        <param>
          <type>const <ref refid="classiDynTree_1_1Model" kindref="compound">Model</ref> &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type>const <ref refid="classiDynTree_1_1Traversal" kindref="compound">Traversal</ref> &amp;</type>
          <declname>traversal</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>splitJoints</declname>
        </param>
        <briefdescription>
<para>Create a submodel decomposition of a given model with a given full tree traversal, by separating the model across the given joints. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">model</parametername>
</parameternamelist>
<parameterdescription>
<para>the model to split </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">traversal</parametername>
</parameternamelist>
<parameterdescription>
<para>the full model traversal to split </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">splitJoints</parametername>
</parameternamelist>
<parameterdescription>
<para>the model will be split along the joints whose names are in this vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if all went fine, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/SubModel.h" line="76" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1SubModelDecomposition_1a53534266e618b82ab612058081e813e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void iDynTree::SubModelDecomposition::setNrOfSubModels</definition>
        <argsstring>(const size_t nrOfSubModels)</argsstring>
        <name>setNrOfSubModels</name>
        <param>
          <type>const size_t</type>
          <declname>nrOfSubModels</declname>
        </param>
        <briefdescription>
<para>Set the number of the submodels in the decomposition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/SubModel.h" line="83" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1SubModelDecomposition_1a2e7f4ca8c79fb8401a5f3cd70db7147b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t iDynTree::SubModelDecomposition::getNrOfSubModels</definition>
        <argsstring>() const</argsstring>
        <name>getNrOfSubModels</name>
        <briefdescription>
<para>Get the number of submodels in the decomposition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/SubModel.h" line="88" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1SubModelDecomposition_1a4ad7b85b26b61b08adb0256570556265" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t iDynTree::SubModelDecomposition::getNrOfLinks</definition>
        <argsstring>() const</argsstring>
        <name>getNrOfLinks</name>
        <briefdescription>
<para>Get the total numer of links in the submodel decomposition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/SubModel.h" line="93" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1SubModelDecomposition_1a9a138de132efc3956281047491d79d1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classiDynTree_1_1Traversal" kindref="compound">Traversal</ref> &amp;</type>
        <definition>Traversal&amp; iDynTree::SubModelDecomposition::getTraversal</definition>
        <argsstring>(const size_t subModelIndex)</argsstring>
        <name>getTraversal</name>
        <param>
          <type>const size_t</type>
          <declname>subModelIndex</declname>
        </param>
        <briefdescription>
<para>Get the traversal of a given submodel. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/SubModel.h" line="98" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1SubModelDecomposition_1aa3d7187ddb025bea922c77e2744fcb49" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classiDynTree_1_1Traversal" kindref="compound">Traversal</ref> &amp;</type>
        <definition>const Traversal&amp; iDynTree::SubModelDecomposition::getTraversal</definition>
        <argsstring>(const size_t subModelIndex) const</argsstring>
        <name>getTraversal</name>
        <param>
          <type>const size_t</type>
          <declname>subModelIndex</declname>
        </param>
        <briefdescription>
<para>Get the traversal of a given submodel (const version) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/SubModel.h" line="103" column="26"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1SubModelDecomposition_1a716875f41b4d883d5ef8a2baa8930b4e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t iDynTree::SubModelDecomposition::getSubModelOfLink</definition>
        <argsstring>(const LinkIndex &amp;link) const</argsstring>
        <name>getSubModelOfLink</name>
        <param>
          <type>const LinkIndex &amp;</type>
          <declname>link</declname>
        </param>
        <briefdescription>
<para>Get the subModel to which a given links belongs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/SubModel.h" line="108" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1SubModelDecomposition_1ac68e94640125f0909f1ef2023143dad4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t iDynTree::SubModelDecomposition::getSubModelOfFrame</definition>
        <argsstring>(const Model &amp;model, const FrameIndex &amp;frame) const</argsstring>
        <name>getSubModelOfFrame</name>
        <param>
          <type>const <ref refid="classiDynTree_1_1Model" kindref="compound">Model</ref> &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type>const FrameIndex &amp;</type>
          <declname>frame</declname>
        </param>
        <briefdescription>
<para>Get the subModel to which a given frame belongs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/SubModel.h" line="113" column="16"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Class representing the decomposition in one model in several submodels. </para>
    </briefdescription>
    <detaileddescription>
<para>This class is used in algorithms, such as estimation of external wrenches, where a complete model is decomposed in several submodels.</para>
<para>For each submodel a <ref refid="classiDynTree_1_1Traversal" kindref="compound">iDynTree::Traversal</ref> is provided, so that algorithms that are explicitly designed to run on both FullModel <ref refid="classiDynTree_1_1Traversal" kindref="compound">Traversal</ref> and SubModel traversal can be executed on the SubModel. </para>
    </detaileddescription>
    <location file="iDynTree/SubModel.h" line="31" column="5" bodyfile="iDynTree/SubModel.h" bodystart="32" bodyend="115"/>
    <listofallmembers>
      <member refid="classiDynTree_1_1SubModelDecomposition_1a4ad7b85b26b61b08adb0256570556265" prot="public" virt="non-virtual"><scope>iDynTree::SubModelDecomposition</scope><name>getNrOfLinks</name></member>
      <member refid="classiDynTree_1_1SubModelDecomposition_1a2e7f4ca8c79fb8401a5f3cd70db7147b" prot="public" virt="non-virtual"><scope>iDynTree::SubModelDecomposition</scope><name>getNrOfSubModels</name></member>
      <member refid="classiDynTree_1_1SubModelDecomposition_1ac68e94640125f0909f1ef2023143dad4" prot="public" virt="non-virtual"><scope>iDynTree::SubModelDecomposition</scope><name>getSubModelOfFrame</name></member>
      <member refid="classiDynTree_1_1SubModelDecomposition_1a716875f41b4d883d5ef8a2baa8930b4e" prot="public" virt="non-virtual"><scope>iDynTree::SubModelDecomposition</scope><name>getSubModelOfLink</name></member>
      <member refid="classiDynTree_1_1SubModelDecomposition_1a9a138de132efc3956281047491d79d1d" prot="public" virt="non-virtual"><scope>iDynTree::SubModelDecomposition</scope><name>getTraversal</name></member>
      <member refid="classiDynTree_1_1SubModelDecomposition_1aa3d7187ddb025bea922c77e2744fcb49" prot="public" virt="non-virtual"><scope>iDynTree::SubModelDecomposition</scope><name>getTraversal</name></member>
      <member refid="classiDynTree_1_1SubModelDecomposition_1a4700199605f495eb12af9d70db8402ee" prot="private" virt="non-virtual"><scope>iDynTree::SubModelDecomposition</scope><name>link2subModelIndex</name></member>
      <member refid="classiDynTree_1_1SubModelDecomposition_1a5fe54e692ed2865a3d57fc8a761a301a" prot="private" virt="non-virtual"><scope>iDynTree::SubModelDecomposition</scope><name>operator=</name></member>
      <member refid="classiDynTree_1_1SubModelDecomposition_1a53534266e618b82ab612058081e813e4" prot="public" virt="non-virtual"><scope>iDynTree::SubModelDecomposition</scope><name>setNrOfSubModels</name></member>
      <member refid="classiDynTree_1_1SubModelDecomposition_1a03d8e08985fa2b90c2f9a8cd5c4d97ce" prot="public" virt="non-virtual"><scope>iDynTree::SubModelDecomposition</scope><name>splitModelAlongJoints</name></member>
      <member refid="classiDynTree_1_1SubModelDecomposition_1a275735a1fa7bdb5d0d2a91ab58f272c4" prot="private" virt="non-virtual"><scope>iDynTree::SubModelDecomposition</scope><name>SubModelDecomposition</name></member>
      <member refid="classiDynTree_1_1SubModelDecomposition_1ae82500f7dbab9194b1f65613373131f6" prot="public" virt="non-virtual"><scope>iDynTree::SubModelDecomposition</scope><name>SubModelDecomposition</name></member>
      <member refid="classiDynTree_1_1SubModelDecomposition_1a6d5fdc37d78e7a5948d71d997182be70" prot="private" virt="non-virtual"><scope>iDynTree::SubModelDecomposition</scope><name>subModelTraversals</name></member>
      <member refid="classiDynTree_1_1SubModelDecomposition_1a145cde29018b5b6c27a462925fd484f9" prot="public" virt="non-virtual"><scope>iDynTree::SubModelDecomposition</scope><name>~SubModelDecomposition</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
